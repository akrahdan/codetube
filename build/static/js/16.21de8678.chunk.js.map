{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","portal/scenes/Instructor/Courses/userPrompt.ts","portal/scenes/Instructor/Courses/Target/Goal.js","portal/scenes/Instructor/Courses/Target/Requirements.js","portal/scenes/Instructor/Courses/Target/Experience.js","portal/scenes/Instructor/Courses/Target/ExperienceCreate.js","portal/scenes/Instructor/Courses/Target/GoalCreate.js","portal/scenes/Instructor/Courses/Target/ReqCreate.js","portal/scenes/Instructor/Courses/Target/index.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","usePrompt","when","message","history","useHistory","self","useRef","onWindowOrTabClose","event","window","returnValue","useEffect","current","block","addEventListener","removeEventListener","Goal","goal","handleChange","handleRemove","className","classNames","name","placeholder","value","id","onChange","target","updatedGoal","type","onClick","Requirements","req","Experience","experience","updatedExperience","ExperienceCreate","GoalCreate","ReqCreate","Target","useAppSelector","selectLocationType","selectedSave","selectSave","locationPayload","selectLocationPayload","selectedRequirements","selectRequirements","selectedGoals","selectGoals","selectedExperiences","selectExperience","useCreateGoalMutation","createGoal","useCreateExperienceMutation","createExperience","useCreateRequirementMutation","createRequirement","useEditGoalMutation","editGoal","useEditRequirementMutation","editRequirement","useEditExperienceMutation","editExperience","useDeleteGoalMutation","deleteGoal","useDeleteExperienceMutation","deleteExperience","useDeleteRequirementMutation","deleteRequirements","useFetchRequirementsQuery","data","useFetchGoalsQuery","useFetchExperienceQuery","useState","goalsUpdate","setGoalsUpdate","requirementsUpdate","setRequirementsUpdate","experienceUpdate","setExperienceUpdate","alert","useAlert","goals","setGoals","requirements","setRequirements","setExperience","removeGoal","removeReq","removeExp","goalResults","forEach","course","then","results","filter","item","show","experienceResults","exp","reqResults","console","log","index","data-purpose","htmlFor","map","obj","gUpdate","findIndex","updatedGoals","result","newGoals","goalItem","length","reqUpdates","updatedReqs","reqs","reqItem","newReqs","expUpdate","expdate","expItem","newExps"],"mappings":"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","file":"static/js/16.21de8678.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport const usePrompt = (when: boolean, message: string = 'Are you sure you want to quit without saving your changes?') => {\n  const history = useHistory();\n\n  const self = useRef(null);\n\n  const onWindowOrTabClose = event => {\n    if (!when) {\n      return;\n    }\n\n    if (typeof event == 'undefined') {\n      event = window.event;\n    }\n\n    if (event) {\n      event.returnValue = message;\n    }\n\n    return message;\n  };\n\n  useEffect(() => {\n    if (when) {\n      self.current = history.block(message as any);\n    } else {\n      self.current = null;\n    }\n\n    window.addEventListener('beforeunload', onWindowOrTabClose);\n\n    return () => {\n      if (self.current) {\n        self.current();\n        self.current = null;\n      }\n\n      window.removeEventListener('beforeunload', onWindowOrTabClose);\n    }\n  }, [message, when]);\n};","import classNames from \"classnames\";\nexport const Goal = ({ goal, handleChange, handleRemove }) => {\n\n  return (\n    <div className={classNames(\"goals-form--sortable-answer--PLpb9 \", {\n        'goals-form--show-buttons-on-hover--1MIu0': goal.name,\n        'goals-form--hide-buttons--PHgbN form-group': !goal.name\n    })}>\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Low-light photography\"\n          value={goal.name}\n          id={goal.id}\n          onChange= {event => {\n              const name = event.target.value;\n              const updatedGoal = { id: goal.id, name}\n              handleChange(updatedGoal)\n              \n          }}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button id={goal.id} type=\"button\" className=\"btn btn-default\"\n          onClick={() => {\n              handleRemove(goal)\n          }\n          }>\n            <span id={goal.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nexport const Requirements = ({ req, handleChange, handleRemove }) => {\n  return (\n    <div\n      className={classNames(\"goals-form--sortable-answer--PLpb9 \", {\n        \"goals-form--show-buttons-on-hover--1MIu0\": req.name,\n        \"goals-form--hide-buttons--PHgbN form-group\": !req.name,\n      })}\n    >\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Be able to read sheet music\"\n          value={req.name}\n          id={req.id}\n          onChange={(event) => {\n            const name = event.target.value;\n            const updatedGoal = { id: req.id, name };\n            handleChange(updatedGoal);\n          }}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button\n            id={req.id}\n            type=\"button\"\n            className=\"btn btn-default\"\n            onClick={() => {\n              handleRemove(req);\n            }}\n          >\n            <span id={req.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nexport const Experience = ({experience, handleChange, handleRemove}) => {\n  return (\n    <div\n      className={classNames(\"goals-form--sortable-answer--PLpb9 form-group \", {\n        \"goals-form--show-buttons-on-hover--1MIu0\": experience.name,\n        \"goals-form--hide-buttons--PHgbN\": !experience.name,\n      })}\n    >\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Beginner Python developers curious about data science\"\n          value={experience.name}\n          onChange={(event) => {\n            const name = event.target.value;\n            const updatedExperience = { id: experience.id, name };\n            handleChange(updatedExperience);\n          }}\n          id={experience.id}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button\n            id={experience.id}\n            type=\"button\"\n            className=\"btn btn-default\"\n            onClick={() => {\n              handleRemove(experience);\n            }}\n          >\n            <span id={experience.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nexport const ExperienceCreate = ({experience, handleChange, handleRemove}) => {\n  return (\n    <div\n      className={classNames(\"goals-form--sortable-answer--PLpb9 form-group \", {\n        \"goals-form--show-buttons-on-hover--1MIu0\": experience.name,\n        \"goals-form--hide-buttons--PHgbN\": !experience.name,\n      })}\n    >\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Beginner Python developers curious about data science\"\n          value={experience.name}\n          onChange={(event) => {\n            const name = event.target.value;\n            const updatedExperience = { id: experience.id, name };\n            handleChange(updatedExperience);\n          }}\n          id={experience.id}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button\n            id={experience.id}\n            type=\"button\"\n            className=\"btn btn-default\"\n            onClick={() => {\n              handleRemove(experience);\n            }}\n          >\n            <span id={experience.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nexport const GoalCreate = ({ goal, handleChange, handleRemove }) => {\n\n  return (\n    <div className={classNames(\"goals-form--sortable-answer--PLpb9 \", {\n        'goals-form--show-buttons-on-hover--1MIu0': goal.name,\n        'goals-form--hide-buttons--PHgbN form-group': !goal.name\n    })}>\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Low-light photography\"\n          value={goal.name}\n          id={goal.id}\n          onChange= {event => {\n              const name = event.target.value;\n              const updatedGoal = { id: goal.id, name}\n              handleChange(updatedGoal)\n              \n          }}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button id={goal.id} type=\"button\" className=\"btn btn-default\"\n          onClick={() => {\n              handleRemove(goal)\n          }\n          }>\n            <span id={goal.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nexport const ReqCreate = ({ req, handleChange, handleRemove }) => {\n  return (\n    <div\n      className={classNames(\"goals-form--sortable-answer--PLpb9 \", {\n        \"goals-form--show-buttons-on-hover--1MIu0\": req.name,\n        \"goals-form--hide-buttons--PHgbN form-group\": !req.name,\n      })}\n    >\n      <span className=\"input-group\">\n        <input\n          placeholder=\"Example: Be able to read sheet music\"\n          value={req.name}\n          id={req.id}\n          onChange={(event) => {\n            const name = event.target.value;\n            const updatedGoal = { id: req.id, name };\n            handleChange(updatedGoal);\n          }}\n          className=\"form-control\"\n        />\n        <span className=\"input-group-btn\">\n          <button\n            id={req.id}\n            type=\"button\"\n            className=\"btn btn-default\"\n            onClick={() => {\n              handleRemove(req);\n            }}\n          >\n            <span id={req.id} className=\"cfi cfi-trash-o\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"js-drag-handle goals-form--sortable-answer__handle--2dOgs btn btn-default\"\n          >\n            <span className=\"cfi cfi-bars\" />\n          </button>\n        </span>\n      </span>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useAlert } from \"react-alert\";\nimport { Goal } from \"./Goal\";\nimport { Requirements } from \"./Requirements\";\nimport { Experience } from \"./Experience\";\nimport { ExperienceCreate } from \"./ExperienceCreate\";\nimport { GoalCreate } from \"./GoalCreate\";\nimport { ReqCreate } from \"./ReqCreate\";\n\nimport { selectSave } from \"state/course/courseSplice\";\nimport { usePrompt } from \"../userPrompt\";\nimport {\n  selectLocationPayload,\n  selectLocationType,\n} from \"state/location/selectors\";\nimport { useAppSelector } from \"store/hooks\";\nimport {\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchRequirementsQuery,\n  useFetchGoalsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n} from \"services/courses\";\n\nimport {\n  selectRequirements,\n  selectGoals,\n  selectExperience,\n} from \"state/target/targetSplice\";\n\nexport const Target = () => {\n  const locationPath = useAppSelector(selectLocationType);\n  const selectedSave = useAppSelector(selectSave);\n  const locationPayload = useAppSelector(selectLocationPayload);\n  const selectedRequirements = useAppSelector(selectRequirements);\n  const selectedGoals = useAppSelector(selectGoals);\n  const selectedExperiences = useAppSelector(selectExperience);\n  const [createGoal] = useCreateGoalMutation();\n  const [createExperience] = useCreateExperienceMutation();\n  const [createRequirement] = useCreateRequirementMutation();\n  const [editGoal] = useEditGoalMutation();\n  const [editRequirement] = useEditRequirementMutation();\n  const [editExperience] = useEditExperienceMutation();\n  const [deleteGoal] = useDeleteGoalMutation();\n  const [deleteExperience] = useDeleteExperienceMutation();\n  const [deleteRequirements] = useDeleteRequirementMutation();\n  const { data: requirementsQuery } = useFetchRequirementsQuery(\n    locationPayload.id\n  );\n  const { data: goalsQuery } = useFetchGoalsQuery(locationPayload.id);\n  const { data: experienceQuery } = useFetchExperienceQuery(locationPayload.id);\n\n  const [goalsUpdate, setGoalsUpdate] = useState(selectedGoals);\n  const [requirementsUpdate, setRequirementsUpdate] =\n    useState(selectedRequirements);\n\n  const [experienceUpdate, setExperienceUpdate] = useState(selectedExperiences);\n  const alert = useAlert();\n\n  const [goals, setGoals] = useState([{ id: \"goalList--0\", name: \"\" }]);\n  const [requirements, setRequirements] = useState([\n    { id: \"reqList--0\", name: \"\" },\n  ]);\n\n  const [experience, setExperience] = useState([\n    { id: \"expList--0\", name: \"\" },\n  ]);\n  const removeGoal = (goal) => {\n    deleteGoal(goal.id);\n  };\n\n  const removeReq = (req) => {\n    deleteRequirements(req.id);\n  };\n\n  const removeExp = (req) => {\n    deleteExperience(req.id);\n  };\n\n  useEffect(() => {\n    setExperienceUpdate(selectedExperiences);\n  }, [selectedExperiences]);\n\n  useEffect(() => {\n    setGoalsUpdate(selectedGoals);\n  }, [selectedGoals]);\n\n  useEffect(() => {\n    setRequirementsUpdate(selectedRequirements);\n  }, [selectedRequirements]);\n\n  useEffect(() => {\n    const goalResults = goals;\n    goalResults &&\n      goalResults.forEach((goal) => {\n        if (goal.name) {\n          createGoal({\n            name: goal.name,\n            course: locationPayload.id,\n          }).then(() => {\n            const results = goalResults.filter((item) => item.id != goal.id);\n            setGoals(results);\n            alert.show(\"Your data has been saved successfully\")\n          });\n        }\n      });\n\n    const experienceResults = experience;\n    experienceResults &&\n      experienceResults.forEach((exp) => {\n        if (exp.name) {\n          createExperience({\n            name: exp.name,\n            course: locationPayload.id,\n          }).then(() => {\n            const results = experienceResults.filter(\n              (item) => item.id != exp.id\n            );\n            setExperience(results);\n            alert.show(\"Your data has been saved successfully\")\n          });\n        }\n      });\n\n    const reqResults = requirements;\n    reqResults &&\n      reqResults.forEach((req) => {\n        if (req.name) {\n          createRequirement({\n            name: req.name,\n            course: locationPayload.id,\n          }).then(() => {\n            const results = reqResults.filter((item) => item.id != req.id);\n            setRequirements(results);\n            alert.show(\"Your data has been saved successfully\")\n          });\n        }\n      });\n    requirementsUpdate &&\n      requirementsUpdate.forEach((req) => {\n        if (req.name) {\n          console.log(\"Req: \", req);\n          editRequirement({\n            ...req,\n            course: locationPayload.id,\n          }).then(() => {\n           \n            alert.show(\"Your data has been saved successfully\");\n          });\n        }\n      });\n\n    experienceUpdate &&\n      experienceUpdate.forEach((req, index) => {\n        if (req.name) {\n          editExperience({\n            ...req,\n            course: locationPayload.id,\n          }).then(() => {\n           \n            alert.show(\"Your data has been saved successfully\");\n          });\n        }\n      });\n\n    goalsUpdate &&\n      goalsUpdate.forEach((item) => {\n        if (item.name) {\n          editGoal({\n            ...item,\n            course: locationPayload.id,\n          }).then(() => {\n            alert.show(\"Your data has been saved successfully\");\n          });\n        }\n      });\n  }, [selectedSave]);\n  return (\n    <div>\n      <div className=\"sub-header--wrapper--3Vunm\">\n        <div className=\"sub-header--main-content--22it3\">\n          <h2\n            data-purpose=\"page-title\"\n            className=\"font-heading-serif-xl sub-header--title--2VD8q\"\n          >\n            Target your students\n          </h2>\n        </div>\n      </div>\n      <div className=\"main-content--wrap_component--2TEkz\">\n        {\" \"}\n        <div className=\"form_container\">\n          <div className=\"goals-form--subtitle--3R5d-\">\n            The descriptions you write here will help students decide if your\n            course is the one for them.\n          </div>\n          <form>\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"learn-goal\" className=\"control-label\">\n                  What will students learn in your course?\n                </label>\n                <div>\n                  <div>\n                    {goalsUpdate &&\n                      goalsUpdate.map((goal) => (\n                        <Goal\n                          key={goal.id}\n                          goal={goal}\n                          handleRemove={removeGoal}\n                          handleChange={(obj) => {\n                            let gUpdate = [...goalsUpdate];\n                            let index = gUpdate.findIndex((item) => {\n                              return item.id == obj.id;\n                            });\n                            gUpdate[index] = obj;\n                            setGoalsUpdate(gUpdate);\n                          }}\n                        />\n                      ))}\n                    {goals.map((goal) => (\n                      <GoalCreate\n                        key={goal.id}\n                        goal={goal}\n                        handleRemove={(value) => {\n                          const updatedGoals = goals.filter(\n                            (result) => result.id != value.id\n                          );\n                          setGoals(updatedGoals);\n                        }}\n                        handleChange={(obj) => {\n                          let newGoals = [...goals];\n                          let index = newGoals.findIndex((item) => {\n                            return item.id == obj.id;\n                          });\n                          newGoals[index] = obj;\n                          setGoals(newGoals);\n                        }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <button\n                onClick={() => {\n                  const goalItem = {\n                    id: `goalList--${goals.length}`,\n                    name: \"\",\n                  };\n                  const newGoals = [...goals, goalItem];\n                  const emptyValue = goals.filter((item) => item.name == \"\");\n                  if (emptyValue.length) {\n                    return;\n                  } else {\n                    setGoals(newGoals);\n                  }\n                }}\n                type=\"button\"\n                className=\"goals-form--button--2_zb1 btn btn-tertiary\"\n              >\n                <span className=\"mr5 cfi cfi-add\" /> Add an answer\n              </button>\n            </div>\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"requirements\" className=\"control-label\">\n                  Are there any course requirements or prerequisites?\n                </label>\n                <div>\n                  <div>\n                    {requirementsUpdate &&\n                      requirementsUpdate.map((req) => (\n                        <Requirements\n                          req={req}\n                          key={req.id}\n                          handleRemove={removeReq}\n                          handleChange={(obj) => {\n                            let reqUpdates = [...requirementsUpdate];\n                            let index = reqUpdates.findIndex((item) => {\n                              return item.id == obj.id;\n                            });\n                            reqUpdates[index] = obj;\n                            setRequirementsUpdate(reqUpdates);\n                          }}\n                        />\n                      ))}\n\n                    {requirements.map((req) => (\n                      <ReqCreate\n                        req={req}\n                        key={req.id}\n                        handleRemove={(value) => {\n                          const updatedReqs = requirements.filter(\n                            (result) => result.id != value.id\n                          );\n                          setRequirements(updatedReqs);\n                        }}\n                        handleChange={(obj) => {\n                          let reqs = [...requirements];\n                          let index = reqs.findIndex((item) => {\n                            return item.id == obj.id;\n                          });\n                          reqs[index] = obj;\n                          setRequirements(reqs);\n                        }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <button\n                onClick={() => {\n                  const reqItem = {\n                    id: `reqList--${requirements.length}`,\n                    value: \"\",\n                  };\n                  const newReqs = [...requirements, reqItem];\n                  const emptyValue = requirements.filter(\n                    (item) => item.name == \"\"\n                  );\n                  if (emptyValue.length) {\n                    return;\n                  } else {\n                    setRequirements(newReqs);\n                  }\n                }}\n                type=\"button\"\n                className=\"goals-form--button--2_zb1 btn btn-tertiary\"\n              >\n                <span className=\"mr5 cfi cfi-add\" /> Add an answer\n              </button>\n            </div>\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"target-student\" className=\"control-label\">\n                  Who are your target students?\n                </label>\n                <div>\n                  <div>\n                    {experienceUpdate &&\n                      experienceUpdate.map((exp) => (\n                        <Experience\n                          key={exp.id}\n                          experience={exp}\n                          handleRemove={removeExp}\n                          handleChange={(obj) => {\n                            let expUpdate = [...experienceUpdate];\n\n                            let index = expUpdate.findIndex((item) => {\n                              return item.id == obj.id;\n                            });\n                            expUpdate[index] = obj;\n                            setExperienceUpdate(expUpdate);\n                          }}\n                        />\n                      ))}\n\n                    {experience.map((exp) => (\n                      <ExperienceCreate\n                        key={exp.id}\n                        experience={exp}\n                        handleRemove={(value) => {\n                          const updatedExperience = experience.filter(\n                            (result) => result.id != value.id\n                          );\n                          setExperience(updatedExperience);\n                        }}\n                        handleChange={(obj) => {\n                          let expdate = [...experience];\n\n                          let index = expdate.findIndex((item) => {\n                            return item.id == obj.id;\n                          });\n                          expdate[index] = obj;\n                          setExperience(expdate);\n                        }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <button\n                onClick={() => {\n                  const expItem = {\n                    id: `expList--${experience.length}`,\n                    value: \"\",\n                  };\n                  const newExps = [...experience, expItem];\n                  const emptyValue = experience.filter(\n                    (item) => item.name == \"\"\n                  );\n                  if (emptyValue.length) {\n                    return;\n                  } else {\n                    setExperience(newExps);\n                  }\n                }}\n                type=\"button\"\n                className=\"goals-form--button--2_zb1 btn btn-tertiary\"\n              >\n                <span className=\"mr5 cfi cfi-add\" /> Add an answer\n              </button>\n            </div>\n          </form>\n        </div>{\" \"}\n      </div>\n    </div>\n  );\n};\n\nexport default Target;\n"],"sourceRoot":""}