"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCookieOptions = exports.buildConfiguration = exports.DEFAULT_CONFIGURATION = void 0;
var tslib_1 = require("tslib");
var cookie_1 = require("../browser/cookie");
var catchUserErrors_1 = require("../tools/catchUserErrors");
var utils_1 = require("../tools/utils");
var transportConfiguration_1 = require("./transportConfiguration");
exports.DEFAULT_CONFIGURATION = {
    allowedTracingOrigins: [],
    maxErrorsByMinute: 3000,
    maxInternalMonitoringMessagesPerPage: 15,
    resourceSampleRate: 100,
    sampleRate: 100,
    silentMultipleInit: false,
    trackInteractions: false,
    trackViewsManually: false,
    /**
     * arbitrary value, byte precision not needed
     */
    requestErrorResponseLengthLimit: 32 * utils_1.ONE_KILO_BYTE,
    /**
     * flush automatically, aim to be lower than ALB connection timeout
     * to maximize connection reuse.
     */
    flushTimeout: 30 * utils_1.ONE_SECOND,
    /**
     * Logs intake limit
     */
    maxBatchSize: 50,
    maxMessageSize: 256 * utils_1.ONE_KILO_BYTE,
    /**
     * beacon payload max queue size implementation is 64kb
     * ensure that we leave room for logs, rum and potential other users
     */
    batchBytesLimit: 16 * utils_1.ONE_KILO_BYTE,
};
function buildConfiguration(userConfiguration, buildEnv) {
    var enableExperimentalFeatures = Array.isArray(userConfiguration.enableExperimentalFeatures)
        ? userConfiguration.enableExperimentalFeatures
        : [];
    var configuration = tslib_1.__assign(tslib_1.__assign({ beforeSend: userConfiguration.beforeSend && catchUserErrors_1.catchUserErrors(userConfiguration.beforeSend, 'beforeSend threw an error:'), cookieOptions: buildCookieOptions(userConfiguration), isEnabled: function (feature) { return utils_1.includes(enableExperimentalFeatures, feature); }, service: userConfiguration.service }, transportConfiguration_1.computeTransportConfiguration(userConfiguration, buildEnv)), exports.DEFAULT_CONFIGURATION);
    if ('allowedTracingOrigins' in userConfiguration) {
        configuration.allowedTracingOrigins = userConfiguration.allowedTracingOrigins;
    }
    if ('sampleRate' in userConfiguration) {
        configuration.sampleRate = userConfiguration.sampleRate;
    }
    if ('resourceSampleRate' in userConfiguration) {
        configuration.resourceSampleRate = userConfiguration.resourceSampleRate;
    }
    if ('trackInteractions' in userConfiguration) {
        configuration.trackInteractions = !!userConfiguration.trackInteractions;
    }
    if ('trackViewsManually' in userConfiguration) {
        configuration.trackViewsManually = !!userConfiguration.trackViewsManually;
    }
    return configuration;
}
exports.buildConfiguration = buildConfiguration;
function buildCookieOptions(userConfiguration) {
    var cookieOptions = {};
    cookieOptions.secure = mustUseSecureCookie(userConfiguration);
    cookieOptions.crossSite = !!userConfiguration.useCrossSiteSessionCookie;
    if (!!userConfiguration.trackSessionAcrossSubdomains) {
        cookieOptions.domain = cookie_1.getCurrentSite();
    }
    return cookieOptions;
}
exports.buildCookieOptions = buildCookieOptions;
function mustUseSecureCookie(userConfiguration) {
    return !!userConfiguration.useSecureSessionCookie || !!userConfiguration.useCrossSiteSessionCookie;
}
//# sourceMappingURL=configuration.js.map