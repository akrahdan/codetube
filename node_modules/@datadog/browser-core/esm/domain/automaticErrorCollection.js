import { __assign, __spreadArrays } from "tslib";
import { resetFetchProxy, startFetchProxy } from '../browser/fetchProxy';
import { resetXhrProxy, startXhrProxy } from '../browser/xhrProxy';
import { ErrorSource, formatUnknownError, toStackTraceString, formatErrorMessage, ErrorHandling, createHandlingStack, } from '../tools/error';
import { Observable } from '../tools/observable';
import { clocksNow } from '../tools/timeUtils';
import { jsonStringify, RequestType, find } from '../tools/utils';
import { callMonitored } from './internalMonitoring';
import { computeStackTrace, subscribe, unsubscribe } from './tracekit';
var errorObservable;
export function startAutomaticErrorCollection(configuration) {
    if (!errorObservable) {
        errorObservable = new Observable();
        trackNetworkError(configuration, errorObservable);
        startConsoleTracking(errorObservable);
        startRuntimeErrorTracking(errorObservable);
    }
    return errorObservable;
}
var originalConsoleError;
/* eslint-disable no-console */
export function startConsoleTracking(errorObservable) {
    originalConsoleError = console.error;
    console.error = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var handlingStack = createHandlingStack();
        callMonitored(function () {
            originalConsoleError.apply(console, params);
            errorObservable.notify(__assign(__assign({}, buildErrorFromParams(params, handlingStack)), { source: ErrorSource.CONSOLE, startClocks: clocksNow(), handling: ErrorHandling.HANDLED }));
        });
    };
}
export function stopConsoleTracking() {
    console.error = originalConsoleError;
}
/* eslint-enable no-console */
function buildErrorFromParams(params, handlingStack) {
    var firstErrorParam = find(params, function (param) { return param instanceof Error; });
    return {
        message: __spreadArrays(['console error:'], params).map(function (param) { return formatConsoleParameters(param); }).join(' '),
        stack: firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined,
        handlingStack: handlingStack,
    };
}
function formatConsoleParameters(param) {
    if (typeof param === 'string') {
        return param;
    }
    if (param instanceof Error) {
        return formatErrorMessage(computeStackTrace(param));
    }
    return jsonStringify(param, undefined, 2);
}
var traceKitReportHandler;
export function startRuntimeErrorTracking(errorObservable) {
    traceKitReportHandler = function (stackTrace, _, errorObject) {
        var _a = formatUnknownError(stackTrace, errorObject, 'Uncaught'), stack = _a.stack, message = _a.message, type = _a.type;
        errorObservable.notify({
            message: message,
            stack: stack,
            type: type,
            source: ErrorSource.SOURCE,
            startClocks: clocksNow(),
            originalError: errorObject,
            handling: ErrorHandling.UNHANDLED,
        });
    };
    subscribe(traceKitReportHandler);
}
export function stopRuntimeErrorTracking() {
    unsubscribe(traceKitReportHandler);
}
export function trackNetworkError(configuration, errorObservable) {
    startXhrProxy().onRequestComplete(function (context) { return handleCompleteRequest(RequestType.XHR, context); });
    startFetchProxy().onRequestComplete(function (context) { return handleCompleteRequest(RequestType.FETCH, context); });
    function handleCompleteRequest(type, request) {
        if (!configuration.isIntakeUrl(request.url) &&
            (!configuration.isEnabled('remove-network-errors') || !request.isAborted) &&
            (isRejected(request) || isServerError(request))) {
            errorObservable.notify({
                message: format(type) + " error " + request.method + " " + request.url,
                resource: {
                    method: request.method,
                    statusCode: request.status,
                    url: request.url,
                },
                source: ErrorSource.NETWORK,
                stack: truncateResponseText(request.responseText, configuration) || 'Failed to load',
                startClocks: request.startClocks,
            });
        }
    }
    return {
        stop: function () {
            resetXhrProxy();
            resetFetchProxy();
        },
    };
}
function isRejected(request) {
    return request.status === 0 && request.responseType !== 'opaque';
}
function isServerError(request) {
    return request.status >= 500;
}
function truncateResponseText(responseText, configuration) {
    if (responseText && responseText.length > configuration.requestErrorResponseLengthLimit) {
        return responseText.substring(0, configuration.requestErrorResponseLengthLimit) + "...";
    }
    return responseText;
}
function format(type) {
    if (RequestType.XHR === type) {
        return 'XHR';
    }
    return 'Fetch';
}
//# sourceMappingURL=automaticErrorCollection.js.map