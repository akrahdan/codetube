{"ast":null,"code":"import cx from 'classnames';\nimport React, { useEffect } from 'react';\nimport { StepButton } from './StepButton';\nimport styles from './styles.module.scss';\n/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */\n\nexport var InputStepper = function InputStepper(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 999 : _ref$max,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      onChange = _ref.onChange,\n      ariaLabel = _ref.ariaLabel,\n      onStepperButtonClick = _ref.onStepperButtonClick,\n      className = _ref.className;\n\n  var normalize = function normalize(value) {\n    if (max && value > max) {\n      return max;\n    }\n\n    if (value < min) {\n      return min;\n    }\n\n    return value;\n  };\n\n  var calculateWidthFromMax = function calculateWidthFromMax() {\n    if (max < 10) {\n      return styles.mini;\n    }\n\n    if (max > 99) {\n      return styles[\"long\"];\n    }\n\n    return styles.standardWidth;\n  };\n\n  var increment = function increment(incrementAmount) {\n    var incrementedValue = normalize(value + incrementAmount);\n\n    if (onStepperButtonClick) {\n      onStepperButtonClick(incrementAmount > 0 ? 'increase_selection' : 'decrease_selection');\n    }\n\n    onChange(incrementedValue);\n  };\n\n  var onChangeEvent = function onChangeEvent(event) {\n    var rawValue = event.target.value || \"\".concat(min);\n    var normalizedValue = normalize(parseInt(rawValue, 10));\n\n    if (normalizedValue === value) {\n      return;\n    }\n\n    onChange(normalizedValue);\n  }; // ensure that the value comes in normalized & update the state\n  // to reflect the normalized value. Taking a timeout approach so as\n  // to avoid kicking off re-render while already mid-render\n\n\n  var normalizedValue = normalize(value);\n  useEffect(function () {\n    if (normalizedValue !== value) {\n      window.setTimeout(function () {\n        return onChange(normalizedValue);\n      }, 0);\n    }\n  });\n  var inputId = 'inputStepper';\n  var labelId = 'inputStepperLabel';\n  var inputWidthClass = calculateWidthFromMax();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.stepper, className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.column\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: cx(styles.input, inputWidthClass),\n    type: \"number\",\n    max: max,\n    min: min,\n    value: normalizedValue,\n    name: inputId,\n    id: inputId,\n    \"aria-live\": \"polite\",\n    \"aria-labelledby\": \"\".concat(labelId, \" \").concat(inputId),\n    \"aria-label\": \"current value of \".concat(value),\n    onChange: onChangeEvent\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: labelId,\n    className: styles.label,\n    \"aria-label\": ariaLabel,\n    htmlFor: inputId\n  }, label)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.column\n  }, /*#__PURE__*/React.createElement(StepButton, {\n    onClick: function onClick() {\n      return increment(1);\n    },\n    type: \"up\",\n    labelledBy: \"\".concat(labelId, \" \").concat(inputId)\n  }), /*#__PURE__*/React.createElement(StepButton, {\n    onClick: function onClick() {\n      return increment(-1);\n    },\n    type: \"down\",\n    labelledBy: \"\".concat(labelId, \" \").concat(inputId)\n  })));\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut/dist/InputStepper/index.js"],"names":["cx","React","useEffect","StepButton","styles","InputStepper","_ref","label","value","_ref$max","max","_ref$min","min","onChange","ariaLabel","onStepperButtonClick","className","normalize","calculateWidthFromMax","mini","standardWidth","increment","incrementAmount","incrementedValue","onChangeEvent","event","rawValue","target","concat","normalizedValue","parseInt","window","setTimeout","inputId","labelId","inputWidthClass","createElement","stepper","column","input","type","name","id","htmlFor","onClick","labelledBy"],"mappings":"AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACpD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACI,GAFpB;AAAA,MAGIA,GAAG,GAAGD,QAAQ,KAAK,KAAK,CAAlB,GAAsB,GAAtB,GAA4BA,QAHtC;AAAA,MAIIE,QAAQ,GAAGL,IAAI,CAACM,GAJpB;AAAA,MAKIA,GAAG,GAAGD,QAAQ,KAAK,KAAK,CAAlB,GAAsB,CAAtB,GAA0BA,QALpC;AAAA,MAMIE,QAAQ,GAAGP,IAAI,CAACO,QANpB;AAAA,MAOIC,SAAS,GAAGR,IAAI,CAACQ,SAPrB;AAAA,MAQIC,oBAAoB,GAAGT,IAAI,CAACS,oBARhC;AAAA,MASIC,SAAS,GAAGV,IAAI,CAACU,SATrB;;AAWA,MAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBT,KAAnB,EAA0B;AACxC,QAAIE,GAAG,IAAIF,KAAK,GAAGE,GAAnB,EAAwB;AACtB,aAAOA,GAAP;AACD;;AAED,QAAIF,KAAK,GAAGI,GAAZ,EAAiB;AACf,aAAOA,GAAP;AACD;;AAED,WAAOJ,KAAP;AACD,GAVD;;AAYA,MAAIU,qBAAqB,GAAG,SAASA,qBAAT,GAAiC;AAC3D,QAAIR,GAAG,GAAG,EAAV,EAAc;AACZ,aAAON,MAAM,CAACe,IAAd;AACD;;AAED,QAAIT,GAAG,GAAG,EAAV,EAAc;AACZ,aAAON,MAAM,CAAC,MAAD,CAAb;AACD;;AAED,WAAOA,MAAM,CAACgB,aAAd;AACD,GAVD;;AAYA,MAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,eAAnB,EAAoC;AAClD,QAAIC,gBAAgB,GAAGN,SAAS,CAACT,KAAK,GAAGc,eAAT,CAAhC;;AAEA,QAAIP,oBAAJ,EAA0B;AACxBA,MAAAA,oBAAoB,CAACO,eAAe,GAAG,CAAlB,GAAsB,oBAAtB,GAA6C,oBAA9C,CAApB;AACD;;AAEDT,IAAAA,QAAQ,CAACU,gBAAD,CAAR;AACD,GARD;;AAUA,MAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,QAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAanB,KAAb,IAAsB,GAAGoB,MAAH,CAAUhB,GAAV,CAArC;AACA,QAAIiB,eAAe,GAAGZ,SAAS,CAACa,QAAQ,CAACJ,QAAD,EAAW,EAAX,CAAT,CAA/B;;AAEA,QAAIG,eAAe,KAAKrB,KAAxB,EAA+B;AAC7B;AACD;;AAEDK,IAAAA,QAAQ,CAACgB,eAAD,CAAR;AACD,GATD,CA9CoD,CAuDjD;AACH;AACA;;;AAGA,MAAIA,eAAe,GAAGZ,SAAS,CAACT,KAAD,CAA/B;AACAN,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI2B,eAAe,KAAKrB,KAAxB,EAA+B;AAC7BuB,MAAAA,MAAM,CAACC,UAAP,CAAkB,YAAY;AAC5B,eAAOnB,QAAQ,CAACgB,eAAD,CAAf;AACD,OAFD,EAEG,CAFH;AAGD;AACF,GANQ,CAAT;AAOA,MAAII,OAAO,GAAG,cAAd;AACA,MAAIC,OAAO,GAAG,mBAAd;AACA,MAAIC,eAAe,GAAGjB,qBAAqB,EAA3C;AACA,SAAO,aAAajB,KAAK,CAACmC,aAAN,CAAoB,KAApB,EAA2B;AAC7CpB,IAAAA,SAAS,EAAEhB,EAAE,CAACI,MAAM,CAACiC,OAAR,EAAiBrB,SAAjB;AADgC,GAA3B,EAEjB,aAAaf,KAAK,CAACmC,aAAN,CAAoB,KAApB,EAA2B;AACzCpB,IAAAA,SAAS,EAAEZ,MAAM,CAACkC;AADuB,GAA3B,EAEb,aAAarC,KAAK,CAACmC,aAAN,CAAoB,OAApB,EAA6B;AAC3CpB,IAAAA,SAAS,EAAEhB,EAAE,CAACI,MAAM,CAACmC,KAAR,EAAeJ,eAAf,CAD8B;AAE3CK,IAAAA,IAAI,EAAE,QAFqC;AAG3C9B,IAAAA,GAAG,EAAEA,GAHsC;AAI3CE,IAAAA,GAAG,EAAEA,GAJsC;AAK3CJ,IAAAA,KAAK,EAAEqB,eALoC;AAM3CY,IAAAA,IAAI,EAAER,OANqC;AAO3CS,IAAAA,EAAE,EAAET,OAPuC;AAQ3C,iBAAa,QAR8B;AAS3C,uBAAmB,GAAGL,MAAH,CAAUM,OAAV,EAAmB,GAAnB,EAAwBN,MAAxB,CAA+BK,OAA/B,CATwB;AAU3C,kBAAc,oBAAoBL,MAApB,CAA2BpB,KAA3B,CAV6B;AAW3CK,IAAAA,QAAQ,EAAEW;AAXiC,GAA7B,CAFA,EAcZ,aAAavB,KAAK,CAACmC,aAAN,CAAoB,OAApB,EAA6B;AAC5CM,IAAAA,EAAE,EAAER,OADwC;AAE5ClB,IAAAA,SAAS,EAAEZ,MAAM,CAACG,KAF0B;AAG5C,kBAAcO,SAH8B;AAI5C6B,IAAAA,OAAO,EAAEV;AAJmC,GAA7B,EAKd1B,KALc,CAdD,CAFI,EAqBR,aAAaN,KAAK,CAACmC,aAAN,CAAoB,KAApB,EAA2B;AAClDpB,IAAAA,SAAS,EAAEZ,MAAM,CAACkC;AADgC,GAA3B,EAEtB,aAAarC,KAAK,CAACmC,aAAN,CAAoBjC,UAApB,EAAgC;AAC9CyC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAOvB,SAAS,CAAC,CAAD,CAAhB;AACD,KAH6C;AAI9CmB,IAAAA,IAAI,EAAE,IAJwC;AAK9CK,IAAAA,UAAU,EAAE,GAAGjB,MAAH,CAAUM,OAAV,EAAmB,GAAnB,EAAwBN,MAAxB,CAA+BK,OAA/B;AALkC,GAAhC,CAFS,EAQrB,aAAahC,KAAK,CAACmC,aAAN,CAAoBjC,UAApB,EAAgC;AAC/CyC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAOvB,SAAS,CAAC,CAAC,CAAF,CAAhB;AACD,KAH8C;AAI/CmB,IAAAA,IAAI,EAAE,MAJyC;AAK/CK,IAAAA,UAAU,EAAE,GAAGjB,MAAH,CAAUM,OAAV,EAAmB,GAAnB,EAAwBN,MAAxB,CAA+BK,OAA/B;AALmC,GAAhC,CARQ,CArBL,CAApB;AAoCD,CA3GM","sourcesContent":["import cx from 'classnames';\nimport React, { useEffect } from 'react';\nimport { StepButton } from './StepButton';\nimport styles from './styles.module.scss';\n\n/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */\nexport var InputStepper = function InputStepper(_ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 999 : _ref$max,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      onChange = _ref.onChange,\n      ariaLabel = _ref.ariaLabel,\n      onStepperButtonClick = _ref.onStepperButtonClick,\n      className = _ref.className;\n\n  var normalize = function normalize(value) {\n    if (max && value > max) {\n      return max;\n    }\n\n    if (value < min) {\n      return min;\n    }\n\n    return value;\n  };\n\n  var calculateWidthFromMax = function calculateWidthFromMax() {\n    if (max < 10) {\n      return styles.mini;\n    }\n\n    if (max > 99) {\n      return styles[\"long\"];\n    }\n\n    return styles.standardWidth;\n  };\n\n  var increment = function increment(incrementAmount) {\n    var incrementedValue = normalize(value + incrementAmount);\n\n    if (onStepperButtonClick) {\n      onStepperButtonClick(incrementAmount > 0 ? 'increase_selection' : 'decrease_selection');\n    }\n\n    onChange(incrementedValue);\n  };\n\n  var onChangeEvent = function onChangeEvent(event) {\n    var rawValue = event.target.value || \"\".concat(min);\n    var normalizedValue = normalize(parseInt(rawValue, 10));\n\n    if (normalizedValue === value) {\n      return;\n    }\n\n    onChange(normalizedValue);\n  }; // ensure that the value comes in normalized & update the state\n  // to reflect the normalized value. Taking a timeout approach so as\n  // to avoid kicking off re-render while already mid-render\n\n\n  var normalizedValue = normalize(value);\n  useEffect(function () {\n    if (normalizedValue !== value) {\n      window.setTimeout(function () {\n        return onChange(normalizedValue);\n      }, 0);\n    }\n  });\n  var inputId = 'inputStepper';\n  var labelId = 'inputStepperLabel';\n  var inputWidthClass = calculateWidthFromMax();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.stepper, className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.column\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: cx(styles.input, inputWidthClass),\n    type: \"number\",\n    max: max,\n    min: min,\n    value: normalizedValue,\n    name: inputId,\n    id: inputId,\n    \"aria-live\": \"polite\",\n    \"aria-labelledby\": \"\".concat(labelId, \" \").concat(inputId),\n    \"aria-label\": \"current value of \".concat(value),\n    onChange: onChangeEvent\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: labelId,\n    className: styles.label,\n    \"aria-label\": ariaLabel,\n    htmlFor: inputId\n  }, label)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.column\n  }, /*#__PURE__*/React.createElement(StepButton, {\n    onClick: function onClick() {\n      return increment(1);\n    },\n    type: \"up\",\n    labelledBy: \"\".concat(labelId, \" \").concat(inputId)\n  }), /*#__PURE__*/React.createElement(StepButton, {\n    onClick: function onClick() {\n      return increment(-1);\n    },\n    type: \"down\",\n    labelledBy: \"\".concat(labelId, \" \").concat(inputId)\n  })));\n};"]},"metadata":{},"sourceType":"module"}