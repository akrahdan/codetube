{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Projects/ProjectDetail/Recommendations/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport CMSContext from 'portal/scenes/Paths/ContentfulContext'; // import { selectUserJWT } from '~/state/currentUser/selectors';\n\nimport { Paths } from './sample';\nimport RecommendationsPresenter from './Recommendations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Recommendations = ({\n  pathId,\n  related\n}) => {\n  _s();\n\n  const cms = useContext(CMSContext);\n  const {\n    other_path_ids: pathIds\n  } = cms;\n  const [paths, setPaths] = useState([]);\n  return /*#__PURE__*/_jsxDEV(RecommendationsPresenter, {\n    projects: related,\n    pathId: pathId,\n    paths: Paths,\n    cms: cms\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Recommendations, \"tg6cH5J34JR8uOxVAoiuyGZ9pws=\");\n\n_c = Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Projects/ProjectDetail/Recommendations/index.tsx"],"names":["React","useContext","useState","CMSContext","Paths","RecommendationsPresenter","Recommendations","pathId","related","cms","other_path_ids","pathIds","paths","setPaths"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAAuCC,QAAvC,QAAuD,OAAvD;AAIA,OAAOC,UAAP,MAAuB,uCAAvB,C,CACA;;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,wBAAP,MAAqC,mBAArC;;AAQA,OAAO,MAAMC,eAA+C,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAyB;AAAA;;AACtF,QAAMC,GAAG,GAAGR,UAAU,CAACE,UAAD,CAAtB;AACA,QAAM;AAAEO,IAAAA,cAAc,EAAEC;AAAlB,MAA8BF,GAApC;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAS,EAAT,CAAlC;AAGA,sBAAO,QAAC,wBAAD;AAA0B,IAAA,QAAQ,EAAGM,OAArC;AAA8C,IAAA,MAAM,EAAED,MAAtD;AAA8D,IAAA,KAAK,EAAEH,KAArE;AAA4E,IAAA,GAAG,EAAEK;AAAjF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CARM;;GAAMH,e;;KAAAA,e","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { contentServiceRequest } from 'libs/contentServiceRequest';\nimport CMSContext from 'portal/scenes/Paths/ContentfulContext';\n// import { selectUserJWT } from '~/state/currentUser/selectors';\nimport { Path } from 'typings/path';\nimport { Paths } from './sample';\nimport RecommendationsPresenter from './Recommendations';\nimport type { ProjectEntityResponse } from 'services/projects';\n\nexport type RecommendationsProps = {\n  pathId: string;\n  related: ProjectEntityResponse[]\n};\n\nexport const Recommendations: React.FC<RecommendationsProps> = ({ pathId, related }) => {\n  const cms = useContext(CMSContext);\n  const { other_path_ids: pathIds } = cms;\n\n  const [paths, setPaths] = useState<Path[]>([]);\n  \n\n  return <RecommendationsPresenter projects ={related} pathId={pathId} paths={Paths} cms={cms} />;\n};\n"]},"metadata":{},"sourceType":"module"}