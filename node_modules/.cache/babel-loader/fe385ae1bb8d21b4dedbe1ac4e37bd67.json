{"ast":null,"code":"import{Anchor,Text}from'@codecademy/gamut';import{ListSection}from'@codecademy/gamut-labs';import React from'react';import{catalogPath}from'libs/urlHelpers';import{allCourses}from'./allCourses';import{EnrollmentCard}from'./EnrollmentCard';import{EnrollmentLoadingCard}from'./EnrollmentLoadingCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var isLoading=false;export var CoursesSection=function CoursesSection(_ref){var isCurrentUser=_ref.isCurrentUser,enrollments=_ref.enrollments;var isEmpty=(allCourses===null||allCourses===void 0?void 0:allCourses.length)===0;var loadingCardsToDisplay=enrollments.length>3?enrollments.slice(0,3):enrollments;var renderEmptyMessage=function renderEmptyMessage(){return/*#__PURE__*/_jsxs(Text,{children:[/*#__PURE__*/_jsx(Anchor,{href:catalogPath,onClick:function onClick(){return console.log();},variant:\"standard\",children:\"Browse our catalog\"}),' ',\"to start a course now\"]});};var renderContent=function renderContent(){return isEmpty?renderEmptyMessage():allCourses===null||allCourses===void 0?void 0:allCourses.map(function(course){return/*#__PURE__*/_jsx(EnrollmentCard,{id:course.id,onEnrollmentClick:function onEnrollmentClick(value){return console.log();}},course.id);});};var renderLoadingState=function renderLoadingState(){return loadingCardsToDisplay.map(function(enrollment){return/*#__PURE__*/_jsx(EnrollmentLoadingCard,{},\"enrollment-loading-card-\".concat(enrollment.id));});};if(!isCurrentUser&&isEmpty)return null;return/*#__PURE__*/_jsx(ListSection,{title:\"Latest Courses\",onShowAllOrLessClick:function onShowAllOrLessClick(){return console.log();},children:isLoading?renderLoadingState():renderContent()});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Profile/CoursesSection/index.tsx"],"names":["Anchor","Text","ListSection","React","catalogPath","allCourses","EnrollmentCard","EnrollmentLoadingCard","isLoading","CoursesSection","isCurrentUser","enrollments","isEmpty","length","loadingCardsToDisplay","slice","renderEmptyMessage","console","log","renderContent","map","course","id","value","renderLoadingState","enrollment"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,IAAjB,KAA6B,mBAA7B,CACA,OAASC,WAAT,KAA4B,wBAA5B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,WAAT,KAA4B,iBAA5B,CAEA,OAASC,UAAT,KAA2B,cAA3B,CAEA,OAASC,cAAT,KAA+B,kBAA/B,CACA,OAASC,qBAAT,KAAsC,yBAAtC,C,wFAWA,GAAMC,CAAAA,SAAS,CAAG,KAAlB,CAEA,MAAO,IAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAGvD,IAFJC,CAAAA,aAEI,MAFJA,aAEI,CADJC,WACI,MADJA,WACI,CAEJ,GAAMC,CAAAA,OAAO,CAAG,CAAAP,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEQ,MAAZ,IAAuB,CAAvC,CACA,GAAMC,CAAAA,qBAAqB,CACzBH,WAAW,CAACE,MAAZ,CAAqB,CAArB,CAAyBF,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAqB,CAArB,CAAzB,CAAmDJ,WADrD,CAGA,GAAMK,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,sBACzB,MAAC,IAAD,yBACE,KAAC,MAAD,EACE,IAAI,CAAEZ,WADR,CAEE,OAAO,CAAE,yBAAMa,CAAAA,OAAO,CAACC,GAAR,EAAN,EAFX,CAGE,OAAO,CAAC,UAHV,gCADF,CAOY,GAPZ,2BADyB,EAA3B,CAaA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SACpBP,CAAAA,OAAO,CACHI,kBAAkB,EADf,CAEHX,UAFG,SAEHA,UAFG,iBAEHA,UAAU,CAAEe,GAAZ,CAAgB,SAACC,MAAD,qBACd,KAAC,cAAD,EAEE,EAAE,CAAEA,MAAM,CAACC,EAFb,CAIE,iBAAiB,CAAE,2BAACC,KAAD,QAAWN,CAAAA,OAAO,CAACC,GAAR,EAAX,EAJrB,EACOG,MAAM,CAACC,EADd,CADc,EAAhB,CAHgB,EAAtB,CAYA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,SACzBV,CAAAA,qBAAqB,CAACM,GAAtB,CAA0B,SAACK,UAAD,qBACxB,KAAC,qBAAD,sCAAuDA,UAAU,CAACH,EAAlE,EADwB,EAA1B,CADyB,EAA3B,CAKA,GAAI,CAACZ,aAAD,EAAkBE,OAAtB,CAA+B,MAAO,KAAP,CAC/B,mBACE,KAAC,WAAD,EACE,KAAK,CAAC,gBADR,CAEE,oBAAoB,CAAE,sCAAMK,CAAAA,OAAO,CAACC,GAAR,EAAN,EAFxB,UAIGV,SAAS,CAAGgB,kBAAkB,EAArB,CAA0BL,aAAa,EAJnD,EADF,CAQD,CAhDM","sourcesContent":["import { Anchor, Text } from '@codecademy/gamut';\nimport { ListSection } from '@codecademy/gamut-labs';\nimport React from 'react';\n\nimport { catalogPath } from 'libs/urlHelpers';\n\nimport { allCourses } from './allCourses';\n\nimport { EnrollmentCard } from './EnrollmentCard';\nimport { EnrollmentLoadingCard } from './EnrollmentLoadingCard';\n\nexport interface Enrollment {\n    length : number,\n    id: string\n}\nexport type CoursesSectionProps = {\n  isCurrentUser: boolean;\n  enrollments: Enrollment[];\n};\n\nconst isLoading = false;\n\nexport const CoursesSection: React.FC<CoursesSectionProps> = ({\n  isCurrentUser,\n  enrollments,\n}) => {\n \n  const isEmpty = allCourses?.length === 0;\n  const loadingCardsToDisplay =\n    enrollments.length > 3 ? enrollments.slice(0, 3) : enrollments;\n\n  const renderEmptyMessage = () => (\n    <Text>\n      <Anchor\n        href={catalogPath}\n        onClick={() => console.log()}\n        variant=\"standard\"\n      >\n        Browse our catalog\n      </Anchor>{' '}\n      to start a course now\n    </Text>\n  );\n\n  const renderContent = () =>\n    isEmpty\n      ? renderEmptyMessage()\n      : allCourses?.map((course) => (\n          <EnrollmentCard\n            key={course.id}\n            id={course.id}\n           \n            onEnrollmentClick={(value) => console.log()}\n          />\n        ));\n\n  const renderLoadingState = () =>\n    loadingCardsToDisplay.map((enrollment) => (\n      <EnrollmentLoadingCard key={`enrollment-loading-card-${enrollment.id}`} />\n    ));\n\n  if (!isCurrentUser && isEmpty) return null;\n  return (\n    <ListSection\n      title=\"Latest Courses\"\n      onShowAllOrLessClick={() => console.log()}\n    >\n      {isLoading ? renderLoadingState() : renderContent()}\n    </ListSection>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}