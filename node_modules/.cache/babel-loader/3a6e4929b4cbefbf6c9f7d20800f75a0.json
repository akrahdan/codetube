{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: null\n  },\n  reducers: {\n    setCredentials: (state, {\n      payload: {\n        user,\n        token\n      }\n    }) => {\n      state.user = user;\n      state.token = token;\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher;\n  }\n});\nexport const {\n  setCredentials\n} = authSlice.actions;\nexport default authSlice.reducer;\nexport const selectCurrentUser = state => state.auth.user;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/auth/authSlice.ts"],"names":["createSlice","authSlice","name","initialState","user","token","reducers","setCredentials","state","payload","extraReducers","builder","addMatcher","actions","reducer","selectCurrentUser","auth"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAWA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAFY;AAG1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAE,CACZC,KADY,EAEZ;AAAEC,MAAAA,OAAO,EAAE;AAAEL,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAX,KAFY,KAGX;AACDG,MAAAA,KAAK,CAACJ,IAAN,GAAaA,IAAb;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcA,KAAd;AACH;AAPK,GAHgB;AAY1BK,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,UAAR;AACH;AAdyB,CAAD,CAA7B;AAiBA,OAAO,MAAM;AAAEL,EAAAA;AAAF,IAAqBN,SAAS,CAACY,OAArC;AAEP,eAAeZ,SAAS,CAACa,OAAzB;AAEA,OAAO,MAAMC,iBAAiB,GAAIP,KAAD,IAAsBA,KAAK,CAACQ,IAAN,CAAWZ,IAA3D","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserSubmitKey } from \"components/Forms/RegistrationForm/dist/types\";\nimport type { User } from 'services/auth';\nimport type { RootState } from 'store';\nimport type { authApi} from 'services/auth'\n\ntype AuthState = {\n    user: User | null\n    token: string | null\n}\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: { user: null, token: null } as AuthState,\n    reducers: {\n        setCredentials: (\n            state,\n            { payload: { user, token}}: PayloadAction<{ user: User; token: string}>\n        ) => {\n            state.user = user\n            state.token = token\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addMatcher\n    }\n})\n\nexport const { setCredentials } = authSlice.actions\n\nexport default authSlice.reducer\n\nexport const selectCurrentUser = (state: RootState) => state.auth.user"]},"metadata":{},"sourceType":"module"}