{"ast":null,"code":"import { MediaTypes } from '../../constants';\n\nconst requestNewUrls = props => {\n  const {\n    setLoading,\n    requestUrls\n  } = props;\n  setLoading && setLoading(true);\n  requestUrls && requestUrls();\n};\n\nconst onResolutionChange = (currentResolution, props) => {\n  const {\n    setCurrentResolution,\n    setPreferredResolutions,\n    mediaType,\n    preferredResolutions\n  } = props;\n  if (currentResolution !== props.currentResolution) setCurrentResolution && setCurrentResolution(currentResolution);\n  if (preferredResolutions && currentResolution !== preferredResolutions[mediaType]) setPreferredResolutions && setPreferredResolutions({\n    [mediaType]: currentResolution\n  });\n  if (mediaType !== MediaTypes.HLS) requestNewUrls(props);\n};\n\nconst getQualityFromHeight = height => typeof height === 'number' ? `${height}p` : height;\n\nconst getQualityAriaLabel = (height, currentResolution) => {\n  return currentResolution && height === currentResolution.height ? `quality is ${getQualityFromHeight(height)}` : `set to ${getQualityFromHeight(height)}`;\n}; // LANGUAGE\n\n\nconst onKeyPressLanguage = (language, props) => e => {\n  const {\n    setClosedCaptioningLanguage\n  } = props;\n  const keycode = e.keyCode || e.which;\n\n  if (keycode === 13) {\n    e.preventDefault();\n    e.stopPropagation();\n    setClosedCaptioningLanguage && setClosedCaptioningLanguage(language);\n    return true;\n  }\n};\n\nconst onKeyDownLanguage = (language, props) => e => {\n  const {\n    setClosedCaptioningLanguage\n  } = props;\n  const keycode = e.keyCode || e.which;\n\n  if (keycode === 13 || e.key == ' ') {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n    setClosedCaptioningLanguage && setClosedCaptioningLanguage(language);\n    return true;\n  }\n};\n\nexport { requestNewUrls, onResolutionChange, getQualityFromHeight, getQualityAriaLabel, onKeyPressLanguage, onKeyDownLanguage };","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/settings-menu/settings-menu-utils.js"],"names":["MediaTypes","requestNewUrls","props","setLoading","requestUrls","onResolutionChange","currentResolution","setCurrentResolution","setPreferredResolutions","mediaType","preferredResolutions","HLS","getQualityFromHeight","height","getQualityAriaLabel","onKeyPressLanguage","language","e","setClosedCaptioningLanguage","keycode","keyCode","which","preventDefault","stopPropagation","onKeyDownLanguage","key","nativeEvent","stopImmediatePropagation"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA8BF,KAApC;AACAC,EAAAA,UAAU,IAAIA,UAAU,CAAC,IAAD,CAAxB;AACAC,EAAAA,WAAW,IAAIA,WAAW,EAA1B;AACD,CAJD;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,iBAAD,EAAoBJ,KAApB,KAA8B;AACvD,QAAM;AAAEK,IAAAA,oBAAF;AAAwBC,IAAAA,uBAAxB;AAAiDC,IAAAA,SAAjD;AAA4DC,IAAAA;AAA5D,MAAqFR,KAA3F;AACA,MAAII,iBAAiB,KAAKJ,KAAK,CAACI,iBAAhC,EAAmDC,oBAAoB,IAAIA,oBAAoB,CAACD,iBAAD,CAA5C;AACnD,MAAII,oBAAoB,IAAIJ,iBAAiB,KAAKI,oBAAoB,CAACD,SAAD,CAAtE,EACED,uBAAuB,IAAIA,uBAAuB,CAAC;AAAE,KAACC,SAAD,GAAaH;AAAf,GAAD,CAAlD;AACF,MAAIG,SAAS,KAAKT,UAAU,CAACW,GAA7B,EAAkCV,cAAc,CAACC,KAAD,CAAd;AACnC,CAND;;AAQA,MAAMU,oBAAoB,GAAGC,MAAM,IAAK,OAAOA,MAAP,KAAkB,QAAlB,GAA8B,GAAEA,MAAO,GAAvC,GAA4CA,MAApF;;AAEA,MAAMC,mBAAmB,GAAG,CAACD,MAAD,EAASP,iBAAT,KAA+B;AACzD,SAAOA,iBAAiB,IAAIO,MAAM,KAAKP,iBAAiB,CAACO,MAAlD,GACF,cAAaD,oBAAoB,CAACC,MAAD,CAAS,EADxC,GAEF,UAASD,oBAAoB,CAACC,MAAD,CAAS,EAF3C;AAGD,CAJD,C,CAMA;;;AAEA,MAAME,kBAAkB,GAAG,CAACC,QAAD,EAAWd,KAAX,KAAqBe,CAAC,IAAI;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAkChB,KAAxC;AAEA,QAAMiB,OAAO,GAAGF,CAAC,CAACG,OAAF,IAAaH,CAAC,CAACI,KAA/B;;AAEA,MAAIF,OAAO,KAAK,EAAhB,EAAoB;AAClBF,IAAAA,CAAC,CAACK,cAAF;AACAL,IAAAA,CAAC,CAACM,eAAF;AACAL,IAAAA,2BAA2B,IAAIA,2BAA2B,CAACF,QAAD,CAA1D;AACA,WAAO,IAAP;AACD;AACF,CAXD;;AAaA,MAAMQ,iBAAiB,GAAG,CAACR,QAAD,EAAWd,KAAX,KAAqBe,CAAC,IAAI;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAkChB,KAAxC;AAEA,QAAMiB,OAAO,GAAGF,CAAC,CAACG,OAAF,IAAaH,CAAC,CAACI,KAA/B;;AAEA,MAAIF,OAAO,KAAK,EAAZ,IAAkBF,CAAC,CAACQ,GAAF,IAAS,GAA/B,EAAoC;AAClCR,IAAAA,CAAC,CAACK,cAAF;AACAL,IAAAA,CAAC,CAACM,eAAF;AACAN,IAAAA,CAAC,CAACS,WAAF,CAAcC,wBAAd;AACAT,IAAAA,2BAA2B,IAAIA,2BAA2B,CAACF,QAAD,CAA1D;AACA,WAAO,IAAP;AACD;AACF,CAZD;;AAcA,SACEf,cADF,EAEEI,kBAFF,EAGEO,oBAHF,EAIEE,mBAJF,EAKEC,kBALF,EAMES,iBANF","sourcesContent":["import { MediaTypes } from '../../constants'\n\nconst requestNewUrls = props => {\n  const { setLoading, requestUrls } = props\n  setLoading && setLoading(true)\n  requestUrls && requestUrls()\n}\n\nconst onResolutionChange = (currentResolution, props) => {\n  const { setCurrentResolution, setPreferredResolutions, mediaType, preferredResolutions } = props\n  if (currentResolution !== props.currentResolution) setCurrentResolution && setCurrentResolution(currentResolution)\n  if (preferredResolutions && currentResolution !== preferredResolutions[mediaType])\n    setPreferredResolutions && setPreferredResolutions({ [mediaType]: currentResolution })\n  if (mediaType !== MediaTypes.HLS) requestNewUrls(props)\n}\n\nconst getQualityFromHeight = height => (typeof height === 'number' ? `${height}p` : height)\n\nconst getQualityAriaLabel = (height, currentResolution) => {\n  return currentResolution && height === currentResolution.height\n    ? `quality is ${getQualityFromHeight(height)}`\n    : `set to ${getQualityFromHeight(height)}`\n}\n\n// LANGUAGE\n\nconst onKeyPressLanguage = (language, props) => e => {\n  const { setClosedCaptioningLanguage } = props\n\n  const keycode = e.keyCode || e.which\n\n  if (keycode === 13) {\n    e.preventDefault()\n    e.stopPropagation()\n    setClosedCaptioningLanguage && setClosedCaptioningLanguage(language)\n    return true\n  }\n}\n\nconst onKeyDownLanguage = (language, props) => e => {\n  const { setClosedCaptioningLanguage } = props\n\n  const keycode = e.keyCode || e.which\n\n  if (keycode === 13 || e.key == ' ') {\n    e.preventDefault()\n    e.stopPropagation()\n    e.nativeEvent.stopImmediatePropagation()\n    setClosedCaptioningLanguage && setClosedCaptioningLanguage(language)\n    return true\n  }\n}\n\nexport {\n  requestNewUrls,\n  onResolutionChange,\n  getQualityFromHeight,\n  getQualityAriaLabel,\n  onKeyPressLanguage,\n  onKeyDownLanguage,\n}\n"]},"metadata":{},"sourceType":"module"}