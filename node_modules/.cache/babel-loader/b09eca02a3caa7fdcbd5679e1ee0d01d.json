{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/utils.tsx\";\nimport { each, isObject } from 'lodash';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst formatAsOptions = ({\n  label,\n  value,\n  key\n}) => {\n  const option = key ? /*#__PURE__*/_jsxDEV(\"option\", {\n    label: label,\n    value: value,\n    \"data-testid\": key,\n    children: label\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"option\", {\n    label: value,\n    value: value,\n    \"data-testid\": label,\n    children: value\n  }, label, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n  return option;\n};\n\nexport const parseOptions = ({\n  options,\n  id\n}) => {\n  const parsedOptions = [];\n\n  if (options instanceof Array) {\n    options.forEach(value => {\n      const label = id ? `${id}-${value}` : value;\n      parsedOptions.push({\n        label,\n        value\n      });\n    });\n  } else if (isObject(options)) {\n    each(options, (label, value) => {\n      const key = id ? `${id}-${value}` : value;\n      parsedOptions.push({\n        label,\n        value,\n        key\n      });\n    });\n  }\n\n  return parsedOptions;\n};\nexport const parseSelectOptions = props => {\n  return parseOptions(props).map(formatAsOptions);\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/utils.tsx"],"names":["each","isObject","React","formatAsOptions","label","value","key","option","parseOptions","options","id","parsedOptions","Array","forEach","push","parseSelectOptions","props","map"],"mappings":";AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,QAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAQA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAD,KAA2C;AACjE,QAAMC,MAAM,GAAGD,GAAG,gBAChB;AAAQ,IAAA,KAAK,EAAEF,KAAf;AAAgC,IAAA,KAAK,EAAEC,KAAvC;AAA8C,mBAAaC,GAA3D;AAAA,cACGF;AADH,KAA2BE,GAA3B;AAAA;AAAA;AAAA;AAAA,UADgB,gBAKhB;AAAQ,IAAA,KAAK,EAAED,KAAf;AAAkC,IAAA,KAAK,EAAEA,KAAzC;AAAgD,mBAAaD,KAA7D;AAAA,cACGC;AADH,KAA2BD,KAA3B;AAAA;AAAA;AAAA;AAAA,UALF;AAUA,SAAOG,MAAP;AACD,CAZD;;AAaA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuC;AACjE,QAAMC,aAAoC,GAAG,EAA7C;;AAEA,MAAIF,OAAO,YAAYG,KAAvB,EAA8B;AAC5BH,IAAAA,OAAO,CAACI,OAAR,CAAiBR,KAAD,IAAW;AACzB,YAAMD,KAAK,GAAGM,EAAE,GAAI,GAAEA,EAAG,IAAGL,KAAM,EAAlB,GAAsBA,KAAtC;AACAM,MAAAA,aAAa,CAACG,IAAd,CAAmB;AAAEV,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAnB;AACD,KAHD;AAID,GALD,MAKO,IAAIJ,QAAQ,CAACQ,OAAD,CAAZ,EAAuB;AAC5BT,IAAAA,IAAI,CAACS,OAAD,EAAU,CAACL,KAAD,EAAQC,KAAR,KAAkB;AAC9B,YAAMC,GAAG,GAAGI,EAAE,GAAI,GAAEA,EAAG,IAAGL,KAAM,EAAlB,GAAsBA,KAApC;AACAM,MAAAA,aAAa,CAACG,IAAd,CAAmB;AAAEV,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,OAAnB;AACD,KAHG,CAAJ;AAID;;AAED,SAAOK,aAAP;AACD,CAhBM;AAkBP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAA6B;AAC7D,SAAOR,YAAY,CAACQ,KAAD,CAAZ,CAAoBC,GAApB,CAAwBd,eAAxB,CAAP;AACD,CAFM","sourcesContent":["import { each, isObject } from 'lodash';\nimport React from 'react';\nimport { OptionTypeBase } from 'react-select';\n\nexport type ParseOptionProps = {\n  id?: string | number;\n  options?: string[] | Record<string, string | number>;\n};\n\nconst formatAsOptions = ({ label, value, key }: OptionTypeBase) => {\n  const option = key ? (\n    <option label={label} key={key} value={value} data-testid={key}>\n      {label}\n    </option>\n  ) : (\n    <option label={value} key={label} value={value} data-testid={label}>\n      {value}\n    </option>\n  );\n\n  return option;\n};\nexport const parseOptions = ({ options, id }: ParseOptionProps) => {\n  const parsedOptions: Array<OptionTypeBase> = [];\n\n  if (options instanceof Array) {\n    options.forEach((value) => {\n      const label = id ? `${id}-${value}` : value;\n      parsedOptions.push({ label, value });\n    });\n  } else if (isObject(options)) {\n    each(options, (label, value) => {\n      const key = id ? `${id}-${value}` : value;\n      parsedOptions.push({ label, value, key });\n    });\n  }\n\n  return parsedOptions;\n};\n\nexport const parseSelectOptions = (props: ParseOptionProps) => {\n  return parseOptions(props).map(formatAsOptions);\n};\n"]},"metadata":{},"sourceType":"module"}