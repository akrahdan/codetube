{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/Radio.tsx\";\nimport { noSelect, screenReaderOnly } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef } from 'react';\nimport { conditionalRadioInputStyles, conditionalRadioLabelStyles, radioInput, radioLabel, radioWrapper } from './styles/shared-system-props';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RadioWrapper = styled.div(noSelect, radioWrapper);\n_c = RadioWrapper;\nconst RadioLabel = styled.label(noSelect, radioLabel, conditionalRadioLabelStyles);\n_c2 = RadioLabel;\nconst RadioInput = styled.input(screenReaderOnly, radioInput, conditionalRadioInputStyles);\n_c3 = RadioInput;\n\nconst conditionalStyleState = (error, disabled) => {\n  return error ? 'error' : disabled ? 'disabled' : undefined;\n};\n\nexport const Radio = /*#__PURE__*/forwardRef(_c4 = ({\n  name,\n  value,\n  label,\n  checked,\n  className,\n  disabled,\n  htmlFor,\n  onChange,\n  required,\n  id,\n  error,\n  ...rest\n}, ref) => {\n  const inputId = id ? `${htmlFor}-${id}` : htmlFor;\n  const styleState = conditionalStyleState(error, disabled);\n  return /*#__PURE__*/_jsxDEV(RadioWrapper, {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(RadioInput, {\n      id: inputId,\n      name: name,\n      required: required,\n      type: \"radio\",\n      checked: checked,\n      disabled: disabled,\n      onChange: onChange,\n      ref: ref,\n      value: value,\n      variant: styleState,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(RadioLabel, {\n      htmlFor: htmlFor,\n      disabled: disabled,\n      variant: styleState,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n});\n_c5 = Radio;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"RadioWrapper\");\n$RefreshReg$(_c2, \"RadioLabel\");\n$RefreshReg$(_c3, \"RadioInput\");\n$RefreshReg$(_c4, \"Radio$forwardRef\");\n$RefreshReg$(_c5, \"Radio\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/Radio.tsx"],"names":["noSelect","screenReaderOnly","styled","React","forwardRef","conditionalRadioInputStyles","conditionalRadioLabelStyles","radioInput","radioLabel","radioWrapper","RadioWrapper","div","RadioLabel","label","RadioInput","input","conditionalStyleState","error","disabled","undefined","Radio","name","value","checked","className","htmlFor","onChange","required","id","rest","ref","inputId","styleState"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,gBAAnB,QAA2C,0BAA3C;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkE,OAAlE;AAEA,SACEC,2BADF,EAEEC,2BAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,YALF,QAMO,8BANP;;AA0BA,MAAMC,YAAY,GAAGR,MAAM,CAACS,GAAP,CAAWX,QAAX,EAAqBS,YAArB,CAArB;KAAMC,Y;AACN,MAAME,UAAU,GAAGV,MAAM,CAACW,KAAP,CACjBb,QADiB,EAEjBQ,UAFiB,EAGjBF,2BAHiB,CAAnB;MAAMM,U;AAKN,MAAME,UAAU,GAAGZ,MAAM,CAACa,KAAP,CACjBd,gBADiB,EAEjBM,UAFiB,EAGjBF,2BAHiB,CAAnB;MAAMS,U;;AAMN,MAAME,qBAAqB,GAAG,CAACC,KAAD,EAAkBC,QAAlB,KAAyC;AACrE,SAAOD,KAAK,GAAG,OAAH,GAAaC,QAAQ,GAAG,UAAH,GAAgBC,SAAjD;AACD,CAFD;;AAIA,OAAO,MAAMC,KAAK,gBAAGhB,UAAU,OAC7B,CACE;AACEiB,EAAAA,IADF;AAEEC,EAAAA,KAFF;AAGET,EAAAA,KAHF;AAIEU,EAAAA,OAJF;AAKEC,EAAAA,SALF;AAMEN,EAAAA,QANF;AAOEO,EAAAA,OAPF;AAQEC,EAAAA,QARF;AASEC,EAAAA,QATF;AAUEC,EAAAA,EAVF;AAWEX,EAAAA,KAXF;AAYE,KAAGY;AAZL,CADF,EAeEC,GAfF,KAgBK;AACH,QAAMC,OAAO,GAAGH,EAAE,GAAI,GAAEH,OAAQ,IAAGG,EAAG,EAApB,GAAwBH,OAA1C;AACA,QAAMO,UAAU,GAAGhB,qBAAqB,CAACC,KAAD,EAAQC,QAAR,CAAxC;AAEA,sBACE,QAAC,YAAD;AAAc,IAAA,SAAS,EAAEM,SAAzB;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,EAAE,EAAEO,OADN;AAEE,MAAA,IAAI,EAAEV,IAFR;AAGE,MAAA,QAAQ,EAAEM,QAHZ;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,OAAO,EAAEJ,OALX;AAME,MAAA,QAAQ,EAAEL,QANZ;AAOE,MAAA,QAAQ,EAAEQ,QAPZ;AAQE,MAAA,GAAG,EAAEI,GARP;AASE,MAAA,KAAK,EAAER,KATT;AAUE,MAAA,OAAO,EAAEU,UAVX;AAAA,SAWMH;AAXN;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEJ,OAArB;AAA8B,MAAA,QAAQ,EAAEP,QAAxC;AAAkD,MAAA,OAAO,EAAEc,UAA3D;AAAA,gBACGnB;AADH;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAzC4B,CAAxB;MAAMO,K","sourcesContent":["import { noSelect, screenReaderOnly } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react';\n\nimport {\n  conditionalRadioInputStyles,\n  conditionalRadioLabelStyles,\n  radioInput,\n  radioLabel,\n  radioWrapper,\n} from './styles/shared-system-props';\n\nexport type RadioProps = InputHTMLAttributes<HTMLInputElement> & {\n  checked?: boolean;\n  disabled?: boolean;\n  htmlFor?: string;\n  id?: string;\n  label?: ReactNode;\n  name?: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  required?: boolean;\n  tabIndex?: number;\n  value?: string;\n  readOnly?: boolean;\n  error?: boolean;\n};\nexport interface RadioElementProps\n  extends RadioProps,\n    StyleProps<typeof conditionalRadioInputStyles> {}\n\nconst RadioWrapper = styled.div(noSelect, radioWrapper);\nconst RadioLabel = styled.label<RadioElementProps>(\n  noSelect,\n  radioLabel,\n  conditionalRadioLabelStyles\n);\nconst RadioInput = styled.input<RadioElementProps>(\n  screenReaderOnly,\n  radioInput,\n  conditionalRadioInputStyles\n);\n\nconst conditionalStyleState = (error?: boolean, disabled?: boolean) => {\n  return error ? 'error' : disabled ? 'disabled' : undefined;\n};\n\nexport const Radio = forwardRef<HTMLInputElement, RadioProps>(\n  (\n    {\n      name,\n      value,\n      label,\n      checked,\n      className,\n      disabled,\n      htmlFor,\n      onChange,\n      required,\n      id,\n      error,\n      ...rest\n    },\n    ref\n  ) => {\n    const inputId = id ? `${htmlFor}-${id}` : htmlFor;\n    const styleState = conditionalStyleState(error, disabled);\n\n    return (\n      <RadioWrapper className={className}>\n        <RadioInput\n          id={inputId}\n          name={name}\n          required={required}\n          type=\"radio\"\n          checked={checked}\n          disabled={disabled}\n          onChange={onChange}\n          ref={ref}\n          value={value}\n          variant={styleState}\n          {...rest}\n        />\n        <RadioLabel htmlFor={htmlFor} disabled={disabled} variant={styleState}>\n          {label}\n        </RadioLabel>\n      </RadioWrapper>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}