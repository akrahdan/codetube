{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      state.playing = true;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  set\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","buildClipProgress","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","visible","fullscreenState","NORMAL","clipProgress","buffering","playerSlice","name","reducers","play","state","action","pause","setPlaybackSpeed","payload","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","showUI","toggleFullscreen","FULLSCREEN","hideUI","setDuration","setTime","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","icon","key","Math","random","fade","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","player","set","actions","togglePlayPause","dispatch","getState","reducer"],"mappings":"AAAA,SAA2BA,WAA3B,QAA6D,kBAA7D;AAIA,SAASC,KAAT,QAAsB,4CAAtB;AACA,SACEC,gBADF,EAEEC,QAFF,EAGEC,eAHF,QAIO,sCAJP;AAKA,SAASC,iBAAT,QAAkC,yDAAlC;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcN,gBAAd,CAAnB;;AAEA,SAASO,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAO,CAAC,CAAC,CAACD,KAAK,CAACE,OAAN,CAAcD,IAAd,CAAV;AACD;;AAiCD,OAAO,MAAME,YAAyB,GAAG;AACvCC,EAAAA,OAAO,EAAE,KAD8B;AAEvCC,EAAAA,aAAa,EAAE,GAFwB;AAGvCC,EAAAA,UAAU,EAAE,IAH2B;AAIvCC,EAAAA,kBAAkB,EAAE,KAJmB;AAKvCC,EAAAA,MAAM,EAAE,GAL+B;AAMvCC,EAAAA,KAAK,EAAE,KANgC;AAOvCC,EAAAA,cAAc,EAAE,IAPuB;AAQvCC,EAAAA,eAAe,EAAEnB,gBAAgB,CAACoB,KARK;AASvCC,EAAAA,IAAI,EAAE,CATiC;AAUvCC,EAAAA,QAAQ,EAAE,CAV6B;AAWvCC,EAAAA,YAAY,EAAE,CAXyB;AAYvCC,EAAAA,aAAa,EAAE,CAZwB;AAavCC,EAAAA,OAAO,EAAE,IAb8B;AAcvCC,EAAAA,WAAW,EAAE,IAd0B;AAevCC,EAAAA,WAAW,EAAE,IAf0B;AAgBvCC,EAAAA,YAAY,EAAE,IAhByB;AAiBvCC,EAAAA,OAAO,EAAE,KAjB8B;AAkBvCC,EAAAA,eAAe,EAAE5B,eAAe,CAAC6B,MAlBM;AAmBvCC,EAAAA,YAAY,EAAE,CAnByB;AAoBvCC,EAAAA,SAAS,EAAE;AApB4B,CAAlC;AAuBP,OAAO,MAAMC,WAAW,GAAGpC,WAAW,CAAC;AACrCqC,EAAAA,IAAI,EAAE,QAD+B;AAErCxB,EAAAA,YAFqC;AAGrCyB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAwC;AAC5CD,MAAAA,KAAK,CAAC1B,OAAN,GAAgB,IAAhB;AACD,KAHO;AAKR4B,IAAAA,KAAK,EAAE,CAACF,KAAD,EAAQC,MAAR,KAAwC;AAC7CD,MAAAA,KAAK,CAAC1B,OAAN,GAAgB,KAAhB;AACD,KAPO;AAQR6B,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAA0C;AAC1DD,MAAAA,KAAK,CAACzB,aAAN,GAAsB0B,MAAM,CAACG,OAA7B;AACD,KAVO;AAYRC,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQC,MAAR,KAA0C;AACvDD,MAAAA,KAAK,CAACxB,UAAN,GAAmByB,MAAM,CAACG,OAA1B;AACD,KAdO;AAeRE,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAA2C;AAChED,MAAAA,KAAK,CAACvB,kBAAN,GAA2BwB,MAAM,CAACG,OAAlC;AACD,KAjBO;AAkBRG,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAQC,MAAR,KAA0C;AACnD,YAAMO,OAAO,GAAG/C,KAAK,CAACwC,MAAM,CAACG,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAMzB,KAAK,GAAG6B,OAAO,KAAK,CAA1B;AACAR,MAAAA,KAAK,CAACtB,MAAN,GAAe8B,OAAf;AACAR,MAAAA,KAAK,CAACrB,KAAN,GAAcA,KAAd;AACD,KAvBO;AAwBR8B,IAAAA,iBAAiB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAA0C;AAC3D,YAAMO,OAAO,GAAG/C,KAAK,CAACwC,MAAM,CAACG,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAMzB,KAAK,GAAG6B,OAAO,KAAK,CAA1B;AACAR,MAAAA,KAAK,CAACtB,MAAN,GAAe8B,OAAf;AACAR,MAAAA,KAAK,CAACrB,KAAN,GAAcA,KAAd;AACD,KA7BO;AA8BR+B,IAAAA,kBAAkB,EAAE,CAACV,KAAD,EAAQC,MAAR,KAA0C;AAC5D,UAAI,CAAChC,QAAQ,CAACH,UAAD,EAAamC,MAAM,CAACG,OAApB,CAAb,EAA2C;AACzC,cAAM,IAAIO,KAAJ,CACH,GAAEV,MAAM,CAACG,OAAQ,uBAAsBtC,UAAU,CAAC8C,IAAX,EAAkB,EADtD,CAAN;AAGD;;AACDZ,MAAAA,KAAK,CAACnB,eAAN,GAAwBoB,MAAM,CAACG,OAA/B;AACD,KArCO;AAuCRS,IAAAA,MAAM,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAwC;AAC9CD,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACD,KAzCO;AA2CRuB,IAAAA,gBAAgB,EAAE,CAACd,KAAD,EAAQC,MAAR,KAAwC;AACxDD,MAAAA,KAAK,CAACR,eAAN,GACEQ,KAAK,CAACR,eAAN,KAA0B5B,eAAe,CAACmD,UAA1C,GACInD,eAAe,CAAC6B,MADpB,GAEI7B,eAAe,CAACmD,UAHtB;AAID,KAhDO;AAkDRC,IAAAA,MAAM,EAAE,CAAChB,KAAD,EAAQC,MAAR,KAAwC;AAC9CD,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACD,KApDO;AAsDR0B,IAAAA,WAAW,EAAE,CAACjB,KAAD,EAAQC,MAAR,KAA0C;AACrDD,MAAAA,KAAK,CAAChB,QAAN,GAAiBiB,MAAM,CAACG,OAAxB;AACD,KAxDO;AAyDRc,IAAAA,OAAO,EAAE,CAAClB,KAAD,EAAQC,MAAR,KAA0C;AACjDD,MAAAA,KAAK,CAACjB,IAAN,GAAakB,MAAM,CAACG,OAApB;AACD,KA3DO;AA6DRe,IAAAA,eAAe,EAAE,CAACnB,KAAD,EAAQC,MAAR,KAA0C;AACzDD,MAAAA,KAAK,CAACf,YAAN,GAAqBgB,MAAM,CAACG,OAA5B;AACD,KA/DO;AAiERgB,IAAAA,KAAK,EAAE,CAACpB,KAAD,EAAQC,MAAR,KAA0C;AAC/CD,MAAAA,KAAK,CAACd,aAAN,GAAsBc,KAAK,CAACjB,IAA5B;AACAiB,MAAAA,KAAK,CAAChB,QAAN,GAAiBiB,MAAM,CAACG,OAAxB;AACD,KApEO;AAqERiB,IAAAA,cAAc,EAAE,CAACrB,KAAD,EAAQC,MAAR,KAAoD;AAClED,MAAAA,KAAK,CAACX,WAAN,GAAoB,IAAIiC,KAAJ,CAAU,WAAV,CAApB;AACAtB,MAAAA,KAAK,CAACV,YAAN,GAAqB,IAAIgC,KAAJ,CAAU,YAAV,CAArB;AACAtB,MAAAA,KAAK,CAACZ,WAAN,GAAoBa,MAAM,CAACG,OAA3B;AACD,KAzEO;AA2ERmB,IAAAA,SAAS,EAAE,CAACvB,KAAD,EAAQC,MAAR,KAAwC;AACjD,YAAM;AAAEX,QAAAA,YAAF;AAAgBF,QAAAA;AAAhB,UAAgCY,KAAtC;AAEAZ,MAAAA,WAAW,IAAIA,WAAW,CAACoC,aAAZ,CAA0BlC,YAA1B,CAAf;AACD,KA/EO;AAiFRmC,IAAAA,OAAO,EAAE,CAACzB,KAAD,EAAQC,MAAR,KAAwC;AAC/C,YAAM;AAAEZ,QAAAA,WAAF;AAAeD,QAAAA;AAAf,UAA+BY,KAArC;AAEAZ,MAAAA,WAAW,IAAIA,WAAW,CAACoC,aAAZ,CAA0BnC,WAA1B,CAAf;AACD,KArFO;AAuFRqC,IAAAA,IAAI,EAAE,CAAC1B,KAAD,EAAQC,MAAR,KAA0C;AAC9CD,MAAAA,KAAK,CAACd,aAAN,GAAsBe,MAAM,CAACG,OAAP,GAAiBJ,KAAK,CAAChB,QAA7C;AACD,KAzFO;AA2FR2C,IAAAA,UAAU,EAAE,CAAC3B,KAAD,EAAQC,MAAR,KAA2C;AACrDD,MAAAA,KAAK,CAACb,OAAN,GAAgBc,MAAM,CAACG,OAAvB;AACD,KA7FO;AA+FRwB,IAAAA,YAAY,EAAE,CAAC5B,KAAD,EAAQC,MAAR,KAA2C;AACvDD,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACG,OAAzB;AACD,KAjGO;AAoGRyB,IAAAA,eAAe,EAAE,CAAC7B,KAAD,EAAQC,MAAR,KAA0C;AACzDD,MAAAA,KAAK,CAACN,YAAN,GAAqB7B,iBAAiB,CAACmC,KAAK,CAACN,YAAP,EAAqBO,MAAM,CAACG,OAA5B,EAAqCJ,KAAK,CAAChB,QAA3C,CAAtC;AACD,KAtGO;AAwGR8C,IAAAA,aAAa,EAAE,CAAC9B,KAAD,EAAQC,MAAR,KAA0C;AACvD,YAAM8B,qBAAqB,GAAGhE,MAAM,CAACC,MAAP,CAAcJ,eAAd,CAA9B;;AAEA,UAAI,CAACK,QAAQ,CAAC8D,qBAAD,EAAwB9B,MAAM,CAACG,OAA/B,CAAb,EAAsD;AACpD,cAAM,IAAIO,KAAJ,CACH,GAAEV,MAAM,CAACG,OAAQ,uBAAsB2B,qBAAqB,CAACnB,IAAtB,EAA6B,EADjE,CAAN;AAGD;;AACDZ,MAAAA,KAAK,CAACR,eAAN,GAAwBS,MAAM,CAACG,OAA/B;AACD,KAjHO;AAmHR4B,IAAAA,WAAW,EAAE,CAAChC,KAAD,EAAQC,MAAR,KAAwC;AACnD,YAAM;AAAElB,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqBgB,KAA3B;AAEA,YAAMiC,WAAW,GAAGlD,IAAI,GAAG,EAA3B;AAEA,YAAMmD,OAAO,GAAGD,WAAW,GAAGjD,QAAd,GAAyBA,QAAzB,GAAoCiD,WAApD;AACAjC,MAAAA,KAAK,CAACd,aAAN,GAAsBgD,OAAtB;AACAlC,MAAAA,KAAK,CAACjB,IAAN,GAAamD,OAAb;AACAlC,MAAAA,KAAK,CAACb,OAAN,GAAgB;AACdgD,QAAAA,IAAI,EAAE,KADQ;AAEdC,QAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAFS;AAGdC,QAAAA,IAAI,EAAE;AAHQ,OAAhB;AAKD,KAhIO;AAkIRC,IAAAA,UAAU,EAAE,CAACxC,KAAD,EAAQC,MAAR,KAAwC;AAClD,YAAM;AAAElB,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqBgB,KAA3B;AAEA,YAAMyC,SAAS,GAAG,CAAlB;AACA,YAAMC,UAAU,GAAG3D,IAAI,GAAG,EAA1B;AAEA,YAAMmD,OAAO,GAAGQ,UAAU,GAAGD,SAAb,GAAyBA,SAAzB,GAAqCC,UAArD;AACA1C,MAAAA,KAAK,CAACd,aAAN,GAAsBgD,OAAtB;AACAlC,MAAAA,KAAK,CAACjB,IAAN,GAAamD,OAAb;AACAlC,MAAAA,KAAK,CAACb,OAAN,GAAgB;AACdgD,QAAAA,IAAI,EAAE,MADQ;AAEdC,QAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAFS;AAGdC,QAAAA,IAAI,EAAE;AAHQ,OAAhB;AAKD,KAhJO;AAkJRI,IAAAA,UAAU,EAAE,CAAC3C,KAAD,EAAQC,MAAR,KAAwC;AAClD,UAAID,KAAK,CAACrB,KAAV,EAAiB;AACf,cAAM6B,OAAO,GAAGR,KAAK,CAACpB,cAAN,IAAwBjB,QAAQ,CAACe,MAAjD;AACA,cAAMC,KAAK,GAAG6B,OAAO,KAAK,CAA1B;AACAR,QAAAA,KAAK,CAACtB,MAAN,GAAe8B,OAAf;AACAR,QAAAA,KAAK,CAACrB,KAAN,GAAcA,KAAd;AACD,OALD,MAKO;AACLqB,QAAAA,KAAK,CAACrB,KAAN,GAAc,IAAd;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAuBoB,KAAK,CAACtB,MAA7B;AACAsB,QAAAA,KAAK,CAACtB,MAAN,GAAe,CAAf;AACD;AACF;AA7JO;AAH2B,CAAD,CAA/B;AAoKP,OAAO,MAAMkE,YAAY,GAAI5C,KAAD,IAAsBA,KAAK,CAAC6C,MAAjD;AAEP,OAAO,MAAM;AACX9C,EAAAA,IADW;AAEXG,EAAAA,KAFW;AAGXC,EAAAA,gBAHW;AAIXE,EAAAA,aAJW;AAKXC,EAAAA,qBALW;AAMXC,EAAAA,SANW;AAOXE,EAAAA,iBAPW;AAQXkC,EAAAA,UARW;AASX1B,EAAAA,WATW;AAUXC,EAAAA,OAVW;AAWXE,EAAAA,KAXW;AAYXY,EAAAA,WAZW;AAaXQ,EAAAA,UAbW;AAcXf,EAAAA,OAdW;AAeXF,EAAAA,SAfW;AAgBXF,EAAAA,cAhBW;AAiBXR,EAAAA,MAjBW;AAkBXG,EAAAA,MAlBW;AAmBXN,EAAAA,kBAnBW;AAoBXI,EAAAA,gBApBW;AAqBXgB,EAAAA,aArBW;AAsBXJ,EAAAA,IAtBW;AAuBXP,EAAAA,eAvBW;AAwBXS,EAAAA,YAxBW;AAyBXC,EAAAA,eAzBW;AA0BXiB,EAAAA;AA1BW,IA2BTlD,WAAW,CAACmD,OA3BT;AA6BP,OAAO,MAAMC,eAAe,GAAG,MAAgB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrE,QAAMlD,KAAK,GAAGkD,QAAQ,GAAGL,MAAzB;;AACA,MAAI7C,KAAK,CAAC1B,OAAV,EAAmB;AACjB2E,IAAAA,QAAQ,CAAC/C,KAAK,EAAN,CAAR;AACD,GAFD,MAEO;AACL+C,IAAAA,QAAQ,CAAClD,IAAI,EAAL,CAAR;AACD;AACF,CAPM;AASP,eAAeH,WAAW,CAACuD,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: number;\n  buffering: boolean\n\n\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false\n\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<void>) => {\n      state.playing = true;\n    },\n\n    pause: (state, action: PayloadAction<void>) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload ;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n\n    setClipProgress: (state, action: PayloadAction<number>) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration) \n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  set\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}