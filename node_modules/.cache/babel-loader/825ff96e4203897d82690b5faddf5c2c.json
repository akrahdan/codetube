{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.tsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'unistore/react';\nimport * as actions from '../../actions';\nimport ReactResizeDetector from 'react-resize-detector';\nimport css from './container.css';\nimport { isIE } from '../../utilities';\nimport { FullscreenState } from '../../constants';\nimport { setFullscreen, isFullscreen, collapseFullscreen } from './fullscreen-helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst resize = container => (width, height) => {\n  const {\n    props: {\n      setContainerSize\n    }\n  } = container;\n  setContainerSize({\n    width,\n    height\n  });\n};\n\nexport class Container extends Component {\n  constructor(props) {\n    super(props);\n    this.resize = resize(this);\n  }\n\n  updateFullscreenState(fullscreenState) {\n    const container = this.content;\n    const videoElement = document.getElementById('video-element');\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement);\n    } else {\n      collapseFullscreen(videoElement);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState;\n    const nextFullscreenState = nextProps.fullscreenState;\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return;\n    }\n\n    this.updateFullscreenState(nextFullscreenState);\n    return nextProps;\n  }\n\n  render() {\n    let {\n      containerSize,\n      interactionMode,\n      playerSize,\n      refreshRate,\n      fullscreenState\n    } = this.props;\n    return [/*#__PURE__*/_jsxDEV(ReactResizeDetector, {\n      handleWidth: true,\n      handleHeight: true,\n      onResize: this.resize,\n      refreshMode: \"throttle\",\n      refreshRate: refreshRate || 15\n    }, 'resize detector', false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.container,\n      style: fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize\n      } : {},\n      ref: el => this.element = el,\n      \"interaction-mode\": interactionMode,\n      \"is-ie\": `${isIE()}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.content,\n        style: fullscreenState === FullscreenState.NORMAL ? { ...playerSize\n        } : {\n          width: '100%',\n          height: '100%'\n        },\n        ref: el => this.content = el,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, \"container\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)];\n  }\n\n}\nexport default connect(state => ({\n  containerSize: state.containerSize,\n  breakpoint: state.breakpoint,\n  interactionMode: state.interactionMode,\n  playerSize: state.playerSize,\n  fullscreenState: state.fullscreenState\n}), store => ({\n  setContainerSize: actions.setContainerSize\n}))(Container);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.tsx"],"names":["React","Component","connect","actions","ReactResizeDetector","css","isIE","FullscreenState","setFullscreen","isFullscreen","collapseFullscreen","resize","container","width","height","props","setContainerSize","Container","constructor","updateFullscreenState","fullscreenState","content","videoElement","document","getElementById","FULLSCREEN","componentWillReceiveProps","nextProps","currentFullscreenState","nextFullscreenState","render","containerSize","interactionMode","playerSize","refreshRate","el","element","NORMAL","children","state","breakpoint","store"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'unistore/react'\nimport * as actions from '../../actions'\nimport ReactResizeDetector from 'react-resize-detector'\nimport css from './container.css'\n\nimport { isIE } from '../../utilities'\nimport { FullscreenState } from '../../constants'\nimport { setFullscreen, isFullscreen, collapseFullscreen } from './fullscreen-helper'\n\nconst resize = container => (width, height) => {\n  const {\n    props: { setContainerSize },\n  } = container\n  setContainerSize({ width, height })\n}\n\nexport class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    this.resize = resize(this)\n  }\n\n  updateFullscreenState(fullscreenState) {\n    const container = this.content\n    const videoElement = document.getElementById('video-element')\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement)\n    } else {\n      collapseFullscreen(videoElement)\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState\n    const nextFullscreenState = nextProps.fullscreenState\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return\n    }\n\n    this.updateFullscreenState(nextFullscreenState)\n\n    return nextProps\n  }\n\n  render() {\n    let { containerSize, interactionMode, playerSize, refreshRate, fullscreenState } = this.props\n\n    return [\n      <ReactResizeDetector\n        key={'resize detector'}\n        handleWidth\n        handleHeight\n        onResize={this.resize}\n        refreshMode=\"throttle\"\n        refreshRate={refreshRate || 15}\n      />,\n      <div\n        key=\"container\"\n        className={css.container}\n        style={fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize } : {}}\n        ref={el => (this.element = el)}\n        interaction-mode={interactionMode}\n        is-ie={`${isIE()}`}\n      >\n        <div className={css.content} style={fullscreenState === FullscreenState.NORMAL ? { ...playerSize } : { width: '100%', height: '100%' }} ref={el => (this.content = el)}>\n          {this.props.children}\n        </div>\n      </div>,\n    ]\n  }\n}\n\nexport default connect(\n  state => ({\n    containerSize: state.containerSize,\n    breakpoint: state.breakpoint,\n    interactionMode: state.interactionMode,\n    playerSize: state.playerSize,\n    fullscreenState: state.fullscreenState,\n  }),\n  store => ({\n    setContainerSize: actions.setContainerSize,\n  })\n)(Container)"]},"metadata":{},"sourceType":"module"}