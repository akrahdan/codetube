{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import{Popover}from'../Popover';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Coachmark=function Coachmark(_ref){var children=_ref.children,shouldShow=_ref.shouldShow,activeElClassName=_ref.activeElClassName,_ref$delay=_ref.delay,delay=_ref$delay===void 0?500:_ref$delay,renderPopover=_ref.renderPopover,popoverProps=_ref.popoverProps;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var activeElRef=useRef(null);useEffect(function(){var timer;if(shouldShow){timer=setTimeout(function(){setIsOpen(shouldShow);},delay);}else{setIsOpen(shouldShow);}return function(){return clearTimeout(timer);};},[shouldShow,delay]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{ref:activeElRef,className:activeElClassName,children:children}),/*#__PURE__*/_jsx(Popover,_objectSpread(_objectSpread({},popoverProps),{},{targetRef:activeElRef,isOpen:isOpen,children:renderPopover()}))]});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/Coachmark/index.tsx"],"names":["React","useEffect","useRef","useState","Popover","Coachmark","children","shouldShow","activeElClassName","delay","renderPopover","popoverProps","isOpen","setIsOpen","activeElRef","timer","setTimeout","clearTimeout"],"mappings":"uTAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,CAEA,OAASC,OAAT,KAAsC,YAAtC,C,6IA0BA,MAAO,IAAMC,CAAAA,SAAmC,CAAG,QAAtCA,CAAAA,SAAsC,MAO7C,IANJC,CAAAA,QAMI,MANJA,QAMI,CALJC,UAKI,MALJA,UAKI,CAJJC,iBAII,MAJJA,iBAII,iBAHJC,KAGI,CAHJA,KAGI,qBAHI,GAGJ,YAFJC,aAEI,MAFJA,aAEI,CADJC,YACI,MADJA,YACI,eACwBR,QAAQ,CAAU,KAAV,CADhC,wCACGS,MADH,eACWC,SADX,eAGJ,GAAMC,CAAAA,WAAW,CAAGZ,MAAM,CAAiB,IAAjB,CAA1B,CAEAD,SAAS,CAAC,UAAM,CACd,GAAIc,CAAAA,KAAJ,CACA,GAAIR,UAAJ,CAAgB,CACdQ,KAAK,CAAGC,UAAU,CAAC,UAAM,CACvBH,SAAS,CAACN,UAAD,CAAT,CACD,CAFiB,CAEfE,KAFe,CAAlB,CAGD,CAJD,IAIO,CACLI,SAAS,CAACN,UAAD,CAAT,CACD,CAED,MAAO,kBAAMU,CAAAA,YAAY,CAACF,KAAD,CAAlB,EAAP,CACD,CAXQ,CAWN,CAACR,UAAD,CAAaE,KAAb,CAXM,CAAT,CAaA,mBACE,wCACE,YAAK,GAAG,CAAEK,WAAV,CAAuB,SAAS,CAAEN,iBAAlC,UACGF,QADH,EADF,cAIE,KAAC,OAAD,gCAAaK,YAAb,MAA2B,SAAS,CAAEG,WAAtC,CAAmD,MAAM,CAAEF,MAA3D,UACGF,aAAa,EADhB,GAJF,GADF,CAUD,CAnCM","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { Popover, PopoverProps } from '../Popover';\n\nexport type CoachmarkProps = {\n  /**\n   * Applied to the element to which the coachmark points.\n   */\n  activeElClassName?: string;\n  /**\n   * Amount of time (in ms) to delay rendering the coachmark.\n   * @default 500\n   */\n  delay?: number;\n  /**\n   * Whether the coachmark is rendered.\n   */\n  shouldShow: boolean;\n  /**\n   * Function that returns the contents of the coachmark.\n   */\n  renderPopover: (onDismiss?: () => void) => JSX.Element;\n  /**\n   * Props to be passed into the popover component.\n   */\n  popoverProps?: Partial<PopoverProps>;\n};\n\nexport const Coachmark: React.FC<CoachmarkProps> = ({\n  children,\n  shouldShow,\n  activeElClassName,\n  delay = 500,\n  renderPopover,\n  popoverProps,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const activeElRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (shouldShow) {\n      timer = setTimeout(() => {\n        setIsOpen(shouldShow);\n      }, delay);\n    } else {\n      setIsOpen(shouldShow);\n    }\n\n    return () => clearTimeout(timer);\n  }, [shouldShow, delay]);\n\n  return (\n    <>\n      <div ref={activeElRef} className={activeElClassName}>\n        {children}\n      </div>\n      <Popover {...popoverProps} targetRef={activeElRef} isOpen={isOpen}>\n        {renderPopover()}\n      </Popover>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}