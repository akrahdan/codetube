{"ast":null,"code":"import _slicedToArray from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var breakpoints=[[120,160],[240,427],[360,640],[480,854],[720,1280],[1080,1920]];export function findBreakpoint(_ref){var width=_ref.width,height=_ref.height;var i=breakpoints.length-1;var breakpoint={height:breakpoints[0][0],width:breakpoints[0][1]};while(i--){var _breakpoints$i=_slicedToArray(breakpoints[i],2),h=_breakpoints$i[0],w=_breakpoints$i[1];var _breakpoints=_slicedToArray(breakpoints[i+1],2),largerH=_breakpoints[0],largerW=_breakpoints[1];if(h<height&&w<width){breakpoint={height:largerH,width:largerW};break;}}return breakpoint;}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/utilities/find-breakpoint.js"],"names":["breakpoints","findBreakpoint","width","height","i","length","breakpoint","h","w","largerH","largerW"],"mappings":"uKAAA,GAAMA,CAAAA,WAAW,CAAG,CAAC,CAAC,GAAD,CAAM,GAAN,CAAD,CAAa,CAAC,GAAD,CAAM,GAAN,CAAb,CAAyB,CAAC,GAAD,CAAM,GAAN,CAAzB,CAAqC,CAAC,GAAD,CAAM,GAAN,CAArC,CAAiD,CAAC,GAAD,CAAM,IAAN,CAAjD,CAA8D,CAAC,IAAD,CAAO,IAAP,CAA9D,CAApB,CAEA,MAAO,SAASC,CAAAA,cAAT,MAA2C,IAAjBC,CAAAA,KAAiB,MAAjBA,KAAiB,CAAVC,MAAU,MAAVA,MAAU,CAChD,GAAIC,CAAAA,CAAC,CAAGJ,WAAW,CAACK,MAAZ,CAAqB,CAA7B,CACA,GAAIC,CAAAA,UAAU,CAAG,CAAEH,MAAM,CAAEH,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAV,CAA6BE,KAAK,CAAEF,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAApC,CAAjB,CAEA,MAAOI,CAAC,EAAR,CAAY,mCACGJ,WAAW,CAACI,CAAD,CADd,IACLG,CADK,mBACFC,CADE,mDAEeR,WAAW,CAACI,CAAC,CAAG,CAAL,CAF1B,IAELK,OAFK,iBAEIC,OAFJ,iBAIV,GAAIH,CAAC,CAAGJ,MAAJ,EAAcK,CAAC,CAAGN,KAAtB,CAA6B,CAC3BI,UAAU,CAAG,CAAEH,MAAM,CAAEM,OAAV,CAAmBP,KAAK,CAAEQ,OAA1B,CAAb,CACA,MACD,CACF,CACD,MAAOJ,CAAAA,UAAP,CACD","sourcesContent":["const breakpoints = [[120, 160], [240, 427], [360, 640], [480, 854], [720, 1280], [1080, 1920]]\n\nexport function findBreakpoint({ width, height }) {\n  let i = breakpoints.length - 1\n  let breakpoint = { height: breakpoints[0][0], width: breakpoints[0][1] }\n\n  while (i--) {\n    let [h, w] = breakpoints[i]\n    let [largerH, largerW] = breakpoints[i + 1]\n\n    if (h < height && w < width) {\n      breakpoint = { height: largerH, width: largerW }\n      break\n    }\n  }\n  return breakpoint\n}\n"]},"metadata":{},"sourceType":"module"}