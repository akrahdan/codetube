{"ast":null,"code":"import{cfdata}from'libs/cfdata';/**\n * @deprecated Use Redux instead!\n * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n * mostly around storing _never-changing_ global API configurations and authentication keys.\n * But for the most part you should really be using Redux for shared data.\n * Talk to Web Platform if you want to use this. :)\n */export var userAttributes={/**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */isAdmin:function isAdmin(){return this._hasRole('admin');},/**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */isAdvisor:function isAdvisor(){return this._hasRole('advisor')||this._hasRole('advisor_candidate');},/**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */isCustomerService:function isCustomerService(){return this._hasRole('customer_service');},/**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */isAuthor:function isAuthor(){return this._hasRole('author');},_hasRole:function _hasRole(role){var roles=this.get('roles')||[];return roles.indexOf(role)>=0;},isPro:function isPro(){return this.get('pro',false);},/**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */authenticationToken:function authenticationToken(){var user=this.isAnon()?cfdata['anonymous_user']:cfdata['current_user'];return(user===null||user===void 0?void 0:user.authentication_token)||'';}};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/userAttributes.ts"],"names":["cfdata","userAttributes","isAdmin","_hasRole","isAdvisor","isCustomerService","isAuthor","role","roles","get","indexOf","isPro","authenticationToken","user","isAnon","authentication_token"],"mappings":"AAAA,OAASA,MAAT,KAAuB,aAAvB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,CAC5B;AACF;AACA;AACA;AACA;AACA;AACA,KACEC,OAR4B,mBAQlB,CACR,MAAO,MAAKC,QAAL,CAAc,OAAd,CAAP,CACD,CAV2B,CAY5B;AACF;AACA;AACA;AACA;AACA;AACA,KACEC,SAnB4B,qBAmBhB,CACV,MAAO,MAAKD,QAAL,CAAc,SAAd,GAA4B,KAAKA,QAAL,CAAc,mBAAd,CAAnC,CACD,CArB2B,CAuB5B;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,iBA9B4B,6BA8BR,CAClB,MAAO,MAAKF,QAAL,CAAc,kBAAd,CAAP,CACD,CAhC2B,CAkC5B;AACF;AACA;AACA;AACA;AACA;AACA,KACEG,QAzC4B,oBAyCjB,CACT,MAAO,MAAKH,QAAL,CAAc,QAAd,CAAP,CACD,CA3C2B,CA6C5BA,QA7C4B,mBA6CnBI,IA7CmB,CA6CL,CACrB,GAAMC,CAAAA,KAAK,CAAG,KAAKC,GAAL,CAAS,OAAT,GAAqB,EAAnC,CACA,MAAOD,CAAAA,KAAK,CAACE,OAAN,CAAcH,IAAd,GAAuB,CAA9B,CACD,CAhD2B,CAmD5BI,KAnD4B,iBAmDpB,CACN,MAAO,MAAKF,GAAL,CAAS,KAAT,CAAgB,KAAhB,CAAP,CACD,CArD2B,CA0D5B;AACF;AACA;AACA;AACA;AACA;AACA,KACEG,mBAjE4B,+BAiEN,CACpB,GAAMC,CAAAA,IAAI,CAAG,KAAKC,MAAL,GACTd,MAAM,CAAC,gBAAD,CADG,CAETA,MAAM,CAAC,cAAD,CAFV,CAGA,MAAO,CAAAa,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEE,oBAAN,GAA8B,EAArC,CACD,CAtE2B,CAAvB","sourcesContent":["import { cfdata } from 'libs/cfdata';\nimport { RawCurrentUser } from 'typings/user';\n\n/**\n * @deprecated Use Redux instead!\n * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n * mostly around storing _never-changing_ global API configurations and authentication keys.\n * But for the most part you should really be using Redux for shared data.\n * Talk to Web Platform if you want to use this. :)\n */\nexport const userAttributes = {\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdmin() {\n    return this._hasRole('admin');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdvisor() {\n    return this._hasRole('advisor') || this._hasRole('advisor_candidate');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isCustomerService() {\n    return this._hasRole('customer_service');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAuthor() {\n    return this._hasRole('author');\n  },\n\n  _hasRole(role: string) {\n    const roles = this.get('roles') || [];\n    return roles.indexOf(role) >= 0;\n  },\n\n\n  isPro() {\n    return this.get('pro', false);\n  },\n\n \n \n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  authenticationToken() {\n    const user = this.isAnon()\n      ? cfdata['anonymous_user']\n      : cfdata['current_user'];\n    return user?.authentication_token || '';\n  }\n}"]},"metadata":{},"sourceType":"module"}