{"ast":null,"code":"export const isAppHeaderItemWithHref = item => !!item.href;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/AppHeader/AppHeaderElements/types.tsx"],"names":["isAppHeaderItemWithHref","item","href"],"mappings":"AA0EA,OAAO,MAAMA,uBAAuB,GAClCC,IADqC,IAEH,CAAC,CAAEA,IAAD,CAAgCC,IAF/D","sourcesContent":["import { GamutIconProps } from '@codecademy/gamut-icons';\nimport { ReactNode } from 'react';\n\nexport type AppHeaderItem =\n  | AppHeaderItemWithHref\n  | AppHeaderSimpleDropdownItem\n  | AppHeaderProfileDropdownItem\n  | AppHeaderRenderElementItem;\n\nexport type AppHeaderItemWithHref =\n  | AppHeaderLogoItem\n  | AppHeaderLinkItem\n  | AppHeaderTextButtonItem\n  | AppHeaderFillButtonItem;\n\ntype AppHeaderBaseItem<Type extends string> = {\n  dataTestId?: string;\n  id: string;\n  redirect?: boolean;\n  type: Type;\n};\n\ntype AppHeaderBaseHrefItem<Type extends string> = AppHeaderBaseItem<Type> & {\n  href: string;\n  trackingTarget: string;\n};\n\nexport type AppHeaderLogoItem = AppHeaderBaseHrefItem<'logo'> & {\n  pro: boolean;\n};\n\nexport type AppHeaderLinkItem = AppHeaderBaseHrefItem<'link'> & {\n  icon?: React.ComponentType<GamutIconProps>;\n  newTab?: boolean;\n  text: string;\n  topSeparator?: boolean;\n};\n\nexport type AppHeaderTextButtonItem = AppHeaderBaseHrefItem<'text-button'> & {\n  text: string;\n};\n\nexport type AppHeaderFillButtonItem = AppHeaderBaseHrefItem<'fill-button'> & {\n  text: string;\n};\n\nexport type AppHeaderDropdownItem =\n  | AppHeaderSimpleDropdownItem\n  | AppHeaderProfileDropdownItem;\n\nexport type AppHeaderSimpleDropdownItem = AppHeaderBaseItem<'dropdown'> & {\n  icon?: React.ComponentType<GamutIconProps>;\n  popover: AppHeaderLinkItem[];\n  text: string;\n  trackingTarget: string;\n};\n\nexport type AppHeaderProfileDropdownItem = AppHeaderBaseItem<'profile-dropdown'> & {\n  avatar: string;\n  userDisplayName: string;\n  popover: AppHeaderLinkItem[][];\n  text: string;\n  trackingTarget: string;\n};\n\nexport type AppHeaderRenderElementItem = AppHeaderBaseItem<'render-element'> & {\n  renderElement: () => ReactNode;\n};\n\nexport type AppHeaderClickHandler<ItemType = AppHeaderItem> = (\n  event: React.MouseEvent,\n  item: ItemType\n) => void;\n\nexport const isAppHeaderItemWithHref = (\n  item: AppHeaderItem\n): item is AppHeaderItemWithHref => !!(item as AppHeaderItemWithHref).href;\n"]},"metadata":{},"sourceType":"module"}