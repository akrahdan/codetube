{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport cookie from \"react-cookies\";\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem('token');\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [\"LoginRequest\", \"SignupRequest\", \"Logout\", \"User\", \"UserResponse\"],\n  endpoints: build => ({\n    login: build.mutation({\n      query: body => ({\n        url: \"auth/login/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    signup: build.mutation({\n      query: body => ({\n        url: \"auth/signup/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    logout: build.mutation({\n      query: body => ({\n        url: \"rest-auth/logout/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    facebookLogin: build.mutation({\n      query: () => ({\n        url: \"auth/facebook/\",\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    googleLogin: build.mutation({\n      query: () => ({\n        url: \"auth/google/\",\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    googleLoginUrl: build.mutation({\n      query: () => ({\n        url: \"auth/google/url\",\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    facebookLoginUrl: build.mutation({\n      query: () => ({\n        url: \"auth/facebook/url\",\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    getCurrentUser: build.query({\n      query: () => ({\n        url: \"rest-auth/user/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    updateProfile: build.mutation({\n      query: body => ({\n        url: \"auth/update_profile/\",\n        method: \"PUT\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateAvatar: build.mutation({\n      query: body => ({\n        url: \"auth/update_avatar/\",\n        method: \"PUT\",\n        body,\n        responseHandler: response => response.json()\n      })\n    })\n  })\n});\nexport const {\n  getCurrentUser\n} = authApi.endpoints;\nexport const {\n  useLoginMutation,\n  useSignupMutation,\n  useLogoutMutation,\n  useGetCurrentUserQuery,\n  useFacebookLoginMutation,\n  useGoogleLoginMutation,\n  useFacebookLoginUrlMutation,\n  useGoogleLoginUrlMutation\n} = authApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/auth.ts"],"names":["createApi","fetchBaseQuery","cookie","authApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","login","mutation","query","body","url","method","responseHandler","response","json","signup","logout","facebookLogin","googleLogin","googleLoginUrl","facebookLoginUrl","getCurrentUser","updateProfile","updateAvatar","useLoginMutation","useSignupMutation","useLogoutMutation","useGetCurrentUserQuery","useFacebookLoginMutation","useGoogleLoginMutation","useFacebookLoginUrlMutation","useGoogleLoginUrlMutation"],"mappings":"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","sourcesContent":["\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\nimport internal from \"stream\";\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n  csrfmiddlewaretoken:string;\n}\n\nexport interface UserRequest {\n  email: string;\n  first_name: string;\n  last_name: string;\n  avatar: string;\n  csrfmiddlewaretoken:string;\n}\n\nexport interface SignupRequest {\n  email: string;\n  username: string;\n  password1: string;\n  password2: string;\n  csrfmiddlewaretoken:string;\n}\n\nexport interface Token {\n  key: string;\n}\n\nexport interface User {\n  pk:number;\n  email: string;\n  username:string;\n  first_name:string;\n  last_name:string;\n  \n}\n\nexport interface UserResponse {\n  user: User,\n  token: string\n}\n\nexport interface Logout {\n \n  csrfmiddlewaretoken:string;\n}\n\nexport interface LogoutResponse {\n  detail: string;\n}\n\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n      \n      \n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n        \n      }\n      const token = (getState() as RootState).auth.token || localStorage.getItem('token');\n      if(token) {\n        headers.set(\"Authorization\", `Token ${token}`)\n      }\n      \n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"LoginRequest\", \"SignupRequest\", \"Logout\", \"User\", \"UserResponse\"],\n  endpoints: (build) => ({\n    login: build.mutation<UserResponse, Partial<LoginRequest>>({\n      query: (body) => ({\n        url: \"auth/login/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    signup: build.mutation<UserResponse, Partial<SignupRequest>>({\n      query: (body) => ({\n        url: \"auth/signup/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    logout: build.mutation<LogoutResponse, Partial<Logout>>({\n      query: (body) => ({\n        url: \"rest-auth/logout/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    facebookLogin: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/facebook/\",\n        method: \"POST\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    googleLogin: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/google/\",\n        method: \"POST\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    googleLoginUrl: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/google/url\",\n        method: \"POST\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n\n    facebookLoginUrl: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/facebook/url\",\n        method: \"POST\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    getCurrentUser: build.query<User, void>({\n      query: () => ({\n        url: \"rest-auth/user/\",\n        method: \"GET\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    updateProfile: build.mutation<UserResponse, Partial<UserRequest>>({\n      query: (body) => ({\n        url: \"auth/update_profile/\",\n        method: \"PUT\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    updateAvatar: build.mutation<UserResponse, Partial<UserRequest>>({\n      query: (body) => ({\n        url: \"auth/update_avatar/\",\n        method: \"PUT\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n  }),\n});\n\nexport const { getCurrentUser } = authApi.endpoints;\n\nexport const { useLoginMutation, useSignupMutation, useLogoutMutation, useGetCurrentUserQuery, \n  useFacebookLoginMutation, useGoogleLoginMutation, useFacebookLoginUrlMutation, useGoogleLoginUrlMutation  } = authApi;\n"]},"metadata":{},"sourceType":"module"}