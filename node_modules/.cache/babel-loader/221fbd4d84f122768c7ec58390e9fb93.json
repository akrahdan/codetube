{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState } from \"portal/scenes/CoursePlayer/constants\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      state.playing = true;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n\n      state.muted = true;\n      state.previousVolume = state.volume;\n      state.volume = 0;\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode\n} = playerSlice.actions;\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","visible","fullscreenState","playerSlice","name","reducers","play","state","action","pause","setPlaybackSpeed","payload","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","showUI","hideUI","setDuration","setTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","fastForward","forwardTime","newTime","icon","key","Math","random","fade","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","player","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState\n} from \"portal/scenes/CoursePlayer/constants\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<void>) => {\n      state.playing = true;\n    },\n\n    pause: (state, action: PayloadAction<void>) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    \n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n      state.muted = true;\n      state.previousVolume = state.volume;\n      state.volume = 0;\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}