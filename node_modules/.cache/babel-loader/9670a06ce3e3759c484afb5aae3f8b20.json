{"ast":null,"code":"import * as sharedRouteActions from './sharedRouteActions';\nexport const getRouteMetaForLocation = (routesMeta, locationType) => {\n  const route = (() => {\n    switch (statusCode) {\n      case 404:\n        return routesMeta[`${sharedRouteActions.error404}`];\n\n      case 500:\n        return routesMeta[`${sharedRouteActions.error500}`];\n    }\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/location/routing.tsx"],"names":["sharedRouteActions","getRouteMetaForLocation","routesMeta","locationType","route","statusCode","error404","error500","Error"],"mappings":"AAEA,OAAO,KAAKA,kBAAZ,MAAoC,sBAApC;AAgBA,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,UADqC,EAErCC,YAFqC,KAIlC;AACH,QAAMC,KAAK,GAAG,CAAC,MAAM;AACnB,YAAQC,UAAR;AACE,WAAK,GAAL;AACE,eAAOH,UAAU,CAAE,GAAEF,kBAAkB,CAACM,QAAS,EAAhC,CAAjB;;AAEF,WAAK,GAAL;AACE,eAAOJ,UAAU,CAAE,GAAEF,kBAAkB,CAACO,QAAS,EAAhC,CAAjB;AALJ;;AAQA,WAAOL,UAAU,CAACC,YAAD,CAAjB;AACD,GAVa,GAAd;;AAYA,MAAI,CAACC,KAAL,EAAY;AACV,UAAM,IAAII,KAAJ,CAAW,wCAAuCL,YAAa,IAA/D,CAAN;AACD;;AAED,SAAOC,KAAP;AACD,CAtBM","sourcesContent":["import React from 'react';\n\nimport * as sharedRouteActions from './sharedRouteActions';\n\nexport type MetaScene = {\n  portalData: unknown;\n};\n\nexport type RouteMeta = {\n  scene: React.ComponentType<MetaScene & any>;\n\n  /**\n   * The page_name to use for visit tracking events\n   * Specify undefined if the scene will handle visit tracking\n   */\n  pageName: string | undefined;\n};\n\nexport const getRouteMetaForLocation = (\n  routesMeta: Record<string, RouteMeta>,\n  locationType: string,\n   \n) => {\n  const route = (() => {\n    switch (statusCode) {\n      case 404:\n        return routesMeta[`${sharedRouteActions.error404}`];\n\n      case 500:\n        return routesMeta[`${sharedRouteActions.error500}`];\n    }\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};\n"]},"metadata":{},"sourceType":"module"}