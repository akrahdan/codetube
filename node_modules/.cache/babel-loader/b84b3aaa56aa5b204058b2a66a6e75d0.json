{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/captions/captions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { debounce } from '../utilities';\nimport css from './captions.module.css';\n/*\n  Available cue properties (at least in Chrome):\n  \n  align: \"center\"\n  endTime: 4.3\n  id: \"2\"\n  line: \"auto\"\n  onenter: null\n  onexit: null\n  pauseOnExit: false\n  position: \"auto\"\n  size: 100\n  snapToLines: true\n  startTime: 2.5\n  text: \"All of it is bad\"\n  track: TextTrack {kind: \"captions\", label: \"bosanski\", language: \"bs\", id: \"\", mode: \"hidden\", …}\n  vertical: \"\"\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction calculateLetterSpacing(fontSize) {\n  if (fontSize < 14) return '0.02em';\n  if (fontSize < 18) return '0.015em';\n  if (fontSize < 24) return '0.01em';\n  if (fontSize < 30) return '0.005em';\n  return '-0.01em';\n}\n\nexport const Captions = ({\n  visible: uiVisible,\n  closedCaptioningEnabled,\n  closedCaptioningCues\n}) => {\n  _s();\n\n  const captionsContainer = useRef(null);\n  const [captionsFontSize, setCaptionsFontSize] = useState(0);\n  const [captionsLetterSpacing, setCaptionsLetterSpacing] = useState('normal');\n  const cnames = classnames(css.captions, {\n    [css.adjust]: !uiVisible\n  });\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      var _captionsContainer$cu;\n\n      const fontSize = Math.max(((_captionsContainer$cu = captionsContainer.current) === null || _captionsContainer$cu === void 0 ? void 0 : _captionsContainer$cu.clientWidth) / 52 || 0, 14); // magic!\n\n      const letterSpacing = calculateLetterSpacing(fontSize);\n      setCaptionsFontSize(fontSize);\n      setCaptionsLetterSpacing(letterSpacing);\n    }, 100);\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  if (!closedCaptioningEnabled) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: captionsContainer,\n    className: cnames // aria-live=\"polite\" aria-atomic=\"true\" aria-relevant=\"additions\" //TODO: maybe only use this for assistive/alternate text, doesn't make sense to read the captions out loud\n    ,\n    children: closedCaptioningCues && Object.values(closedCaptioningCues).map(cue => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.cue,\n      style: {\n        fontSize: `${captionsFontSize}px`,\n        letterSpacing: captionsLetterSpacing\n      },\n      children: cue.text\n    }, cue.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Captions, \"muGBsvGj0KBQeKtpibnGWDE7OZI=\");\n\n_c = Captions;\nexport default Captions; // export default connect(\n//   state => ({\n//     visible: state.visible,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     closedCaptioningCues: state.closedCaptioningCues,\n//   }),\n//   store => {}\n// )(Captions)\n\nvar _c;\n\n$RefreshReg$(_c, \"Captions\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/captions/captions.js"],"names":["React","useRef","useEffect","useState","classnames","debounce","css","calculateLetterSpacing","fontSize","Captions","visible","uiVisible","closedCaptioningEnabled","closedCaptioningCues","captionsContainer","captionsFontSize","setCaptionsFontSize","captionsLetterSpacing","setCaptionsLetterSpacing","cnames","captions","adjust","handleResize","Math","max","current","clientWidth","letterSpacing","window","addEventListener","removeEventListener","Object","values","map","cue","text","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AACxC,MAAGA,QAAQ,GAAG,EAAd,EAAkB,OAAO,QAAP;AAClB,MAAGA,QAAQ,GAAG,EAAd,EAAkB,OAAO,SAAP;AAClB,MAAGA,QAAQ,GAAG,EAAd,EAAkB,OAAO,QAAP;AAClB,MAAGA,QAAQ,GAAG,EAAd,EAAkB,OAAO,SAAP;AAClB,SAAO,SAAP;AACD;;AAED,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAO,EAAEC,SAAX;AAAsBC,EAAAA,uBAAtB;AAA+CC,EAAAA;AAA/C,CAAD,KAA2E;AAAA;;AACjG,QAAMC,iBAAiB,GAAGb,MAAM,CAAC,IAAD,CAAhC;AACA,QAAM,CAACc,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACc,qBAAD,EAAwBC,wBAAxB,IAAoDf,QAAQ,CAAC,QAAD,CAAlE;AAEA,QAAMgB,MAAM,GAAGf,UAAU,CAACE,GAAG,CAACc,QAAL,EAAe;AAAE,KAACd,GAAG,CAACe,MAAL,GAAc,CAACV;AAAjB,GAAf,CAAzB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAGjB,QAAQ,CAAC,MAAM;AAAA;;AAClC,YAAMG,QAAQ,GAAGe,IAAI,CAACC,GAAL,CAAS,0BAAAV,iBAAiB,CAACW,OAAlB,gFAA2BC,WAA3B,IAAyC,EAAzC,IAA+C,CAAxD,EAA2D,EAA3D,CAAjB,CADkC,CAC8C;;AAChF,YAAMC,aAAa,GAAGpB,sBAAsB,CAACC,QAAD,CAA5C;AACAQ,MAAAA,mBAAmB,CAACR,QAAD,CAAnB;AACAU,MAAAA,wBAAwB,CAACS,aAAD,CAAxB;AACD,KAL4B,EAK1B,GAL0B,CAA7B;AAOAL,IAAAA,YAAY;AAEZM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAMM,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAb;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,MAAI,CAACV,uBAAL,EAA8B,OAAO,IAAP;AAE9B,sBACE;AACE,IAAA,GAAG,EAAEE,iBADP;AAEE,IAAA,SAAS,EAAEK,MAFb,CAGE;AAHF;AAAA,cAKGN,oBAAoB,IAAIkB,MAAM,CAACC,MAAP,CAAcnB,oBAAd,EAAoCoB,GAApC,CAAwCC,GAAG,iBACpE;AAAK,MAAA,SAAS,EAAE5B,GAAG,CAAC4B,GAApB;AAAsC,MAAA,KAAK,EAAE;AAAE1B,QAAAA,QAAQ,EAAG,GAAEO,gBAAiB,IAAhC;AAAqCY,QAAAA,aAAa,EAAEV;AAApD,OAA7C;AAAA,gBACGiB,GAAG,CAACC;AADP,OAA8BD,GAAG,CAACE,EAAlC;AAAA;AAAA;AAAA;AAAA,YADyB;AAL3B;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CApCM;;GAAM3B,Q;;KAAAA,Q;AAqCb,eAAeA,QAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\n\nimport classnames from 'classnames'\nimport { debounce } from '../utilities'\n\nimport css from './captions.module.css'\n\n/*\n  Available cue properties (at least in Chrome):\n  \n  align: \"center\"\n  endTime: 4.3\n  id: \"2\"\n  line: \"auto\"\n  onenter: null\n  onexit: null\n  pauseOnExit: false\n  position: \"auto\"\n  size: 100\n  snapToLines: true\n  startTime: 2.5\n  text: \"All of it is bad\"\n  track: TextTrack {kind: \"captions\", label: \"bosanski\", language: \"bs\", id: \"\", mode: \"hidden\", …}\n  vertical: \"\"\n*/\n\nfunction calculateLetterSpacing(fontSize) {\n  if(fontSize < 14) return '0.02em'\n  if(fontSize < 18) return '0.015em'\n  if(fontSize < 24) return '0.01em'\n  if(fontSize < 30) return '0.005em'\n  return '-0.01em'\n}\n\nexport const Captions = ({ visible: uiVisible, closedCaptioningEnabled, closedCaptioningCues }) => {\n  const captionsContainer = useRef(null)\n  const [captionsFontSize, setCaptionsFontSize] = useState(0)\n  const [captionsLetterSpacing, setCaptionsLetterSpacing] = useState('normal')\n\n  const cnames = classnames(css.captions, { [css.adjust]: !uiVisible })\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      const fontSize = Math.max(captionsContainer.current?.clientWidth / 52 || 0, 14) // magic!\n      const letterSpacing = calculateLetterSpacing(fontSize)\n      setCaptionsFontSize(fontSize)\n      setCaptionsLetterSpacing(letterSpacing)\n    }, 100)\n\n    handleResize()\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  if (!closedCaptioningEnabled) return null\n\n  return (\n    <div\n      ref={captionsContainer}\n      className={cnames}\n      // aria-live=\"polite\" aria-atomic=\"true\" aria-relevant=\"additions\" //TODO: maybe only use this for assistive/alternate text, doesn't make sense to read the captions out loud\n    >\n      {closedCaptioningCues && Object.values(closedCaptioningCues).map(cue =>\n      <div className={css.cue} key={cue.id} style={{ fontSize: `${captionsFontSize}px`, letterSpacing: captionsLetterSpacing }}>\n        {cue.text}\n      </div>\n    )}\n    </div>\n  )\n}\nexport default Captions;\n// export default connect(\n//   state => ({\n//     visible: state.visible,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     closedCaptioningCues: state.closedCaptioningCues,\n//   }),\n//   store => {}\n// )(Captions)\n"]},"metadata":{},"sourceType":"module"}