{"ast":null,"code":"import loadScript from 'load-script'; // Util function to load an external SDK\n// or return the SDK if it is already loaded\n\nconst resolves = {};\nexport function getSDK(url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = loadScript) {\n  if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {\n    return Promise.resolve(window[sdkGlobal]);\n  }\n\n  return new Promise((resolve, reject) => {\n    // If we are already loading the SDK, add the resolve\n    // function to the existing array of resolve functions\n    if (resolves[url]) {\n      resolves[url].push(resolve);\n      return;\n    }\n\n    resolves[url] = [resolve];\n\n    const onLoaded = sdk => {\n      // When loaded, resolve all pending promises\n      resolves[url].forEach(resolve => resolve(sdk));\n    };\n\n    if (sdkReady) {\n      const previousOnReady = window[sdkReady];\n\n      window[sdkReady] = function () {\n        if (previousOnReady) previousOnReady();\n        onLoaded(window[sdkGlobal]);\n      };\n    }\n\n    fetchScript(url, err => {\n      if (err) reject(err);\n\n      if (!sdkReady) {\n        onLoaded(window[sdkGlobal]);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/utilities/get-sdk.js"],"names":["loadScript","resolves","getSDK","url","sdkGlobal","sdkReady","isLoaded","fetchScript","window","Promise","resolve","reject","push","onLoaded","sdk","forEach","previousOnReady","err"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,OAAO,SAASC,MAAT,CAAiBC,GAAjB,EAAsBC,SAAtB,EAAiCC,QAAQ,GAAG,IAA5C,EAAkDC,QAAQ,GAAG,MAAM,IAAnE,EAAyEC,WAAW,GAAGP,UAAvF,EAAmG;AACxG,MAAIQ,MAAM,CAACJ,SAAD,CAAN,IAAqBE,QAAQ,CAACE,MAAM,CAACJ,SAAD,CAAP,CAAjC,EAAsD;AACpD,WAAOK,OAAO,CAACC,OAAR,CAAgBF,MAAM,CAACJ,SAAD,CAAtB,CAAP;AACD;;AACD,SAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA;AACA,QAAIV,QAAQ,CAACE,GAAD,CAAZ,EAAmB;AACjBF,MAAAA,QAAQ,CAACE,GAAD,CAAR,CAAcS,IAAd,CAAmBF,OAAnB;AACA;AACD;;AACDT,IAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgB,CAACO,OAAD,CAAhB;;AACA,UAAMG,QAAQ,GAAGC,GAAG,IAAI;AACtB;AACAb,MAAAA,QAAQ,CAACE,GAAD,CAAR,CAAcY,OAAd,CAAsBL,OAAO,IAAIA,OAAO,CAACI,GAAD,CAAxC;AACD,KAHD;;AAIA,QAAIT,QAAJ,EAAc;AACZ,YAAMW,eAAe,GAAGR,MAAM,CAACH,QAAD,CAA9B;;AACAG,MAAAA,MAAM,CAACH,QAAD,CAAN,GAAmB,YAAY;AAC7B,YAAIW,eAAJ,EAAqBA,eAAe;AACpCH,QAAAA,QAAQ,CAACL,MAAM,CAACJ,SAAD,CAAP,CAAR;AACD,OAHD;AAID;;AACDG,IAAAA,WAAW,CAACJ,GAAD,EAAMc,GAAG,IAAI;AACtB,UAAIA,GAAJ,EAASN,MAAM,CAACM,GAAD,CAAN;;AACT,UAAI,CAACZ,QAAL,EAAe;AACbQ,QAAAA,QAAQ,CAACL,MAAM,CAACJ,SAAD,CAAP,CAAR;AACD;AACF,KALU,CAAX;AAMD,GAzBM,CAAP;AA0BD","sourcesContent":["import loadScript from 'load-script'\n\n// Util function to load an external SDK\n// or return the SDK if it is already loaded\nconst resolves = {}\nexport function getSDK (url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = loadScript) {\n  if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {\n    return Promise.resolve(window[sdkGlobal])\n  }\n  return new Promise((resolve, reject) => {\n    // If we are already loading the SDK, add the resolve\n    // function to the existing array of resolve functions\n    if (resolves[url]) {\n      resolves[url].push(resolve)\n      return\n    }\n    resolves[url] = [resolve]\n    const onLoaded = sdk => {\n      // When loaded, resolve all pending promises\n      resolves[url].forEach(resolve => resolve(sdk))\n    }\n    if (sdkReady) {\n      const previousOnReady = window[sdkReady]\n      window[sdkReady] = function () {\n        if (previousOnReady) previousOnReady()\n        onLoaded(window[sdkGlobal])\n      }\n    }\n    fetchScript(url, err => {\n      if (err) reject(err)\n      if (!sdkReady) {\n        onLoaded(window[sdkGlobal])\n      }\n    })\n  })\n}"]},"metadata":{},"sourceType":"module"}