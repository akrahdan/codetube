{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport cookie from \"react-cookies\";\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses${id}`,\n        method: 'GET',\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: '/api/categories',\n        method: 'GET',\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: '/courses/create/',\n        method: 'POST',\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: '/courses/section/create',\n        body,\n        method: 'POST',\n        responseHandler: response => response.json()\n      })\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: '/courses/lecture/create',\n        body,\n        method: 'POST',\n        responseHandler: response => response.json()\n      })\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery\n} = coursesApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","cookie","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","query","id","url","method","responseHandler","response","json","fetchCategories","createCourse","mutation","body","createSection","createLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\n\n\nexport interface CourseResponse {\n    title: string;\n    id: number;\n    category: string\n    description: string;\n}\n\nexport interface CourseRequest {\n    title: string;\n    category: string;\n    description: string;\n    cover_image: string;\n    level: string;\n    tags: string[];\n    summary: string;\n\n\n}\n\nexport interface Section  {\n    title: string;\n    description: string;\n}\n\nexport interface Lecture {\n    title: string;\n    video_url: string\n\n}\n\nexport interface CategoryResponse {\n    title: string;\n    id: number\n}\n\n\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [],\n  endpoints: build => ({\n      fetchCourse: build.query<CourseResponse, number>({\n          query: (id) => ({\n              url: `/courses${id}`,\n              method: 'GET',\n              responseHandler: response => response.json()\n          })\n      }),\n      fetchCategories: build.query<CategoryResponse, void>({\n        query: () => ({\n            url: '/api/categories',\n            method: 'GET',\n            responseHandler: response => response.json()\n        })\n    }),\n      createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n         query: body => ({\n             url: '/courses/create/',\n             method: 'POST',\n             body,\n             responseHandler: response => response.json()\n         })\n      }),\n      createSection: build.mutation<Section, Partial<Section>>({\n          query: body => ({\n              url: '/courses/section/create',\n              body,\n              method: 'POST',\n              responseHandler: response => response.json()\n          }),\n      }),\n      \n      createLecture: build.mutation<Lecture, Partial<Lecture>>({\n        query: body => ({\n            url: '/courses/lecture/create',\n            body,\n            method: 'POST',\n            responseHandler: response => response.json()\n        })\n    }) \n  })\n});\n\nexport const { useCreateCourseMutation, useCreateLectureMutation,\nuseCreateSectionMutation, useFetchCourseQuery, useFetchCategoriesQuery} = coursesApi\n"]},"metadata":{},"sourceType":"module"}