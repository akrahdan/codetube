{"ast":null,"code":"import React from 'react';\nimport { FormError, FormGroup, FormGroupLabel } from '../../Form';\nimport { HiddenText } from '../../HiddenText';\nimport { Column } from '../../Layout';\nimport { GridFormCheckboxInput } from './GridFormCheckboxInput';\nimport { GridFormCustomInput } from './GridFormCustomInput';\nimport { GridFormFileInput } from './GridFormFileInput';\nimport { GridFormHiddenInput } from './GridFormHiddenInput';\nimport { GridFormRadioGroupInput } from './GridFormRadioGroupInput';\nimport { GridFormSelectInput } from './GridFormSelectInput';\nimport { GridFormSweetContainerInput } from './GridFormSweetContainerInput';\nimport { GridFormTextArea } from './GridFormTextArea';\nimport { GridFormTextInput } from './GridFormTextInput';\nexport var GridFormInputGroup = function GridFormInputGroup(_ref) {\n  var _field$rowspan2;\n\n  var error = _ref.error,\n      isFirstError = _ref.isFirstError,\n      field = _ref.field,\n      register = _ref.register,\n      setValue = _ref.setValue,\n      showRequired = _ref.showRequired,\n      required = _ref.required;\n  var errorMessage = error || field.customError;\n  var isRequired = showRequired && required;\n\n  var getInput = function getInput() {\n    switch (field.type) {\n      case 'checkbox':\n        return /*#__PURE__*/React.createElement(GridFormCheckboxInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'custom':\n      case 'custom-group':\n        return /*#__PURE__*/React.createElement(GridFormCustomInput, {\n          field: field,\n          register: register,\n          setValue: setValue,\n          error: errorMessage\n        });\n\n      case 'radio-group':\n        return /*#__PURE__*/React.createElement(GridFormRadioGroupInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired,\n          setValue: setValue\n        });\n\n      case 'select':\n        return /*#__PURE__*/React.createElement(GridFormSelectInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'file':\n        return /*#__PURE__*/React.createElement(GridFormFileInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'textarea':\n        return /*#__PURE__*/React.createElement(GridFormTextArea, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'hidden':\n        return /*#__PURE__*/React.createElement(GridFormHiddenInput, {\n          register: register,\n          field: field\n        });\n\n      case 'sweet-container':\n        return /*#__PURE__*/React.createElement(GridFormSweetContainerInput, {\n          register: register,\n          field: field,\n          label: field.label\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(GridFormTextInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n    }\n  };\n\n  var unwrappedInput = function unwrappedInput(field) {\n    return ['hidden', 'sweet-container'].includes(field.type);\n  };\n\n  if (unwrappedInput(field)) {\n    return getInput();\n  }\n\n  if (field.type === 'custom-group') {\n    var _field$rowspan;\n\n    return /*#__PURE__*/React.createElement(Column, {\n      size: field === null || field === void 0 ? void 0 : field.size,\n      rowspan: (_field$rowspan = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan !== void 0 ? _field$rowspan : 1\n    }, getInput());\n  }\n\n  var label = /*#__PURE__*/React.createElement(FormGroupLabel, {\n    disabled: field.disabled,\n    htmlFor: field.id || field.name,\n    tooltip: field.tooltip,\n    showRequired: isRequired\n  }, field.label);\n  return /*#__PURE__*/React.createElement(Column, {\n    size: field === null || field === void 0 ? void 0 : field.size,\n    rowspan: (_field$rowspan2 = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan2 !== void 0 ? _field$rowspan2 : 1\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    mb: 0\n  }, field.hideLabel ? /*#__PURE__*/React.createElement(HiddenText, null, label) : label, getInput(), errorMessage && /*#__PURE__*/React.createElement(FormError, {\n    role: isFirstError ? 'alert' : 'status',\n    \"aria-live\": isFirstError ? 'assertive' : 'off'\n  }, errorMessage)));\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/@codecademy/gamut/dist/GridForm/GridFormInputGroup/index.js"],"names":["React","FormError","FormGroup","FormGroupLabel","HiddenText","Column","GridFormCheckboxInput","GridFormCustomInput","GridFormFileInput","GridFormHiddenInput","GridFormRadioGroupInput","GridFormSelectInput","GridFormSweetContainerInput","GridFormTextArea","GridFormTextInput","GridFormInputGroup","_ref","_field$rowspan2","error","isFirstError","field","register","setValue","showRequired","required","errorMessage","customError","isRequired","getInput","type","createElement","label","unwrappedInput","includes","_field$rowspan","size","rowspan","disabled","htmlFor","id","name","tooltip","mb","hideLabel","role"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormError, FormGroup, FormGroupLabel } from '../../Form';\nimport { HiddenText } from '../../HiddenText';\nimport { Column } from '../../Layout';\nimport { GridFormCheckboxInput } from './GridFormCheckboxInput';\nimport { GridFormCustomInput } from './GridFormCustomInput';\nimport { GridFormFileInput } from './GridFormFileInput';\nimport { GridFormHiddenInput } from './GridFormHiddenInput';\nimport { GridFormRadioGroupInput } from './GridFormRadioGroupInput';\nimport { GridFormSelectInput } from './GridFormSelectInput';\nimport { GridFormSweetContainerInput } from './GridFormSweetContainerInput';\nimport { GridFormTextArea } from './GridFormTextArea';\nimport { GridFormTextInput } from './GridFormTextInput';\nexport var GridFormInputGroup = function GridFormInputGroup(_ref) {\n  var _field$rowspan2;\n\n  var error = _ref.error,\n      isFirstError = _ref.isFirstError,\n      field = _ref.field,\n      register = _ref.register,\n      setValue = _ref.setValue,\n      showRequired = _ref.showRequired,\n      required = _ref.required;\n  var errorMessage = error || field.customError;\n  var isRequired = showRequired && required;\n\n  var getInput = function getInput() {\n    switch (field.type) {\n      case 'checkbox':\n        return /*#__PURE__*/React.createElement(GridFormCheckboxInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'custom':\n      case 'custom-group':\n        return /*#__PURE__*/React.createElement(GridFormCustomInput, {\n          field: field,\n          register: register,\n          setValue: setValue,\n          error: errorMessage\n        });\n\n      case 'radio-group':\n        return /*#__PURE__*/React.createElement(GridFormRadioGroupInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired,\n          setValue: setValue\n        });\n\n      case 'select':\n        return /*#__PURE__*/React.createElement(GridFormSelectInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'file':\n        return /*#__PURE__*/React.createElement(GridFormFileInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'textarea':\n        return /*#__PURE__*/React.createElement(GridFormTextArea, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n\n      case 'hidden':\n        return /*#__PURE__*/React.createElement(GridFormHiddenInput, {\n          register: register,\n          field: field\n        });\n\n      case 'sweet-container':\n        return /*#__PURE__*/React.createElement(GridFormSweetContainerInput, {\n          register: register,\n          field: field,\n          label: field.label\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(GridFormTextInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        });\n    }\n  };\n\n  var unwrappedInput = function unwrappedInput(field) {\n    return ['hidden', 'sweet-container'].includes(field.type);\n  };\n\n  if (unwrappedInput(field)) {\n    return getInput();\n  }\n\n  if (field.type === 'custom-group') {\n    var _field$rowspan;\n\n    return /*#__PURE__*/React.createElement(Column, {\n      size: field === null || field === void 0 ? void 0 : field.size,\n      rowspan: (_field$rowspan = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan !== void 0 ? _field$rowspan : 1\n    }, getInput());\n  }\n\n  var label = /*#__PURE__*/React.createElement(FormGroupLabel, {\n    disabled: field.disabled,\n    htmlFor: field.id || field.name,\n    tooltip: field.tooltip,\n    showRequired: isRequired\n  }, field.label);\n  return /*#__PURE__*/React.createElement(Column, {\n    size: field === null || field === void 0 ? void 0 : field.size,\n    rowspan: (_field$rowspan2 = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan2 !== void 0 ? _field$rowspan2 : 1\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    mb: 0\n  }, field.hideLabel ? /*#__PURE__*/React.createElement(HiddenText, null, label) : label, getInput(), errorMessage && /*#__PURE__*/React.createElement(FormError, {\n    role: isFirstError ? 'alert' : 'status',\n    \"aria-live\": isFirstError ? 'assertive' : 'off'\n  }, errorMessage)));\n};"]},"metadata":{},"sourceType":"module"}