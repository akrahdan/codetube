{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/errors/withErrorBoundary.tsx\";\nimport React from 'react'; // import { logger } from '~/libs/logging/logger';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ErrorBoundary extends React.Component {\n  static getDerivedStateFromError() {\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, extraInfo) {\n    console.error(error, extraInfo === null || extraInfo === void 0 ? void 0 : extraInfo.componentStack);\n  }\n\n  render() {\n    var _this$state;\n\n    return ((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.hasError) ? this.props.fallback || null : this.props.children;\n  }\n\n}\nexport function withErrorBoundary(WrappedComponent, fallback) {\n  const WithBoundaryComponent = props => /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    fallback: fallback,\n    children: /*#__PURE__*/_jsxDEV(WrappedComponent, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n\n  return WithBoundaryComponent;\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/errors/withErrorBoundary.tsx"],"names":["React","ErrorBoundary","Component","getDerivedStateFromError","hasError","componentDidCatch","error","extraInfo","console","componentStack","render","state","props","fallback","children","withErrorBoundary","WrappedComponent","WithBoundaryComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;;AAUA,OAAO,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAGL;AAC+B,SAAxBC,wBAAwB,GAAG;AAChC,WAAO;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,KAAD,EAAeC,SAAf,EAA4C;AAC3DC,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd,EAAqBC,SAArB,aAAqBA,SAArB,uBAAqBA,SAAS,CAAEE,cAAhC;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA;;AACP,WAAO,qBAAKC,KAAL,4DAAYP,QAAZ,IACH,KAAKQ,KAAL,CAAWC,QAAX,IAAuB,IADpB,GAEH,KAAKD,KAAL,CAAWE,QAFf;AAGD;;AAbD;AAgBF,OAAO,SAASC,iBAAT,CACLC,gBADK,EAELH,QAFK,EAGL;AACA,QAAMI,qBAAsC,GAAIL,KAAD,iBAC7C,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEC,QAAzB;AAAA,2BACE,QAAC,gBAAD,OAAsBD;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,SAAOK,qBAAP;AACD","sourcesContent":["import React from 'react';\n\n// import { logger } from '~/libs/logging/logger';\n\nexport type ErrorBoundaryProps = {\n  fallback?: React.ReactNode;\n};\n\ntype ErrorBoundaryState = {\n  hasError?: true;\n};\n\nexport class ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, extraInfo?: React.ErrorInfo) {\n    console.error(error, extraInfo?.componentStack);\n  }\n\n  render() {\n    return this.state?.hasError\n      ? this.props.fallback || null\n      : this.props.children;\n  }\n}\n\nexport function withErrorBoundary<Props>(\n  WrappedComponent: React.ComponentType<Props>,\n  fallback?: React.ReactNode\n) {\n  const WithBoundaryComponent: React.FC<Props> = (props) => (\n    <ErrorBoundary fallback={fallback}>\n      <WrappedComponent {...props} />\n    </ErrorBoundary>\n  );\n\n  return WithBoundaryComponent;\n}\n"]},"metadata":{},"sourceType":"module"}