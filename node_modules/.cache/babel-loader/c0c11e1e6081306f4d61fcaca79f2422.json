{"ast":null,"code":"import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\n\nfunction createAttributeSet() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = initialValue;\n  return {\n    get: function get() {\n      return value;\n    },\n    add: function add(part) {\n      var lastPart = value[value.length - 1];\n\n      if ((lastPart === null || lastPart === void 0 ? void 0 : lastPart.isHighlighted) === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted\n        };\n      } else {\n        value.push(part);\n      }\n    }\n  };\n}\n\nexport function parseAttribute(_ref) {\n  var highlightedValue = _ref.highlightedValue;\n  var preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  var firstValue = preTagParts.shift();\n  var parts = createAttributeSet(firstValue ? [{\n    value: firstValue,\n    isHighlighted: false\n  }] : []);\n  preTagParts.forEach(function (part) {\n    var postTagParts = part.split(HIGHLIGHT_POST_TAG);\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false\n      });\n    }\n  });\n  return parts.get();\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/@algolia/autocomplete-preset-algolia/dist/esm/highlight/parseAttribute.js"],"names":["HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","createAttributeSet","initialValue","arguments","length","undefined","value","get","add","part","lastPart","isHighlighted","push","parseAttribute","_ref","highlightedValue","preTagParts","split","firstValue","shift","parts","forEach","postTagParts"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,kBAA5B,QAAsD,cAAtD;AAEA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,GAA8B;AAC5B,MAAIC,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;AACA,MAAIG,KAAK,GAAGJ,YAAZ;AACA,SAAO;AACLK,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAOD,KAAP;AACD,KAHI;AAILE,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,IAAb,EAAmB;AACtB,UAAIC,QAAQ,GAAGJ,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAApB;;AAEA,UAAI,CAACM,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACC,aAA9D,MAAiFF,IAAI,CAACE,aAA1F,EAAyG;AACvGL,QAAAA,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAL,GAA0B;AACxBE,UAAAA,KAAK,EAAEI,QAAQ,CAACJ,KAAT,GAAiBG,IAAI,CAACH,KADL;AAExBK,UAAAA,aAAa,EAAED,QAAQ,CAACC;AAFA,SAA1B;AAID,OALD,MAKO;AACLL,QAAAA,KAAK,CAACM,IAAN,CAAWH,IAAX;AACD;AACF;AAfI,GAAP;AAiBD;;AAED,OAAO,SAASI,cAAT,CAAwBC,IAAxB,EAA8B;AACnC,MAAIC,gBAAgB,GAAGD,IAAI,CAACC,gBAA5B;AACA,MAAIC,WAAW,GAAGD,gBAAgB,CAACE,KAAjB,CAAuBlB,iBAAvB,CAAlB;AACA,MAAImB,UAAU,GAAGF,WAAW,CAACG,KAAZ,EAAjB;AACA,MAAIC,KAAK,GAAGnB,kBAAkB,CAACiB,UAAU,GAAG,CAAC;AAC3CZ,IAAAA,KAAK,EAAEY,UADoC;AAE3CP,IAAAA,aAAa,EAAE;AAF4B,GAAD,CAAH,GAGpC,EAHyB,CAA9B;AAIAK,EAAAA,WAAW,CAACK,OAAZ,CAAoB,UAAUZ,IAAV,EAAgB;AAClC,QAAIa,YAAY,GAAGb,IAAI,CAACQ,KAAL,CAAWjB,kBAAX,CAAnB;AACAoB,IAAAA,KAAK,CAACZ,GAAN,CAAU;AACRF,MAAAA,KAAK,EAAEgB,YAAY,CAAC,CAAD,CADX;AAERX,MAAAA,aAAa,EAAE;AAFP,KAAV;;AAKA,QAAIW,YAAY,CAAC,CAAD,CAAZ,KAAoB,EAAxB,EAA4B;AAC1BF,MAAAA,KAAK,CAACZ,GAAN,CAAU;AACRF,QAAAA,KAAK,EAAEgB,YAAY,CAAC,CAAD,CADX;AAERX,QAAAA,aAAa,EAAE;AAFP,OAAV;AAID;AACF,GAbD;AAcA,SAAOS,KAAK,CAACb,GAAN,EAAP;AACD","sourcesContent":["import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = initialValue;\n  return {\n    get: function get() {\n      return value;\n    },\n    add: function add(part) {\n      var lastPart = value[value.length - 1];\n\n      if ((lastPart === null || lastPart === void 0 ? void 0 : lastPart.isHighlighted) === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted\n        };\n      } else {\n        value.push(part);\n      }\n    }\n  };\n}\n\nexport function parseAttribute(_ref) {\n  var highlightedValue = _ref.highlightedValue;\n  var preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  var firstValue = preTagParts.shift();\n  var parts = createAttributeSet(firstValue ? [{\n    value: firstValue,\n    isHighlighted: false\n  }] : []);\n  preTagParts.forEach(function (part) {\n    var postTagParts = part.split(HIGHLIGHT_POST_TAG);\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false\n      });\n    }\n  });\n  return parts.get();\n}"]},"metadata":{},"sourceType":"module"}