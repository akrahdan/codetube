{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { breakpoints as originalBreakpoints } from '@codecademy/gamut-styles';\nimport { mapValues } from 'lodash';\nimport { createBreakpoint } from 'react-use';\nexport const breakpoints = mapValues({\n  xxs: 0,\n  ...originalBreakpoints\n}, value => parseInt(value, 10));\n/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport const useBreakpoint = createBreakpoint(breakpoints);\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAtOrAbove(breakpoint) {\n  _s();\n\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] >= breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\n_s(useBreakpointAtOrAbove, \"0SlYAzb/+hcCuOLvXk8V6DynlGo=\", false, function () {\n  return [useBreakpoint];\n});\n\nexport function useBreakpointAt(breakpoint) {\n  _s2();\n\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] === breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\n_s2(useBreakpointAt, \"0SlYAzb/+hcCuOLvXk8V6DynlGo=\", false, function () {\n  return [useBreakpoint];\n});\n\nexport function useBreakpointAtOrBelow(breakpoint) {\n  _s3();\n\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] <= breakpoints[breakpoint];\n}\n\n_s3(useBreakpointAtOrBelow, \"0SlYAzb/+hcCuOLvXk8V6DynlGo=\", false, function () {\n  return [useBreakpoint];\n});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/lib/breakpointHooks/index.ts"],"names":["breakpoints","originalBreakpoints","mapValues","createBreakpoint","xxs","value","parseInt","useBreakpoint","useBreakpointAtOrAbove","breakpoint","currentBreakpoint","useBreakpointAt","useBreakpointAtOrBelow"],"mappings":";;;;AAAA,SAASA,WAAW,IAAIC,mBAAxB,QAAmD,0BAAnD;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAKA,OAAO,MAAMH,WAAW,GAAIE,SAAS,CACnC;AAAEE,EAAAA,GAAG,EAAE,CAAP;AAAU,KAAGH;AAAb,CADmC,EAElCI,KAAD,IAAmBC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAFQ,CAA9B;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,aAAa,GAAGJ,gBAAgB,CAC3CH,WAD2C,CAAtC;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,sBAAT,CAAgCC,UAAhC,EAAiE;AAAA;;AACtE,QAAMC,iBAAiB,GAAGH,aAAa,EAAvC;AACA,SAAOP,WAAW,CAACU,iBAAD,CAAX,IAAkCV,WAAW,CAACS,UAAD,CAApD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;GAVgBD,sB;UACYD,a;;;AAU5B,OAAO,SAASI,eAAT,CAAyBF,UAAzB,EAA0D;AAAA;;AAC/D,QAAMC,iBAAiB,GAAGH,aAAa,EAAvC;AACA,SAAOP,WAAW,CAACU,iBAAD,CAAX,KAAmCV,WAAW,CAACS,UAAD,CAArD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;IAVgBE,e;UACYJ,a;;;AAU5B,OAAO,SAASK,sBAAT,CAAgCH,UAAhC,EAAiE;AAAA;;AACtE,QAAMC,iBAAiB,GAAGH,aAAa,EAAvC;AACA,SAAOP,WAAW,CAACU,iBAAD,CAAX,IAAkCV,WAAW,CAACS,UAAD,CAApD;AACD;;IAHeG,sB;UACYL,a","sourcesContent":["import { breakpoints as originalBreakpoints } from '@codecademy/gamut-styles';\nimport { mapValues } from 'lodash';\nimport { createBreakpoint } from 'react-use';\n\nexport type Breakpoint = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\nexport type BreakpointMinWidths = Record<Breakpoint, number>;\n\nexport const breakpoints = (mapValues(\n  { xxs: 0, ...originalBreakpoints },\n  (value: string) => parseInt(value, 10)\n) as unknown) as BreakpointMinWidths;\n\n/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport const useBreakpoint = createBreakpoint(\n  breakpoints\n) as () => keyof typeof breakpoints;\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAtOrAbove(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] >= breakpoints[breakpoint];\n}\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAt(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] === breakpoints[breakpoint];\n}\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAtOrBelow(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] <= breakpoints[breakpoint];\n}\n"]},"metadata":{},"sourceType":"module"}