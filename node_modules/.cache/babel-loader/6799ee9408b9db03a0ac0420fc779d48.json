{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/CurriculumCard/index.tsx\";\nimport { Card, FlexBox, ProLabel, Text } from '@codecademy/gamut';\nimport { pxRem } from '@codecademy/gamut-styles';\nimport React from 'react';\nimport { Footer } from './Footer/index';\nimport { Image } from './Image/index';\nimport { Subtitle } from './Subtitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardHeight = 180;\nconst cardStyles = {\n  inProgress: 'yellow',\n  completed: 'navy'\n};\nexport const CurriculumCard = ({\n  difficulty,\n  headingLevel = 'h3',\n  image,\n  isFullSize = false,\n  progressState,\n  scope,\n  scopeCount,\n  showProLogo,\n  tag,\n  tagColor,\n  text,\n  title\n}) => {\n  const boxVariant = progressStatec ? cardStyles[progressState] : false;\n  const mode = progressState === 'completed' ? 'dark' : 'light';\n  return /*#__PURE__*/_jsxDEV(Card, {\n    display: \"grid\",\n    gridTemplateRows: \"repeat(3, max-content) 1fr max-content\",\n    minHeight: isFullSize ? pxRem(cardHeight * 2 + 32) : pxRem(cardHeight),\n    variant: boxVariant !== null && boxVariant !== void 0 ? boxVariant : 'white',\n    shadow: \"medium\",\n    position: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      display: \"flex\",\n      fontSize: 14,\n      mb: 12,\n      fontFamily: \"accent\",\n      textTransform: \"capitalize\",\n      children: [showProLogo && /*#__PURE__*/_jsxDEV(ProLabel, {\n        alignSelf: \"center\",\n        mr: 8,\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: headingLevel,\n      mb: 4,\n      fontSize: 20,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexBox, {\n      flexWrap: \"wrap\",\n      children: !progressState && /*#__PURE__*/_jsxDEV(Subtitle, {\n        scope: scope,\n        scopeCount: scopeCount,\n        difficulty: difficulty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexBox, {\n      center: true,\n      pb: 16,\n      children: isFullSize && image && /*#__PURE__*/_jsxDEV(Image, {\n        image: image,\n        progressState: progressState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      progressState: progressState,\n      tag: tag,\n      tagColor: tagColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = CurriculumCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurriculumCard\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/CurriculumCard/index.tsx"],"names":["Card","FlexBox","ProLabel","Text","pxRem","React","Footer","Image","Subtitle","cardHeight","cardStyles","inProgress","completed","CurriculumCard","difficulty","headingLevel","image","isFullSize","progressState","scope","scopeCount","showProLogo","tag","tagColor","text","title","boxVariant","progressStatec","mode"],"mappings":"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","sourcesContent":["import { Card, FlexBox, HeadingTags, ProLabel, Text } from '@codecademy/gamut';\nimport { pxRem } from '@codecademy/gamut-styles';\nimport React from 'react';\n\nimport { TagColor } from './BottomTag/index';\nimport { Footer } from './Footer/index';\nimport { Image } from './Image/index';\nimport { Subtitle, SubtitleProps } from './Subtitle';\n\nexport type ProgressState = 'inProgress' | 'completed';\n\nconst cardHeight = 180;\n\nconst cardStyles = {\n  inProgress: 'yellow',\n  completed: 'navy',\n} as const;\n\nexport type CurriculumCardProps = SubtitleProps & {\n  text: string;\n  title: string;\n  headingLevel?: HeadingTags;\n  image?: string;\n  isFullSize?: boolean;\n  progressState?: ProgressState;\n  showProLogo?: boolean;\n  tag?: string;\n  tagColor?: TagColor;\n};\n\nexport const CurriculumCard: React.FC<CurriculumCardProps> = ({\n  difficulty,\n  headingLevel = 'h3',\n  image,\n  isFullSize = false,\n  progressState,\n  scope,\n  scopeCount,\n  showProLogo,\n  tag,\n  tagColor,\n  text,\n  title,\n}) => {\n  const boxVariant = progressStatec? cardStyles[progressState]: false;\n  const mode = progressState === 'completed' ? 'dark' : 'light';\n\n  return (\n    <Card\n      display=\"grid\"\n      gridTemplateRows=\"repeat(3, max-content) 1fr max-content\"\n      minHeight={isFullSize ? pxRem(cardHeight * 2 + 32) : pxRem(cardHeight)}\n      variant={boxVariant ?? 'white'}\n      shadow=\"medium\"\n      position=\"relative\"\n    >\n      <Text\n        display=\"flex\"\n        fontSize={14}\n        mb={12}\n        fontFamily=\"accent\"\n        textTransform=\"capitalize\"\n      >\n        {showProLogo && <ProLabel alignSelf=\"center\" mr={8} mode={mode} />}\n        {text}\n      </Text>\n      <Text as={headingLevel} mb={4} fontSize={20}>\n        {title}\n      </Text>\n      <FlexBox flexWrap=\"wrap\">\n        {!progressState && (\n          <Subtitle\n            scope={scope}\n            scopeCount={scopeCount}\n            difficulty={difficulty}\n          />\n        )}\n      </FlexBox>\n      <FlexBox center pb={16}>\n        {isFullSize && image && (\n          <Image image={image} progressState={progressState} />\n        )}\n      </FlexBox>\n      <Footer progressState={progressState} tag={tag} tagColor={tagColor} />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}