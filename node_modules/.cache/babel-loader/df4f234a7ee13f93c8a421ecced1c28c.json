{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { canUseEventListeners } from \"exenv\";\nexport default function useMatchMedia(query) {\n  _s();\n\n  const hasMounted = useHasMounted();\n  const matcher = useCallback(() => window.matchMedia(query), [query]);\n  const [queryList, setQueryList] = useState(matcher);\n  const matches = useMatches(queryList);\n  useEffect(() => {\n    if (!hasMounted) return;\n    const nextQueryList = matcher();\n    setQueryList(nextQueryList);\n  }, [hasMounted, matcher]);\n  return matches;\n}\n\n_s(useMatchMedia, \"+SuOj5Rfg9UF44/ItZ+LTNwr1ZQ=\", false, function () {\n  return [useHasMounted, useMatches];\n});\n\nfunction useHasMounted() {\n  _s2();\n\n  const ref = useRef(false);\n  useEffect(() => {\n    ref.current = true;\n\n    function reset() {\n      ref.current = false;\n    }\n\n    return reset();\n  }, []);\n  return ref.current;\n}\n\n_s2(useHasMounted, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nfunction useMatches(queryList) {\n  _s3();\n\n  const [matches, setMatches] = useState(queryList.matches);\n  useEffect(() => {\n    const updateMatches = () => {\n      setMatches(queryList.matches);\n    };\n\n    if (canUseEventListeners) queryList.addListener(updateMatches);\n    updateMatches();\n    return () => {\n      if (canUseEventListeners) queryList.removeListener(updateMatches);\n    };\n  }, [queryList]);\n  return matches;\n}\n\n_s3(useMatches, \"S6QdkkhJiuNjt8mPwoXe/ghy02I=\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Instructor/Courses/use-match-media.tsx"],"names":["useCallback","useEffect","useRef","useState","canUseEventListeners","useMatchMedia","query","hasMounted","useHasMounted","matcher","window","matchMedia","queryList","setQueryList","matches","useMatches","nextQueryList","ref","current","reset","setMatches","updateMatches","addListener","removeListener"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,SAASC,oBAAT,QAAqC,OAArC;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC3C,QAAMC,UAAU,GAAGC,aAAa,EAAhC;AAEA,QAAMC,OAAO,GAAGT,WAAW,CAAC,MAAMU,MAAM,CAACC,UAAP,CAAkBL,KAAlB,CAAP,EAAiC,CAACA,KAAD,CAAjC,CAA3B;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAACM,OAAD,CAA1C;AAEA,QAAMK,OAAO,GAAGC,UAAU,CAACH,SAAD,CAA1B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,UAAL,EAAiB;AAEjB,UAAMS,aAAa,GAAGP,OAAO,EAA7B;AAEAI,IAAAA,YAAY,CAACG,aAAD,CAAZ;AACD,GANQ,EAMN,CAACT,UAAD,EAAaE,OAAb,CANM,CAAT;AAQA,SAAOK,OAAP;AACD;;GAjBuBT,a;UACHG,a,EAKHO,U;;;AAalB,SAASP,aAAT,GAAyB;AAAA;;AACvB,QAAMS,GAAG,GAAGf,MAAM,CAAC,KAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,GAAG,CAACC,OAAJ,GAAc,IAAd;;AAEA,aAASC,KAAT,GAAiB;AACfF,MAAAA,GAAG,CAACC,OAAJ,GAAc,KAAd;AACD;;AAED,WAAOC,KAAK,EAAZ;AACD,GARQ,EAQN,EARM,CAAT;AAUA,SAAOF,GAAG,CAACC,OAAX;AACD;;IAdQV,a;;AAgBT,SAASO,UAAT,CAAoBH,SAApB,EAA+B;AAAA;;AAC7B,QAAM,CAACE,OAAD,EAAUM,UAAV,IAAwBjB,QAAQ,CAACS,SAAS,CAACE,OAAX,CAAtC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,aAAa,GAAG,MAAM;AAC1BD,MAAAA,UAAU,CAACR,SAAS,CAACE,OAAX,CAAV;AACD,KAFD;;AAIA,QAAIV,oBAAJ,EAA0BQ,SAAS,CAACU,WAAV,CAAsBD,aAAtB;AAC1BA,IAAAA,aAAa;AAEb,WAAO,MAAM;AACX,UAAIjB,oBAAJ,EAA0BQ,SAAS,CAACW,cAAV,CAAyBF,aAAzB;AAC3B,KAFD;AAGD,GAXQ,EAWN,CAACT,SAAD,CAXM,CAAT;AAaA,SAAOE,OAAP;AACD;;IAjBQC,U","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { canUseEventListeners } from \"exenv\";\n\nexport default function useMatchMedia(query) {\n  const hasMounted = useHasMounted();\n\n  const matcher = useCallback(() => window.matchMedia(query), [query]);\n  const [queryList, setQueryList] = useState(matcher);\n\n  const matches = useMatches(queryList);\n\n  useEffect(() => {\n    if (!hasMounted) return;\n\n    const nextQueryList = matcher();\n\n    setQueryList(nextQueryList);\n  }, [hasMounted, matcher]);\n\n  return matches;\n}\n\nfunction useHasMounted() {\n  const ref = useRef(false);\n\n  useEffect(() => {\n    ref.current = true;\n\n    function reset() {\n      ref.current = false;\n    }\n\n    return reset();\n  }, []);\n\n  return ref.current;\n}\n\nfunction useMatches(queryList) {\n  const [matches, setMatches] = useState(queryList.matches);\n\n  useEffect(() => {\n    const updateMatches = () => {\n      setMatches(queryList.matches);\n    };\n\n    if (canUseEventListeners) queryList.addListener(updateMatches);\n    updateMatches();\n\n    return () => {\n      if (canUseEventListeners) queryList.removeListener(updateMatches);\n    };\n  }, [queryList]);\n\n  return matches;\n}\n"]},"metadata":{},"sourceType":"module"}