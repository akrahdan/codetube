{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  autoplay\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n    pause: (state, action) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setContainerSize: (state, action) => {\n      var containerSize = action.payload;\n\n      if (containerSize.width === 0 && containerSize.height === 0 && state.containerSize) {\n        containerSize = state.containerSize;\n      }\n\n      state.breakpoint = findBreakpoint(containerSize);\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${state.breakpoint.height}p`;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setLoading: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","buildClipProgress","calculateAspectRatio","findBreakpoint","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","visible","fullscreenState","NORMAL","clipProgress","buffering","containerSize","breakpoint","playerSize","layout","loading","autoplay","playerSlice","name","reducers","play","state","action","icon","payload","key","Math","random","fade","pause","setPlaybackSpeed","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","showUI","toggleFullscreen","FULLSCREEN","hideUI","setDuration","setTime","setContainerSize","width","height","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setLoading","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","player","actions","togglePlayPause","dispatch","getState","reducer"],"mappings":"AAAA,SAA2BA,WAA3B,QAA6D,kBAA7D;AAIA,SAASC,KAAT,QAAsB,4CAAtB;AACA,SACEC,gBADF,EAEEC,QAFF,EAGEC,eAHF,QAIO,sCAJP;AAKA,SAASC,iBAAT,QAAkC,yDAAlC;AACA,SAASC,oBAAT,QAAqC,mDAArC;AACA,SAASC,cAAT,QAA+B,sDAA/B;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcR,gBAAd,CAAnB;;AAEA,SAASS,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAO,CAAC,CAAC,CAACD,KAAK,CAACE,OAAN,CAAcD,IAAd,CAAV;AACD;;AA0CD,OAAO,MAAME,YAAyB,GAAG;AACvCC,EAAAA,OAAO,EAAE,KAD8B;AAEvCC,EAAAA,aAAa,EAAE,GAFwB;AAGvCC,EAAAA,UAAU,EAAE,IAH2B;AAIvCC,EAAAA,kBAAkB,EAAE,KAJmB;AAKvCC,EAAAA,MAAM,EAAE,GAL+B;AAMvCC,EAAAA,KAAK,EAAE,KANgC;AAOvCC,EAAAA,cAAc,EAAE,IAPuB;AAQvCC,EAAAA,eAAe,EAAErB,gBAAgB,CAACsB,KARK;AASvCC,EAAAA,IAAI,EAAE,CATiC;AAUvCC,EAAAA,QAAQ,EAAE,CAV6B;AAWvCC,EAAAA,YAAY,EAAE,CAXyB;AAYvCC,EAAAA,aAAa,EAAE,CAZwB;AAavCC,EAAAA,OAAO,EAAE,IAb8B;AAcvCC,EAAAA,WAAW,EAAE,IAd0B;AAevCC,EAAAA,WAAW,EAAE,IAf0B;AAgBvCC,EAAAA,YAAY,EAAE,IAhByB;AAiBvCC,EAAAA,OAAO,EAAE,KAjB8B;AAkBvCC,EAAAA,eAAe,EAAE9B,eAAe,CAAC+B,MAlBM;AAmBvCC,EAAAA,YAAY,EAAE,CAnByB;AAoBvCC,EAAAA,SAAS,EAAE,KApB4B;AAqBvCC,EAAAA,aAAa,EAAE,IArBwB;AAsBvCC,EAAAA,UAAU,EAAE,IAtB2B;AAuBvCC,EAAAA,UAAU,EAAE,IAvB2B;AAwBvCC,EAAAA,MAAM,EAAE,IAxB+B;AAyBvCC,EAAAA,OAAO,EAAE,KAzB8B;AA0BvCC,EAAAA;AA1BuC,CAAlC;AA4BP,OAAO,MAAMC,WAAW,GAAG5C,WAAW,CAAC;AACrC6C,EAAAA,IAAI,EAAE,QAD+B;AAErC9B,EAAAA,YAFqC;AAGrC+B,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA2C;AAC/C,YAAMC,IAAI,GAAG,MAAb;;AAEA,UAAID,MAAM,CAACE,OAAX,EAAoB;AAClBH,QAAAA,KAAK,CAACnB,OAAN,GAAgB;AAAEqB,UAAAA,IAAF;AAAQE,UAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAAb;AAA4BC,UAAAA,IAAI,EAAE;AAAlC,SAAhB;AACD;;AACDP,MAAAA,KAAK,CAAChC,OAAN,GAAgB,IAAhB;AACAgC,MAAAA,KAAK,CAACpB,aAAN,GAAsBoB,KAAK,CAACvB,IAA5B;AACD,KATO;AAWR+B,IAAAA,KAAK,EAAE,CAACR,KAAD,EAAQC,MAAR,KAA2C;AAChD,YAAMC,IAAI,GAAG,OAAb;;AAEA,UAAID,MAAM,CAACE,OAAX,EAAoB;AAClBH,QAAAA,KAAK,CAACnB,OAAN,GAAgB;AAAEqB,UAAAA,IAAF;AAAQE,UAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAAb;AAA4BC,UAAAA,IAAI,EAAE;AAAlC,SAAhB;AACD;;AACDP,MAAAA,KAAK,CAAChC,OAAN,GAAgB,KAAhB;AACAgC,MAAAA,KAAK,CAACpB,aAAN,GAAsBoB,KAAK,CAACvB,IAA5B;AACD,KAnBO;AAqBRgC,IAAAA,gBAAgB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAA0C;AAC1DD,MAAAA,KAAK,CAAC/B,aAAN,GAAsBgC,MAAM,CAACE,OAA7B;AACD,KAvBO;AAyBRO,IAAAA,aAAa,EAAE,CAACV,KAAD,EAAQC,MAAR,KAA0C;AACvDD,MAAAA,KAAK,CAAC9B,UAAN,GAAmB+B,MAAM,CAACE,OAA1B;AACD,KA3BO;AA4BRQ,IAAAA,qBAAqB,EAAE,CAACX,KAAD,EAAQC,MAAR,KAA2C;AAChED,MAAAA,KAAK,CAAC7B,kBAAN,GAA2B8B,MAAM,CAACE,OAAlC;AACD,KA9BO;AA+BRS,IAAAA,SAAS,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAA0C;AACnD,YAAMY,OAAO,GAAG5D,KAAK,CAACgD,MAAM,CAACE,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAM9B,KAAK,GAAGwC,OAAO,KAAK,CAA1B;AACAb,MAAAA,KAAK,CAAC5B,MAAN,GAAeyC,OAAf;AACAb,MAAAA,KAAK,CAAC3B,KAAN,GAAcA,KAAd;AACD,KApCO;AAqCRyC,IAAAA,iBAAiB,EAAE,CAACd,KAAD,EAAQC,MAAR,KAA0C;AAC3D,YAAMY,OAAO,GAAG5D,KAAK,CAACgD,MAAM,CAACE,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAM9B,KAAK,GAAGwC,OAAO,KAAK,CAA1B;AACAb,MAAAA,KAAK,CAAC5B,MAAN,GAAeyC,OAAf;AACAb,MAAAA,KAAK,CAAC3B,KAAN,GAAcA,KAAd;AACD,KA1CO;AA2CR0C,IAAAA,kBAAkB,EAAE,CAACf,KAAD,EAAQC,MAAR,KAA0C;AAC5D,UAAI,CAACtC,QAAQ,CAACH,UAAD,EAAayC,MAAM,CAACE,OAApB,CAAb,EAA2C;AACzC,cAAM,IAAIa,KAAJ,CACH,GAAEf,MAAM,CAACE,OAAQ,uBAAsB3C,UAAU,CAACyD,IAAX,EAAkB,EADtD,CAAN;AAGD;;AACDjB,MAAAA,KAAK,CAACzB,eAAN,GAAwB0B,MAAM,CAACE,OAA/B;AACD,KAlDO;AAoDRe,IAAAA,MAAM,EAAE,CAAClB,KAAD,EAAQC,MAAR,KAAwC;AAC9CD,MAAAA,KAAK,CAACf,OAAN,GAAgB,IAAhB;AACD,KAtDO;AAwDRkC,IAAAA,gBAAgB,EAAE,CAACnB,KAAD,EAAQC,MAAR,KAAwC;AACxDD,MAAAA,KAAK,CAACd,eAAN,GACEc,KAAK,CAACd,eAAN,KAA0B9B,eAAe,CAACgE,UAA1C,GACIhE,eAAe,CAAC+B,MADpB,GAEI/B,eAAe,CAACgE,UAHtB;AAID,KA7DO;AA+DRC,IAAAA,MAAM,EAAE,CAACrB,KAAD,EAAQC,MAAR,KAAwC;AAC9CD,MAAAA,KAAK,CAACf,OAAN,GAAgB,KAAhB;AACD,KAjEO;AAmERqC,IAAAA,WAAW,EAAE,CAACtB,KAAD,EAAQC,MAAR,KAA0C;AACrDD,MAAAA,KAAK,CAACtB,QAAN,GAAiBuB,MAAM,CAACE,OAAxB;AACD,KArEO;AAsERoB,IAAAA,OAAO,EAAE,CAACvB,KAAD,EAAQC,MAAR,KAA0C;AACjDD,MAAAA,KAAK,CAACvB,IAAN,GAAawB,MAAM,CAACE,OAApB;AACD,KAxEO;AA0ERqB,IAAAA,gBAAgB,EAAE,CAACxB,KAAD,EAAQC,MAAR,KAAiD;AACjE,UAAIX,aAAa,GAAGW,MAAM,CAACE,OAA3B;;AACA,UACEb,aAAa,CAACmC,KAAd,KAAwB,CAAxB,IACAnC,aAAa,CAACoC,MAAd,KAAyB,CADzB,IAEA1B,KAAK,CAACV,aAHR,EAIE;AACAA,QAAAA,aAAa,GAAGU,KAAK,CAACV,aAAtB;AACD;;AAEDU,MAAAA,KAAK,CAACT,UAAN,GAAmBhC,cAAc,CAAC+B,aAAD,CAAjC;AACAU,MAAAA,KAAK,CAACR,UAAN,GAAmBlC,oBAAoB,CAACgC,aAAD,CAAvC;AACAU,MAAAA,KAAK,CAACV,aAAN,GAAsBA,aAAtB;AACAU,MAAAA,KAAK,CAACP,MAAN,GAAgB,GAAEO,KAAK,CAACT,UAAN,CAAiBmC,MAAO,GAA1C;AACD,KAxFO;AA0FRC,IAAAA,eAAe,EAAE,CAAC3B,KAAD,EAAQC,MAAR,KAA0C;AACzDD,MAAAA,KAAK,CAACrB,YAAN,GAAqBsB,MAAM,CAACE,OAA5B;AACD,KA5FO;AA8FRyB,IAAAA,KAAK,EAAE,CAAC5B,KAAD,EAAQC,MAAR,KAA0C;AAC/CD,MAAAA,KAAK,CAACpB,aAAN,GAAsBoB,KAAK,CAACvB,IAA5B;AACAuB,MAAAA,KAAK,CAACtB,QAAN,GAAiBuB,MAAM,CAACE,OAAxB;AACD,KAjGO;AAkGR0B,IAAAA,cAAc,EAAE,CAAC7B,KAAD,EAAQC,MAAR,KAAoD;AAClED,MAAAA,KAAK,CAACjB,WAAN,GAAoB,IAAI+C,KAAJ,CAAU,WAAV,CAApB;AACA9B,MAAAA,KAAK,CAAChB,YAAN,GAAqB,IAAI8C,KAAJ,CAAU,YAAV,CAArB;AACA9B,MAAAA,KAAK,CAAClB,WAAN,GAAoBmB,MAAM,CAACE,OAA3B;AACD,KAtGO;AAwGR4B,IAAAA,SAAS,EAAE,CAAC/B,KAAD,EAAQC,MAAR,KAAwC;AACjD,YAAM;AAAEjB,QAAAA,YAAF;AAAgBF,QAAAA;AAAhB,UAAgCkB,KAAtC;AAEAlB,MAAAA,WAAW,IAAIA,WAAW,CAACkD,aAAZ,CAA0BhD,YAA1B,CAAf;AACD,KA5GO;AA8GRiD,IAAAA,OAAO,EAAE,CAACjC,KAAD,EAAQC,MAAR,KAAwC;AAC/C,YAAM;AAAElB,QAAAA,WAAF;AAAeD,QAAAA;AAAf,UAA+BkB,KAArC;AAEAlB,MAAAA,WAAW,IAAIA,WAAW,CAACkD,aAAZ,CAA0BjD,WAA1B,CAAf;AACD,KAlHO;AAoHRmD,IAAAA,IAAI,EAAE,CAAClC,KAAD,EAAQC,MAAR,KAA0C;AAC9CD,MAAAA,KAAK,CAACpB,aAAN,GAAsBqB,MAAM,CAACE,OAAP,GAAiBH,KAAK,CAACtB,QAA7C;AACD,KAtHO;AAwHRyD,IAAAA,UAAU,EAAE,CAACnC,KAAD,EAAQC,MAAR,KAA2C;AACrDD,MAAAA,KAAK,CAACnB,OAAN,GAAgBoB,MAAM,CAACE,OAAvB;AACD,KA1HO;AA4HRiC,IAAAA,YAAY,EAAE,CAACpC,KAAD,EAAQC,MAAR,KAA2C;AACvDD,MAAAA,KAAK,CAACX,SAAN,GAAkBY,MAAM,CAACE,OAAzB;AACD,KA9HO;AAgIRkC,IAAAA,UAAU,EAAE,CAACrC,KAAD,EAAQC,MAAR,KAA2C;AACnDD,MAAAA,KAAK,CAACX,SAAN,GAAkBY,MAAM,CAACE,OAAzB;AACH,KAlIO;AAoIRmC,IAAAA,eAAe,EAAE,CAACtC,KAAD,EAAQC,MAAR,KAA0C;AACzDD,MAAAA,KAAK,CAACZ,YAAN,GAAqB/B,iBAAiB,CACpC2C,KAAK,CAACZ,YAD8B,EAEpCa,MAAM,CAACE,OAF6B,EAGpCH,KAAK,CAACtB,QAH8B,CAAtC;AAKD,KA1IO;AA4IR6D,IAAAA,aAAa,EAAE,CAACvC,KAAD,EAAQC,MAAR,KAA0C;AACvD,YAAMuC,qBAAqB,GAAG/E,MAAM,CAACC,MAAP,CAAcN,eAAd,CAA9B;;AAEA,UAAI,CAACO,QAAQ,CAAC6E,qBAAD,EAAwBvC,MAAM,CAACE,OAA/B,CAAb,EAAsD;AACpD,cAAM,IAAIa,KAAJ,CACH,GAAEf,MAAM,CAACE,OAAQ,uBAAsBqC,qBAAqB,CAACvB,IAAtB,EAA6B,EADjE,CAAN;AAGD;;AACDjB,MAAAA,KAAK,CAACd,eAAN,GAAwBe,MAAM,CAACE,OAA/B;AACD,KArJO;AAuJRsC,IAAAA,WAAW,EAAE,CAACzC,KAAD,EAAQC,MAAR,KAAwC;AACnD,YAAM;AAAExB,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqBsB,KAA3B;AAEA,YAAM0C,WAAW,GAAGjE,IAAI,GAAG,EAA3B;AAEA,YAAMkE,OAAO,GAAGD,WAAW,GAAGhE,QAAd,GAAyBA,QAAzB,GAAoCgE,WAApD;AACA1C,MAAAA,KAAK,CAACpB,aAAN,GAAsB+D,OAAtB;AACA3C,MAAAA,KAAK,CAACvB,IAAN,GAAakE,OAAb;AACA3C,MAAAA,KAAK,CAACnB,OAAN,GAAgB;AACdqB,QAAAA,IAAI,EAAE,KADQ;AAEdE,QAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAFS;AAGdC,QAAAA,IAAI,EAAE;AAHQ,OAAhB;AAKD,KApKO;AAsKRqC,IAAAA,UAAU,EAAE,CAAC5C,KAAD,EAAQC,MAAR,KAAwC;AAClD,YAAM;AAAExB,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAqBsB,KAA3B;AAEA,YAAM6C,SAAS,GAAG,CAAlB;AACA,YAAMC,UAAU,GAAGrE,IAAI,GAAG,EAA1B;AAEA,YAAMkE,OAAO,GAAGG,UAAU,GAAGD,SAAb,GAAyBA,SAAzB,GAAqCC,UAArD;AACA9C,MAAAA,KAAK,CAACpB,aAAN,GAAsB+D,OAAtB;AACA3C,MAAAA,KAAK,CAACvB,IAAN,GAAakE,OAAb;AACA3C,MAAAA,KAAK,CAACnB,OAAN,GAAgB;AACdqB,QAAAA,IAAI,EAAE,MADQ;AAEdE,QAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAFS;AAGdC,QAAAA,IAAI,EAAE;AAHQ,OAAhB;AAKD,KApLO;AAsLRwC,IAAAA,UAAU,EAAE,CAAC/C,KAAD,EAAQC,MAAR,KAAwC;AAClD,UAAID,KAAK,CAAC3B,KAAV,EAAiB;AACf,cAAMwC,OAAO,GAAGb,KAAK,CAAC1B,cAAN,IAAwBnB,QAAQ,CAACiB,MAAjD;AACA,cAAMC,KAAK,GAAGwC,OAAO,KAAK,CAA1B;AACAb,QAAAA,KAAK,CAAC5B,MAAN,GAAeyC,OAAf;AACAb,QAAAA,KAAK,CAAC3B,KAAN,GAAcA,KAAd;AACD,OALD,MAKO;AACL2B,QAAAA,KAAK,CAAC3B,KAAN,GAAc,IAAd;AACA2B,QAAAA,KAAK,CAAC1B,cAAN,GAAuB0B,KAAK,CAAC5B,MAA7B;AACA4B,QAAAA,KAAK,CAAC5B,MAAN,GAAe,CAAf;AACD;AACF;AAjMO;AAH2B,CAAD,CAA/B;AAwMP,OAAO,MAAM4E,YAAY,GAAIhD,KAAD,IAAsBA,KAAK,CAACiD,MAAjD;AAEP,OAAO,MAAM;AACXlD,EAAAA,IADW;AAEXS,EAAAA,KAFW;AAGXC,EAAAA,gBAHW;AAIXC,EAAAA,aAJW;AAKXC,EAAAA,qBALW;AAMXC,EAAAA,SANW;AAOXE,EAAAA,iBAPW;AAQXiC,EAAAA,UARW;AASXzB,EAAAA,WATW;AAUXC,EAAAA,OAVW;AAWXK,EAAAA,KAXW;AAYXa,EAAAA,WAZW;AAaXG,EAAAA,UAbW;AAcXX,EAAAA,OAdW;AAeXF,EAAAA,SAfW;AAgBXF,EAAAA,cAhBW;AAiBXX,EAAAA,MAjBW;AAkBXG,EAAAA,MAlBW;AAmBXN,EAAAA,kBAnBW;AAoBXI,EAAAA,gBApBW;AAqBXoB,EAAAA,aArBW;AAsBXL,EAAAA,IAtBW;AAuBXP,EAAAA,eAvBW;AAwBXS,EAAAA,YAxBW;AAyBXE,EAAAA,eAzBW;AA0BXH,EAAAA,UA1BW;AA2BXX,EAAAA;AA3BW,IA4BT5B,WAAW,CAACsD,OA5BT;AA8BP,OAAO,MAAMC,eAAe,GAAG,MAAgB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrE,QAAMrD,KAAK,GAAGqD,QAAQ,GAAGJ,MAAzB;;AACA,MAAIjD,KAAK,CAAChC,OAAV,EAAmB;AACjBoF,IAAAA,QAAQ,CAAC5C,KAAK,EAAN,CAAR;AACD,GAFD,MAEO;AACL4C,IAAAA,QAAQ,CAACrD,IAAI,EAAL,CAAR;AACD;AACF,CAPM;AASP,eAAeH,WAAW,CAAC0D,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: number;\n  buffering: boolean;\n  containerSize: ContainerSize;\n  breakpoint: ContainerSize;\n  playerSize: ContainerSize;\n  layout: string;\n  loading: boolean;\n  autoplay: boolean;\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  autoplay\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n      }\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n\n    pause: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n      }\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setContainerSize: (state, action: PayloadAction<ContainerSize>) => {\n      var containerSize = action.payload;\n      if (\n        containerSize.width === 0 &&\n        containerSize.height === 0 &&\n        state.containerSize\n      ) {\n        containerSize = state.containerSize;\n      }\n\n      state.breakpoint = findBreakpoint(containerSize);\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${state.breakpoint.height}p`;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n    setLoading: (state, action: PayloadAction<boolean>) => {\n        state.buffering = action.payload;\n    },\n\n    setClipProgress: (state, action: PayloadAction<number>) => {\n      state.clipProgress = buildClipProgress(\n        state.clipProgress,\n        action.payload,\n        state.duration\n      );\n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}