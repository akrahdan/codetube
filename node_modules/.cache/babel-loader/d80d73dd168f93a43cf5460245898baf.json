{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: null,\n  supportedResolutions: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n    pause: (state, action) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setPlaying: (state, action) => {\n      state.playing = action.payload;\n    },\n    setPreferredResolutions: (state, action) => {\n      state.preferredResolutions = action.payload;\n    },\n    setCurrentResolution: (state, action) => {\n      state.currentResolution = action.payload;\n    },\n    setSupportedResolutions: (state, action) => {\n      state.supportedResolutions = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setContainerSize: (state, action) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize);\n\n      if (containerSize.width === 0 && containerSize.height === 0 && state.containerSize) {\n        containerSize = state.containerSize;\n      }\n\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint;\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setAutoplay: (state, action) => {\n      state.userAutoplaySetting = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","buildClipProgress","calculateAspectRatio","findBreakpoint","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","fullscreenState","NORMAL","clipProgress","buffering","containerSize","breakpoint","playerSize","layout","loading","userAutoplaySetting","currentResolution","supportedResolutions","playerSlice","name","reducers","play","state","action","icon","payload","key","Math","random","fade","pause","setPlaybackSpeed","setPlaying","setPreferredResolutions","preferredResolutions","setCurrentResolution","setSupportedResolutions","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","showUI","visible","toggleFullscreen","FULLSCREEN","hideUI","setDuration","setTime","setContainerSize","console","log","width","height","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setLoading","setAutoplay","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","player","actions","togglePlayPause","dispatch","getState","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: number;\n  buffering: boolean;\n  containerSize: ContainerSize;\n  breakpoint: ContainerSize;\n  playerSize: ContainerSize;\n  layout: string;\n  loading: boolean;\n  userAutoplaySetting: boolean;\n  preferredResolutions: Resolution[];\n  currentResolution: Resolution;\n  supportedResolutions: Resolution[]\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\ninterface Resolution {\n    width?: string;\n    height: string;\n    index: number;\n  }\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: null,\n  supportedResolutions: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n      }\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n\n    pause: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n      }\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setPlaying: (state, action: PayloadAction<boolean>) => {\n        state.playing = action.payload;\n    },\n\n    setPreferredResolutions: (state, action: PayloadAction<Resolution[]>) => {\n        state.preferredResolutions = action.payload;\n    },\n\n    setCurrentResolution: (state, action: PayloadAction<Resolution>) => {\n        state.currentResolution = action.payload;\n    },\n\n    setSupportedResolutions: (state, action: PayloadAction<Resolution[]>) => {\n        state.supportedResolutions = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setContainerSize: (state, action: PayloadAction<ContainerSize>) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize)\n      if (\n        containerSize.width === 0 &&\n        containerSize.height === 0 &&\n        state.containerSize\n      ) {\n        containerSize = state.containerSize;\n      }\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n    setLoading: (state, action: PayloadAction<boolean>) => {\n        state.loading = action.payload;\n    },\n\n    setAutoplay: (state, action: PayloadAction<boolean>) => {\n        state.userAutoplaySetting = action.payload;\n    },\n\n    setClipProgress: (state, action: PayloadAction<number>) => {\n      state.clipProgress = buildClipProgress(\n        state.clipProgress,\n        action.payload,\n        state.duration\n      );\n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}