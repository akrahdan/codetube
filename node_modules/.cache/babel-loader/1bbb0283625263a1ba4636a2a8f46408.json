{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport { coursesApi } from \"services/courses\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nimport courseReducer from \"state/course/courseSplice\";\nimport projectReducer from 'state/project/projectSplice';\nimport playerReducer from 'state/player/playerSlice';\nimport instructorReducer from 'state/instructor/instructorSplice';\nimport curriculumSplice from \"state/curriculum/currriculumSplice\";\nimport targetSplice from \"state/target/targetSplice\";\nconst {\n  middleware: routerMiddleWare,\n  enhancer: routerEnhancer,\n  initialDispatch,\n  reducer: location\n} = connectRoutes(routesMap, {\n  querySerializer: queryString,\n  initialDispatch: false,\n  scrollTop: true\n});\nexport const store = configureStore({\n  reducer: {\n    location: location,\n    auth: authReducer,\n    modal: modalReducer,\n    player: playerReducer,\n    course: courseReducer,\n    curriculum: curriculumSplice,\n    project: projectReducer,\n    target: targetSplice,\n    instructor: instructorReducer,\n    [authApi.reducerPath]: authApi.reducer,\n    [coursesApi.reducerPath]: coursesApi.reducer,\n    [projectApi.reducerPath]: projectApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  }).concat(authApi.middleware, routerMiddleWare),\n  enhancers: defaultEnhancers => defaultEnhancers.concat(routerEnhancer)\n});\ninitialDispatch();","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/store/index.ts"],"names":["configureStore","connectRoutes","queryString","routesMap","authApi","projectApi","coursesApi","modalReducer","authReducer","courseReducer","projectReducer","playerReducer","instructorReducer","curriculumSplice","targetSplice","middleware","routerMiddleWare","enhancer","routerEnhancer","initialDispatch","reducer","location","querySerializer","scrollTop","store","auth","modal","player","course","curriculum","project","target","instructor","reducerPath","getDefaultMiddleware","serializableCheck","concat","enhancers","defaultEnhancers"],"mappings":"AAAA,SAASA,cAAT,QAA0E,kBAA1E;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;AAGA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAQC,gBAAR,MAA+B,oCAA/B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAiBA,MAAM;AAAEC,EAAAA,UAAU,EAAEC,gBAAd;AAAgCC,EAAAA,QAAQ,EAAEC,cAA1C;AAA0DC,EAAAA,eAA1D;AAA2EC,EAAAA,OAAO,EAAEC;AAApF,IAAgGpB,aAAa,CAACE,SAAD,EAAY;AAC3HmB,EAAAA,eAAe,EAAEpB,WAD0G;AAE3HiB,EAAAA,eAAe,EAAE,KAF0G;AAG3HI,EAAAA,SAAS,EAAE;AAHgH,CAAZ,CAAnH;AAMA,OAAO,MAAMC,KAAK,GAAGxB,cAAc,CAAC;AAChCoB,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAEA,QADL;AAELI,IAAAA,IAAI,EAAEjB,WAFD;AAGLkB,IAAAA,KAAK,EAAEnB,YAHF;AAILoB,IAAAA,MAAM,EAAEhB,aAJH;AAKLiB,IAAAA,MAAM,EAAEnB,aALH;AAMLoB,IAAAA,UAAU,EAAEhB,gBANP;AAOLiB,IAAAA,OAAO,EAAEpB,cAPJ;AAQLqB,IAAAA,MAAM,EAAEjB,YARH;AASLkB,IAAAA,UAAU,EAAEpB,iBATP;AAUL,KAACR,OAAO,CAAC6B,WAAT,GAAuB7B,OAAO,CAACgB,OAV1B;AAWL,KAACd,UAAU,CAAC2B,WAAZ,GAA0B3B,UAAU,CAACc,OAXhC;AAYL,KAACf,UAAU,CAAC4B,WAAZ,GAA0B5B,UAAU,CAACe;AAZhC,GADuB;AAehCL,EAAAA,UAAU,EAAGmB,oBAAD,IACZA,oBAAoB,CAAC;AACjBC,IAAAA,iBAAiB,EAAE;AADF,GAAD,CAApB,CAEGC,MAFH,CAEUhC,OAAO,CAACW,UAFlB,EAE8BC,gBAF9B,CAhBgC;AAmBhCqB,EAAAA,SAAS,EAAGC,gBAAD,IAAsBA,gBAAgB,CAACF,MAAjB,CAAwBlB,cAAxB;AAnBD,CAAD,CAA5B;AAqBPC,eAAe","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes'\nimport rootReducer, { reduceInitialState } from 'portal/state/reducers';\nimport { SiteState } from 'state/types';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport { coursesApi } from \"services/courses\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nimport courseReducer from \"state/course/courseSplice\";\nimport projectReducer from 'state/project/projectSplice';\nimport playerReducer from 'state/player/playerSlice';\nimport instructorReducer from 'state/instructor/instructorSplice';\nimport  curriculumSplice  from \"state/curriculum/currriculumSplice\";\nimport targetSplice from \"state/target/targetSplice\";\n\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nconst { middleware: routerMiddleWare, enhancer: routerEnhancer, initialDispatch, reducer: location} = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialDispatch: false,\n    scrollTop: true,\n});\n\nexport const store = configureStore({\n    reducer: {\n        location: location,\n        auth: authReducer,\n        modal: modalReducer,\n        player: playerReducer,\n        course: courseReducer,\n        curriculum: curriculumSplice,\n        project: projectReducer,\n        target: targetSplice,\n        instructor: instructorReducer,\n        [authApi.reducerPath]: authApi.reducer,\n        [coursesApi.reducerPath]: coursesApi.reducer,\n        [projectApi.reducerPath]: projectApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware({\n        serializableCheck: false\n    }).concat(authApi.middleware, routerMiddleWare),\n    enhancers: (defaultEnhancers) => defaultEnhancers.concat(routerEnhancer)\n})\ninitialDispatch()\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n ReturnType, \n RootState,\n unknown,\n Action<string>\n >;"]},"metadata":{},"sourceType":"module"}