{"ast":null,"code":"import _slicedToArray from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{isValidElement,useEffect,useState}from'react';import TruncateMarkup from'react-truncate-markup';import{Box}from'../Box';import{jsx as _jsx}from\"react/jsx-runtime\";export var Truncate=function Truncate(_ref){var className=_ref.className,children=_ref.children,lines=_ref.lines,expanded=_ref.expanded,_ref$onTruncate=_ref.onTruncate,onTruncate=_ref$onTruncate===void 0?function(){}:_ref$onTruncate;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTruncated=_useState2[0],setIsTruncated=_useState2[1];useEffect(function(){onTruncate(isTruncated);},[isTruncated,onTruncate]);/** Truncate markup expects a single child element */var truncatedChildren=/*#__PURE__*/_jsx(TruncateMarkup,{tokenize:\"characters\",ellipsis:/*#__PURE__*/_jsx(\"span\",{children:\"...\"}),lines:lines,onTruncate:setIsTruncated,children:/*#__PURE__*/_jsx(Box,{as:\"span\",display:\"inline-block\",width:\"100%\",className:className,children:React.Children.map(children,function(child){return/*#__PURE__*/isValidElement(child)||typeof child==='string'?child:/*#__PURE__*/_jsx(TruncateMarkup.Atom,{children:child});})})});/** If lines is false do not attempt to truncate */return expanded?/*#__PURE__*/_jsx(Box,{as:\"span\",display:\"inline-block\",width:\"100%\",className:className,children:children}):truncatedChildren;};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Truncate/index.tsx"],"names":["React","isValidElement","useEffect","useState","TruncateMarkup","Box","Truncate","className","children","lines","expanded","onTruncate","isTruncated","setIsTruncated","truncatedChildren","Children","map","child"],"mappings":"4JAAA,MAAOA,CAAAA,KAAP,EAAgBC,cAAhB,CAAgCC,SAAhC,CAA2CC,QAA3C,KAA2D,OAA3D,CACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CAEA,OAASC,GAAT,KAAoB,QAApB,C,2CAaA,MAAO,IAAMC,CAAAA,QAAiC,CAAG,QAApCA,CAAAA,QAAoC,MAM3C,IALJC,CAAAA,SAKI,MALJA,SAKI,CAJJC,QAII,MAJJA,QAII,CAHJC,KAGI,MAHJA,KAGI,CAFJC,QAEI,MAFJA,QAEI,sBADJC,UACI,CADJA,UACI,0BADS,UAAM,CAAE,CACjB,+BACkCR,QAAQ,CAAC,KAAD,CAD1C,wCACGS,WADH,eACgBC,cADhB,eAGJX,SAAS,CAAC,UAAM,CACdS,UAAU,CAACC,WAAD,CAAV,CACD,CAFQ,CAEN,CAACA,WAAD,CAAcD,UAAd,CAFM,CAAT,CAIA,qDACA,GAAMG,CAAAA,iBAAiB,cACrB,KAAC,cAAD,EACE,QAAQ,CAAC,YADX,CAEE,QAAQ,cAAE,6BAFZ,CAGE,KAAK,CAAEL,KAHT,CAIE,UAAU,CAAEI,cAJd,uBAME,KAAC,GAAD,EAAK,EAAE,CAAC,MAAR,CAAe,OAAO,CAAC,cAAvB,CAAsC,KAAK,CAAC,MAA5C,CAAmD,SAAS,CAAEN,SAA9D,UACGP,KAAK,CAACe,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,CAA6B,SAACS,KAAD,QAC5B,aAAAhB,cAAc,CAACgB,KAAD,CAAd,EAAyB,MAAOA,CAAAA,KAAP,GAAiB,QAA1C,CACEA,KADF,cAGE,KAAC,cAAD,CAAgB,IAAhB,WAAsBA,KAAtB,EAJ0B,EAA7B,CADH,EANF,EADF,CAmBA,mDAEA,MAAOP,CAAAA,QAAQ,cACb,KAAC,GAAD,EAAK,EAAE,CAAC,MAAR,CAAe,OAAO,CAAC,cAAvB,CAAsC,KAAK,CAAC,MAA5C,CAAmD,SAAS,CAAEH,SAA9D,UACGC,QADH,EADa,CAKbM,iBALF,CAOD,CA1CM","sourcesContent":["import React, { isValidElement, useEffect, useState } from 'react';\nimport TruncateMarkup from 'react-truncate-markup';\n\nimport { Box } from '../Box';\n\ntype TruncateProps = {\n  /** class name for styling */\n  className?: string;\n  /** number of the maximum lines to display, pass false to disable truncation */\n  lines: number;\n  /** make the truncation toggleable */\n  expanded?: boolean;\n  /** Callback indicating if truncation was necessary */\n  onTruncate?: (truncated: boolean) => void;\n};\n\nexport const Truncate: React.FC<TruncateProps> = ({\n  className,\n  children,\n  lines,\n  expanded,\n  onTruncate = () => {},\n}) => {\n  const [isTruncated, setIsTruncated] = useState(false);\n\n  useEffect(() => {\n    onTruncate(isTruncated);\n  }, [isTruncated, onTruncate]);\n\n  /** Truncate markup expects a single child element */\n  const truncatedChildren = (\n    <TruncateMarkup\n      tokenize=\"characters\"\n      ellipsis={<span>...</span>}\n      lines={lines}\n      onTruncate={setIsTruncated}\n    >\n      <Box as=\"span\" display=\"inline-block\" width=\"100%\" className={className}>\n        {React.Children.map(children, (child) =>\n          isValidElement(child) || typeof child === 'string' ? (\n            child\n          ) : (\n            <TruncateMarkup.Atom>{child}</TruncateMarkup.Atom>\n          )\n        )}\n      </Box>\n    </TruncateMarkup>\n  );\n\n  /** If lines is false do not attempt to truncate */\n\n  return expanded ? (\n    <Box as=\"span\" display=\"inline-block\" width=\"100%\" className={className}>\n      {children}\n    </Box>\n  ) : (\n    truncatedChildren\n  );\n};\n"]},"metadata":{},"sourceType":"module"}