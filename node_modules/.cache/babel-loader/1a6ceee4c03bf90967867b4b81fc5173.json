{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/Forms/RegistrationForm/SigninForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport { v4 as uuid } from 'uuid';\n// import { pushDataLayerEvent, trackUserClick } from '~/libs/eventTracking';\n// import { logger } from '~/libs/logging/logger';\nimport { passwordTips } from 'libs/passwordTips'; // import { csrf } from '~/libs/superagent-auth';\n// import { safeRedirectUrl } from '~/libs/url';\n\n// import registrationStrings from '~/localized/registration.json';\n// import { useFeatureFlag } from 'state/features/hooks';\nimport { redirectAfterLogin, serializeRegistrationValues } from './helpers';\nimport styles from './styles/index.module.scss';\nimport { UserSubmitKey } from './types';\nimport { VALIDATORS } from './validators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SigninForm = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  _s();\n\n  // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [serializedForm, setSerializedForm] = useState();\n  const [recaptchaError, setRecaptchaError] = useState();\n  const captcha = useRef(null);\n  const {\n    emailValidation,\n    passwordValidation\n  } = useMemo(() => ({\n    emailValidation: VALIDATORS.email(),\n    passwordValidation: VALIDATORS.password()\n  }), []); // if (ssoFeatureFlag) {\n  //   return <RegistrationSSOForm onSuccess={onSuccess} />;\n  // }\n\n  const submitForm = recaptchaToken => {\n    setDisabled(true); // request\n    //   .post(registerPath)\n    //   .send({ ...serializedForm, 'g-recaptcha-response': recaptchaToken })\n    //   .use(csrf)\n    //   .accept('json')\n    //   .then(({ body }) => {\n    //     // pushDataLayerEvent('user_sign_up');\n    //     setDisabled(false);\n    //     onSuccess(body);\n    //   })\n    //   .catch((err) => {\n    //     setRecaptchaError(\n    //       extractValidationErrors(err.response)?.['g-recaptcha-response']\n    //     );\n    //     setDisabled(false);\n    //     resetRecaptcha();\n    //   });\n  };\n\n  const resetRecaptcha = () => {\n    // Reset recaptcha by re-rendering the component\n    // using `recaptchaInstanceId` as a key\n    // This is more predictable than calling captcha.reset()\n    setDisabled(false);\n    setRecaptchaInstanceId(uuid());\n  };\n\n  const onSubmitInitialize = values => {\n    // trackUserClick({ target: 'create_account' });\n    setDisabled(true);\n    const serializedValues = serializeRegistrationValues(values);\n    setSerializedForm(serializedValues);\n\n    if (captcha.current === null) {\n      // logger.error({ message: 'captcha on checkoutpage has a null ref' });\n      return;\n    }\n\n    captcha.current.execute(); // validate the full form to see if we can submit\n\n    setDisabled(false);\n  };\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n\n\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const {\n    currentPage,\n    locationType,\n    redirectUrl\n  } = props;\n  const signingUpFromExercise = locationType === 'location/EXERCISE'; // const safeRedirect = redirectUrl && safeRedirectUrl(redirectUrl);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.registrationContainer,\n    children: [/*#__PURE__*/_jsxDEV(GridForm, {\n      className: styles.loginForm,\n      fields: [{\n        name: UserSubmitKey.EMAIL,\n        label: 'Email',\n        type: 'email',\n        defaultValue: '',\n        size: 12,\n        onUpdate,\n        validation: emailValidation\n      }, {\n        name: UserSubmitKey.PASSWORD,\n        label: 'Password',\n        type: 'password',\n        tooltip: {\n          children: /*#__PURE__*/_jsxDEV(Markdown, {\n            text: passwordTips\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this),\n          id: 'password-tooltip',\n          alignment: 'bottom-left',\n          className: styles.tooltipContainer\n        },\n        size: 12,\n        onUpdate,\n        defaultValue: '',\n        validation: passwordValidation\n      }, {\n        name: 'referring_page',\n        type: 'hidden',\n        defaultValue: currentPage\n      }, {\n        name: 'redirect',\n        type: 'hidden',\n        defaultValue: {}\n      }, {\n        name: 'authenticity_token',\n        type: 'hidden',\n        defaultValue: ''\n      }, {\n        name: UserSubmitKey.CODING_REMINDERS_COMMS_TIMEZONE,\n        type: 'hidden',\n        defaultValue: Intl.DateTimeFormat().resolvedOptions().timeZone\n      }, {\n        name: 'signing_up_from_exercise',\n        type: 'hidden',\n        defaultValue: `${signingUpFromExercise}`\n      }, {\n        name: 'sweet_container',\n        label: 'If you are a human, do not fill in this field.',\n        type: 'sweet-container'\n      }],\n      submit: {\n        contents: 'Sign Up',\n        position: 'stretch',\n        theme: 'brand-red',\n        size: 12,\n        disabled: isDisabled || submitLocked\n      },\n      validation: \"all\",\n      onSubmit: onSubmitInitialize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 16,\n      children: recaptchaError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.recaptchaError,\n        children: recaptchaError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      className: styles.textDisplay,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.textCenter,\n        children: [\"Need an account?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: styles.textLink,\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SigninForm, \"A8KcB5VrvHgTItGfewW8U6vjYtY=\", false, function () {\n  return [useMountedState];\n});\n\n_c = SigninForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SigninForm\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/Forms/RegistrationForm/SigninForm.tsx"],"names":["Box","GridForm","Markdown","Text","delay","React","useMemo","useRef","useState","useMountedState","v4","uuid","passwordTips","redirectAfterLogin","serializeRegistrationValues","styles","UserSubmitKey","VALIDATORS","SigninForm","onSuccess","props","isMounted","isDisabled","setDisabled","submitLocked","setSubmitLocked","recaptchaInstanceId","setRecaptchaInstanceId","serializedForm","setSerializedForm","recaptchaError","setRecaptchaError","captcha","emailValidation","passwordValidation","email","password","submitForm","recaptchaToken","resetRecaptcha","onSubmitInitialize","values","serializedValues","current","execute","onUpdate","currentPage","locationType","redirectUrl","signingUpFromExercise","registrationContainer","loginForm","name","EMAIL","label","type","defaultValue","size","validation","PASSWORD","tooltip","children","id","alignment","className","tooltipContainer","CODING_REMINDERS_COMMS_TIMEZONE","Intl","DateTimeFormat","resolvedOptions","timeZone","contents","position","theme","disabled","textDisplay","textCenter","textLink"],"mappings":"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","sourcesContent":["import { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport request from 'superagent';\nimport { v4 as uuid } from 'uuid';\n\nimport { OauthButtonGroup } from 'components/Forms/OauthButtonGroup';\nimport { RecaptchaWrapper } from 'components/Forms/RecaptchaWrapper';\nimport { cfdata } from 'libs/cfdata';\n// import { pushDataLayerEvent, trackUserClick } from '~/libs/eventTracking';\n// import { logger } from '~/libs/logging/logger';\nimport { passwordTips } from 'libs/passwordTips';\n// import { csrf } from '~/libs/superagent-auth';\n// import { safeRedirectUrl } from '~/libs/url';\nimport { registerPath } from 'libs/urlHelpers';\n// import registrationStrings from '~/localized/registration.json';\n// import { useFeatureFlag } from 'state/features/hooks';\n\nimport { redirectAfterLogin, serializeRegistrationValues } from './helpers';\nimport { RegistrationSSOForm } from './RegistrationSSOForm';\nimport styles from './styles/index.module.scss';\nimport {\n  RegistrationFormProps,\n  SerializedValues,\n  SubmitValues,\n  UserSubmitKey,\n} from './types';\nimport { extractValidationErrors, VALIDATORS } from './validators';\n\nexport const SigninForm: React.FC<RegistrationFormProps> = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [\n    serializedForm,\n    setSerializedForm,\n  ] = useState<SerializedValues | null>();\n  const [recaptchaError, setRecaptchaError] = useState<string | undefined>();\n\n  const captcha = useRef<RecaptchaWrapper | null>(null);\n\n  const { emailValidation, passwordValidation } = useMemo(\n    () => ({\n      emailValidation: VALIDATORS.email(),\n      passwordValidation: VALIDATORS.password(),\n    }),\n    []\n  );\n\n  // if (ssoFeatureFlag) {\n  //   return <RegistrationSSOForm onSuccess={onSuccess} />;\n  // }\n\n  const submitForm = (recaptchaToken: string) => {\n    setDisabled(true);\n    // request\n    //   .post(registerPath)\n    //   .send({ ...serializedForm, 'g-recaptcha-response': recaptchaToken })\n    //   .use(csrf)\n    //   .accept('json')\n    //   .then(({ body }) => {\n    //     // pushDataLayerEvent('user_sign_up');\n    //     setDisabled(false);\n    //     onSuccess(body);\n    //   })\n    //   .catch((err) => {\n    //     setRecaptchaError(\n    //       extractValidationErrors(err.response)?.['g-recaptcha-response']\n    //     );\n    //     setDisabled(false);\n    //     resetRecaptcha();\n    //   });\n  };\n\n  const resetRecaptcha = () => {\n    // Reset recaptcha by re-rendering the component\n    // using `recaptchaInstanceId` as a key\n    // This is more predictable than calling captcha.reset()\n    setDisabled(false);\n    setRecaptchaInstanceId(uuid());\n  };\n\n  const onSubmitInitialize = (values: SubmitValues) => {\n    // trackUserClick({ target: 'create_account' });\n\n    setDisabled(true);\n    const serializedValues = serializeRegistrationValues(values);\n    setSerializedForm(serializedValues);\n\n    if (captcha.current === null) {\n      // logger.error({ message: 'captcha on checkoutpage has a null ref' });\n      return;\n    }\n    captcha.current.execute();\n    // validate the full form to see if we can submit\n    setDisabled(false);\n  };\n\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const { currentPage, locationType, redirectUrl } = props;\n  const signingUpFromExercise = locationType === 'location/EXERCISE';\n  // const safeRedirect = redirectUrl && safeRedirectUrl(redirectUrl);\n\n  return (\n    <div className={styles.registrationContainer}>\n      <GridForm\n        className={styles.loginForm}\n        fields={[\n          {\n            name: UserSubmitKey.EMAIL,\n            label: 'Email',\n            type: 'email',\n            defaultValue: '',\n            size: 12,\n            onUpdate,\n            validation: emailValidation,\n          },\n          {\n            name: UserSubmitKey.PASSWORD,\n            label: 'Password',\n            type: 'password',\n            tooltip: {\n              children: <Markdown text={passwordTips} />,\n              id: 'password-tooltip',\n              alignment: 'bottom-left',\n              className: styles.tooltipContainer,\n            },\n            size: 12,\n            onUpdate,\n            defaultValue: '',\n            validation: passwordValidation,\n          },\n          {\n            name: 'referring_page',\n            type: 'hidden',\n            defaultValue: currentPage,\n          },\n          {\n            name: 'redirect',\n            type: 'hidden',\n            defaultValue: {},\n          },\n          {\n            name: 'authenticity_token',\n            type: 'hidden',\n            defaultValue: '',\n          },\n          {\n            name: UserSubmitKey.CODING_REMINDERS_COMMS_TIMEZONE,\n            type: 'hidden',\n            defaultValue: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          },\n          {\n            name: 'signing_up_from_exercise',\n            type: 'hidden',\n            defaultValue: `${signingUpFromExercise}`,\n          },\n          {\n            name: 'sweet_container',\n            label: 'If you are a human, do not fill in this field.',\n            type: 'sweet-container',\n          },\n        ]}\n        submit={{\n          contents: 'Sign Up',\n          position: 'stretch',\n          theme: 'brand-red',\n          size: 12,\n          disabled: isDisabled || submitLocked,\n        }}\n        validation=\"all\"\n        onSubmit={onSubmitInitialize}\n      />\n      <Box pt={16}>\n        {recaptchaError && (\n          <div className={styles.recaptchaError} >\n            {recaptchaError}\n          </div>\n        )}\n        {/* <RecaptchaWrapper\n          key={recaptchaInstanceId}\n          publicKey={''}\n          size=\"invisible\"\n          ref={captcha}\n          onChange={submitForm}\n          onExpired={resetRecaptcha}\n        /> */}\n      </Box>\n      <Text className={styles.textDisplay} >\n        <p className={styles.textCenter}>\n          Need an account?{\" \"}\n          <a className={styles.textLink}>\n            Sign up\n          </a>\n          .\n        </p>\n      </Text>\n\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}