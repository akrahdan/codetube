{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/SelectDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { ArrowChevronDownIcon } from '@codecademy/gamut-icons';\nimport { theme } from '@codecademy/gamut-styles';\nimport { css } from '@emotion/react';\nimport React, { useMemo, useState } from 'react';\nimport ReactSelect, { components as SelectDropdownElements } from 'react-select';\nimport { colorStates, conditionalBorderStyles, formDropdownStyles, formFieldStyles } from './styles/shared';\nimport { parseOptions } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DropdownIndicator,\n  SelectContainer\n} = SelectDropdownElements;\n\nconst ChevronDropdown = props => {\n  return /*#__PURE__*/_jsxDEV(DropdownIndicator, { ...props,\n    children: /*#__PURE__*/_jsxDEV(ArrowChevronDownIcon, {\n      size: 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChevronDropdown;\n\nconst CustomContainer = ({\n  children,\n  ...rest\n}) => {\n  const {\n    inputProps\n  } = rest.selectProps;\n  const value = rest.hasValue ? rest.getValue()[0].value : '';\n  return /*#__PURE__*/_jsxDEV(SelectContainer, { ...rest,\n    children: [children, /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      value: value,\n      ...inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = CustomContainer;\n\nconst selectBaseStyles = ({\n  error,\n  activated,\n  isFocused,\n  isDisabled\n}) => css`\n  ${formFieldStyles}\n  ${conditionalBorderStyles({\n  error,\n  activated,\n  isFocused,\n  isDisabled\n})}\n  line-height: ${theme.lineHeight.base};\n  display: flex;\n`;\n\nconst errorColorState = error => {\n  const color = error ? colorStates.error.color : colorStates.base.color;\n  return color;\n};\n\nconst customStyles = {\n  dropdownIndicator: (provided, state) => ({\n    color: errorColorState(state.selectProps.error),\n    display: 'flex',\n    padding: '0',\n    pointerEvents: 'none'\n  }),\n  container: provided => ({ ...provided,\n    pointerEvents: 'visible',\n    cursor: 'pointer',\n    width: '100%',\n    minWidth: '7rem'\n  }),\n  menu: (provided, state) => ({ ...provided,\n    ...formDropdownStyles(state.selectProps.error)\n  }),\n  option: (provided, state) => ({\n    padding: '14px 11px 14px 11px',\n    cursor: 'pointer',\n    backgroundColor: state.isSelected && colorStates.dropdown.selected.backgroundColor || state.isFocused && colorStates.dropdown.focused.backgroundColor || 'transparent',\n    '&:hover': {\n      backgroundColor: colorStates.dropdown.focused.backgroundColor\n    }\n  }),\n  control: (provided, state) => ({ ...selectBaseStyles({\n      error: state.selectProps.error,\n      activated: state.selectProps.activated,\n      isFocused: state.isFocused,\n      isDisabled: state.isDisabled\n    })\n  }),\n  singleValue: (provided, state) => ({\n    color: errorColorState(state.selectProps.error),\n    display: 'flex'\n  }),\n  valueContainer: provided => ({ ...provided,\n    padding: 0\n  })\n};\nconst defaultProps = {\n  name: undefined,\n  isSearchable: false,\n  isMulti: false,\n  styles: customStyles,\n  components: {\n    DropdownIndicator: ChevronDropdown,\n    IndicatorSeparator: () => null,\n    SelectContainer: CustomContainer\n  }\n};\nexport const SelectDropdown = ({\n  options,\n  error,\n  id,\n  disabled,\n  onChange,\n  value = undefined,\n  name,\n  placeholder = 'Select an option',\n  inputProps,\n  ...rest\n}) => {\n  _s();\n\n  const [activated, setActivated] = useState(false);\n  const baseInputProps = {\n    name\n  };\n\n  const changeHandler = optionEvent => {\n    onChange === null || onChange === void 0 ? void 0 : onChange(optionEvent, {\n      action: 'select-option',\n      option: optionEvent\n    });\n    setActivated(true);\n  };\n\n  const selectOptions = useMemo(() => {\n    return parseOptions({\n      options,\n      id\n    });\n  }, [options, id]);\n  const parsedValue = useMemo(() => {\n    const currentValue = selectOptions.find(({\n      value: optionValue\n    }) => optionValue === value);\n    return currentValue;\n  }, [selectOptions, value]);\n  return /*#__PURE__*/_jsxDEV(ReactSelect, { ...defaultProps,\n    id: id || rest.htmlFor,\n    value: parsedValue,\n    activated: activated,\n    error: Boolean(error),\n    onChange: changeHandler,\n    inputProps: { ...inputProps,\n      ...baseInputProps\n    },\n    isDisabled: disabled,\n    options: selectOptions,\n    placeholder: placeholder,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectDropdown, \"HYh6Kkxe4XGG0dLBDSlUAkvhttQ=\");\n\n_c3 = SelectDropdown;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ChevronDropdown\");\n$RefreshReg$(_c2, \"CustomContainer\");\n$RefreshReg$(_c3, \"SelectDropdown\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/SelectDropdown.tsx"],"names":["ArrowChevronDownIcon","theme","css","React","useMemo","useState","ReactSelect","components","SelectDropdownElements","colorStates","conditionalBorderStyles","formDropdownStyles","formFieldStyles","parseOptions","DropdownIndicator","SelectContainer","ChevronDropdown","props","CustomContainer","children","rest","inputProps","selectProps","value","hasValue","getValue","selectBaseStyles","error","activated","isFocused","isDisabled","lineHeight","base","errorColorState","color","customStyles","dropdownIndicator","provided","state","display","padding","pointerEvents","container","cursor","width","minWidth","menu","option","backgroundColor","isSelected","dropdown","selected","focused","control","singleValue","valueContainer","defaultProps","name","undefined","isSearchable","isMulti","styles","IndicatorSeparator","SelectDropdown","options","id","disabled","onChange","placeholder","setActivated","baseInputProps","changeHandler","optionEvent","action","selectOptions","parsedValue","currentValue","find","optionValue","htmlFor","Boolean"],"mappings":"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","sourcesContent":["import { ArrowChevronDownIcon } from '@codecademy/gamut-icons';\nimport { theme } from '@codecademy/gamut-styles';\nimport { css } from '@emotion/react';\nimport React, {\n  ReactNode,\n  SelectHTMLAttributes,\n  useMemo,\n  useState,\n} from 'react';\nimport ReactSelect, {\n  components as SelectDropdownElements,\n  ContainerProps,\n  IndicatorProps,\n  NamedProps,\n  OptionTypeBase,\n  StylesConfig,\n} from 'react-select';\n\nimport { SelectComponentProps } from './Select';\nimport {\n  colorStates,\n  conditionalBorderStyles,\n  formDropdownStyles,\n  formFieldStyles,\n} from './styles/shared';\nimport { conditionalStyleProps } from './styles/shared-system-props';\nimport { parseOptions } from './utils';\n\nconst { DropdownIndicator, SelectContainer } = SelectDropdownElements;\n\ntype SelectDropdownBaseProps = Omit<\n  SelectComponentProps,\n  'onChange' | 'defaultValue'\n>;\ninterface SelectDropdownProps\n  extends SelectDropdownBaseProps,\n    Pick<NamedProps, 'onChange'>,\n    Pick<SelectHTMLAttributes<HTMLSelectElement>, 'value' | 'disabled'> {\n  inputProps?: Record<string, string | number | boolean>;\n  name?: string;\n  placeholder?: string;\n}\n\ntype OptionStrict = {\n  label: string;\n  value: string;\n};\n\ntype CustomContainerProps = ContainerProps<OptionStrict, false> & {\n  children?: ReactNode[];\n};\n\nconst ChevronDropdown = (props: IndicatorProps<OptionTypeBase, false>) => {\n  return (\n    <DropdownIndicator {...props}>\n      <ArrowChevronDownIcon size={16} />\n    </DropdownIndicator>\n  );\n};\n\nconst CustomContainer = ({ children, ...rest }: CustomContainerProps) => {\n  const { inputProps } = rest.selectProps;\n  const value = rest.hasValue ? rest.getValue()[0].value : '';\n\n  return (\n    <SelectContainer {...rest}>\n      {children}\n      <input type=\"hidden\" value={value} {...inputProps} />\n    </SelectContainer>\n  );\n};\n\nconst selectBaseStyles = ({\n  error,\n  activated,\n  isFocused,\n  isDisabled,\n}: conditionalStyleProps) => css`\n  ${formFieldStyles}\n  ${conditionalBorderStyles({ error, activated, isFocused, isDisabled })}\n  line-height: ${theme.lineHeight.base};\n  display: flex;\n`;\n\nconst errorColorState = (error: boolean) => {\n  const color = error ? colorStates.error.color : colorStates.base.color;\n  return color;\n};\n\nconst customStyles: StylesConfig<OptionTypeBase, false> = {\n  dropdownIndicator: (provided, state) => ({\n    color: errorColorState(state.selectProps.error),\n    display: 'flex',\n    padding: '0',\n    pointerEvents: 'none',\n  }),\n\n  container: (provided) => ({\n    ...provided,\n    pointerEvents: 'visible',\n    cursor: 'pointer',\n    width: '100%',\n    minWidth: '7rem',\n  }),\n\n  menu: (provided, state) => ({\n    ...provided,\n    ...formDropdownStyles(state.selectProps.error),\n  }),\n\n  option: (provided, state) => ({\n    padding: '14px 11px 14px 11px',\n    cursor: 'pointer',\n    backgroundColor:\n      (state.isSelected && colorStates.dropdown.selected.backgroundColor) ||\n      (state.isFocused && colorStates.dropdown.focused.backgroundColor) ||\n      'transparent',\n    '&:hover': {\n      backgroundColor: colorStates.dropdown.focused.backgroundColor,\n    },\n  }),\n\n  control: (provided, state) => ({\n    ...selectBaseStyles({\n      error: state.selectProps.error,\n      activated: state.selectProps.activated,\n      isFocused: state.isFocused,\n      isDisabled: state.isDisabled,\n    }),\n  }),\n\n  singleValue: (provided, state) => ({\n    color: errorColorState(state.selectProps.error),\n    display: 'flex',\n  }),\n\n  valueContainer: (provided) => ({\n    ...provided,\n    padding: 0,\n  }),\n};\n\nconst defaultProps = {\n  name: undefined,\n  isSearchable: false,\n  isMulti: false,\n  styles: customStyles,\n  components: {\n    DropdownIndicator: ChevronDropdown,\n    IndicatorSeparator: () => null,\n    SelectContainer: CustomContainer,\n  },\n};\n\nexport const SelectDropdown: React.FC<SelectDropdownProps> = ({\n  options,\n  error,\n  id,\n  disabled,\n  onChange,\n  value = undefined,\n  name,\n  placeholder = 'Select an option',\n  inputProps,\n  ...rest\n}) => {\n  const [activated, setActivated] = useState(false);\n  const baseInputProps = { name };\n\n  const changeHandler = (optionEvent: OptionStrict) => {\n    onChange?.(optionEvent, {\n      action: 'select-option',\n      option: optionEvent,\n    });\n    setActivated(true);\n  };\n\n  const selectOptions = useMemo(() => {\n    return parseOptions({ options, id });\n  }, [options, id]);\n\n  const parsedValue = useMemo(() => {\n    const currentValue = selectOptions.find(\n      ({ value: optionValue }) => optionValue === value\n    );\n\n    return currentValue;\n  }, [selectOptions, value]);\n\n  return (\n    <ReactSelect\n      {...defaultProps}\n      id={id || rest.htmlFor}\n      value={parsedValue}\n      activated={activated}\n      error={Boolean(error)}\n      onChange={changeHandler}\n      inputProps={{ ...inputProps, ...baseInputProps }}\n      isDisabled={disabled}\n      options={selectOptions}\n      placeholder={placeholder}\n      {...rest}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}