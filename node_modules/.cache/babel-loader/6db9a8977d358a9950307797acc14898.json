{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport { isCallbackRef, isRef } from './is-ref';\nexport var cloneElementWithRef = function (el, outerRef, props) {\n  var innerRef = el.ref;\n\n  var combine = function (node) {\n    if (!node) return;\n    if (isRef(outerRef)) outerRef.current = node;\n    if (isCallbackRef(innerRef)) innerRef(node);else if (isRef(innerRef)) innerRef.current = node;\n  };\n\n  return React.cloneElement(el, __assign(__assign({}, props), {\n    ref: combine\n  }));\n};","map":{"version":3,"sources":["../../src/clone-element-with-ref.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,aAAT,EAAwB,KAAxB,QAAqC,UAArC;AAEA,OAAO,IAAM,mBAAmB,GAAG,UAIjC,EAJiC,EAKjC,QALiC,EAMjC,KANiC,EAMzB;AAEA,MAAK,QAAQ,GAAK,EAAE,CAAP,GAAb;;AAER,MAAM,OAAO,GAAyB,UAAA,IAAA,EAAI;AACxC,QAAI,CAAC,IAAL,EAAW;AAEX,QAAI,KAAK,CAAI,QAAJ,CAAT,EAAwB,QAAQ,CAAC,OAAT,GAAmB,IAAnB;AAExB,QAAI,aAAa,CAAI,QAAJ,CAAjB,EAAgC,QAAQ,CAAC,IAAD,CAAR,CAAhC,KACK,IAAI,KAAK,CAAI,QAAJ,CAAT,EAAwB,QAAQ,CAAC,OAAT,GAAmB,IAAnB;AAC9B,GAPD;;AASA,SAAO,KAAK,CAAC,YAAN,CAAyB,EAAzB,EAA2B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,KAAP,CAAA,EAAY;AAAE,IAAA,GAAG,EAAE;AAAP,GAAZ,CAA3B,CAAP;AACD,CApBM","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport { isCallbackRef, isRef } from './is-ref';\nexport var cloneElementWithRef = function (el, outerRef, props) {\n    var innerRef = el.ref;\n    var combine = function (node) {\n        if (!node)\n            return;\n        if (isRef(outerRef))\n            outerRef.current = node;\n        if (isCallbackRef(innerRef))\n            innerRef(node);\n        else if (isRef(innerRef))\n            innerRef.current = node;\n    };\n    return React.cloneElement(el, __assign(__assign({}, props), { ref: combine }));\n};\n//# sourceMappingURL=clone-element-with-ref.js.map"]},"metadata":{},"sourceType":"module"}