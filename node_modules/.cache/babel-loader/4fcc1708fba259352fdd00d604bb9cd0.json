{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/progress-bar/progress-bar.js\";\nimport classNames from 'classnames';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clusterMarkers } from '../marker/marker-clustering';\nimport { play, pause, seekStart, seekEnd, setTime, seek } from 'state/player/playerSlice'; // import * as actions from '../../actions'\n\nimport { formatTime } from '../utilities/format-time';\nimport css from './progress-bar.module.css';\nimport { InteractionModes } from '../constants';\nimport Marker from '../marker/marker';\nimport Slider from '../slider/slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ProgressBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setTime = ratio => {\n      const {\n        setTime,\n        duration\n      } = this.props;\n      setTime && setTime(Math.floor(ratio * duration));\n    };\n\n    this.handleHoverChange = ({\n      ratio,\n      active\n    }) => {\n      const {\n        duration\n      } = this.props;\n      const {\n        hoveringPercentage\n      } = this.state;\n      const value = ratio || hoveringPercentage / 100;\n      const hoveringTime = formatTime(value * duration);\n      this.setState({\n        hoveringPercentage: value * 100,\n        hovering: active,\n        hoveringTime\n      });\n    };\n\n    this.getClustersWithLeftOffset = markers => {\n      const {\n        duration,\n        layout\n      } = this.props;\n      const clusters = clusterMarkers(markers, duration, layout);\n      return clusters.map(c => ({ ...c,\n        leftOffset: Math.floor(c.timeIndex / duration * 100)\n      }));\n    };\n\n    this.renderMarkers = (markers, visible) => {\n      const clusters = this.getClustersWithLeftOffset(markers);\n      return clusters.map(({\n        timeIndex,\n        markers,\n        leftOffset\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          timeIndex: timeIndex,\n          markers: markers,\n          leftOffset: leftOffset,\n          isVisible: visible\n        }, markers[0].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.state = {\n      hovering: false,\n      dragging: false,\n      hoveringTime: null\n    };\n  }\n\n  get currentPercentage() {\n    const {\n      time,\n      duration\n    } = this.props;\n    if (duration <= 0) return 0;\n    return time / (duration - 1);\n  }\n\n  render() {\n    const {\n      isDragging,\n      hovering,\n      hoveringPercentage,\n      hoveringTime,\n      percentage,\n      dragging,\n      startRatio,\n      endRatio\n    } = this.state;\n    const {\n      visible,\n      setTime,\n      duration,\n      bufferedTime,\n      interactionMode,\n      time,\n      seek,\n      markers\n    } = this.props;\n    const ariaValueText = `${formatTime(time)} of ${formatTime(duration)}`;\n    const bars = [{\n      value: 1,\n      fillStyle: css.progressBar,\n      key: 'background-bar'\n    }, {\n      value: duration ? Math.ceil(bufferedTime) / duration : 0,\n      fillStyle: css.bufferedTime,\n      key: 'buffering-bar'\n    }];\n    const active = visible && (hovering || dragging);\n    const interactiveHovering = (interactionMode === InteractionModes.TOUCH || interactionMode === InteractionModes.KEYBOARD) && visible;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(css.progressBarWrapper, {\n        [css.hidden]: !visible\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          left: `${hoveringPercentage}%`\n        },\n        className: classNames(css.timestamp, {\n          [css.timestampFadeIn]: active\n        }),\n        children: hoveringTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), markers && this.renderMarkers(markers, visible), /*#__PURE__*/_jsxDEV(Slider, {\n        ariaLabel: \"Seek slider\",\n        ariaValueText: ariaValueText,\n        step: getStep(duration, 3),\n        hovering: interactiveHovering,\n        verticalAlign: 80,\n        className: classNames(css.slider, {\n          [css.hiddenSlider]: !visible\n        }),\n        value: this.currentPercentage,\n        onChange: ratio => {\n          this.setTime(ratio);\n          this.setState({\n            endRatio: ratio\n          });\n        },\n        onChangeStart: ratio => {\n          const {\n            time: currentTime,\n            onSeekStart,\n            pause,\n            playing\n          } = this.props;\n          this.setTime(ratio);\n          onSeekStart && onSeekStart();\n          pause && pause(false);\n          this.setState({\n            dragging: true,\n            startRatio: currentTime / duration,\n            endRatio: ratio,\n            playing\n          });\n        },\n        onChangeEnd: () => {\n          const {\n            onSeekEnd,\n            play\n          } = this.props;\n          const {\n            startRatio,\n            endRatio,\n            playing\n          } = this.state;\n          onSeekEnd && onSeekEnd();\n          seek && seek({\n            startRatio,\n            endRatio\n          });\n          playing && play(false);\n          this.setState({\n            dragging: false,\n            startRatio: null,\n            endRatio: null\n          });\n        },\n        onHoverChange: this.handleHoverChange,\n        bars: bars,\n        barClass: css.barClass,\n        markerClusters: markers && this.getClustersWithLeftOffset(markers)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction getStep(duration, seconds) {\n  return seconds / duration;\n}\n\nexport default connect(state => ({\n  bufferedTime: state.player.bufferedTime,\n  duration: state.player.duration,\n  time: state.player.time,\n  visible: state.player.visible,\n  interactionMode: state.player.interactionMode,\n  markers: state.player.markers,\n  clusterInterval: state.player.clusterInterval,\n  layout: state.player.layout,\n  playing: state.player.playing\n}), dispatch => ({\n  setTime: payload => dispatch(setTime(payload)),\n  seek: payload => dispatch(seek(payload)),\n  onSeekStart: payload => dispatch(seekStart(payload)),\n  onSeekEnd: payload => dispatch(seekEnd(payload)),\n  pause: payload => dispatch(pause(payload)),\n  play: payload => dispatch(play(payload)),\n  setTime: payload => dispatch(setTime(payload))\n}))(ProgressBar);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/progress-bar/progress-bar.js"],"names":["classNames","React","Component","connect","clusterMarkers","play","pause","seekStart","seekEnd","setTime","seek","formatTime","css","InteractionModes","Marker","Slider","ProgressBar","constructor","props","ratio","duration","Math","floor","handleHoverChange","active","hoveringPercentage","state","value","hoveringTime","setState","hovering","getClustersWithLeftOffset","markers","layout","clusters","map","c","leftOffset","timeIndex","renderMarkers","visible","id","dragging","currentPercentage","time","render","isDragging","percentage","startRatio","endRatio","bufferedTime","interactionMode","ariaValueText","bars","fillStyle","progressBar","key","ceil","interactiveHovering","TOUCH","KEYBOARD","progressBarWrapper","hidden","left","timestamp","timestampFadeIn","getStep","slider","hiddenSlider","currentTime","onSeekStart","playing","onSeekEnd","barClass","seconds","player","clusterInterval","dispatch","payload"],"mappings":"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","sourcesContent":["import classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { clusterMarkers } from '../marker/marker-clustering'\nimport { play, pause, seekStart, seekEnd, setTime, seek } from 'state/player/playerSlice'\n// import * as actions from '../../actions'\nimport { formatTime } from '../utilities/format-time'\nimport css from './progress-bar.module.css'\nimport { InteractionModes } from '../constants'\nimport Marker from '../marker/marker'\n\nimport Slider from '../slider/slider'\n\nexport class ProgressBar extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { hovering: false, dragging: false, hoveringTime: null }\n  }\n\n  get currentPercentage() {\n    const { time, duration } = this.props\n\n    if (duration <= 0) return 0\n\n    return time / (duration-1)\n  }\n\n  setTime = ratio => {\n    const { setTime, duration } = this.props\n    setTime && setTime(Math.floor(ratio * duration))\n  }\n\n  handleHoverChange = ({ ratio, active }) => {\n    const { duration } = this.props\n    const { hoveringPercentage } = this.state\n\n    const value = ratio || hoveringPercentage / 100\n    const hoveringTime = formatTime(value * duration)\n\n    this.setState({ hoveringPercentage: value * 100, hovering: active, hoveringTime })\n  }\n\n  getClustersWithLeftOffset = markers => {\n    const { duration, layout } = this.props\n\n    const clusters = clusterMarkers(markers, duration, layout)\n    return clusters.map(c => ({\n      ...c,\n      leftOffset: Math.floor((c.timeIndex / duration) * 100),\n    }))\n  }\n\n  renderMarkers = (markers, visible) => {\n    const clusters = this.getClustersWithLeftOffset(markers)\n    return clusters.map(({ timeIndex, markers, leftOffset }) => {\n      return (\n        <Marker\n          timeIndex={timeIndex}\n          markers={markers}\n          key={markers[0].id}\n          leftOffset={leftOffset}\n          isVisible={visible}\n        />\n      )\n    })\n  }\n\n  render() {\n    const {\n      isDragging,\n      hovering,\n      hoveringPercentage,\n      hoveringTime,\n      percentage,\n      dragging,\n      startRatio,\n      endRatio,\n    } = this.state\n    const { visible, setTime, duration, bufferedTime, interactionMode, time, seek, markers } = this.props\n    const ariaValueText = `${formatTime(time)} of ${formatTime(duration)}`\n\n    const bars = [\n      {\n        value: 1,\n        fillStyle: css.progressBar,\n        key: 'background-bar',\n      },\n      {\n        value: duration ? Math.ceil(bufferedTime) / duration : 0,\n        fillStyle: css.bufferedTime,\n        key: 'buffering-bar',\n      },\n    ]\n\n    const active = visible && (hovering || dragging)\n    const interactiveHovering =\n      (interactionMode === InteractionModes.TOUCH || interactionMode === InteractionModes.KEYBOARD) && visible\n\n    return (\n      <div className={classNames(css.progressBarWrapper, { [css.hidden]: !visible })}>\n        <div\n          style={{ left: `${hoveringPercentage}%` }}\n          className={classNames(css.timestamp, {\n            [css.timestampFadeIn]: active,\n          })}\n        >\n          {hoveringTime}\n        </div>\n        {markers && this.renderMarkers(markers, visible)}\n        <Slider\n          ariaLabel=\"Seek slider\"\n          ariaValueText={ariaValueText}\n          step={getStep(duration, 3)}\n          hovering={interactiveHovering}\n          verticalAlign={80}\n          className={classNames(css.slider, { [css.hiddenSlider]: !visible })}\n          value={this.currentPercentage}\n          onChange={ratio => {\n            this.setTime(ratio)\n\n            this.setState({ endRatio: ratio })\n          }}\n          onChangeStart={ratio => {\n            const { time: currentTime, onSeekStart, pause, playing } = this.props\n\n            this.setTime(ratio)\n\n            onSeekStart && onSeekStart()\n            pause && pause(false)\n\n            this.setState({ dragging: true, startRatio: currentTime / duration, endRatio: ratio, playing })\n          }}\n          onChangeEnd={() => {\n            const { onSeekEnd, play } = this.props\n            const { startRatio, endRatio, playing } = this.state\n\n            onSeekEnd && onSeekEnd()\n\n            seek && seek({ startRatio, endRatio })\n            playing && play(false)\n\n            this.setState({ dragging: false, startRatio: null, endRatio: null })\n          }}\n          onHoverChange={this.handleHoverChange}\n          bars={bars}\n          barClass={css.barClass}\n          markerClusters={markers && this.getClustersWithLeftOffset(markers)}\n        />\n      </div>\n    )\n  }\n}\n\nfunction getStep(duration, seconds) {\n  return seconds / duration\n}\n\nexport default connect(\n  state => ({\n    bufferedTime: state.player.bufferedTime,\n    duration: state.player.duration,\n    time: state.player.time,\n    visible: state.player.visible,\n    interactionMode: state.player.interactionMode,\n    markers: state.player.markers,\n    clusterInterval: state.player.clusterInterval,\n    layout: state.player.layout,\n    playing: state.player.playing\n  }),\n  dispatch => ({\n    setTime: payload => dispatch(setTime(payload)),\n    seek: payload => dispatch(seek(payload)),\n    onSeekStart: payload => dispatch(seekStart(payload)),\n    onSeekEnd: payload => dispatch(seekEnd(payload)),\n    pause: (payload) => dispatch(pause(payload)),\n    play: (payload) => dispatch(play(payload)),\n    setTime: payload => dispatch(setTime(payload)),\n   \n  })\n)(ProgressBar)\n"]},"metadata":{},"sourceType":"module"}