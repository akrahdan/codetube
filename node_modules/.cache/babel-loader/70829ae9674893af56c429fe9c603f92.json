{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport cookie from \"react-cookies\";\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\nexport const autoSearch = query => {\n  searchClient.initIndex(\"tags_index\").search(query).then(({\n    hits\n  }) => console.log(\"Hits: \", hits)).catch(err => console.log(\"Error: \", err));\n};\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseLevel: build.query({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSections: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    searchTags: build.query({\n      query: q => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateCourse: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    uploadLectureVideo: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createGoal: build.mutation({\n      query: body => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createExperience: build.mutation({\n      query: body => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createRequirement: build.mutation({\n      query: body => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editRequirement: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"POST\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editExperience: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"POST\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editGoal: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/goal/${id}/`,\n          body,\n          method: \"POST\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editSection: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteSection: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchLectures: build.query({\n      query: pk => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchResources: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createResource: build.mutation({\n      query: data => {\n        const {\n          course,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editLecture: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteLecture: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation\n} = coursesApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","algoliasearch","cookie","searchClient","process","env","REACT_APP_ALGOLIA_APP_ID","REACT_APP_ALGOLIA_SEARCH_KEY","autoSearch","query","initIndex","search","then","hits","console","log","catch","err","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","id","url","method","responseHandler","response","json","fetchCategories","fetchCourseLevel","fetchSections","pk","searchTags","q","createCourse","mutation","body","updateCourse","data","uploadLectureVideo","createSection","createGoal","createExperience","createRequirement","editRequirement","editExperience","editGoal","fetchExperience","editSection","deleteSection","createLecture","fetchLectures","fetchResources","createResource","course","editLecture","deleteLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery","useFetchCourseLevelQuery","useSearchTagsQuery","useUploadLectureVideoMutation","useFetchSectionsQuery","useDeleteSectionMutation","useEditSectionMutation","useDeleteLectureMutation","useEditLectureMutation","useFetchLecturesQuery","useFetchResourcesQuery","useCreateResourceMutation","useUpdateCourseMutation"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\n\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID,\n  process.env.REACT_APP_ALGOLIA_SEARCH_KEY\n);\n\nexport interface CourseResponse {\n  title: string;\n  id: number;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  tags: string[];\n  subcategory: number;\n  price: number;\n}\n\nexport interface MediaRequest {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  size: number;\n}\n\nexport interface MediaResponse {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  id: number;\n  url?: string;\n  size: number;\n  timestamp: string;\n}\n\nexport interface SearchResponse {\n  title: string;\n  tags: string[];\n}\n\nexport interface CourseRequest {\n  id: number;\n  title: string;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  level: string;\n  tags: string[];\n  headline: string;\n  subcategory: number;\n  price: number;\n}\n\nexport interface Section {\n  title: string;\n  id: number;\n  course: number;\n  instructor: number;\n  description: string;\n  order: number;\n  resources: number[];\n  lectures?: Lecture[];\n}\n\n\nexport interface Experience {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Goal {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Requirement {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface LectureRequest {\n  title: string;\n  id: number;\n  video: number;\n  video_url: string;\n  section: number;\n  resources: number[];\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface Options {\n  name: string;\n  display: string;\n}\n\nexport interface Lecture {\n  title: string;\n  id: number;\n  position: string;\n  neighbor: number;\n  description: string;\n  video: MediaResponse;\n  resources: number[];\n  instructor: number;\n  section: number;\n  video_url: string;\n  order: number;\n}\n\nexport interface CategoryResponse {\n  title: string;\n  id: number;\n  children: CategoryResponse[];\n}\n\nexport const autoSearch = (query: string) => {\n  searchClient\n    .initIndex(\"tags_index\")\n    .search(query)\n    .then(({ hits }) => console.log(\"Hits: \", hits))\n    .catch((err) => console.log(\"Error: \", err));\n};\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [],\n  endpoints: (build) => ({\n    fetchCourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCategories: build.query<CategoryResponse[], void>({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCourseLevel: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchSections: build.query<Section[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n\n\n    searchTags: build.query<SearchResponse[], string>({\n      query: (q) => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (body) => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (data) => {\n        const { id, ...body} = data\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    uploadLectureVideo: build.mutation<MediaResponse, Partial<MediaRequest>>({\n      query: (body) => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createSection: build.mutation<Section[], Partial<SectionRequest>>({\n      query: (body) => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createGoal: build.mutation<Goal[], Partial<Goal>>({\n      query: (body) => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createExperience: build.mutation<Experience[], Partial<Experience>>({\n      query: (body) => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createRequirement: build.mutation<Requirement[], Partial<Requirement>>({\n      query: (body) => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editRequirement: build.mutation<Requirement, Partial<Requirement>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/requirements/${id}/`,\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editExperience: build.mutation<Experience, Partial<Experience>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/experience/${id}/`,\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editGoal: build.mutation<Goal, Partial<Goal>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/goal/${id}/`,\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    fetchExperience: build.query<Experience[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchExperience: build.query<Experience[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n\n\n    editSection: build.mutation<Section, Partial<SectionRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteSection: build.mutation<Section, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    createLecture: build.mutation<Lecture[], Partial<Lecture>>({\n      query: (body) => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchLectures: build.query<Lecture[], number>({\n      query: (pk) => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchResources: build.query<MediaResponse[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createResource: build.mutation<MediaResponse[], MediaRequest>({\n      query: (data) => {\n        const { course, ...body } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editLecture: build.mutation<Lecture, Partial<LectureRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteLecture: build.mutation<Lecture, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation\n} = coursesApi;\n"]},"metadata":{},"sourceType":"module"}