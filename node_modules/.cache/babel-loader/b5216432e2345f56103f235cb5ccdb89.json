{"ast":null,"code":"export const getRouteComponent = (routesMeta, locationType) => {\n  const route = (() => {\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Instructor/Projects/getRouteComponent.tsx"],"names":["getRouteComponent","routesMeta","locationType","route","Error"],"mappings":"AAaA,OAAO,MAAMA,iBAAiB,GAAG,CAC/BC,UAD+B,EAE/BC,YAF+B,KAI5B;AACH,QAAMC,KAAK,GAAG,CAAC,MAAM;AAEnB,WAAOF,UAAU,CAACC,YAAD,CAAjB;AACD,GAHa,GAAd;;AAKA,MAAI,CAACC,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAW,wCAAuCF,YAAa,IAA/D,CAAN;AACD;;AAED,SAAOC,KAAP;AACD,CAfM","sourcesContent":["import React from 'react';\n\nexport type MetaScene = {\n  portalData: unknown;\n};\n\nexport type RouteMeta = {\n  scene: React.ComponentType<MetaScene & any>;\n\n\n  pageName: string | undefined;\n};\n\nexport const getRouteComponent = (\n  routesMeta: Record<string, RouteMeta>,\n  locationType: string,\n \n) => {\n  const route = (() => {\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};\n"]},"metadata":{},"sourceType":"module"}