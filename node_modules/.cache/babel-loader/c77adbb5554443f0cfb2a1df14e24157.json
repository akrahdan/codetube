{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Select.tsx\",\n    _s = $RefreshSig$();\n\nimport { ArrowChevronDownIcon, MiniChevronDownIcon } from '@codecademy/gamut-icons';\nimport { variant } from '@codecademy/gamut-styles';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, useMemo, useState } from 'react';\nimport { Box, FlexBox } from '../Box';\nimport { conditionalStyles, conditionalStyleState, formFieldStyles } from './styles/shared-system-props';\nimport { parseSelectOptions } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst selectSizeVariants = variant({\n  defaultVariant: 'base',\n  prop: 'sizeVariant',\n  variants: {\n    small: {\n      height: '2rem',\n      px: 8,\n      py: 0\n    },\n    base: {\n      height: 'auto',\n      pr: 48\n    }\n  }\n});\nconst SelectBase = styled.select`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  ${selectSizeVariants}\n  cursor: pointer;\n  display: block;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n`;\n_c = SelectBase;\nconst allowClickStyle = css`\n  pointer-events: none;\n`;\nconst StyledFlexbox = styled(FlexBox)(allowClickStyle);\nexport const Select = /*#__PURE__*/forwardRef(_c2 = _s(({\n  className,\n  defaultValue,\n  options,\n  error,\n  id,\n  sizeVariant,\n  ...rest\n}, ref) => {\n  _s();\n\n  const [activatedStyle, setActivatedStyle] = useState(false);\n\n  const changeHandler = event => {\n    var _rest$onChange;\n\n    rest === null || rest === void 0 ? void 0 : (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, event);\n    setActivatedStyle(true);\n  };\n\n  const selectOptions = useMemo(() => {\n    return parseSelectOptions({\n      options,\n      id\n    });\n  }, [options, id]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    width: \"100%\",\n    textColor: error ? 'red' : 'navy',\n    minWidth: \"7rem\",\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(StyledFlexbox, {\n      pr: 12,\n      alignItems: \"center\",\n      position: \"absolute\",\n      right: \"0\",\n      top: \"0\",\n      bottom: \"0\",\n      \"aria-hidden\": true,\n      children: sizeVariant === 'small' ? /*#__PURE__*/_jsxDEV(MiniChevronDownIcon, {\n        size: 12\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(ArrowChevronDownIcon, {\n        size: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SelectBase, { ...rest,\n      defaultValue: defaultValue || '',\n      id: id || rest.htmlFor,\n      ref: ref,\n      error: error,\n      sizeVariant: sizeVariant,\n      variant: conditionalStyleState(Boolean(error), activatedStyle),\n      onChange: event => changeHandler(event),\n      children: selectOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n}, \"ti+bmmVNr8RzClZLudd9Evqeeic=\"));\n_c3 = Select;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectBase\");\n$RefreshReg$(_c2, \"Select$forwardRef\");\n$RefreshReg$(_c3, \"Select\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Select.tsx"],"names":["ArrowChevronDownIcon","MiniChevronDownIcon","variant","css","styled","React","forwardRef","useMemo","useState","Box","FlexBox","conditionalStyles","conditionalStyleState","formFieldStyles","parseSelectOptions","selectSizeVariants","defaultVariant","prop","variants","small","height","px","py","base","pr","SelectBase","select","allowClickStyle","StyledFlexbox","Select","className","defaultValue","options","error","id","sizeVariant","rest","ref","activatedStyle","setActivatedStyle","changeHandler","event","onChange","selectOptions","htmlFor","Boolean"],"mappings":"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","sourcesContent":["import {\n  ArrowChevronDownIcon,\n  MiniChevronDownIcon,\n} from '@codecademy/gamut-icons';\nimport { variant } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  SelectHTMLAttributes,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { Box, FlexBox } from '../Box';\nimport {\n  conditionalStyles,\n  conditionalStyleState,\n  formFieldStyles,\n} from './styles/shared-system-props';\nimport { parseSelectOptions } from './utils';\n\nexport type SelectComponentProps = Pick<\n  SelectHTMLAttributes<HTMLSelectElement>,\n  'disabled' | 'id'\n> & {\n  error?: boolean;\n  htmlFor?: string;\n  options?: string[] | Record<string, number | string>;\n};\n\nexport type SelectWrapperProps = SelectComponentProps &\n  SelectHTMLAttributes<HTMLSelectElement> & {\n    sizeVariant?: 'small' | 'base';\n  };\n\nexport interface SelectProps\n  extends SelectWrapperProps,\n    StyleProps<typeof conditionalStyles> {}\n\nconst selectSizeVariants = variant({\n  defaultVariant: 'base',\n  prop: 'sizeVariant',\n  variants: {\n    small: {\n      height: '2rem',\n      px: 8,\n      py: 0,\n    },\n    base: {\n      height: 'auto',\n      pr: 48,\n    },\n  },\n});\n\nconst SelectBase = styled.select<SelectProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  ${selectSizeVariants}\n  cursor: pointer;\n  display: block;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n`;\n\nconst allowClickStyle = css`\n  pointer-events: none;\n`;\n\nconst StyledFlexbox = styled(FlexBox)(allowClickStyle);\n\nexport const Select = forwardRef<HTMLSelectElement, SelectWrapperProps>(\n  (\n    { className, defaultValue, options, error, id, sizeVariant, ...rest },\n    ref\n  ) => {\n    const [activatedStyle, setActivatedStyle] = useState(false);\n\n    const changeHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n      rest?.onChange?.(event);\n      setActivatedStyle(true);\n    };\n\n    const selectOptions = useMemo(() => {\n      return parseSelectOptions({ options, id });\n    }, [options, id]);\n\n    return (\n      <Box\n        position=\"relative\"\n        width=\"100%\"\n        textColor={error ? 'red' : 'navy'}\n        minWidth=\"7rem\"\n        className={className}\n      >\n        <StyledFlexbox\n          pr={12}\n          alignItems=\"center\"\n          position=\"absolute\"\n          right=\"0\"\n          top=\"0\"\n          bottom=\"0\"\n          aria-hidden\n        >\n          {sizeVariant === 'small' ? (\n            <MiniChevronDownIcon size={12} />\n          ) : (\n            <ArrowChevronDownIcon size={16} />\n          )}\n        </StyledFlexbox>\n        <SelectBase\n          {...rest}\n          defaultValue={defaultValue || ''}\n          id={id || rest.htmlFor}\n          ref={ref}\n          error={error}\n          sizeVariant={sizeVariant}\n          variant={conditionalStyleState(Boolean(error), activatedStyle)}\n          onChange={(event) => changeHandler(event)}\n        >\n          {selectOptions}\n        </SelectBase>\n      </Box>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}