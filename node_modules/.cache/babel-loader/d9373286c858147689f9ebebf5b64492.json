{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport cookie from \"react-cookies\";\nexport const projectApi = createApi({\n  reducerPath: 'projectApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: ['ProjectEntityResponse'],\n  endpoints: build => ({\n    fetchProjects: build.query({\n      query: () => ({\n        url: 'api/projects/',\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    })\n  })\n});\nexport const {\n  useFetchProjectsQuery\n} = projectApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/projects.ts"],"names":["createApi","fetchBaseQuery","cookie","projectApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchProjects","query","url","method","responseHandler","response","json","useFetchProjectsQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AAiDA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAAC;AAClCI,EAAAA,WAAW,EAAE,YADqB;AAElCC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AACxBK,IAAAA,OAAO,EAAE,GADe;AAExBC,IAAAA,cAAc,EAAE,CAACC,OAAD,EAAU;AAAEC,MAAAA;AAAF,KAAV,KAA2B;AACzC,YAAMC,SAAS,GAAGR,MAAM,CAACS,IAAP,CAAY,WAAZ,CAAlB;;AAEA,UAAID,SAAJ,EAAe;AACbF,QAAAA,OAAO,CAACI,GAAR,CAAY,aAAZ,EAA2BF,SAA3B;AACD;;AACD,YAAMG,KAAK,GACRJ,QAAQ,EAAT,CAA0BK,IAA1B,CAA+BD,KAA/B,IAAwCE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAD1C;;AAEA,UAAIH,KAAJ,EAAW;AACTL,QAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,SAAQC,KAAM,EAA5C;AACD;;AAEDL,MAAAA,OAAO,CAACI,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;AAEA,aAAOJ,OAAP;AACD;AAjBuB,GAAD,CAFS;AAsBlCS,EAAAA,QAAQ,EAAE,CAAC,uBAAD,CAtBwB;AAuBlCC,EAAAA,SAAS,EAAEC,KAAK,KAAK;AACjBC,IAAAA,aAAa,EAAED,KAAK,CAACE,KAAN,CAA2C;AACtDA,MAAAA,KAAK,EAAE,OAAO;AACVC,QAAAA,GAAG,EAAE,eADK;AAEVC,QAAAA,MAAM,EAAE,KAFE;AAGVC,QAAAA,eAAe,EAAGC,QAAD,IAAcA,QAAQ,CAACC,IAAT;AAHrB,OAAP;AAD+C,KAA3C;AADE,GAAL;AAvBkB,CAAD,CAA5B;AAkCP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAA4BxB,UAAlC","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\n\n\nexport interface TitleDescription {\n    id: number;\n    title: string;\n    description: string\n}\n\nexport interface HeaderDescription {\n    id: number;\n    heading: string;\n    description: string\n}\n\nexport interface Courses {\n    id: string;\n    title: string;\n    description: string\n}\n\n\nexport interface ProjectEntityResponse {\n    id: string;\n    title: string;\n    lead:Boolean;\n    description:string;\n    slug:string;\n    goal:string;\n    hero:string;\n   \n    experience:string;\n    courses:string;\n    completion_time:string;\n    related: string[]\n    header:HeaderDescription,\n    header_primary_color:string;\n    header_secondary_color:string;\n    video_headline:string;\n    difficulty:string;\n    progress:string;\n    tags:string[];\n    price:Number;\n    outcomes: TitleDescription[];\n    included: TitleDescription[];\n    syllabuses: TitleDescription[];\n}\n\nexport const projectApi = createApi({\n  reducerPath: 'projectApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n\n  tagTypes: ['ProjectEntityResponse'],\n  endpoints: build => ({\n      fetchProjects: build.query<ProjectEntityResponse[], void>({\n          query: () => ({\n              url: 'api/projects/',\n              method: \"GET\",\n              responseHandler: (response) => response.json()\n          }),\n      }),\n  })\n});\n\nexport const { useFetchProjectsQuery } = projectApi\n"]},"metadata":{},"sourceType":"module"}