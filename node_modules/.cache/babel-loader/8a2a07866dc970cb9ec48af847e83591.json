{"ast":null,"code":"import { fontSmoothPixel, modeColorProps, styledOptions, system, transitionConcat } from '@codecademy/gamut-styles';\nimport { variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport { ButtonBase, ButtonSelectors } from '../ButtonBase/ButtonBase';\nexport const config = styledOptions(['size']);\nexport const buttonProps = variance.compose(system.layout, system.positioning, system.space, system.border);\nexport const templateVariants = (variants, template) => {\n  const variantConfig = {};\n  variants.forEach(key => {\n    variantConfig[key] = template(key);\n  });\n  return system.variant({\n    defaultVariant: variants[0],\n    variants: variantConfig\n  });\n};\nexport const buttonVariants = ['primary', 'secondary', 'danger'];\nexport const buttonStyles = system.css({\n  position: 'relative',\n  fontWeight: 'title',\n  whiteSpace: 'nowrap',\n  display: 'inline-flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  border: 2,\n  borderRadius: '4px',\n  borderColor: 'transparent',\n  transition: transitionConcat(['border-color', 'color', 'background-color', 'box-shadow'], 'fast', 'ease-in'),\n  [ButtonSelectors.DISABLED]: {\n    cursor: 'not-allowed',\n    userSelect: 'none'\n  },\n  [ButtonSelectors.OUTLINE]: {\n    content: '\"\"',\n    transition: transitionConcat(['opacity'], 'fast'),\n    position: 'absolute',\n    borderRadius: '6px',\n    border: 2,\n    inset: -5,\n    opacity: 0,\n    zIndex: 0\n  },\n  [ButtonSelectors.OUTLINE_FOCUS_VISIBLE]: {\n    opacity: 1\n  }\n});\nexport const createButtonComponent = (...args) => styled(ButtonBase)(fontSmoothPixel, modeColorProps, buttonStyles, ...args, buttonProps);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Button/shared.ts"],"names":["fontSmoothPixel","modeColorProps","styledOptions","system","transitionConcat","variance","styled","ButtonBase","ButtonSelectors","config","buttonProps","compose","layout","positioning","space","border","templateVariants","variants","template","variantConfig","forEach","key","variant","defaultVariant","buttonVariants","buttonStyles","css","position","fontWeight","whiteSpace","display","justifyContent","alignItems","borderRadius","borderColor","transition","DISABLED","cursor","userSelect","OUTLINE","content","inset","opacity","zIndex","OUTLINE_FOCUS_VISIBLE","createButtonComponent","args"],"mappings":"AAAA,SAEEA,eAFF,EAGEC,cAHF,EAIEC,aAJF,EAKEC,MALF,EAMEC,gBANF,QAOO,0BAPP;AAQA,SAIEC,QAJF,QAKO,sBALP;AAMA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,0BAA5C;AAEA,OAAO,MAAMC,MAAM,GAAGP,aAAa,CAAmB,CAAC,MAAD,CAAnB,CAA5B;AAEP,OAAO,MAAMQ,WAAW,GAAGL,QAAQ,CAACM,OAAT,CACzBR,MAAM,CAACS,MADkB,EAEzBT,MAAM,CAACU,WAFkB,EAGzBV,MAAM,CAACW,KAHkB,EAIzBX,MAAM,CAACY,MAJkB,CAApB;AAOP,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,QAD8B,EAE9BC,QAF8B,KAG3B;AACH,QAAMC,aAAa,GAAG,EAAtB;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAkBC,GAAD,IAAkB;AACjCF,IAAAA,aAAa,CAACE,GAAD,CAAb,GAAqBH,QAAQ,CAACG,GAAD,CAA7B;AACD,GAFD;AAGA,SAAOlB,MAAM,CAACmB,OAAP,CAAe;AACpBC,IAAAA,cAAc,EAAEN,QAAQ,CAAC,CAAD,CADJ;AAEpBA,IAAAA,QAAQ,EAAEE;AAFU,GAAf,CAAP;AAID,CAZM;AAcP,OAAO,MAAMK,cAAc,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,QAAzB,CAAvB;AAEP,OAAO,MAAMC,YAAY,GAAGtB,MAAM,CAACuB,GAAP,CAAW;AACrCC,EAAAA,QAAQ,EAAE,UAD2B;AAErCC,EAAAA,UAAU,EAAE,OAFyB;AAGrCC,EAAAA,UAAU,EAAE,QAHyB;AAIrCC,EAAAA,OAAO,EAAE,aAJ4B;AAKrCC,EAAAA,cAAc,EAAE,QALqB;AAMrCC,EAAAA,UAAU,EAAE,QANyB;AAOrCjB,EAAAA,MAAM,EAAE,CAP6B;AAQrCkB,EAAAA,YAAY,EAAE,KARuB;AASrCC,EAAAA,WAAW,EAAE,aATwB;AAUrCC,EAAAA,UAAU,EAAE/B,gBAAgB,CAC1B,CAAC,cAAD,EAAiB,OAAjB,EAA0B,kBAA1B,EAA8C,YAA9C,CAD0B,EAE1B,MAF0B,EAG1B,SAH0B,CAVS;AAerC,GAACI,eAAe,CAAC4B,QAAjB,GAA4B;AAC1BC,IAAAA,MAAM,EAAE,aADkB;AAE1BC,IAAAA,UAAU,EAAE;AAFc,GAfS;AAmBrC,GAAC9B,eAAe,CAAC+B,OAAjB,GAA2B;AACzBC,IAAAA,OAAO,EAAE,IADgB;AAEzBL,IAAAA,UAAU,EAAE/B,gBAAgB,CAAC,CAAC,SAAD,CAAD,EAAc,MAAd,CAFH;AAGzBuB,IAAAA,QAAQ,EAAE,UAHe;AAIzBM,IAAAA,YAAY,EAAE,KAJW;AAKzBlB,IAAAA,MAAM,EAAE,CALiB;AAMzB0B,IAAAA,KAAK,EAAE,CAAC,CANiB;AAOzBC,IAAAA,OAAO,EAAE,CAPgB;AAQzBC,IAAAA,MAAM,EAAE;AARiB,GAnBU;AA6BrC,GAACnC,eAAe,CAACoC,qBAAjB,GAAyC;AACvCF,IAAAA,OAAO,EAAE;AAD8B;AA7BJ,CAAX,CAArB;AA4CP,OAAO,MAAMG,qBAAqB,GAAG,CACnC,GAAGC,IADgC,KAGnCxC,MAAM,CAACC,UAAD,CAAN,CACEP,eADF,EAEEC,cAFF,EAGEwB,YAHF,EAIE,GAAGqB,IAJL,EAKEpC,WALF,CAHK","sourcesContent":["import {\n  ColorModes,\n  fontSmoothPixel,\n  modeColorProps,\n  styledOptions,\n  system,\n  transitionConcat,\n} from '@codecademy/gamut-styles';\nimport {\n  CSSObject,\n  StyleProps,\n  ThemeProps,\n  variance,\n} from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport { ComponentProps, HTMLProps } from 'react';\n\nimport { ButtonBase, ButtonSelectors } from '../ButtonBase/ButtonBase';\n\nexport const config = styledOptions<'button', 'size'>(['size']);\n\nexport const buttonProps = variance.compose(\n  system.layout,\n  system.positioning,\n  system.space,\n  system.border\n);\n\nexport const templateVariants = <Variant extends string, Styles>(\n  variants: ReadonlyArray<Variant>,\n  template: (colors: Variant) => Styles\n) => {\n  const variantConfig = {} as Record<Variant, ReturnType<typeof template>>;\n  variants.forEach((key: Variant) => {\n    variantConfig[key] = template(key);\n  });\n  return system.variant({\n    defaultVariant: variants[0],\n    variants: variantConfig,\n  });\n};\n\nexport const buttonVariants = ['primary', 'secondary', 'danger'] as const;\n\nexport const buttonStyles = system.css({\n  position: 'relative',\n  fontWeight: 'title',\n  whiteSpace: 'nowrap',\n  display: 'inline-flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  border: 2,\n  borderRadius: '4px',\n  borderColor: 'transparent',\n  transition: transitionConcat(\n    ['border-color', 'color', 'background-color', 'box-shadow'],\n    'fast',\n    'ease-in'\n  ),\n  [ButtonSelectors.DISABLED]: {\n    cursor: 'not-allowed',\n    userSelect: 'none',\n  },\n  [ButtonSelectors.OUTLINE]: {\n    content: '\"\"',\n    transition: transitionConcat(['opacity'], 'fast'),\n    position: 'absolute',\n    borderRadius: '6px',\n    border: 2,\n    inset: -5,\n    opacity: 0,\n    zIndex: 0,\n  },\n  [ButtonSelectors.OUTLINE_FOCUS_VISIBLE]: {\n    opacity: 1,\n  },\n});\n\nexport interface ButtonProps\n  extends ComponentProps<typeof ButtonBase>,\n    StyleProps<typeof buttonProps> {\n  onClick?: HTMLProps<HTMLButtonElement>['onClick'];\n  variant?: typeof buttonVariants[number];\n  size?: 'normal' | 'small';\n  as?: never;\n  mode?: ColorModes;\n}\n\nexport const createButtonComponent = <P>(\n  ...args: (<T extends ThemeProps>(props: T) => CSSObject)[]\n) =>\n  styled(ButtonBase)<ButtonProps & P>(\n    fontSmoothPixel,\n    modeColorProps,\n    buttonStyles,\n    ...args,\n    buttonProps\n  );\n"]},"metadata":{},"sourceType":"module"}