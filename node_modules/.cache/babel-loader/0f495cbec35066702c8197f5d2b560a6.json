{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\n/**\n * Preprocessing Instructions:\n *\n * Runs through each named tag in the html and adds a class name\n * to it based on the tag name. This means all `<pre>` tags will\n * actually output `<pre class=\"pre\" />`\n * The class name will only be applied if it exists in the stylesheet for this component.\n *\n * @remarks\n * This is done instead of styling the elements directly to prevent styles from interfering\n * with component overrides\n */\n\nexport var createPreprocessingInstructions = function createPreprocessingInstructions(styles) {\n  return [{\n    shouldPreprocessNode: function shouldPreprocessNode(node) {\n      return Boolean(node.name);\n    },\n    preprocessNode: function preprocessNode(node) {\n      var _node$attribs;\n\n      var classname = cx(styles[node.name], (_node$attribs = node.attribs) === null || _node$attribs === void 0 ? void 0 : _node$attribs[\"class\"]);\n\n      var attrs = _objectSpread({}, node.attribs);\n\n      if (classname) attrs[\"class\"] = classname;\n      node.attribs = attrs;\n    }\n  }];\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut/dist/Markdown/libs/preprocessing.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","cx","createPreprocessingInstructions","styles","shouldPreprocessNode","node","Boolean","name","preprocessNode","_node$attribs","classname","attribs","attrs"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport cx from 'classnames';\n\n/**\n * Preprocessing Instructions:\n *\n * Runs through each named tag in the html and adds a class name\n * to it based on the tag name. This means all `<pre>` tags will\n * actually output `<pre class=\"pre\" />`\n * The class name will only be applied if it exists in the stylesheet for this component.\n *\n * @remarks\n * This is done instead of styling the elements directly to prevent styles from interfering\n * with component overrides\n */\nexport var createPreprocessingInstructions = function createPreprocessingInstructions(styles) {\n  return [{\n    shouldPreprocessNode: function shouldPreprocessNode(node) {\n      return Boolean(node.name);\n    },\n    preprocessNode: function preprocessNode(node) {\n      var _node$attribs;\n\n      var classname = cx(styles[node.name], (_node$attribs = node.attribs) === null || _node$attribs === void 0 ? void 0 : _node$attribs[\"class\"]);\n\n      var attrs = _objectSpread({}, node.attribs);\n\n      if (classname) attrs[\"class\"] = classname;\n      node.attribs = attrs;\n    }\n  }];\n};"]},"metadata":{},"sourceType":"module"}