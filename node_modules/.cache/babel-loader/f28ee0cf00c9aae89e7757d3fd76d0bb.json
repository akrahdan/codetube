{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes } from \"portal/scenes/CoursePlayer/constants\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null\n};\nexport const playerSlice = createSlice({\n  name: 'player',\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      state.playing = true;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped, state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped, state.muted = muted;\n    },\n    setInt\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume\n} = playerSlice.actions;\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","playerSlice","name","reducers","play","state","action","pause","setPlaybackSpeed","payload","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInt","selectPlayer","player","actions","reducer"],"mappings":"AAAA,SAA2BA,WAA3B,QACO,kBADP;AAKA,SAASC,KAAT,QAAsB,4CAAtB;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,gBAAd,CAAnB;;AAEA,SAASI,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC3B,SAAO,CAAC,CAAC,CAACD,KAAK,CAACE,OAAN,CAAcD,IAAd,CAAV;AACD;;AAcH,OAAO,MAAME,YAAyB,GAAG;AACrCC,EAAAA,OAAO,EAAE,KAD4B;AAErCC,EAAAA,aAAa,EAAE,GAFsB;AAGrCC,EAAAA,UAAU,EAAE,IAHyB;AAIrCC,EAAAA,kBAAkB,EAAE,KAJiB;AAKrCC,EAAAA,MAAM,EAAE,GAL6B;AAMrCC,EAAAA,KAAK,EAAE,KAN8B;AAOrCC,EAAAA,cAAc,EAAE;AAPqB,CAAlC;AASP,OAAO,MAAMC,WAAW,GAAGlB,WAAW,CAAC;AACnCmB,EAAAA,IAAI,EAAE,QAD6B;AAEnCT,EAAAA,YAFmC;AAGnCU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAwC;AAE1CD,MAAAA,KAAK,CAACX,OAAN,GAAgB,IAAhB;AACH,KAJK;AAMNa,IAAAA,KAAK,EAAE,CAACF,KAAD,EAAQC,MAAR,KAAwC;AAE3CD,MAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACH,KATK;AAUNc,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAyC;AACvDD,MAAAA,KAAK,CAACV,aAAN,GAAsBW,MAAM,CAACG,OAA7B;AACH,KAZK;AAcNC,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAyC;AACpDD,MAAAA,KAAK,CAACT,UAAN,GAAmBU,MAAM,CAACG,OAA1B;AACH,KAhBK;AAiBNE,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAA0C;AAC7DD,MAAAA,KAAK,CAACR,kBAAN,GAA2BS,MAAM,CAACG,OAAlC;AACH,KAnBK;AAoBNG,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAQC,MAAR,KAA0C;AACjD,YAAMO,OAAO,GAAG7B,KAAK,CAACsB,MAAM,CAACG,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAMV,KAAK,GAAGc,OAAO,KAAK,CAA1B;AACAR,MAAAA,KAAK,CAACP,MAAN,GAAee,OAAf,EACAR,KAAK,CAACN,KAAN,GAAcA,KADd;AAEH,KAzBK;AA0BNe,IAAAA,iBAAiB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAA0C;AACzD,YAAMO,OAAO,GAAG7B,KAAK,CAACsB,MAAM,CAACG,OAAR,EAAiB,CAAjB,EAAoB,CAApB,CAArB;AACA,YAAMV,KAAK,GAAGc,OAAO,KAAK,CAA1B;AACAR,MAAAA,KAAK,CAACP,MAAN,GAAee,OAAf,EACAR,KAAK,CAACN,KAAN,GAAcA,KADd;AAEH,KA/BK;AAgCNgB,IAAAA;AAhCM;AAHyB,CAAD,CAA/B;AAyCP,OAAO,MAAMC,YAAY,GAAIX,KAAD,IAAsBA,KAAK,CAACY,MAAjD;AAIP,OAAO,MAAO;AAAEb,EAAAA,IAAF;AAAQG,EAAAA,KAAR;AAAeC,EAAAA,gBAAf;AAAiCE,EAAAA,aAAjC;AAAgDC,EAAAA,qBAAhD;AAAuEC,EAAAA,SAAvE;AAAkFE,EAAAA;AAAlF,IAAwGb,WAAW,CAACiB,OAA3H;AAIP,eAAejB,WAAW,CAACkB,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction \n} from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from 'lodash';\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes } from \"portal/scenes/CoursePlayer/constants\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n    return !!~modes.indexOf(mode)\n  }\nexport interface PlayerState { \n    playing: boolean,\n    playbackSpeed: number,\n    activeMenu: string,\n    volumeSliderActive: boolean\n    volume: number,\n    muted: boolean,\n    previousVolume: number\n\n}\n\n\n\nexport const initialState: PlayerState = {\n    playing: false,\n    playbackSpeed: 1.0,\n    activeMenu: null,\n    volumeSliderActive: false,\n    volume: 0.5,\n    muted: false,\n    previousVolume: null\n}\nexport const playerSlice = createSlice({\n    name: 'player',\n    initialState,\n    reducers: {\n        play: (state, action: PayloadAction<void>) => {\n          \n            state.playing = true \n        },\n\n        pause: (state, action: PayloadAction<void>) => {\n          \n            state.playing = false \n        },\n        setPlaybackSpeed: (state, action: PayloadAction<number>) =>{\n            state.playbackSpeed = action.payload\n        },\n\n        setActiveMenu: (state, action: PayloadAction<string>) =>{\n            state.activeMenu = action.payload\n        },\n        setVolumeSliderActive: (state, action: PayloadAction<boolean>) =>{\n            state.volumeSliderActive = action.payload\n        },\n        setVolume: (state, action: PayloadAction<number>) => {\n            const clamped = clamp(action.payload, 0, 1)\n            const muted = clamped === 0\n            state.volume = clamped,\n            state.muted = muted  \n        },\n        setPreviousVolume: (state, action: PayloadAction<number>) => {\n            const clamped = clamp(action.payload, 0, 1)\n            const muted = clamped === 0\n            state.volume = clamped,\n            state.muted = muted    \n        },\n        setInt\n\n        \n    }\n});\n\nexport const selectPlayer = (state: RootState) => state.player\n\n\n\nexport const  { play, pause, setPlaybackSpeed, setActiveMenu, setVolumeSliderActive, setVolume, setPreviousVolume } = playerSlice.actions\n\n\n\nexport default playerSlice.reducer;\n\n"]},"metadata":{},"sourceType":"module"}