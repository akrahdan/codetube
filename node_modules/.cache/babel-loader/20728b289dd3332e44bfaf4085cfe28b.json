{"ast":null,"code":"import _slicedToArray from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import HtmlToReact from'html-to-react';import camelCaseMap from'html-to-react/lib/camel-case-attribute-names';import{get}from'lodash';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var processNodeDefinitions=new HtmlToReact.ProcessNodeDefinitions();// Mapping of html attributes to their camelCase variants\nvar attributeMap=_objectSpread(_objectSpread({},camelCaseMap),{},{for:'htmlFor',class:'className'});var processAttributeValue=function processAttributeValue(value){if(value==='true'){return true;}if(value==='false'){return false;}return value||true;};// Convert html attributes to valid react props\nexport var processAttributes=function processAttributes(){var attributes=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return Object.keys(attributes).reduce(function(acc,attr){var reactAttr=attributeMap[attr.replace(/[-:]/,'')]||attr;return _objectSpread(_objectSpread({},acc),{},_defineProperty({},reactAttr,processAttributeValue(attributes[attr])));},{});};// generic html tag override\nexport var createTagOverride=function createTagOverride(tagName,Override){return{shouldProcessNode:function shouldProcessNode(node){if(!Override)return false;if(Override.shouldProcessNode){return Override.shouldProcessNode(node);}return node.name===tagName.toLowerCase();},processNode:function processNode(node,children,key){if(!Override)return null;var props=_objectSpread(_objectSpread({},processAttributes(node.attribs)),{},{children:children,key:key});if(Override.processNode){return Override.processNode(node,props);}if(!Override.component)return null;return/*#__PURE__*/_jsx(Override.component,_objectSpread({},props));}};};// Allows <CodeBlock></CodeBlock> override and overrides of standard fenced codeblocks\nexport var createCodeBlockOverride=function createCodeBlockOverride(tagName,Override){return createTagOverride(tagName,_objectSpread({shouldProcessNode:function shouldProcessNode(node){return node.name==='code'&&get(node,'parent.name')==='pre'||node.name===tagName.toLowerCase();},processNode:function processNode(node,props){var _props$className,_props$children;var _ref=((_props$className=props.className)===null||_props$className===void 0?void 0:_props$className.match(/language-([^\\s]+)/))||[],_ref2=_slicedToArray(_ref,2),_ref2$=_ref2[1],language=_ref2$===void 0?undefined:_ref2$;if(!Override.component)return null;return/*#__PURE__*/_jsx(Override.component,_objectSpread(_objectSpread({},props),{},{language:language,children:(_props$children=props.children)===null||_props$children===void 0?void 0:_props$children[0]}));}},Override));};var processText=function processText(text){// Replace &mdash; due to legacy markdown that didn't use smart dashes\nreturn text.replace(/&mdash;/g,\"\\u2014\");};export var standardOverrides=[{shouldProcessNode:function shouldProcessNode(node){// Parse text outside of code blocks\nif(node.parent&&['code','pre'].indexOf(node.parent.name)>=0){return false;}if(node.type==='text')return true;return false;},processNode:function processNode(node){return processText(node.data);}},{shouldProcessNode:function shouldProcessNode(){return true;},processNode:processNodeDefinitions.processDefaultNode}];","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Markdown/libs/overrides/index.tsx"],"names":["HtmlToReact","camelCaseMap","get","React","processNodeDefinitions","ProcessNodeDefinitions","attributeMap","for","class","processAttributeValue","value","processAttributes","attributes","Object","keys","reduce","acc","attr","reactAttr","replace","createTagOverride","tagName","Override","shouldProcessNode","node","name","toLowerCase","processNode","children","key","props","attribs","component","createCodeBlockOverride","className","match","language","undefined","processText","text","standardOverrides","parent","indexOf","type","data","processDefaultNode"],"mappings":"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","sourcesContent":["import HtmlToReact from 'html-to-react';\nimport camelCaseMap from 'html-to-react/lib/camel-case-attribute-names';\nimport { get } from 'lodash';\nimport React from 'react';\n\nconst processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions();\n\nexport interface AttributesMap {\n  [key: string]: string | boolean;\n}\n\nexport interface HTMLToReactNode {\n  data: string;\n  type: string;\n  name?: string;\n  children?: HTMLToReactNode[];\n  attribs?: any;\n  next: HTMLToReactNode;\n  prev: HTMLToReactNode;\n  parent: HTMLToReactNode;\n}\n\n// Mapping of html attributes to their camelCase variants\nconst attributeMap: { [key: string]: string } = {\n  ...camelCaseMap,\n  for: 'htmlFor',\n  class: 'className',\n};\n\nexport type OverrideSettingsBase = {\n  component?: React.ComponentType<any>;\n  allowedAttributes?: string[];\n  processNode?: (node: HTMLToReactNode, props: object) => React.ReactNode;\n  shouldProcessNode?: (node: HTMLToReactNode) => boolean;\n};\n\nexport interface OverrideSettingsComponent extends OverrideSettingsBase {\n  component: React.ComponentType<any>;\n}\n\nexport interface OverrideSettingsProcessNode extends OverrideSettingsBase {\n  processNode: (node: HTMLToReactNode, props: object) => React.ReactNode;\n}\n\nexport type OverrideSettings =\n  | OverrideSettingsComponent\n  | OverrideSettingsProcessNode;\n\nexport type ManyOverrideSettings = {\n  [i: string]: OverrideSettings;\n};\n\nconst processAttributeValue = (value: string | boolean) => {\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  return value || true;\n};\n\n// Convert html attributes to valid react props\nexport const processAttributes = (attributes: AttributesMap = {}) =>\n  Object.keys(attributes).reduce((acc, attr) => {\n    const reactAttr = attributeMap[attr.replace(/[-:]/, '')] || attr;\n\n    return {\n      ...acc,\n      [reactAttr]: processAttributeValue(attributes[attr]),\n    };\n  }, {});\n\n// generic html tag override\nexport const createTagOverride = (\n  tagName: string,\n  Override: OverrideSettings\n) => ({\n  shouldProcessNode(node: HTMLToReactNode) {\n    if (!Override) return false;\n\n    if (Override.shouldProcessNode) {\n      return Override.shouldProcessNode(node);\n    }\n    return node.name === tagName.toLowerCase();\n  },\n  processNode(\n    node: HTMLToReactNode,\n    children: HTMLToReactNode[],\n    key: React.Key\n  ) {\n    if (!Override) return null;\n\n    const props = {\n      ...processAttributes(node.attribs),\n      children,\n      key,\n    };\n\n    if (Override.processNode) {\n      return Override.processNode(node, props);\n    }\n\n    if (!Override.component) return null;\n\n    return <Override.component {...props} />;\n  },\n});\n\n// Allows <CodeBlock></CodeBlock> override and overrides of standard fenced codeblocks\nexport const createCodeBlockOverride = (\n  tagName: string,\n  Override: OverrideSettings\n) =>\n  createTagOverride(tagName, {\n    shouldProcessNode(node: HTMLToReactNode) {\n      return (\n        (node.name === 'code' && get(node, 'parent.name') === 'pre') ||\n        node.name === tagName.toLowerCase()\n      );\n    },\n\n    processNode(node: HTMLToReactNode, props: any) {\n      const [, language = undefined] =\n        props.className?.match(/language-([^\\s]+)/) || [];\n\n      if (!Override.component) return null;\n\n      return (\n        <Override.component {...props} language={language}>\n          {props.children?.[0]}\n        </Override.component>\n      );\n    },\n    ...Override,\n  });\n\nconst processText = (text: string) => {\n  // Replace &mdash; due to legacy markdown that didn't use smart dashes\n  return text.replace(/&mdash;/g, '\\u2014');\n};\n\nexport const standardOverrides = [\n  {\n    shouldProcessNode(node: HTMLToReactNode) {\n      // Parse text outside of code blocks\n      if (node.parent && ['code', 'pre'].indexOf(node.parent.name!) >= 0) {\n        return false;\n      }\n      if (node.type === 'text') return true;\n      return false;\n    },\n    processNode(node: HTMLToReactNode) {\n      return processText(node.data);\n    },\n  },\n  {\n    shouldProcessNode() {\n      return true;\n    },\n    processNode: processNodeDefinitions.processDefaultNode,\n  },\n];\n"]},"metadata":{},"sourceType":"module"}