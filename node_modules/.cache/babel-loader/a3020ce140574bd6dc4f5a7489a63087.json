{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport cookie from \"react-cookies\";\nexport const projectApi = createApi({\n  reducerPath: 'projectApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: ['ProjectEntityResponse'],\n  endpoints: build => ({\n    fetchProjects: build.query({\n      query: () => ({\n        url: 'api/projects/',\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createProject: build.mutation({\n      query: body => ({\n        url: \"/projects/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateProject: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/projects/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    createGoal: build.mutation({\n      query: body => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createPricing: build.mutation({\n      query: body => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createExperience: build.mutation({\n      query: body => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createRequirement: build.mutation({\n      query: body => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editRequirement: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editExperience: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editGoal: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    submitReview: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchGoals: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchRequirements: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    deleteExperience: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteGoal: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteRequirement: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useFetchProjectsQuery\n} = projectApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/projects.ts"],"names":["createApi","fetchBaseQuery","cookie","projectApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchProjects","query","url","method","responseHandler","response","json","createProject","mutation","body","updateProject","data","id","createGoal","createPricing","createExperience","createRequirement","editRequirement","editExperience","editGoal","submitReview","fetchExperience","pk","fetchGoals","fetchRequirements","deleteExperience","deleteGoal","deleteRequirement","useFetchProjectsQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\n\n\nexport interface TitleDescription {\n    id: number;\n    title: string;\n    description: string\n}\n\nexport interface HeaderDescription {\n    id: number;\n    heading: string;\n    description: string\n}\n\nexport interface Course {\n    id: string;\n    title: string;\n    description: string;\n    url: string;\n    tags: string[];\n}\n\nexport interface Experience {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Goal {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Requirement {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\n\nexport interface ProjectEntityResponse {\n    id: string;\n    title: string;\n    lead:Boolean;\n    description:string;\n    slug:string;\n    goal:string;\n    hero:string;\n    category: number;\n    thumbnail_url:string;\n    experience:string;\n    courses: Course[];\n    completion_time:string;\n    related: ProjectEntityResponse[]\n    header:HeaderDescription,\n    header_primary_color:string;\n    header_secondary_color:string;\n    video_headline:string;\n    difficulty:string;\n    progress:string;\n    tags:string[];\n    price:Number;\n    outcomes: TitleDescription[];\n    included: TitleDescription[];\n    syllabuses: TitleDescription[];\n}\n\nexport const projectApi = createApi({\n  reducerPath: 'projectApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n\n  tagTypes: ['ProjectEntityResponse'],\n  endpoints: build => ({\n      fetchProjects: build.query<ProjectEntityResponse[], void>({\n          query: () => ({\n              url: 'api/projects/',\n              method: \"GET\",\n              responseHandler: (response) => response.json()\n          }),\n      }),\n      createProject: build.mutation<ProjectEntityResponse, Partial<ProjectEntityResponse>>({\n        query: (body) => ({\n          url: \"/projects/create/\",\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      updateProject: build.mutation<ProjectEntityResponse, Partial<ProjectEntityResponse>>({\n        query: (data) => {\n          const { id, ...body} = data\n          return {\n            url: `/projects/${id}/edit/`,\n            method: \"PUT\",\n            body,\n            responseHandler: (response) => response.json(),\n          };\n        },\n      }),\n  \n      createGoal: build.mutation<Goal[], Partial<Goal>>({\n        query: (body) => ({\n          url: \"/courses/goal/create/\",\n          body,\n          method: \"POST\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      createPricing: build.mutation<Pricing[], Partial<Pricing>>({\n        query: (body) => ({\n          url: \"/courses/pricing/create/\",\n          body,\n          method: \"POST\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      createExperience: build.mutation<Experience[], Partial<Experience>>({\n        query: (body) => ({\n          url: \"/courses/experience/create/\",\n          body,\n          method: \"POST\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      createRequirement: build.mutation<Requirement[], Partial<Requirement>>({\n        query: (body) => ({\n          url: \"/courses/requirement/create/\",\n          body,\n          method: \"POST\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      editRequirement: build.mutation<Requirement, Partial<Requirement>>({\n        query: (data) => {\n         const { id, ...body } = data\n         return  {url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        }\n        },\n      }),\n  \n      editExperience: build.mutation<Experience, Partial<Experience>>({\n        query: (data) => {\n         const { id, ...body } = data\n         return  {url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        }\n        },\n      }),\n  \n      editGoal: build.mutation<Goal, Partial<Goal>>({\n        query: (data) => {\n         const { id, ...body } = data\n         return  {url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        }\n        },\n      }),\n  \n      submitReview: build.mutation<Review, Partial<Review>>({\n        query: (data) => {\n         const { id, ...body } = data\n         return  {url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        }\n        }\n      }),\n  \n      fetchExperience: build.query<Experience[], number>({\n        query: (pk) => ({\n          url: `/courses/${pk}/experience`,\n          method: \"GET\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      fetchGoals: build.query<Goal[], number>({\n        query: (pk) => ({\n          url: `/courses/${pk}/goals`,\n          method: \"GET\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n  \n      fetchRequirements: build.query<Requirement[], number>({\n        query: (pk) => ({\n          url: `/courses/${pk}/requirements`,\n          method: \"GET\",\n          responseHandler: (response) => response.json(),\n        }),\n      }),\n      deleteExperience: build.mutation<Experience, Partial<number>>({\n        query: (id) => {\n          return {\n            url: `/courses/experience/${id}/`,\n            method: \"DELETE\",\n          };\n        },\n      }),\n  \n      deleteGoal: build.mutation<Goal, Partial<number>>({\n        query: (id) => {\n          return {\n            url: `/courses/goals/${id}/`,\n            method: \"DELETE\",\n          };\n        },\n      }),\n  \n      deleteRequirement: build.mutation<Requirement, Partial<number>>({\n        query: (id) => {\n          return {\n            url: `/courses/requirements/${id}/`,\n            method: \"DELETE\",\n          };\n        },\n      }),\n  \n  })\n});\n\nexport const { useFetchProjectsQuery } = projectApi\n"]},"metadata":{},"sourceType":"module"}