{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/error-modal/error-modal.js\";\nimport React, { Component } from 'react';\nimport Button from '@pluralsight/ps-design-system-button';\nimport Link from '@pluralsight/ps-design-system-link';\nimport moment from 'moment'; // import * as actions from '../../actions'\n\nimport { Errors } from '../constants';\nimport css from './error-modal.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ModalUnauthenticated(signIn) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css['error-modal__content'],\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You need to sign in to view this course.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: css['error-modal__btn'],\n      onClick: () => signIn && signIn(),\n      children: \"Sign in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ModalUnauthenticated;\n\nfunction ModalForbidden(upgrade, buttonText) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css['error-modal__content'],\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your current plan doesn\\u2019t allow access to this course. Upgrade to get access to thousands of expert-led courses across hundreds of topics.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: css['error-modal__btn'],\n      onClick: () => upgrade && upgrade(),\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = ModalForbidden;\nexport const ModalGeneric = ({\n  retry,\n  tryAgainCount,\n  setTryAgainCount\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css['error-modal__content'],\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"We're sorry, there has been an issue loading your video.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: css['error-modal__btn'],\n      onClick: () => {\n        setTryAgainCount && setTryAgainCount(tryAgainCount ? tryAgainCount + 1 : 1);\n        retry && retry();\n      },\n      children: \"Try again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), tryAgainCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        appearance: Link.appearances.subtle,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: css['error-modal__link'],\n          href: \"https://app.pluralsight.com/video/test\",\n          target: \"_blank\",\n          children: \"Still having issues?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c3 = ModalGeneric;\nexport class ErrorModal extends Component {\n  getErrorMessage() {\n    const {\n      error,\n      signIn,\n      requestUrls,\n      setLoading,\n      upgrade,\n      userId,\n      tryAgainCount,\n      setTryAgainCount,\n      currentTime = new Date().toISOString(),\n      boundedContext,\n      clipId\n    } = this.props;\n    const isAnonymous = !userId || userId === 'anonymous';\n    const isInPromotionWindow = moment(currentTime).isBetween('2021-02-09T07:00:00.000Z', '2021-02-18T07:00:00.000Z');\n    const upgradeText = isInPromotionWindow ? 'Get 33% off' : 'Upgrade';\n    if (error === Errors.UNAUTHENTICATED) return ModalUnauthenticated(signIn);\n    if (error === Errors.FORBIDDEN && isAnonymous) return ModalUnauthenticated(signIn);\n    if (error === Errors.FORBIDDEN) return ModalForbidden(() => upgrade(boundedContext, clipId), upgradeText);\n    return /*#__PURE__*/_jsxDEV(ModalGeneric, {\n      retry: () => {\n        setLoading(true);\n        requestUrls();\n      },\n      tryAgainCount: tryAgainCount,\n      setTryAgainCount: setTryAgainCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const {\n      error\n    } = this.props;\n    if (!error) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.errorModal,\n      children: this.getErrorMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  }\n\n}\nexport default ErrorModal; // export default connect(\n//   (state) => ({\n//     error: state.error,\n//     clipId: state.clipId,\n//     boundedContext: state.boundedContext,\n//     userId: state.userId,\n//     currentUrlIndex: state.currentUrlIndex,\n//     tryAgainCount: state.tryAgainCount,\n//   }),\n//   (store) => ({\n//     setLoading: actions.setLoading,\n//     requestUrls: actions.requestUrls,\n//     setTryAgainCount: actions.setTryAgainCount,\n//   })\n// )(ErrorModal)\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalUnauthenticated\");\n$RefreshReg$(_c2, \"ModalForbidden\");\n$RefreshReg$(_c3, \"ModalGeneric\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/error-modal/error-modal.js"],"names":["React","Component","Button","Link","moment","Errors","css","ModalUnauthenticated","signIn","ModalForbidden","upgrade","buttonText","ModalGeneric","retry","tryAgainCount","setTryAgainCount","appearances","subtle","ErrorModal","getErrorMessage","error","requestUrls","setLoading","userId","currentTime","Date","toISOString","boundedContext","clipId","props","isAnonymous","isInPromotionWindow","isBetween","upgradeText","UNAUTHENTICATED","FORBIDDEN","render","errorModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport Button from '@pluralsight/ps-design-system-button'\nimport Link from '@pluralsight/ps-design-system-link'\nimport moment from 'moment'\n\n// import * as actions from '../../actions'\nimport { Errors } from '../constants'\nimport css from './error-modal.module.css'\n\nfunction ModalUnauthenticated(signIn) {\n  return (\n    <div className={css['error-modal__content']}>\n      <p>You need to sign in to view this course.</p>\n      <Button className={css['error-modal__btn']} onClick={() => signIn && signIn()}>\n        Sign in\n      </Button>\n    </div>\n  )\n}\n\nfunction ModalForbidden(upgrade, buttonText) {\n  return (\n    <div className={css['error-modal__content']}>\n      <p>\n        Your current plan doesn’t allow access to this course. Upgrade to get access to thousands of expert-led courses\n        across hundreds of topics.\n      </p>\n      <Button className={css['error-modal__btn']} onClick={() => upgrade && upgrade()}>\n        {buttonText}\n      </Button>\n    </div>\n  )\n}\n\nexport const ModalGeneric = ({ retry, tryAgainCount, setTryAgainCount }) => {\n  return (\n    <div className={css['error-modal__content']}>\n      <p>We're sorry, there has been an issue loading your video.</p>\n      <Button\n        className={css['error-modal__btn']}\n        onClick={() => {\n          setTryAgainCount && setTryAgainCount(tryAgainCount ? tryAgainCount + 1 : 1)\n          retry && retry()\n        }}\n      >\n        Try again\n      </Button>\n      {tryAgainCount > 0 && (\n        <div>\n          <Link appearance={Link.appearances.subtle}>\n            <a className={css['error-modal__link']} href=\"https://app.pluralsight.com/video/test\" target=\"_blank\">\n              Still having issues?\n            </a>\n          </Link>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport class ErrorModal extends Component {\n  getErrorMessage() {\n    const {\n      error,\n      signIn,\n      requestUrls,\n      setLoading,\n      upgrade,\n      userId,\n      tryAgainCount,\n      setTryAgainCount,\n      currentTime = new Date().toISOString(),\n      boundedContext, \n      clipId\n    } = this.props\n    const isAnonymous = !userId || userId === 'anonymous'\n    const isInPromotionWindow = moment(currentTime).isBetween('2021-02-09T07:00:00.000Z', '2021-02-18T07:00:00.000Z')\n\n    const upgradeText = isInPromotionWindow ? 'Get 33% off' : 'Upgrade'\n\n    if (error === Errors.UNAUTHENTICATED) return ModalUnauthenticated(signIn)\n    if (error === Errors.FORBIDDEN && isAnonymous) return ModalUnauthenticated(signIn)\n    if (error === Errors.FORBIDDEN) return ModalForbidden(() => upgrade(boundedContext, clipId), upgradeText)\n\n    return (\n      <ModalGeneric\n        retry={() => {\n          setLoading(true)\n          requestUrls()\n        }}\n        tryAgainCount={tryAgainCount}\n        setTryAgainCount={setTryAgainCount}\n      />\n    )\n  }\n\n  render() {\n    const { error } = this.props\n\n    if (!error) return null\n\n    return <div className={css.errorModal}>{this.getErrorMessage()}</div>\n  }\n}\n\nexport default ErrorModal;\n\n// export default connect(\n//   (state) => ({\n//     error: state.error,\n//     clipId: state.clipId,\n//     boundedContext: state.boundedContext,\n//     userId: state.userId,\n//     currentUrlIndex: state.currentUrlIndex,\n//     tryAgainCount: state.tryAgainCount,\n//   }),\n//   (store) => ({\n//     setLoading: actions.setLoading,\n//     requestUrls: actions.requestUrls,\n//     setTryAgainCount: actions.setTryAgainCount,\n//   })\n// )(ErrorModal)\n"]},"metadata":{},"sourceType":"module"}