{"ast":null,"code":"import _defineProperty from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{configureStore}from\"@reduxjs/toolkit\";import{connectRoutes}from'redux-first-router';import queryString from'query-string';import{routesMap}from'portal/routes';import{authApi}from\"services/auth\";import modalReducer from'state/modals/modalSlice';var router=connectRoutes(routesMap,{querySerializer:queryString,initialDispatch:false,scrollTop:true});export var store=configureStore({reducer:_defineProperty({location:router.reducer,modal:modalReducer},authApi.reducerPath,authApi.reducer),middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware().concat(authApi.middleware);}});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/store/index.ts"],"names":["configureStore","connectRoutes","queryString","routesMap","authApi","modalReducer","router","querySerializer","initialDispatch","scrollTop","store","reducer","location","modal","reducerPath","middleware","getDefaultMiddleware","concat"],"mappings":"yKAAA,OAASA,cAAT,KAA0E,kBAA1E,CACA,OAASC,aAAT,KAA8B,oBAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,OAASC,SAAT,KAA0B,eAA1B,CAGA,OAASC,OAAT,KAAwB,eAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,yBAAzB,CAgBA,GAAMC,CAAAA,MAAM,CAAGL,aAAa,CAACE,SAAD,CAAY,CACpCI,eAAe,CAAEL,WADmB,CAEpCM,eAAe,CAAE,KAFmB,CAGpCC,SAAS,CAAE,IAHyB,CAAZ,CAA5B,CAMA,MAAO,IAAMC,CAAAA,KAAK,CAAGV,cAAc,CAAC,CAChCW,OAAO,kBACHC,QAAQ,CAAEN,MAAM,CAACK,OADd,CAEHE,KAAK,CAAER,YAFJ,EAGFD,OAAO,CAACU,WAHN,CAGoBV,OAAO,CAACO,OAH5B,CADyB,CAMhCI,UAAU,CAAE,oBAACC,oBAAD,QACZA,CAAAA,oBAAoB,GAAGC,MAAvB,CAA8Bb,OAAO,CAACW,UAAtC,CADY,EANoB,CAAD,CAA5B","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes'\nimport rootReducer, { reduceInitialState } from 'portal/state/reducers';\nimport { SiteState } from 'state/types';\nimport { authApi } from \"services/auth\";\nimport modalReducer from 'state/modals/modalSlice'\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nconst router = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialDispatch: false,\n    scrollTop: true,\n});\n\nexport const store = configureStore({\n    reducer: {\n        location: router.reducer,\n        modal: modalReducer,\n        [authApi.reducerPath]: authApi.reducer\n    },\n    middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware().concat(authApi.middleware)\n})\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n ReturnType, \n RootState,\n unknown,\n Action<string>\n >;"]},"metadata":{},"sourceType":"module"}