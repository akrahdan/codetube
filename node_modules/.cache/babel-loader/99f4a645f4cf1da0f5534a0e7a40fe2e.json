{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nimport { compileParamsToPath } from 'rudy-match-path';\nexport default (function (action, routesMap, serializer) {\n  var route = routesMap[action.type];\n  var routePath = (typeof route === 'undefined' ? 'undefined' : _typeof(route)) === 'object' ? route.path : route;\n\n  var params = _payloadToParams(route, action.payload);\n\n  var path = compileParamsToPath(routePath, params) || '/';\n  var query = action.query || action.meta && action.meta.query || action.payload && action.payload.query;\n  var search = query && serializer && serializer.stringify(query);\n  return search ? path + '?' + search : path;\n});\n\nvar _payloadToParams = function _payloadToParams(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(params).reduce(function (sluggifedParams, key) {\n    var segment = params[key]; // $FlowFixMe\n\n    sluggifedParams[key] = transformSegment(segment, route, key);\n    return sluggifedParams;\n  }, {});\n};\n\nvar transformSegment = function transformSegment(segment, route, key) {\n  if (typeof route.toPath === 'function') {\n    return route.toPath(segment, key);\n  } else if (typeof segment === 'string') {\n    // Ask James \"should it return arrays?\"\n    if (segment.includes('/')) {\n      return segment.split('/');\n    }\n\n    if (route.capitalizedWords === true) {\n      return segment.replace(/ /g, '-').toLowerCase();\n    }\n\n    return segment;\n  } else if (typeof segment === 'number') {\n    return segment;\n  }\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/redux-first-router/dist/es/pure-utils/actionToPath.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","compileParamsToPath","action","routesMap","serializer","route","type","routePath","path","params","_payloadToParams","payload","query","meta","search","stringify","arguments","length","undefined","Object","keys","reduce","sluggifedParams","key","segment","transformSegment","toPath","includes","split","capitalizedWords","replace","toLowerCase"],"mappings":"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","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nimport { compileParamsToPath } from 'rudy-match-path';\n\n\nexport default (function (action, routesMap, serializer) {\n  var route = routesMap[action.type];\n  var routePath = (typeof route === 'undefined' ? 'undefined' : _typeof(route)) === 'object' ? route.path : route;\n  var params = _payloadToParams(route, action.payload);\n  var path = compileParamsToPath(routePath, params) || '/';\n\n  var query = action.query || action.meta && action.meta.query || action.payload && action.payload.query;\n\n  var search = query && serializer && serializer.stringify(query);\n\n  return search ? path + '?' + search : path;\n});\n\nvar _payloadToParams = function _payloadToParams(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(params).reduce(function (sluggifedParams, key) {\n    var segment = params[key];\n    // $FlowFixMe\n    sluggifedParams[key] = transformSegment(segment, route, key);\n    return sluggifedParams;\n  }, {});\n};\n\nvar transformSegment = function transformSegment(segment, route, key) {\n  if (typeof route.toPath === 'function') {\n    return route.toPath(segment, key);\n  } else if (typeof segment === 'string') {\n    // Ask James \"should it return arrays?\"\n    if (segment.includes('/')) {\n      return segment.split('/');\n    }\n\n    if (route.capitalizedWords === true) {\n      return segment.replace(/ /g, '-').toLowerCase();\n    }\n\n    return segment;\n  } else if (typeof segment === 'number') {\n    return segment;\n  }\n};"]},"metadata":{},"sourceType":"module"}