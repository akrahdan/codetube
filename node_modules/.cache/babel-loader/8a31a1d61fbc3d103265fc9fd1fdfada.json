{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/ButtonDeprecated/index.tsx\";\nimport cx from 'classnames';\nimport { hasIn } from 'lodash';\nimport React from 'react';\nimport { ButtonDeprecatedBase } from '../ButtonDeprecatedBase';\nimport { omitProps } from '../utils/omitProps';\nimport styles from './styles/index.module.scss'; // themes can be an alias to a color\n// or a unique button type\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const buttonPresetThemes = {\n  secondary: 'mint',\n  platform: 'greyblue',\n  lantern: 'darkmint',\n  royalblue: 'brand-purple'\n};\nconst themes = ['hyper', 'navy', 'red', 'white', 'brand-red', 'brand-yellow', 'brand-purple', 'brand-dark-blue', 'brand-blue', 'mint', 'darkmint', 'grey', 'greyblue'];\nconst propKeys = ['theme', 'size', 'outline', 'underline', 'link', 'caps', 'go', 'children', 'block', 'className', 'round', 'square', 'flat', 'fitText', 'onClick'];\n\nconst isPreset = theme => {\n  return hasIn(buttonPresetThemes, theme);\n};\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [FillButon](https://gamut.codecademy.com/storybook/?path=/docs/atoms-button--fill-button#fill-button)\n *\n * @example\n * import { FillButton } fom '@codecademy/gamut';\n *\n * <FillButton variant=\"primary\" />\n */\n\n\nexport const ButtonDeprecated = props => {\n  let {\n    theme = 'brand-red'\n  } = props;\n\n  if (isPreset(theme)) {\n    theme = buttonPresetThemes[theme];\n  }\n\n  const typeClassName = props.link ? styles.link : styles.btn;\n  const themeClassName = props.link ? styles[`link-${theme}`] : styles[`btn-${theme}`];\n  const classes = cx(typeClassName, themeClassName, styles[props.size], {\n    [styles.block]: props.block,\n    [styles.go]: props.go,\n    [styles.outline]: props.outline,\n    [styles.underline]: props.underline,\n    [styles.caps]: props.caps,\n    [styles.round]: props.round,\n    [styles.square]: props.square,\n    [styles.flat]: props.flat,\n    [styles['fit-text']]: props.fitText\n  }, props.className);\n  const propsToTransfer = omitProps(propKeys, props);\n  return /*#__PURE__*/_jsxDEV(ButtonDeprecatedBase, { ...propsToTransfer,\n    className: classes,\n    link: props.link,\n    onClick: props.onClick,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_c = ButtonDeprecated;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonDeprecated\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/ButtonDeprecated/index.tsx"],"names":["cx","hasIn","React","ButtonDeprecatedBase","omitProps","styles","buttonPresetThemes","secondary","platform","lantern","royalblue","themes","propKeys","isPreset","theme","ButtonDeprecated","props","typeClassName","link","btn","themeClassName","classes","size","block","go","outline","underline","caps","round","square","flat","fitText","className","propsToTransfer","onClick","children"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport { hasIn } from 'lodash';\nimport React, { ReactNode } from 'react';\n\nimport {\n  ButtonDeprecatedBase,\n  ButtonDeprecatedBaseProps,\n} from '../ButtonDeprecatedBase';\nimport { omitProps } from '../utils/omitProps';\nimport styles from './styles/index.module.scss';\n\n// themes can be an alias to a color\n// or a unique button type\nexport const buttonPresetThemes = {\n  secondary: 'mint',\n  platform: 'greyblue',\n  lantern: 'darkmint',\n  royalblue: 'brand-purple',\n} as const;\n\nconst themes = [\n  'hyper',\n  'navy',\n  'red',\n  'white',\n  'brand-red',\n  'brand-yellow',\n  'brand-purple',\n  'brand-dark-blue',\n  'brand-blue',\n  'mint',\n  'darkmint',\n  'grey',\n  'greyblue',\n] as const;\n\nexport type ButtonDeprecatedThemes =\n  | keyof typeof buttonPresetThemes\n  | typeof themes[number];\n\nconst propKeys = [\n  'theme',\n  'size',\n  'outline',\n  'underline',\n  'link',\n  'caps',\n  'go',\n  'children',\n  'block',\n  'className',\n  'round',\n  'square',\n  'flat',\n  'fitText',\n  'onClick',\n];\n\nexport type ButtonDeprecatedProps = ButtonDeprecatedBaseProps & {\n  /**\n   * Whether button should behave like a block element or inline.\n   */\n  block?: boolean;\n  /**\n   * Capitalize the text of the button.\n   */\n  caps?: boolean;\n  children: ReactNode;\n  /**\n   * Disables the button and adds visual indicators to show it is not interactive.\n   */\n  disabled?: boolean;\n  /**\n   * Variant that displays the button as flat.\n   */\n  flat?: boolean;\n  /**\n   * Adds a pulsing animation to the button\n   */\n  go?: boolean;\n  /**\n   * Changes the button to a link with no visual indication\n   */\n  href?: string;\n  /**\n   * Link relationship property to be used with `href`\n   */\n  rel?: string;\n  /**\n   * Link target property to be used with `href`\n   */\n  target?: string;\n  id?: string;\n  /**\n   * Variant that displays the button as an inline link element, but maintains its semantic meaning as a button.\n   */\n  link?: boolean;\n  /**\n   * Variant the displays the button as a button that is outlined instead of solid.\n   */\n  outline?: boolean;\n  /**\n   *  Variant that rounds the corners of the button\n   */\n  round?: boolean;\n  /**\n   * Variant that determines the size of the button\n   */\n  size?: 'small' | 'large';\n  /**\n   * Variant that displays the button as a square\n   */\n  square?: boolean;\n  /**\n   * Variant that controls the background and text color of the button\n   * */\n  theme?: ButtonDeprecatedThemes;\n  type?: string;\n  /**\n   * Variant that underlines the text of the button.\n   */\n  underline?: boolean;\n  /**\n   *  Determines whether button dimensions should be determined by the content\n   */\n  fitText?: boolean;\n};\n\nconst isPreset = (theme: string): theme is keyof typeof buttonPresetThemes => {\n  return hasIn(buttonPresetThemes, theme);\n};\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [FillButon](https://gamut.codecademy.com/storybook/?path=/docs/atoms-button--fill-button#fill-button)\n *\n * @example\n * import { FillButton } fom '@codecademy/gamut';\n *\n * <FillButton variant=\"primary\" />\n */\n\nexport const ButtonDeprecated: React.FC<ButtonDeprecatedProps> = (props) => {\n  let { theme = 'brand-red' } = props;\n\n  if (isPreset(theme)) {\n    theme = buttonPresetThemes[theme];\n  }\n\n  const typeClassName = props.link ? styles.link : styles.btn;\n  const themeClassName = props.link\n    ? styles[`link-${theme}`]\n    : styles[`btn-${theme}`];\n\n  const classes = cx(\n    typeClassName,\n    themeClassName,\n    styles[props.size!],\n    {\n      [styles.block]: props.block,\n      [styles.go]: props.go,\n      [styles.outline]: props.outline,\n      [styles.underline]: props.underline,\n      [styles.caps]: props.caps,\n      [styles.round]: props.round,\n      [styles.square]: props.square,\n      [styles.flat]: props.flat,\n      [styles['fit-text']]: props.fitText,\n    },\n    props.className\n  );\n\n  const propsToTransfer = omitProps(propKeys, props);\n\n  return (\n    <ButtonDeprecatedBase\n      {...propsToTransfer}\n      className={classes}\n      link={props.link}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </ButtonDeprecatedBase>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}