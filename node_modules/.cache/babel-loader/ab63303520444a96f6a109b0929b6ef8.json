{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import cx from'classnames';/**\n * Preprocessing Instructions:\n *\n * Runs through each named tag in the html and adds a class name\n * to it based on the tag name. This means all `<pre>` tags will\n * actually output `<pre class=\"pre\" />`\n * The class name will only be applied if it exists in the stylesheet for this component.\n *\n * @remarks\n * This is done instead of styling the elements directly to prevent styles from interfering\n * with component overrides\n */export var createPreprocessingInstructions=function createPreprocessingInstructions(styles){return[{shouldPreprocessNode:function shouldPreprocessNode(node){return Boolean(node.name);},preprocessNode:function preprocessNode(node){var _node$attribs;var classname=cx(styles[node.name],(_node$attribs=node.attribs)===null||_node$attribs===void 0?void 0:_node$attribs.class);var attrs=_objectSpread({},node.attribs);if(classname)attrs.class=classname;node.attribs=attrs;}}];};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Markdown/libs/preprocessing.ts"],"names":["cx","createPreprocessingInstructions","styles","shouldPreprocessNode","node","Boolean","name","preprocessNode","classname","attribs","class","attrs"],"mappings":"sKAAA,MAAOA,CAAAA,EAAP,KAAe,YAAf,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,+BAA+B,CAAG,QAAlCA,CAAAA,+BAAkC,CAACC,MAAD,CAA0B,CACvE,MAAO,CACL,CACEC,oBADF,+BACuBC,IADvB,CAC8C,CAC1C,MAAOC,CAAAA,OAAO,CAACD,IAAI,CAACE,IAAN,CAAd,CACD,CAHH,CAIEC,cAJF,yBAIiBH,IAJjB,CAIwC,mBACpC,GAAMI,CAAAA,SAAS,CAAGR,EAAE,CAACE,MAAM,CAACE,IAAI,CAACE,IAAN,CAAP,gBAAqBF,IAAI,CAACK,OAA1B,wCAAqB,cAAcC,KAAnC,CAApB,CAEA,GAAMC,CAAAA,KAAK,kBAAQP,IAAI,CAACK,OAAb,CAAX,CACA,GAAID,SAAJ,CAAeG,KAAK,CAACD,KAAN,CAAcF,SAAd,CACfJ,IAAI,CAACK,OAAL,CAAeE,KAAf,CACD,CAVH,CADK,CAAP,CAcD,CAfM","sourcesContent":["import cx from 'classnames';\n\nimport { HTMLToReactNode } from './overrides';\n\ntype StylesObject = {\n  [className: string]: string;\n};\n\n/**\n * Preprocessing Instructions:\n *\n * Runs through each named tag in the html and adds a class name\n * to it based on the tag name. This means all `<pre>` tags will\n * actually output `<pre class=\"pre\" />`\n * The class name will only be applied if it exists in the stylesheet for this component.\n *\n * @remarks\n * This is done instead of styling the elements directly to prevent styles from interfering\n * with component overrides\n */\nexport const createPreprocessingInstructions = (styles: StylesObject) => {\n  return [\n    {\n      shouldPreprocessNode(node: HTMLToReactNode) {\n        return Boolean(node.name);\n      },\n      preprocessNode(node: HTMLToReactNode) {\n        const classname = cx(styles[node.name!], node.attribs?.class);\n\n        const attrs = { ...node.attribs };\n        if (classname) attrs.class = classname;\n        node.attribs = attrs;\n      },\n    },\n  ];\n};\n"]},"metadata":{},"sourceType":"module"}