{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/ToolTip/index.tsx\";\nimport { fontSmoothPixel, lineHeight, pxRem, timing, variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrowHeight = `1rem`;\nconst containerOffsetVertical = `0.75rem`;\nconst TooltipWrapper = styled.div`\n  position: relative;\n  display: inline-flex;\n`;\n_c = TooltipWrapper;\nconst TargetContainer = styled.div`\n  cursor: pointer;\n  border: 0;\n  background: none;\n  padding: 0;\n`;\n_c2 = TargetContainer;\nconst ToolTipContainer = styled.div`\n  ${fontSmoothPixel}\n  display: flex;\n  opacity: 0;\n  transition: opacity ${timing.fast};\n  transition-delay: ${timing.fast};\n  position: absolute;\n  max-width: ${({\n  alignment\n}) => alignment.includes('center') ? '8rem' : '16rem'};\n  visibility: hidden;\n  width: 70vw;\n  z-index: 1;\n\n  &::after {\n    content: '';\n    display: block;\n    height: ${arrowHeight};\n    position: absolute;\n    transform: rotate(45deg);\n    width: ${arrowHeight};\n  }\n\n  &::after {\n    border-style: solid;\n\n    ${variant({\n  prop: 'mode',\n  variants: {\n    dark: {\n      backgroundColor: 'black',\n      borderColor: 'white'\n    },\n    light: {\n      backgroundColor: 'white',\n      borderColor: 'black'\n    }\n  }\n})}\n  }\n\n  ${TargetContainer}:hover + &,\n  ${TargetContainer}:focus-within + &,\n  &:hover {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  ${({\n  alignment\n}) => alignment.includes('top') && `\n      bottom: 100%;\n      padding-bottom: ${containerOffsetVertical};\n\n      &::after {\n        border-bottom-right-radius: 4px;\n        border-width: 0 1px 1px 0;\n        bottom: 0.25rem;\n      }\n    `}\n\n  ${({\n  alignment\n}) => alignment.includes('bottom') && `\n      top: 100%;\n      padding-top: ${containerOffsetVertical};\n\n      &::after {\n        border-top-left-radius: 4px;\n        border-width: 1px 0 0 1px;\n        top: 0.25rem;\n      }\n    `}\n\n${({\n  alignment\n}) => alignment.includes('center') && `\n      left: calc(50% - 4rem);\n\n      &::after {\n        left: calc(50% - 0.5rem);\n      }\n    `}\n\n  ${({\n  alignment\n}) => alignment.includes('left') && `\n      justify-content: flex-end;\n\n      &::after {\n        right: 1.5rem;\n      }\n\n      left: calc(50% - 14rem)\n    `}\n\n  ${({\n  alignment\n}) => alignment.includes('right') && `\n      &::after {\n        left: 1.5rem;\n      }\n\n      left: calc(50% - 2rem);\n    `}\n`;\n_c3 = ToolTipContainer;\nconst ToolTipBody = styled.div`\n  border: 1px solid;\n  border-radius: 3px;\n  display: inline-block;\n  font-size: ${pxRem(14)};\n  line-height: ${lineHeight.base};\n  ${({\n  alignment\n}) => alignment.includes('center') ? `\n      margin: auto;\n      padding: 0.5rem;\n      text-align: center;\n    ` : `\n      padding: 1rem;\n    `}\n  min-width: 4rem;\n\n  ${variant({\n  prop: 'mode',\n  variants: {\n    dark: {\n      bg: 'black',\n      borderColor: 'beige',\n      textColor: 'beige'\n    },\n    light: {\n      bg: 'white',\n      borderColor: 'black',\n      textColor: 'black'\n    }\n  }\n})}\n`;\n_c4 = ToolTipBody;\nexport const ToolTip = ({\n  alignment = 'top-right',\n  children,\n  className,\n  containerClassName,\n  focusable,\n  id,\n  mode = 'light',\n  target\n}) => {\n  return /*#__PURE__*/_jsxDEV(TooltipWrapper, {\n    className: containerClassName,\n    children: [/*#__PURE__*/_jsxDEV(TargetContainer, {\n      \"aria-labelledby\": id,\n      onKeyDown: event => {\n        if (event.key === 'Escape') {\n          event.target.blur();\n        }\n      } // ToolTips sometimes contain actual <button>s, which cannot be a child of a button.\n      // This element still needs tab focus so we must use the `tabIndex=0` hack.\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n      ,\n      tabIndex: focusable ? 0 : undefined,\n      children: target\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToolTipContainer, {\n      alignment: alignment,\n      className: className,\n      id: id,\n      role: \"tooltip\",\n      mode: mode,\n      \"aria-live\": \"polite\",\n      children: /*#__PURE__*/_jsxDEV(ToolTipBody, {\n        alignment: alignment,\n        mode: mode,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_c5 = ToolTip;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"TooltipWrapper\");\n$RefreshReg$(_c2, \"TargetContainer\");\n$RefreshReg$(_c3, \"ToolTipContainer\");\n$RefreshReg$(_c4, \"ToolTipBody\");\n$RefreshReg$(_c5, \"ToolTip\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/ToolTip/index.tsx"],"names":["fontSmoothPixel","lineHeight","pxRem","timing","variant","styled","React","arrowHeight","containerOffsetVertical","TooltipWrapper","div","TargetContainer","ToolTipContainer","fast","alignment","includes","prop","variants","dark","backgroundColor","borderColor","light","ToolTipBody","base","bg","textColor","ToolTip","children","className","containerClassName","focusable","id","mode","target","event","key","blur","undefined"],"mappings":"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","sourcesContent":["import {\n  ColorModes,\n  fontSmoothPixel,\n  lineHeight,\n  pxRem,\n  timing,\n  variant,\n} from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { ReactNode } from 'react';\n\nexport type ToolTipAlignment =\n  | 'bottom-center'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'top-center'\n  | 'top-left'\n  | 'top-right';\n\nconst arrowHeight = `1rem`;\nconst containerOffsetVertical = `0.75rem`;\n\nconst TooltipWrapper = styled.div`\n  position: relative;\n  display: inline-flex;\n`;\n\nconst TargetContainer = styled.div`\n  cursor: pointer;\n  border: 0;\n  background: none;\n  padding: 0;\n`;\n\ntype ToolTipContainerProps = {\n  alignment: ToolTipAlignment;\n  mode: ColorModes;\n};\n\nconst ToolTipContainer = styled.div<ToolTipContainerProps>`\n  ${fontSmoothPixel}\n  display: flex;\n  opacity: 0;\n  transition: opacity ${timing.fast};\n  transition-delay: ${timing.fast};\n  position: absolute;\n  max-width: ${({ alignment }) =>\n    alignment.includes('center') ? '8rem' : '16rem'};\n  visibility: hidden;\n  width: 70vw;\n  z-index: 1;\n\n  &::after {\n    content: '';\n    display: block;\n    height: ${arrowHeight};\n    position: absolute;\n    transform: rotate(45deg);\n    width: ${arrowHeight};\n  }\n\n  &::after {\n    border-style: solid;\n\n    ${variant({\n      prop: 'mode',\n      variants: {\n        dark: { backgroundColor: 'black', borderColor: 'white' },\n        light: { backgroundColor: 'white', borderColor: 'black' },\n      },\n    })}\n  }\n\n  ${TargetContainer}:hover + &,\n  ${TargetContainer}:focus-within + &,\n  &:hover {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  ${({ alignment }) =>\n    alignment.includes('top') &&\n    `\n      bottom: 100%;\n      padding-bottom: ${containerOffsetVertical};\n\n      &::after {\n        border-bottom-right-radius: 4px;\n        border-width: 0 1px 1px 0;\n        bottom: 0.25rem;\n      }\n    `}\n\n  ${({ alignment }) =>\n    alignment.includes('bottom') &&\n    `\n      top: 100%;\n      padding-top: ${containerOffsetVertical};\n\n      &::after {\n        border-top-left-radius: 4px;\n        border-width: 1px 0 0 1px;\n        top: 0.25rem;\n      }\n    `}\n\n${({ alignment }) =>\n    alignment.includes('center') &&\n    `\n      left: calc(50% - 4rem);\n\n      &::after {\n        left: calc(50% - 0.5rem);\n      }\n    `}\n\n  ${({ alignment }) =>\n    alignment.includes('left') &&\n    `\n      justify-content: flex-end;\n\n      &::after {\n        right: 1.5rem;\n      }\n\n      left: calc(50% - 14rem)\n    `}\n\n  ${({ alignment }) =>\n    alignment.includes('right') &&\n    `\n      &::after {\n        left: 1.5rem;\n      }\n\n      left: calc(50% - 2rem);\n    `}\n`;\n\nconst ToolTipBody = styled.div<ToolTipContainerProps>`\n  border: 1px solid;\n  border-radius: 3px;\n  display: inline-block;\n  font-size: ${pxRem(14)};\n  line-height: ${lineHeight.base};\n  ${({ alignment }) =>\n    alignment.includes('center')\n      ? `\n      margin: auto;\n      padding: 0.5rem;\n      text-align: center;\n    `\n      : `\n      padding: 1rem;\n    `}\n  min-width: 4rem;\n\n  ${variant({\n    prop: 'mode',\n    variants: {\n      dark: {\n        bg: 'black',\n        borderColor: 'beige',\n        textColor: 'beige',\n      },\n      light: {\n        bg: 'white',\n        borderColor: 'black',\n        textColor: 'black',\n      },\n    },\n  })}\n`;\n\nexport type ToolTipProps = {\n  /**\n   * How to align the tooltip relative to the target.\n   */\n  alignment?: ToolTipAlignment;\n\n  children?: ReactNode;\n\n  /**\n   * Class name for the hidden-by-default contents.\n   *\n   * @remarks\n   * This is an inner element, not the outermost positioning element.\n   * That element is styled with `containerClassName`.\n   */\n  className?: string;\n\n  /**\n   * Class name for the outermost positioning element.\n   */\n  containerClassName?: string;\n\n  /**\n   * Whether to manually add a tabIndex of 0 to the target container, for tooltips without focusable children.\n   */\n  focusable?: boolean;\n\n  id: string;\n  mode?: ColorModes;\n  target?: ReactNode;\n};\n\nexport const ToolTip: React.FC<ToolTipProps> = ({\n  alignment = 'top-right',\n  children,\n  className,\n  containerClassName,\n  focusable,\n  id,\n  mode = 'light',\n  target,\n}) => {\n  return (\n    <TooltipWrapper className={containerClassName}>\n      <TargetContainer\n        aria-labelledby={id}\n        onKeyDown={(event) => {\n          if (event.key === 'Escape') {\n            (event.target as HTMLElement).blur();\n          }\n        }}\n        // ToolTips sometimes contain actual <button>s, which cannot be a child of a button.\n        // This element still needs tab focus so we must use the `tabIndex=0` hack.\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n        tabIndex={focusable ? 0 : undefined}\n      >\n        {target}\n      </TargetContainer>\n      <ToolTipContainer\n        alignment={alignment}\n        className={className}\n        id={id}\n        role=\"tooltip\"\n        mode={mode}\n        aria-live=\"polite\"\n      >\n        <ToolTipBody alignment={alignment} mode={mode}>\n          {children}\n        </ToolTipBody>\n      </ToolTipContainer>\n    </TooltipWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}