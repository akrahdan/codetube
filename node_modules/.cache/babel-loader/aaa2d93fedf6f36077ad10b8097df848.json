{"ast":null,"code":"import invariant from 'invariant';\nimport { isPlainObject, omit, without } from 'lodash';\n\n/**\n * omitProps\n *\n * removes a provided array of props from a props object,\n * leaving necessary props like children intact\n */\nexport function omitProps(initialPropsToOmit, props) {\n  const propsToOmit = isPlainObject(initialPropsToOmit) ? Object.keys(initialPropsToOmit) : initialPropsToOmit;\n  invariant(Array.isArray(propsToOmit), 'omitProps first argument should be an Array'); // allow all data-* props, mainly used for testing libraries\n\n  const dataProps = propsToOmit.filter(p => p.match(/^data-.*/));\n  return omit(props, without(propsToOmit, 'children', 'className', ...dataProps));\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/utils/omitProps.tsx"],"names":["invariant","isPlainObject","omit","without","omitProps","initialPropsToOmit","props","propsToOmit","Object","keys","Array","isArray","dataProps","filter","p","match"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAA8BC,aAA9B,EAA6CC,IAA7C,EAAmDC,OAAnD,QAAkE,QAAlE;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAT,CACLC,kBADK,EAELC,KAFK,EAG8B;AACnC,QAAMC,WAAW,GAAGN,aAAa,CAACI,kBAAD,CAAb,GAChBG,MAAM,CAACC,IAAP,CAAYJ,kBAAZ,CADgB,GAEfA,kBAFL;AAIAL,EAAAA,SAAS,CACPU,KAAK,CAACC,OAAN,CAAcJ,WAAd,CADO,EAEP,6CAFO,CAAT,CALmC,CAUnC;;AACA,QAAMK,SAAS,GAAGL,WAAW,CAACM,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQ,UAAR,CAA1B,CAAlB;AAEA,SAAOb,IAAI,CACRI,KADQ,EAETH,OAAO,CAACI,WAAD,EAAc,UAAd,EAA0B,WAA1B,EAAuC,GAAGK,SAA1C,CAFE,CAAX;AAID","sourcesContent":["import invariant from 'invariant';\nimport { AnyKindOfDictionary, isPlainObject, omit, without } from 'lodash';\n\nexport type RemoveFrom<TContainer, TRemoved> = {\n  [P in keyof TContainer]: P extends keyof TRemoved ? never : TContainer[P];\n};\n\n/**\n * omitProps\n *\n * removes a provided array of props from a props object,\n * leaving necessary props like children intact\n */\nexport function omitProps<TOmittedProps extends {}, TProps extends {}>(\n  initialPropsToOmit: TOmittedProps | (keyof TOmittedProps)[],\n  props: TProps\n): RemoveFrom<TOmittedProps, TProps> {\n  const propsToOmit = isPlainObject(initialPropsToOmit)\n    ? Object.keys(initialPropsToOmit)\n    : (initialPropsToOmit as string[]);\n\n  invariant(\n    Array.isArray(propsToOmit),\n    'omitProps first argument should be an Array'\n  );\n\n  // allow all data-* props, mainly used for testing libraries\n  const dataProps = propsToOmit.filter((p) => p.match(/^data-.*/));\n\n  return omit(\n    (props as unknown) as AnyKindOfDictionary,\n    without(propsToOmit, 'children', 'className', ...dataProps)\n  ) as RemoveFrom<TOmittedProps, TProps>;\n}\n"]},"metadata":{},"sourceType":"module"}