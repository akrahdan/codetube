{"ast":null,"code":"import{createApi,fetchBaseQuery}from'@reduxjs/toolkit/query/react';import cookie from'react-cookies';export var authApi=createApi({baseQuery:fetchBaseQuery({baseUrl:'/',prepareHeaders:function prepareHeaders(headers){var csrfToken=cookie.load('csrftoken');if(csrfToken){headers.set('X-CSRFToken',csrfToken);}headers.set('Content-Type','application/json');return headers;}}),tagTypes:['Login'],endpoints:function endpoints(build){return{login:build.mutation({query:function query(body){return{url:'accounts/login',method:'POST',body:body,responseHandler:function responseHandler(response){return response.json();}};}})};}});var useLoginMutation=authApi.useLoginMutation;export{useLoginMutation};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/auth.ts"],"names":["createApi","fetchBaseQuery","cookie","authApi","baseQuery","baseUrl","prepareHeaders","headers","csrfToken","load","set","tagTypes","endpoints","build","login","mutation","query","body","url","method","responseHandler","response","json","useLoginMutation"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,KAA0C,8BAA1C,CAEA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CAaA,MAAO,IAAMC,CAAAA,OAAO,CAAGH,SAAS,CAAC,CAC7BI,SAAS,CAAEH,cAAc,CAAC,CAAEI,OAAO,CAAE,GAAX,CAC1BC,cAAc,CAAE,wBAACC,OAAD,CAAa,CACzB,GAAMC,CAAAA,SAAS,CAAGN,MAAM,CAACO,IAAP,CAAY,WAAZ,CAAlB,CACA,GAAGD,SAAH,CAAc,CACVD,OAAO,CAACG,GAAR,CAAY,aAAZ,CAA2BF,SAA3B,EACH,CACDD,OAAO,CAACG,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EAEA,MAAOH,CAAAA,OAAP,CACH,CATyB,CAAD,CADI,CAY7BI,QAAQ,CAAE,CAAC,OAAD,CAZmB,CAa7BC,SAAS,CAAE,mBAACC,KAAD,QAAY,CACpBC,KAAK,CAAGD,KAAK,CAACE,QAAN,CAAsC,CAC1CC,KAAK,CAAE,eAACC,IAAD,QAAW,CACdC,GAAG,CAAE,gBADS,CAEdC,MAAM,CAAE,MAFM,CAGdF,IAAI,CAAJA,IAHc,CAIdG,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAJH,CAAX,EADmC,CAAtC,CADY,CAAZ,EAbkB,CAAD,CAAzB,C,GAyBQC,CAAAA,gB,CAAqBpB,O,CAArBoB,gB","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { head } from 'lodash';\nimport cookie from 'react-cookies';\n\nexport interface Login {\n    email: string,\n    password: string\n}\n\nexport interface Signup {\n    email: string,\n    password: string,\n    password2: string\n}\n\nexport const authApi = createApi({\n    baseQuery: fetchBaseQuery({ baseUrl: '/',\n    prepareHeaders: (headers) => {\n        const csrfToken = cookie.load('csrftoken')\n        if(csrfToken) {\n            headers.set('X-CSRFToken', csrfToken)\n        }\n        headers.set('Content-Type', 'application/json')\n\n        return headers\n    }\n    }),\n    tagTypes: ['Login'],\n    endpoints: (build) => ({\n       login:  build.mutation<Login, Partial<Login>>({\n           query: (body) => ({\n               url: 'accounts/login',\n               method: 'POST',\n               body,\n               responseHandler: (response) => response.json()\n           })\n       }),\n    })\n});\n\nexport const { useLoginMutation } = authApi"]},"metadata":{},"sourceType":"module"}