{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";/* eslint-disable jsx-a11y/anchor-has-content */import React from'react';import{Anchor}from'../../../../Anchor';import{jsx as _jsx}from\"react/jsx-runtime\";var absoluteURLPattern=new RegExp('^(?:[a-z]+:)?//','i');var matchesOrigin=function matchesOrigin(href){if(typeof window==='undefined'||typeof URL==='undefined')return false;try{var url=new window.URL(href);if(url.origin===window.location.origin){return true;}}catch(e){// Standard markdown behavior is to just render the bad url,\n// So we don't need to handle this error\n}return false;};export var MarkdownAnchor=function MarkdownAnchor(_ref){var children=_ref.children,props=_objectWithoutProperties(_ref,[\"children\"]);var anchorProps=_objectSpread(_objectSpread({},props),{},{target:'_blank',rel:'noopener'});// remove noopener/noreferrer on relative & same origin urls\nif(matchesOrigin(props.href)||!absoluteURLPattern.test(props.href)){delete anchorProps.rel;}return/*#__PURE__*/_jsx(Anchor,_objectSpread(_objectSpread({},anchorProps),{},{children:children}));};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Markdown/libs/overrides/MarkdownAnchor/index.tsx"],"names":["React","Anchor","absoluteURLPattern","RegExp","matchesOrigin","href","window","URL","url","origin","location","e","MarkdownAnchor","children","props","anchorProps","target","rel","test"],"mappings":"iWAAA,gDACA,MAAOA,CAAAA,KAAP,KAAsC,OAAtC,CAEA,OAASC,MAAT,KAAuB,oBAAvB,C,2CAMA,GAAMC,CAAAA,kBAAkB,CAAG,GAAIC,CAAAA,MAAJ,CAAW,iBAAX,CAA8B,GAA9B,CAA3B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,IAAD,CAAkB,CACtC,GAAI,MAAOC,CAAAA,MAAP,GAAkB,WAAlB,EAAiC,MAAOC,CAAAA,GAAP,GAAe,WAApD,CAAiE,MAAO,MAAP,CAEjE,GAAI,CACF,GAAMC,CAAAA,GAAG,CAAG,GAAIF,CAAAA,MAAM,CAACC,GAAX,CAAeF,IAAf,CAAZ,CACA,GAAIG,GAAG,CAACC,MAAJ,GAAeH,MAAM,CAACI,QAAP,CAAgBD,MAAnC,CAA2C,CACzC,MAAO,KAAP,CACD,CACF,CAAC,MAAOE,CAAP,CAAU,CACV;AACA;AACD,CACD,MAAO,MAAP,CACD,CAbD,CAeA,MAAO,IAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAGvD,IAFJC,CAAAA,QAEI,MAFJA,QAEI,CADDC,KACC,6CACJ,GAAMC,CAAAA,WAAW,gCACZD,KADY,MAEfE,MAAM,CAAE,QAFO,CAGfC,GAAG,CAAE,UAHU,EAAjB,CAMA;AACA,GAAIb,aAAa,CAACU,KAAK,CAACT,IAAP,CAAb,EAA6B,CAACH,kBAAkB,CAACgB,IAAnB,CAAwBJ,KAAK,CAACT,IAA9B,CAAlC,CAAuE,CACrE,MAAOU,CAAAA,WAAW,CAACE,GAAnB,CACD,CAED,mBAAO,KAAC,MAAD,gCAAYF,WAAZ,eAA0BF,QAA1B,GAAP,CACD,CAhBM","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\nimport React, { ComponentProps } from 'react';\n\nimport { Anchor } from '../../../../Anchor';\n\nexport interface MarkdownAnchorProps extends ComponentProps<typeof Anchor> {\n  href: string;\n}\n\nconst absoluteURLPattern = new RegExp('^(?:[a-z]+:)?//', 'i');\n\nconst matchesOrigin = (href: string) => {\n  if (typeof window === 'undefined' || typeof URL === 'undefined') return false;\n\n  try {\n    const url = new window.URL(href);\n    if (url.origin === window.location.origin) {\n      return true;\n    }\n  } catch (e) {\n    // Standard markdown behavior is to just render the bad url,\n    // So we don't need to handle this error\n  }\n  return false;\n};\n\nexport const MarkdownAnchor: React.FC<MarkdownAnchorProps> = ({\n  children,\n  ...props\n}) => {\n  const anchorProps = {\n    ...props,\n    target: '_blank',\n    rel: 'noopener',\n  } as MarkdownAnchorProps & { rel?: string; target?: string };\n\n  // remove noopener/noreferrer on relative & same origin urls\n  if (matchesOrigin(props.href) || !absoluteURLPattern.test(props.href)) {\n    delete anchorProps.rel;\n  }\n\n  return <Anchor {...anchorProps}>{children}</Anchor>;\n};\n"]},"metadata":{},"sourceType":"module"}