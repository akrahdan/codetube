{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Profile/CoursesSection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Anchor, Text } from '@codecademy/gamut';\nimport { ListSection } from '@codecademy/gamut-labs';\nimport React, { useState } from 'react';\nimport { catalogPath } from 'libs/urlHelpers';\nimport { useGetMyProjectsQuery } from 'services/projects';\nimport { allCourses } from './allCourses';\nimport { EnrollmentCard } from './EnrollmentCard';\nimport { EnrollmentLoadingCard } from './EnrollmentLoadingCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isLoading = false;\nexport const CoursesSection = ({\n  isCurrentUser,\n  enrollments\n}) => {\n  _s();\n\n  const isEmpty = (allCourses === null || allCourses === void 0 ? void 0 : allCourses.length) === 0;\n  const {\n    data: projectsQuery\n  } = useGetMyProjectsQuery();\n  const [projects, setProjects] = useState();\n  const loadingCardsToDisplay = enrollments.length > 3 ? enrollments.slice(0, 3) : enrollments;\n\n  const renderEmptyMessage = () => /*#__PURE__*/_jsxDEV(Text, {\n    children: [/*#__PURE__*/_jsxDEV(Anchor, {\n      href: catalogPath,\n      onClick: () => console.log(),\n      variant: \"standard\",\n      children: \"Browse our Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), ' ', \"to start a course now\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  const renderContent = () => isEmpty ? renderEmptyMessage() : allCourses === null || allCourses === void 0 ? void 0 : allCourses.map(course => /*#__PURE__*/_jsxDEV(EnrollmentCard, {\n    id: course.id,\n    onEnrollmentClick: value => console.log()\n  }, course.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 11\n  }, this));\n\n  const renderLoadingState = () => loadingCardsToDisplay.map(enrollment => /*#__PURE__*/_jsxDEV(EnrollmentLoadingCard, {}, `enrollment-loading-card-${enrollment.id}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this));\n\n  if (!isCurrentUser && isEmpty) return null;\n  return /*#__PURE__*/_jsxDEV(ListSection, {\n    title: \"My Projects\",\n    onShowAllOrLessClick: () => console.log(),\n    children: isLoading ? renderLoadingState() : renderContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoursesSection, \"lQ9svqtSH4as5iQyRMMj+GuIbTk=\", false, function () {\n  return [useGetMyProjectsQuery];\n});\n\n_c = CoursesSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoursesSection\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Profile/CoursesSection/index.tsx"],"names":["Anchor","Text","ListSection","React","useState","catalogPath","useGetMyProjectsQuery","allCourses","EnrollmentCard","EnrollmentLoadingCard","isLoading","CoursesSection","isCurrentUser","enrollments","isEmpty","length","data","projectsQuery","projects","setProjects","loadingCardsToDisplay","slice","renderEmptyMessage","console","log","renderContent","map","course","id","value","renderLoadingState","enrollment"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;AAWA,MAAMC,SAAS,GAAG,KAAlB;AAEA,OAAO,MAAMC,cAA6C,GAAG,CAAC;AAC5DC,EAAAA,aAD4D;AAE5DC,EAAAA;AAF4D,CAAD,KAGvD;AAAA;;AAEJ,QAAMC,OAAO,GAAG,CAAAP,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEQ,MAAZ,MAAuB,CAAvC;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAyBX,qBAAqB,EAApD;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA2Bf,QAAQ,EAAzC;AACA,QAAMgB,qBAAqB,GACzBP,WAAW,CAACE,MAAZ,GAAqB,CAArB,GAAyBF,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAzB,GAAmDR,WADrD;;AAGA,QAAMS,kBAAkB,GAAG,mBACzB,QAAC,IAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEjB,WADR;AAEE,MAAA,OAAO,EAAE,MAAMkB,OAAO,CAACC,GAAR,EAFjB;AAGE,MAAA,OAAO,EAAC,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOY,GAPZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAeA,QAAMC,aAAa,GAAG,MACpBX,OAAO,GACHQ,kBAAkB,EADf,GAEHf,UAFG,aAEHA,UAFG,uBAEHA,UAAU,CAAEmB,GAAZ,CAAiBC,MAAD,iBACd,QAAC,cAAD;AAEE,IAAA,EAAE,EAAEA,MAAM,CAACC,EAFb;AAIE,IAAA,iBAAiB,EAAGC,KAAD,IAAWN,OAAO,CAACC,GAAR;AAJhC,KACOG,MAAM,CAACC,EADd;AAAA;AAAA;AAAA;AAAA,UADF,CAHN;;AAYA,QAAME,kBAAkB,GAAG,MACzBV,qBAAqB,CAACM,GAAtB,CAA2BK,UAAD,iBACxB,QAAC,qBAAD,MAA6B,2BAA0BA,UAAU,CAACH,EAAG,EAArE;AAAA;AAAA;AAAA;AAAA,UADF,CADF;;AAKA,MAAI,CAAChB,aAAD,IAAkBE,OAAtB,EAA+B,OAAO,IAAP;AAC/B,sBACE,QAAC,WAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,oBAAoB,EAAE,MAAMS,OAAO,CAACC,GAAR,EAF9B;AAAA,cAIGd,SAAS,GAAGoB,kBAAkB,EAArB,GAA0BL,aAAa;AAJnD;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApDM;;GAAMd,c;UAMoBL,qB;;;KANpBK,c","sourcesContent":["import { Anchor, Text } from '@codecademy/gamut';\nimport { ListSection } from '@codecademy/gamut-labs';\nimport React, { useState } from 'react';\n\nimport { catalogPath } from 'libs/urlHelpers';\nimport { useGetMyProjectsQuery } from 'services/projects';\nimport type { OrderResponse, ProjectEntityResponse } from 'services/projects';\nimport { allCourses } from './allCourses';\n\nimport { EnrollmentCard } from './EnrollmentCard';\nimport { EnrollmentLoadingCard } from './EnrollmentLoadingCard';\n\nexport interface Enrollment {\n    length : number,\n    id: string\n}\nexport type CoursesSectionProps = {\n  isCurrentUser: boolean;\n  enrollments: Enrollment[];\n};\n\nconst isLoading = false;\n\nexport const CoursesSection: React.FC<CoursesSectionProps> = ({\n  isCurrentUser,\n  enrollments,\n}) => {\n \n  const isEmpty = allCourses?.length === 0;\n  const { data: projectsQuery} = useGetMyProjectsQuery()\n  const [projects, setProjects ] = useState<ProjectEntityResponse[]>()\n  const loadingCardsToDisplay =\n    enrollments.length > 3 ? enrollments.slice(0, 3) : enrollments;\n\n  const renderEmptyMessage = () => (\n    <Text>\n      <Anchor\n        href={catalogPath}\n        onClick={() => console.log()}\n        variant=\"standard\"\n      >\n        Browse our Projects\n      </Anchor>{' '}\n      to start a course now\n    </Text>\n  );\n\n\n\n  const renderContent = () =>\n    isEmpty\n      ? renderEmptyMessage()\n      : allCourses?.map((course) => (\n          <EnrollmentCard\n            key={course.id}\n            id={course.id}\n           \n            onEnrollmentClick={(value) => console.log()}\n          />\n        ));\n\n  const renderLoadingState = () =>\n    loadingCardsToDisplay.map((enrollment) => (\n      <EnrollmentLoadingCard key={`enrollment-loading-card-${enrollment.id}`} />\n    ));\n\n  if (!isCurrentUser && isEmpty) return null;\n  return (\n    <ListSection\n      title=\"My Projects\"\n      onShowAllOrLessClick={() => console.log()}\n    >\n      {isLoading ? renderLoadingState() : renderContent()}\n    </ListSection>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}