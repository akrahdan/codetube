{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { ReactNode } from 'react';\nimport { UseFormMethods, ValidationRules } from 'react-hook-form';\n\nimport { ColumnProps } from '../Layout';\nimport { ToolTipProps } from '../ToolTip';\n\nexport type BaseFormField<Value> = {\n  defaultValue?: Value;\n  customError?: string;\n  disabled?: boolean;\n\n  /**\n   * Whether the label should be hidden visually and not take up space.\n   */\n  hideLabel?: boolean;\n\n  /**\n   * HTML id to use instead of the name.\n   */\n  id?: string;\n\n  tooltip?: ToolTipProps;\n\n  name: string;\n  onUpdate?: (value: Value) => void;\n  size: ColumnProps['size'];\n  rowspan?: ColumnProps['rowspan'];\n};\n\nexport type GridFormCheckboxField = BaseFormField<boolean> & {\n  description: React.ReactNode;\n  label?: React.ReactNode;\n  multiline?: boolean;\n  validation?: ValidationRules;\n  type: 'checkbox';\n};\n\nexport type GridFormCustomFieldProps = {\n  className?: string;\n  error?: string;\n  field: GridFormCustomField | GridFormCustomGroupField;\n  register: UseFormMethods['register'];\n  setValue: (value: any) => void;\n};\n\nexport type GridFormCustomField = BaseFormField<any> & {\n  label?: React.ReactNode;\n  render: (props: GridFormCustomFieldProps) => React.ReactNode;\n  validation?: ValidationRules;\n  type: 'custom';\n};\n\nexport type GridFormCustomGroupField = BaseFormField<any> & {\n  label?: React.ReactNode;\n  render: (props: GridFormCustomFieldProps) => React.ReactNode;\n  validation?: ValidationRules;\n  type: 'custom-group';\n};\n\nexport type BasicInputType =\n  | 'color'\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'month'\n  | 'number'\n  | 'password'\n  | 'search'\n  | 'tel'\n  | 'text'\n  | 'time'\n  | 'url'\n  | 'week';\n\nexport type GridFormTextField = BaseFormField<string> & {\n  label: React.ReactNode;\n  placeholder?: string;\n  validation?: ValidationRules;\n  type: BasicInputType;\n};\n\nexport type GridFormRadioOption = {\n  label: ReactNode;\n  value: string;\n};\n\nexport type GridFormRadioGroupField = BaseFormField<string> & {\n  label: ReactNode | string; // If this is a string, it will also be used as the aria-label.\n  options: GridFormRadioOption[];\n  validation?: ValidationRules;\n  type: 'radio-group';\n  ariaLabel?: string;\n};\n\nexport type GridFormSelectField = BaseFormField<string> & {\n  label: React.ReactNode;\n  options: string[] | Record<string, number | string>;\n  validation?: ValidationRules;\n  type: 'select';\n};\n\nexport type GridFormFileField = BaseFormField<FileList> & {\n  label: React.ReactNode;\n  validation?: ValidationRules;\n  type: 'file';\n};\n\nexport type GridFormTextAreaField = BaseFormField<string> & {\n  label: React.ReactNode;\n  placeholder?: string;\n  validation?: ValidationRules;\n  type: 'textarea';\n};\n\ntype HiddenField = Omit<BaseFormField<any>, 'size' | 'rowspan'>;\n\nexport type GridFormHiddenField = HiddenField & {\n  type: 'hidden';\n};\n\nexport type GridFormSweetContainerField = HiddenField & {\n  label: string;\n  type: 'sweet-container';\n};\n\nexport type GridFormField =\n  | GridFormCheckboxField\n  | GridFormCustomField\n  | GridFormCustomGroupField\n  | GridFormRadioGroupField\n  | GridFormTextField\n  | GridFormSelectField\n  | GridFormFileField\n  | GridFormTextAreaField\n  | GridFormHiddenField\n  | GridFormSweetContainerField;\n\nexport type GridFormSectionTitleBaseProps = {\n  title: string;\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n  layout?: 'center' | 'left';\n};\n\nexport type GridFormSectionProps = GridFormSectionTitleBaseProps & {\n  fields: GridFormField[];\n};\n\nexport type GridFormFieldsProps = GridFormField | GridFormSectionProps;\n"]},"metadata":{},"sourceType":"module"}