{"ast":null,"code":"import { Card, FlexBox, ProLabel, Text } from '@codecademy/gamut';\nimport { pxRem } from '@codecademy/gamut-styles';\nimport React from 'react';\nimport { Footer } from './Footer/index';\nimport { Image } from './Image/index';\nimport { Subtitle } from './Subtitle';\nvar cardHeight = 180;\nvar cardStyles = {\n  inProgress: 'yellow',\n  completed: 'navy'\n};\nexport var CurriculumCard = function CurriculumCard(_ref) {\n  var difficulty = _ref.difficulty,\n      _ref$headingLevel = _ref.headingLevel,\n      headingLevel = _ref$headingLevel === void 0 ? 'h3' : _ref$headingLevel,\n      image = _ref.image,\n      _ref$isFullSize = _ref.isFullSize,\n      isFullSize = _ref$isFullSize === void 0 ? false : _ref$isFullSize,\n      progressState = _ref.progressState,\n      scope = _ref.scope,\n      scopeCount = _ref.scopeCount,\n      showProLogo = _ref.showProLogo,\n      tag = _ref.tag,\n      tagColor = _ref.tagColor,\n      text = _ref.text,\n      title = _ref.title;\n  var boxVariant = progressState && cardStyles[progressState];\n  var mode = progressState === 'completed' ? 'dark' : 'light';\n  return /*#__PURE__*/React.createElement(Card, {\n    display: \"grid\",\n    gridTemplateRows: \"repeat(3, max-content) 1fr max-content\",\n    minHeight: isFullSize ? pxRem(cardHeight * 2 + 32) : pxRem(cardHeight),\n    variant: boxVariant !== null && boxVariant !== void 0 ? boxVariant : 'white',\n    shadow: \"medium\",\n    position: \"relative\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    display: \"flex\",\n    fontSize: 14,\n    mb: 12,\n    fontFamily: \"accent\",\n    textTransform: \"capitalize\"\n  }, showProLogo && /*#__PURE__*/React.createElement(ProLabel, {\n    alignSelf: \"center\",\n    mr: 8,\n    mode: mode\n  }), text), /*#__PURE__*/React.createElement(Text, {\n    as: headingLevel,\n    mb: 4,\n    fontSize: 20\n  }, title), /*#__PURE__*/React.createElement(FlexBox, {\n    flexWrap: \"wrap\"\n  }, !progressState && /*#__PURE__*/React.createElement(Subtitle, {\n    scope: scope,\n    scopeCount: scopeCount,\n    difficulty: difficulty\n  })), /*#__PURE__*/React.createElement(FlexBox, {\n    center: true,\n    pb: 16\n  }, isFullSize && image && /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    progressState: progressState\n  })), /*#__PURE__*/React.createElement(Footer, {\n    progressState: progressState,\n    tag: tag,\n    tagColor: tagColor\n  }));\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut-labs/dist/CurriculumCard/index.js"],"names":["Card","FlexBox","ProLabel","Text","pxRem","React","Footer","Image","Subtitle","cardHeight","cardStyles","inProgress","completed","CurriculumCard","_ref","difficulty","_ref$headingLevel","headingLevel","image","_ref$isFullSize","isFullSize","progressState","scope","scopeCount","showProLogo","tag","tagColor","text","title","boxVariant","mode","createElement","display","gridTemplateRows","minHeight","variant","shadow","position","fontSize","mb","fontFamily","textTransform","alignSelf","mr","as","flexWrap","center","pb"],"mappings":"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","sourcesContent":["import { Card, FlexBox, ProLabel, Text } from '@codecademy/gamut';\nimport { pxRem } from '@codecademy/gamut-styles';\nimport React from 'react';\nimport { Footer } from './Footer/index';\nimport { Image } from './Image/index';\nimport { Subtitle } from './Subtitle';\nvar cardHeight = 180;\nvar cardStyles = {\n  inProgress: 'yellow',\n  completed: 'navy'\n};\nexport var CurriculumCard = function CurriculumCard(_ref) {\n  var difficulty = _ref.difficulty,\n      _ref$headingLevel = _ref.headingLevel,\n      headingLevel = _ref$headingLevel === void 0 ? 'h3' : _ref$headingLevel,\n      image = _ref.image,\n      _ref$isFullSize = _ref.isFullSize,\n      isFullSize = _ref$isFullSize === void 0 ? false : _ref$isFullSize,\n      progressState = _ref.progressState,\n      scope = _ref.scope,\n      scopeCount = _ref.scopeCount,\n      showProLogo = _ref.showProLogo,\n      tag = _ref.tag,\n      tagColor = _ref.tagColor,\n      text = _ref.text,\n      title = _ref.title;\n  var boxVariant = progressState && cardStyles[progressState];\n  var mode = progressState === 'completed' ? 'dark' : 'light';\n  return /*#__PURE__*/React.createElement(Card, {\n    display: \"grid\",\n    gridTemplateRows: \"repeat(3, max-content) 1fr max-content\",\n    minHeight: isFullSize ? pxRem(cardHeight * 2 + 32) : pxRem(cardHeight),\n    variant: boxVariant !== null && boxVariant !== void 0 ? boxVariant : 'white',\n    shadow: \"medium\",\n    position: \"relative\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    display: \"flex\",\n    fontSize: 14,\n    mb: 12,\n    fontFamily: \"accent\",\n    textTransform: \"capitalize\"\n  }, showProLogo && /*#__PURE__*/React.createElement(ProLabel, {\n    alignSelf: \"center\",\n    mr: 8,\n    mode: mode\n  }), text), /*#__PURE__*/React.createElement(Text, {\n    as: headingLevel,\n    mb: 4,\n    fontSize: 20\n  }, title), /*#__PURE__*/React.createElement(FlexBox, {\n    flexWrap: \"wrap\"\n  }, !progressState && /*#__PURE__*/React.createElement(Subtitle, {\n    scope: scope,\n    scopeCount: scopeCount,\n    difficulty: difficulty\n  })), /*#__PURE__*/React.createElement(FlexBox, {\n    center: true,\n    pb: 16\n  }, isFullSize && image && /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    progressState: progressState\n  })), /*#__PURE__*/React.createElement(Footer, {\n    progressState: progressState,\n    tag: tag,\n    tagColor: tagColor\n  }));\n};"]},"metadata":{},"sourceType":"module"}