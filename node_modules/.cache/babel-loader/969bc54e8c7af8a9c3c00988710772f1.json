{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import{noSelect,screenReaderOnly}from'@codecademy/gamut-styles';import styled from'@emotion/styled';import React,{forwardRef}from'react';import{conditionalRadioInputStyles,conditionalRadioLabelStyles,radioInput,radioLabel,radioWrapper}from'./styles/shared-system-props';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var RadioWrapper=styled.div(noSelect,radioWrapper);var RadioLabel=styled.label(noSelect,radioLabel,conditionalRadioLabelStyles);var RadioInput=styled.input(screenReaderOnly,radioInput,conditionalRadioInputStyles);var conditionalStyleState=function conditionalStyleState(error,disabled){return error?'error':disabled?'disabled':undefined;};export var Radio=/*#__PURE__*/forwardRef(function(_ref,ref){var name=_ref.name,value=_ref.value,label=_ref.label,checked=_ref.checked,className=_ref.className,disabled=_ref.disabled,htmlFor=_ref.htmlFor,onChange=_ref.onChange,required=_ref.required,id=_ref.id,error=_ref.error,rest=_objectWithoutProperties(_ref,[\"name\",\"value\",\"label\",\"checked\",\"className\",\"disabled\",\"htmlFor\",\"onChange\",\"required\",\"id\",\"error\"]);var inputId=id?\"\".concat(htmlFor,\"-\").concat(id):htmlFor;var styleState=conditionalStyleState(error,disabled);return/*#__PURE__*/_jsxs(RadioWrapper,{className:className,children:[/*#__PURE__*/_jsx(RadioInput,_objectSpread({id:inputId,name:name,required:required,type:\"radio\",checked:checked,disabled:disabled,onChange:onChange,ref:ref,value:value,variant:styleState},rest)),/*#__PURE__*/_jsx(RadioLabel,{htmlFor:htmlFor,disabled:disabled,variant:styleState,children:label})]});});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Radio.tsx"],"names":["noSelect","screenReaderOnly","styled","React","forwardRef","conditionalRadioInputStyles","conditionalRadioLabelStyles","radioInput","radioLabel","radioWrapper","RadioWrapper","div","RadioLabel","label","RadioInput","input","conditionalStyleState","error","disabled","undefined","Radio","ref","name","value","checked","className","htmlFor","onChange","required","id","rest","inputId","styleState"],"mappings":"2UAAA,OAASA,QAAT,CAAmBC,gBAAnB,KAA2C,0BAA3C,CAEA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,UAAhB,KAAkE,OAAlE,CAEA,OACEC,2BADF,CAEEC,2BAFF,CAGEC,UAHF,CAIEC,UAJF,CAKEC,YALF,KAMO,8BANP,C,wFA0BA,GAAMC,CAAAA,YAAY,CAAGR,MAAM,CAACS,GAAP,CAAWX,QAAX,CAAqBS,YAArB,CAArB,CACA,GAAMG,CAAAA,UAAU,CAAGV,MAAM,CAACW,KAAP,CACjBb,QADiB,CAEjBQ,UAFiB,CAGjBF,2BAHiB,CAAnB,CAKA,GAAMQ,CAAAA,UAAU,CAAGZ,MAAM,CAACa,KAAP,CACjBd,gBADiB,CAEjBM,UAFiB,CAGjBF,2BAHiB,CAAnB,CAMA,GAAMW,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAkBC,QAAlB,CAAyC,CACrE,MAAOD,CAAAA,KAAK,CAAG,OAAH,CAAaC,QAAQ,CAAG,UAAH,CAAgBC,SAAjD,CACD,CAFD,CAIA,MAAO,IAAMC,CAAAA,KAAK,cAAGhB,UAAU,CAC7B,cAeEiB,GAfF,CAgBK,IAdDC,CAAAA,IAcC,MAdDA,IAcC,CAbDC,KAaC,MAbDA,KAaC,CAZDV,KAYC,MAZDA,KAYC,CAXDW,OAWC,MAXDA,OAWC,CAVDC,SAUC,MAVDA,SAUC,CATDP,QASC,MATDA,QASC,CARDQ,OAQC,MARDA,OAQC,CAPDC,QAOC,MAPDA,QAOC,CANDC,QAMC,MANDA,QAMC,CALDC,EAKC,MALDA,EAKC,CAJDZ,KAIC,MAJDA,KAIC,CAHEa,IAGF,uIACH,GAAMC,CAAAA,OAAO,CAAGF,EAAE,WAAMH,OAAN,aAAiBG,EAAjB,EAAwBH,OAA1C,CACA,GAAMM,CAAAA,UAAU,CAAGhB,qBAAqB,CAACC,KAAD,CAAQC,QAAR,CAAxC,CAEA,mBACE,MAAC,YAAD,EAAc,SAAS,CAAEO,SAAzB,wBACE,KAAC,UAAD,gBACE,EAAE,CAAEM,OADN,CAEE,IAAI,CAAET,IAFR,CAGE,QAAQ,CAAEM,QAHZ,CAIE,IAAI,CAAC,OAJP,CAKE,OAAO,CAAEJ,OALX,CAME,QAAQ,CAAEN,QANZ,CAOE,QAAQ,CAAES,QAPZ,CAQE,GAAG,CAAEN,GARP,CASE,KAAK,CAAEE,KATT,CAUE,OAAO,CAAES,UAVX,EAWMF,IAXN,EADF,cAcE,KAAC,UAAD,EAAY,OAAO,CAAEJ,OAArB,CAA8B,QAAQ,CAAER,QAAxC,CAAkD,OAAO,CAAEc,UAA3D,UACGnB,KADH,EAdF,GADF,CAoBD,CAzC4B,CAAxB","sourcesContent":["import { noSelect, screenReaderOnly } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react';\n\nimport {\n  conditionalRadioInputStyles,\n  conditionalRadioLabelStyles,\n  radioInput,\n  radioLabel,\n  radioWrapper,\n} from './styles/shared-system-props';\n\nexport type RadioProps = InputHTMLAttributes<HTMLInputElement> & {\n  checked?: boolean;\n  disabled?: boolean;\n  htmlFor?: string;\n  id?: string;\n  label?: ReactNode;\n  name?: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  required?: boolean;\n  tabIndex?: number;\n  value?: string;\n  readOnly?: boolean;\n  error?: boolean;\n};\nexport interface RadioElementProps\n  extends RadioProps,\n    StyleProps<typeof conditionalRadioInputStyles> {}\n\nconst RadioWrapper = styled.div(noSelect, radioWrapper);\nconst RadioLabel = styled.label<RadioElementProps>(\n  noSelect,\n  radioLabel,\n  conditionalRadioLabelStyles\n);\nconst RadioInput = styled.input<RadioElementProps>(\n  screenReaderOnly,\n  radioInput,\n  conditionalRadioInputStyles\n);\n\nconst conditionalStyleState = (error?: boolean, disabled?: boolean) => {\n  return error ? 'error' : disabled ? 'disabled' : undefined;\n};\n\nexport const Radio = forwardRef<HTMLInputElement, RadioProps>(\n  (\n    {\n      name,\n      value,\n      label,\n      checked,\n      className,\n      disabled,\n      htmlFor,\n      onChange,\n      required,\n      id,\n      error,\n      ...rest\n    },\n    ref\n  ) => {\n    const inputId = id ? `${htmlFor}-${id}` : htmlFor;\n    const styleState = conditionalStyleState(error, disabled);\n\n    return (\n      <RadioWrapper className={className}>\n        <RadioInput\n          id={inputId}\n          name={name}\n          required={required}\n          type=\"radio\"\n          checked={checked}\n          disabled={disabled}\n          onChange={onChange}\n          ref={ref}\n          value={value}\n          variant={styleState}\n          {...rest}\n        />\n        <RadioLabel htmlFor={htmlFor} disabled={disabled} variant={styleState}>\n          {label}\n        </RadioLabel>\n      </RadioWrapper>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}