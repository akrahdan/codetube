{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/AppHeaderMobile/AppHeaderMainMenuMobile/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { FlexBox } from '@codecademy/gamut';\nimport React, { useState } from 'react';\nimport { AppHeaderFillButton, AppHeaderTextButton } from '../..';\nimport { AppHeaderLinkMobile } from '../AppHeaderLinkMobile';\nimport { AppHeaderSubMenuMobile } from '../AppHeaderSubMenuMobile';\nimport { AppHeaderSubMenuTarget } from '../AppHeaderSubMenuTarget';\nimport { MobileSearchBar } from './MobileSearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AppHeaderMainMenuMobile = ({\n  action,\n  items,\n  onSearch\n}) => {\n  _s();\n\n  const [subMenuItem, setSubMenuItem] = useState();\n\n  const openSubMenu = (event, item) => {\n    action(event, item);\n    setSubMenuItem(item);\n  };\n\n  const closeSubMenu = () => {\n    setSubMenuItem(undefined);\n  };\n\n  const mapItemToElement = (item, action) => {\n    switch (item.type) {\n      case 'link':\n        return /*#__PURE__*/_jsxDEV(AppHeaderLinkMobile, {\n          item: item,\n          action: action\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this);\n\n      case 'dropdown':\n      case 'profile-dropdown':\n        return /*#__PURE__*/_jsxDEV(AppHeaderSubMenuTarget, {\n          item: item,\n          openSubMenu: openSubMenu\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this);\n\n      case 'fill-button':\n        return /*#__PURE__*/_jsxDEV(FlexBox, {\n          justifyContent: \"center\",\n          mt: 32,\n          children: /*#__PURE__*/_jsxDEV(AppHeaderFillButton, {\n            \"data-testid\": item.dataTestId,\n            href: item.href,\n            onClick: event => action(event, item),\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this);\n\n      case 'text-button':\n        return /*#__PURE__*/_jsxDEV(FlexBox, {\n          justifyContent: \"center\",\n          mt: 16,\n          children: /*#__PURE__*/_jsxDEV(AppHeaderTextButton, {\n            \"data-testid\": item.dataTestId,\n            href: item.href,\n            onClick: event => action(event, item),\n            children: item.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  return subMenuItem ? /*#__PURE__*/_jsxDEV(AppHeaderSubMenuMobile, {\n    handleClose: closeSubMenu,\n    action: action,\n    item: subMenuItem\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: subMenuItem ? /*#__PURE__*/_jsxDEV(AppHeaderSubMenuMobile, {\n      handleClose: closeSubMenu,\n      action: action,\n      item: subMenuItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MobileSearchBar, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), items.map(item => mapItemToElement(item, action))]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(AppHeaderMainMenuMobile, \"TOL/y59P8FpY5lF2hQZTS5Y3mBU=\");\n\n_c = AppHeaderMainMenuMobile;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppHeaderMainMenuMobile\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/AppHeaderMobile/AppHeaderMainMenuMobile/index.tsx"],"names":["FlexBox","React","useState","AppHeaderFillButton","AppHeaderTextButton","AppHeaderLinkMobile","AppHeaderSubMenuMobile","AppHeaderSubMenuTarget","MobileSearchBar","AppHeaderMainMenuMobile","action","items","onSearch","subMenuItem","setSubMenuItem","openSubMenu","event","item","closeSubMenu","undefined","mapItemToElement","type","id","dataTestId","href","text","map"],"mappings":"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","sourcesContent":["import { FlexBox } from '@codecademy/gamut';\nimport React, { useState } from 'react';\n\nimport { AppHeaderFillButton, AppHeaderTextButton } from '../..';\nimport {\n  AppHeaderClickHandler,\n  AppHeaderDropdownItem,\n  AppHeaderItem,\n} from '../../AppHeader/AppHeaderElements/types';\nimport { AppHeaderLinkMobile } from '../AppHeaderLinkMobile';\nimport { AppHeaderSubMenuMobile } from '../AppHeaderSubMenuMobile';\nimport { AppHeaderSubMenuTarget } from '../AppHeaderSubMenuTarget';\nimport { MobileSearchBar } from './MobileSearchBar';\n\nexport type AppHeaderMainMenuMobileProps = {\n  action: AppHeaderClickHandler;\n  items: AppHeaderItem[];\n  onSearch: (query: string) => void;\n};\n\nexport const AppHeaderMainMenuMobile: React.FC<AppHeaderMainMenuMobileProps> = ({\n  action,\n  items,\n  onSearch,\n}) => {\n  const [subMenuItem, setSubMenuItem] = useState<AppHeaderDropdownItem>();\n\n  const openSubMenu = (\n    event: React.MouseEvent,\n    item: AppHeaderDropdownItem\n  ) => {\n    action(event, item);\n    setSubMenuItem(item);\n  };\n\n  const closeSubMenu = () => {\n    setSubMenuItem(undefined);\n  };\n\n  const mapItemToElement = (\n    item: AppHeaderItem,\n    action: AppHeaderClickHandler\n  ) => {\n    switch (item.type) {\n      case 'link':\n        return (\n          <AppHeaderLinkMobile key={item.id} item={item} action={action} />\n        );\n      case 'dropdown':\n      case 'profile-dropdown':\n        return (\n          <AppHeaderSubMenuTarget\n            key={item.id}\n            item={item}\n            openSubMenu={openSubMenu}\n          />\n        );\n      case 'fill-button':\n        return (\n          <FlexBox justifyContent=\"center\" mt={32} key={item.id}>\n            <AppHeaderFillButton\n              data-testid={item.dataTestId}\n              href={item.href}\n              onClick={(event: React.MouseEvent) => action(event, item)}\n            >\n              {item.text}\n            </AppHeaderFillButton>\n          </FlexBox>\n        );\n      case 'text-button':\n        return (\n          <FlexBox justifyContent=\"center\" mt={16} key={item.id}>\n            <AppHeaderTextButton\n              data-testid={item.dataTestId}\n              href={item.href}\n              onClick={(event: React.MouseEvent) => action(event, item)}\n            >\n              {item.text}\n            </AppHeaderTextButton>\n          </FlexBox>\n        );\n    }\n  };\n\n  return subMenuItem ? (\n    <AppHeaderSubMenuMobile\n      handleClose={closeSubMenu}\n      action={action}\n      item={subMenuItem}\n    />\n  ) : (\n    <>\n      {subMenuItem ? (\n        <AppHeaderSubMenuMobile\n          handleClose={closeSubMenu}\n          action={action}\n          item={subMenuItem}\n        />\n      ) : (\n        <>\n          <MobileSearchBar onSearch={onSearch} />\n          {items.map((item) => mapItemToElement(item, action))}\n        </>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}