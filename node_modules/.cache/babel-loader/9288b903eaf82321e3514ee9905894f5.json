{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/SocialMediaSharing/index.tsx\";\nimport { Box, GridBox, Text } from '@codecademy/gamut';\nimport { FacebookIcon, LinkedinIcon, TwitterIcon } from '@codecademy/gamut-icons';\nimport React from 'react';\nimport { SocialShareIconLink } from './SocialShareIconLink';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const createShareLink = (formatter, baseUri, payload) => {\n  const params = formatter(payload);\n  const url = new URL(baseUri);\n  Object.keys(params).forEach(key => {\n    url.searchParams.append(key, params[key]);\n  });\n  return url.toString();\n}; // https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview\n// https://developers.facebook.com/docs/sharing/reference/share-dialog\n// https://docs.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/share-on-linkedin?context=linkedin/consumer/context#create-an-article-or-url-share\n\nexport const SOCIAL_SHARING_PLATFORMS = [{\n  id: 'facebook',\n  icon: FacebookIcon,\n  baseUrl: 'https://www.facebook.com/dialog/share?app_id=212500508799908',\n  formatShare: ({\n    url,\n    message\n  }) => ({ ...(url && {\n      href: url\n    }),\n    ...(message && {\n      quote: message\n    }),\n    hashtag: '#codecademy'\n  })\n}, {\n  id: 'twitter',\n  icon: TwitterIcon,\n  baseUrl: 'https://twitter.com/intent/tweet?',\n  formatShare: ({\n    url,\n    message,\n    hashtags,\n    mention\n  }) => ({ ...(url && {\n      url\n    }),\n    ...(message && {\n      text: message\n    }),\n    ...(hashtags && {\n      hashtags: hashtags.join(',')\n    }),\n    ...(mention && {\n      via: mention\n    })\n  })\n}, {\n  id: 'linkedin',\n  icon: LinkedinIcon,\n  baseUrl: 'https://www.linkedin.com/shareArticle',\n  formatShare: ({\n    url\n  }) => ({\n    url\n  })\n}];\nexport const SocialMediaSharing = ({\n  url,\n  message,\n  hashtags,\n  mention,\n  action,\n  label,\n  sectionId,\n  size = 'normal',\n  variant = 'black',\n  iconStyles\n}) => /*#__PURE__*/_jsxDEV(Box, {\n  display: \"inline-flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  children: [label && /*#__PURE__*/_jsxDEV(Text, {\n    fontSize: size === 'small' ? 14 : 16,\n    textColor: \"gray-900\",\n    mb: 16,\n    \"data-testid\": \"social-sharing-label\",\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(GridBox, {\n    gridAutoColumns: \"max-content\",\n    gridAutoFlow: \"column\",\n    gap: 16,\n    className: iconStyles,\n    children: SOCIAL_SHARING_PLATFORMS.map(({\n      id,\n      icon,\n      formatShare,\n      baseUrl\n    }) => /*#__PURE__*/_jsxDEV(SocialShareIconLink, {\n      id: id,\n      sectionId: sectionId,\n      href: createShareLink(formatShare, baseUrl, {\n        url,\n        message,\n        hashtags,\n        mention\n      }),\n      icon: icon,\n      size: size,\n      onClick: e => action === null || action === void 0 ? void 0 : action(e, `${id}_share`),\n      variant: variant\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 89,\n  columnNumber: 3\n}, this);\n_c = SocialMediaSharing;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocialMediaSharing\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/SocialMediaSharing/index.tsx"],"names":["Box","GridBox","Text","FacebookIcon","LinkedinIcon","TwitterIcon","React","SocialShareIconLink","createShareLink","formatter","baseUri","payload","params","url","URL","Object","keys","forEach","key","searchParams","append","toString","SOCIAL_SHARING_PLATFORMS","id","icon","baseUrl","formatShare","message","href","quote","hashtag","hashtags","mention","text","join","via","SocialMediaSharing","action","label","sectionId","size","variant","iconStyles","map","e"],"mappings":"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","sourcesContent":["import { Box, GridBox, Text } from '@codecademy/gamut';\nimport {\n  FacebookIcon,\n  LinkedinIcon,\n  TwitterIcon,\n} from '@codecademy/gamut-icons';\nimport React from 'react';\n\nimport type { BaseSocialShareProps } from './SocialShareIconLink';\nimport { SocialShareIconLink } from './SocialShareIconLink';\n\nexport type SocialMediaShare = {\n  url: string;\n  message?: string;\n  hashtags?: string[];\n  mention?: string;\n};\n\nexport const createShareLink = (\n  formatter: (payload: SocialMediaShare) => Record<string, string>,\n  baseUri: string,\n  payload: SocialMediaShare\n) => {\n  const params = formatter(payload);\n  const url = new URL(baseUri);\n\n  Object.keys(params).forEach((key) => {\n    url.searchParams.append(key, params[key]);\n  });\n\n  return url.toString();\n};\n\n// https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview\n// https://developers.facebook.com/docs/sharing/reference/share-dialog\n// https://docs.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/share-on-linkedin?context=linkedin/consumer/context#create-an-article-or-url-share\nexport const SOCIAL_SHARING_PLATFORMS = [\n  {\n    id: 'facebook',\n    icon: FacebookIcon,\n    baseUrl: 'https://www.facebook.com/dialog/share?app_id=212500508799908',\n    formatShare: ({ url, message }: SocialMediaShare) => ({\n      ...(url && { href: url }),\n      ...(message && { quote: message }),\n      hashtag: '#codecademy',\n    }),\n  },\n  {\n    id: 'twitter',\n    icon: TwitterIcon,\n    baseUrl: 'https://twitter.com/intent/tweet?',\n    formatShare: ({ url, message, hashtags, mention }: SocialMediaShare) => ({\n      ...(url && { url }),\n      ...(message && { text: message }),\n      ...(hashtags && { hashtags: hashtags.join(',') }),\n      ...(mention && { via: mention }),\n    }),\n  },\n  {\n    id: 'linkedin',\n    icon: LinkedinIcon,\n    baseUrl: 'https://www.linkedin.com/shareArticle',\n    formatShare: ({ url }: SocialMediaShare) => ({ url }),\n  },\n];\n\nexport type SocialMediaSharingProps = BaseSocialShareProps & {\n  url: string;\n  message?: string;\n  hashtags?: string[];\n  mention?: string;\n  action?: (e: React.MouseEvent, target: string) => void;\n  label?: string;\n  iconStyles?: string;\n};\n\nexport const SocialMediaSharing: React.FC<SocialMediaSharingProps> = ({\n  url,\n  message,\n  hashtags,\n  mention,\n  action,\n  label,\n  sectionId,\n  size = 'normal',\n  variant = 'black',\n  iconStyles,\n}) => (\n  <Box display=\"inline-flex\" flexDirection=\"column\" alignItems=\"center\">\n    {label && (\n      <Text\n        fontSize={size === 'small' ? 14 : 16}\n        textColor=\"gray-900\"\n        mb={16}\n        data-testid=\"social-sharing-label\"\n      >\n        {label}\n      </Text>\n    )}\n    <GridBox\n      gridAutoColumns=\"max-content\"\n      gridAutoFlow=\"column\"\n      gap={16}\n      className={iconStyles}\n    >\n      {SOCIAL_SHARING_PLATFORMS.map(({ id, icon, formatShare, baseUrl }) => (\n        <SocialShareIconLink\n          key={id}\n          id={id}\n          sectionId={sectionId}\n          href={createShareLink(formatShare, baseUrl, {\n            url,\n            message,\n            hashtags,\n            mention,\n          })}\n          icon={icon}\n          size={size}\n          onClick={(e) => action?.(e, `${id}_share`)}\n          variant={variant}\n        />\n      ))}\n    </GridBox>\n  </Box>\n);\n"]},"metadata":{},"sourceType":"module"}