{"ast":null,"code":"import React, { useRef, useEffect, useLayoutEffect, useContext, createContext, useMemo, useCallback, useState } from 'react';\nimport { Path, Node, Editor, Text as Text$1, Range, Element as Element$1, Transforms } from 'slate';\nimport getDirection from 'direction';\nimport throttle from 'lodash/throttle';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { isKeyHotkey } from 'is-hotkey';\nimport invariant from 'tiny-invariant';\nimport ReactDOM from 'react-dom';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n/**\r\n * Leaf content strings.\r\n */\n\n\nvar String = props => {\n  var {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path); // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: Node.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, null);\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n\n\nvar TextString = props => {\n  var {\n    text,\n    isTrailing = false\n  } = props;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true\n  }, text, isTrailing ? '\\n' : null);\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n\n\nvar ZeroWidthString = props => {\n  var {\n    length = 0,\n    isLineBreak = false\n  } = props;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-zero-width\": isLineBreak ? 'n' : 'z',\n    \"data-slate-length\": length\n  }, '\\uFEFF', isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\n\n\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_WINDOW = new WeakMap();\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar KEY_TO_ELEMENT = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\nvar EDITOR_TO_RESTORE_DOM = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder'); // prevent inconsistent rendering by React with IME input\n\nvar keyForString = 0;\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\nvar Leaf = props => {\n  var {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = props => /*#__PURE__*/React.createElement(DefaultLeaf, Object.assign({}, props))\n  } = props;\n  var placeholderRef = useRef(null);\n  useEffect(() => {\n    var placeholderEl = placeholderRef === null || placeholderRef === void 0 ? void 0 : placeholderRef.current;\n    var editorEl = document.querySelector('[data-slate-editor=\"true\"]');\n\n    if (!placeholderEl || !editorEl) {\n      return;\n    }\n\n    editorEl.style.minHeight = \"\".concat(placeholderEl.clientHeight, \"px\");\n    return () => {\n      editorEl.style.minHeight = 'auto';\n    };\n  }, [placeholderRef, leaf]);\n  var children = /*#__PURE__*/React.createElement(String, {\n    key: keyForString++,\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none'\n        },\n        contentEditable: false,\n        ref: placeholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text\n  });\n};\n\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && next.leaf.text === prev.leaf.text && Text$1.matches(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\n\nvar DefaultLeaf = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n\nvar IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_ANDROID = typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent); // \"modern\" Edge was released at 79.x\n\nvar IS_EDGE_LEGACY = typeof navigator !== 'undefined' && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent);\nvar IS_CHROME = typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent); // Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\n\nvar IS_CHROME_LEGACY = typeof navigator !== 'undefined' && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent); // Firefox did not support `beforeInput` until `v87`.\n\nvar IS_FIREFOX_LEGACY = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(navigator.userAgent); // Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\n\nvar CAN_USE_DOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\n\nvar HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers\ntypeof globalThis !== 'undefined' && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.\ntypeof globalThis.InputEvent.prototype.getTargetRanges === 'function';\n/**\r\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\r\n */\n\nvar useIsomorphicLayoutEffect = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\nvar shallowCompare = (obj1, obj2) => Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every(key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);\n/**\r\n * Check if a list of decorator ranges are equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\n\nvar isDecoratorRangeListEqual = (list, another) => {\n  if (list.length !== another.length) {\n    return false;\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var range = list[i];\n    var other = another[i];\n\n    var rangeOwnProps = _objectWithoutProperties(range, [\"anchor\", \"focus\"]);\n\n    var otherOwnProps = _objectWithoutProperties(other, [\"anchor\", \"focus\"]);\n\n    if (!Range.equals(range, other) || range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] || !shallowCompare(rangeOwnProps, otherOwnProps)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\r\n * Text.\r\n */\n\n\nvar Text = props => {\n  var {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var ref = useRef(null);\n  var leaves = Text$1.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref\n  }, children);\n};\n\nvar MemoizedText = /*#__PURE__*/React.memo(Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && isDecoratorRangeListEqual(next.decorations, prev.decorations);\n});\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n\nvar SelectedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = () => {\n  return useContext(SelectedContext);\n};\n/**\r\n * Element.\r\n */\n\n\nvar Element = props => {\n  var {\n    decorations,\n    element,\n    renderElement = p => /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, p)),\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var ref = useRef(null);\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var children = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  var attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node.string(element);\n    var dir = getDirection(text);\n\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n\n    var Tag = isInline ? 'span' : 'div';\n    var [[_text]] = Node.texts(element);\n    children = readOnly ? null : /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(element, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, element);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  });\n  return /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n    value: !!selection\n  }, renderElement({\n    attributes,\n    children,\n    element\n  }));\n};\n\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, (prev, next) => {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isDecoratorRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n\nvar DefaultElement = props => {\n  var {\n    attributes,\n    children,\n    element\n  } = props;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n/**\r\n * A React context for sharing the editor object.\r\n */\n\n\nvar EditorContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlateStatic = () => {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n/**\r\n * A React context for sharing the `decorate` prop of the editable.\r\n */\n\n\nvar DecorateContext = /*#__PURE__*/createContext(() => []);\n/**\r\n * Get the current `decorate` prop of the editable.\r\n */\n\nvar useDecorate = () => {\n  return useContext(DecorateContext);\n};\n/**\r\n * Children.\r\n */\n\n\nvar useChildren = props => {\n  var {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n\n    for (var dec of decorations) {\n      var d = Range.intersection(dec, range);\n\n      if (d) {\n        ds.push(d);\n      }\n    }\n\n    if (Element$1.isElement(n)) {\n      children.push( /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      }));\n    } else {\n      children.push( /*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n\n  return children;\n};\n/**\r\n * Hotkey mappings for each platform.\r\n */\n\n\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = key => {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && isKeyHotkey(generic);\n  var isApple = apple && isKeyHotkey(apple);\n  var isWindows = windows && isKeyHotkey(windows);\n  return event => {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\nvar ReadOnlyContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = () => {\n  return useContext(ReadOnlyContext);\n};\n/**\r\n * A React context for sharing the editor object, in a way that re-renders the\r\n * context whenever changes occur.\r\n */\n\n\nvar SlateContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlate = () => {\n  var context = useContext(SlateContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <SlateProvider> component's context.\");\n  }\n\n  var [editor] = context;\n  return editor;\n};\n/**\r\n * Types.\r\n */\n\n/**\r\n * Returns the host window of a DOM node\r\n */\n\n\nvar getDefaultView = value => {\n  return value && value.ownerDocument && value.ownerDocument.defaultView || null;\n};\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\n\nvar isDOMComment = value => {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMElement = value => {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\n\nvar isDOMNode = value => {\n  var window = getDefaultView(value);\n  return !!window && value instanceof window.Node;\n};\n/**\r\n * Check if a value is a DOM selection.\r\n */\n\n\nvar isDOMSelection = value => {\n  var window = value && value.anchorNode && getDefaultView(value.anchorNode);\n  return !!window && value instanceof window.Selection;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMText = value => {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Checks whether a paste event is a plaintext-only event.\r\n */\n\n\nvar isPlainTextOnlyPaste = event => {\n  return event.clipboardData && event.clipboardData.getData('text/plain') !== '' && event.clipboardData.types.length === 1;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\n\nvar normalizeDOMPoint = domPoint => {\n  var [node, offset] = domPoint; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var index = isLast ? offset - 1 : offset;\n    [node, index] = getEditableChildAndIndex(node, index, isLast ? 'backward' : 'forward'); // If the editable child found is in front of input offset, we instead seek to its end\n\n    isLast = index < offset; // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward');\n    } // Determine the new offset inside the text node.\n\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n\n  return [node, offset];\n};\n/**\r\n * Determines wether the active element is nested within a shadowRoot\r\n */\n\n\nvar hasShadowRoot = () => {\n  return !!(window.document.activeElement && window.document.activeElement.shadowRoot);\n};\n/**\r\n * Get the nearest editable child and index at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChildAndIndex = (parent, index, direction) => {\n  var {\n    childNodes\n  } = parent;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n\n    child = childNodes[i];\n    index = i;\n    i += direction === 'forward' ? 1 : -1;\n  }\n\n  return [child, index];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChild = (parent, index, direction) => {\n  var [child] = getEditableChildAndIndex(parent, index, direction);\n  return child;\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n *\r\n * The domNode must be attached to the DOM.\r\n */\n\n\nvar getPlainText = domNode => {\n  var text = '';\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n\n  if (isDOMElement(domNode)) {\n    for (var childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode);\n    }\n\n    var display = getComputedStyle(domNode).getPropertyValue('display');\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n\n  return text;\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * Editable.\r\n */\n\n\nvar Editable = props => {\n  var {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props)),\n    style = {},\n    as: Component = 'div'\n  } = props,\n      attributes = _objectWithoutProperties(props, [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"style\", \"as\"]);\n\n  var editor = useSlate();\n  var ref = useRef(null); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(() => ({\n    isComposing: false,\n    isDraggingInternally: false,\n    isUpdatingSelection: false,\n    latestElement: null\n  }), []); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    } // Make sure the DOM selection state is in sync.\n\n\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return;\n    }\n\n    var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n    if (!selection && !hasDomSelection) {\n      return;\n    } // verify that the dom selection is in the editor\n\n\n    var editorElement = EDITOR_TO_ELEMENT.get(editor);\n    var hasDomSelectionInEditor = false;\n\n    if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n      hasDomSelectionInEditor = true;\n    } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true\n      });\n\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return;\n      }\n    } // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n\n\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false\n      });\n      return;\n    } // Otherwise the DOM selection is out of sync, so update it.\n\n\n    var el = ReactEditor.toDOMNode(editor, editor);\n    state.isUpdatingSelection = true;\n    var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n    if (newDomRange) {\n      if (Range.isBackward(selection)) {\n        domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n      } else {\n        domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n      }\n\n      var leafEl = newDomRange.startContainer.parentElement;\n      leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(newDomRange);\n      scrollIntoView(leafEl, {\n        scrollMode: 'if-needed',\n        boundary: el\n      }); // @ts-ignore\n\n      delete leafEl.getBoundingClientRect;\n    } else {\n      domSelection.removeAllRanges();\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus();\n      }\n\n      state.isUpdatingSelection = false;\n    });\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(event => {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var {\n        selection\n      } = editor;\n      var {\n        inputType: type\n      } = event;\n      var data = event.dataTransfer || event.data || undefined; // These two types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {\n        return;\n      }\n\n      event.preventDefault(); // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        var [targetRange] = event.getTargetRanges();\n\n        if (targetRange) {\n          var range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false\n          });\n\n          if (!selection || !Range.equals(selection, range)) {\n            Transforms.select(editor, range);\n          }\n        }\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        Editor.deleteFragment(editor, {\n          direction\n        });\n        return;\n      }\n\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'insertLineBreak':\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing = false;\n            }\n\n            var window = ReactEditor.getWindow(editor);\n\n            if (data instanceof window.DataTransfer) {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data);\n            }\n\n            break;\n          }\n      }\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, [onDOMBeforeInput]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(() => {\n    if (!readOnly && !state.isComposing && !state.isUpdatingSelection && !state.isDraggingInternally) {\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var {\n        activeElement\n      } = root;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = root.getSelection();\n\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n\n      var {\n        anchorNode,\n        focusNode\n      } = domSelection;\n      var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);\n      var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);\n\n      if (anchorNodeSelectable && focusNodeSelectable) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false\n        });\n        Transforms.select(editor, range);\n      } else {\n        Transforms.deselect(editor);\n      }\n    }\n  }, 100), [readOnly]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', onDOMSelectionChange);\n    return () => {\n      window.document.removeEventListener('selectionchange', onDOMSelectionChange);\n    };\n  }, [onDOMSelectionChange]);\n  var decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '') {\n    var start = Editor.start(editor, []);\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component // COMPAT: The Grammarly Chrome extension works by changing the DOM\n  // out from under `contenteditable` elements, which leads to weird\n  // behaviors so we have to disable it like editor. (2017/04/24)\n  , Object.assign({\n    \"data-gramm\": false,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    spellCheck: !HAS_BEFORE_INPUT_SUPPORT ? false : attributes.spellCheck,\n    autoCorrect: !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCorrect,\n    autoCapitalize: !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onBeforeInput: useCallback(event => {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {\n        event.preventDefault();\n\n        if (!state.isComposing) {\n          var text = event.data;\n          Editor.insertText(editor, text);\n        }\n      }\n    }, [readOnly]),\n    onBlur: useCallback(event => {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      } // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n\n\n      if (IS_SAFARI) {\n        var domSelection = root.getSelection();\n        domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(event => {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n\n        var _start = Editor.start(editor, path);\n\n        var end = Editor.end(editor, path);\n        var startVoid = Editor.void(editor, {\n          at: _start\n        });\n        var endVoid = Editor.void(editor, {\n          at: end\n        });\n\n        if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n          var range = Editor.range(editor, _start);\n          Transforms.select(editor, range);\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        state.isComposing = false; // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n        if (!IS_SAFARI && !IS_FIREFOX_LEGACY && event.data) {\n          Editor.insertText(editor, event.data);\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionUpdate: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        state.isComposing = true;\n      }\n    }, [attributes.onCompositionUpdate]),\n    onCompositionStart: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        var {\n          selection\n        } = editor;\n\n        if (selection && Range.isExpanded(selection)) {\n          Editor.deleteFragment(editor);\n        }\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n        var {\n          selection\n        } = editor;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n\n            if (Editor.isVoid(editor, node)) {\n              Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: useCallback(event => {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: useCallback(event => {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Editor.isVoid(editor, node) || Editor.void(editor, {\n          at: path,\n          voids: true\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer);\n      }\n    }, [attributes.onDragStart]),\n    onDrop: useCallback(event => {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault(); // Keep a reference to the dragged range before updating selection\n\n        var draggedRange = editor.selection; // Find the range where the drop happened\n\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        Transforms.select(editor, range);\n\n        if (state.isDraggingInternally) {\n          if (draggedRange) {\n            Transforms.delete(editor, {\n              at: draggedRange\n            });\n          }\n\n          state.isDraggingInternally = false;\n        }\n\n        ReactEditor.insertData(editor, data); // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, attributes.onDrop]),\n    onDragEnd: useCallback(event => {\n      // When dropping on a different droppable element than the current editor,\n      // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n      // Note: `onDragEnd` is only called when `onDrop` is not called\n      if (!readOnly && state.isDraggingInternally && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragEnd)) {\n        state.isDraggingInternally = false;\n      }\n    }, [readOnly, attributes.onDragEnd]),\n    onFocus: useCallback(event => {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown)) {\n        var {\n          nativeEvent\n        } = event;\n        var {\n          selection\n        } = editor;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(Node.string(element)) === 'rtl'; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        } // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n        } else {\n          if (IS_CHROME || IS_SAFARI) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {\n              var currentNode = Node.parent(editor, selection.anchor.path);\n\n              if (Element$1.isElement(currentNode) && Editor.isVoid(editor, currentNode) && Editor.isInline(editor, currentNode)) {\n                event.preventDefault();\n                Transforms.delete(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, attributes.onPaste])\n  }), useChildren({\n    decorations,\n    node: editor,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection: editor.selection\n  }))));\n};\n/**\r\n * The default placeholder element\r\n */\n\n\nvar DefaultPlaceholder = _ref => {\n  var {\n    attributes,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n/**\r\n * A default memoized decorate function.\r\n */\n\n\nvar defaultDecorate = () => [];\n/**\r\n * Check if the target is in the editor.\r\n */\n\n\nvar hasTarget = (editor, target) => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n};\n/**\r\n * Check if the target is editable and in the editor.\r\n */\n\n\nvar hasEditableTarget = (editor, target) => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n    editable: true\n  });\n};\n/**\r\n * Check if the target is inside void and in the editor.\r\n */\n\n\nvar isTargetInsideVoid = (editor, target) => {\n  var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n  return Editor.isVoid(editor, slateNode);\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\n\nvar isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\n\nvar isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.defaultPrevented;\n};\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\n\n\nvar n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\n\nclass Key {\n  constructor() {\n    this.id = \"\".concat(n++);\n  }\n\n}\n\nvar ReactEditor = {\n  /**\r\n   * Return the host window of the current editor.\r\n   */\n  getWindow(editor) {\n    var window = EDITOR_TO_WINDOW.get(editor);\n\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor');\n    }\n\n    return window;\n  },\n\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n\n    return key;\n  },\n\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath(editor, node) {\n    var path = [];\n    var child = node;\n\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n\n      var i = NODE_TO_INDEX.get(child);\n\n      if (i == null) {\n        break;\n      }\n\n      path.unshift(i);\n      child = parent;\n    }\n\n    throw new Error(\"Unable to find the path for Slate node: \".concat(JSON.stringify(node)));\n  },\n\n  /**\r\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\r\n   */\n  findDocumentOrShadowRoot(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode(); // The below exception will always be thrown for iframes because the document inside an iframe\n    // does not inherit it's prototype from the parent document, therefore we return early\n\n    if (el.ownerDocument !== document) return el.ownerDocument;\n    if (!(root instanceof Document || root instanceof ShadowRoot)) throw new Error(\"Unable to find DocumentOrShadowRoot for editor element: \".concat(el)); // COMPAT: Only Chrome implements the DocumentOrShadowRoot mixin for\n    // ShadowRoot; other browsers still implement it on the Document\n    // interface. (2020/08/08)\n    // https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot#Properties\n\n    if (root.getSelection === undefined && el.ownerDocument !== null) return el.ownerDocument;\n    return root;\n  },\n\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n\n  /**\r\n   * Blur the editor.\r\n   */\n  blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, false);\n\n    if (root.activeElement === el) {\n      el.blur();\n    }\n  },\n\n  /**\r\n   * Focus the editor.\r\n   */\n  focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, true);\n\n    if (root.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      editable = false\n    } = options;\n    var editorEl = ReactEditor.toDOMNode(editor, editor);\n    var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      targetEl = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n\n    if (!targetEl) {\n      return false;\n    }\n\n    return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable || !!targetEl.getAttribute('data-slate-zero-width'));\n  },\n\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData(editor, data) {\n    editor.insertData(data);\n  },\n\n  /**\r\n   * Sets data from the currently selected fragment on a `DataTransfer`.\r\n   */\n  setFragmentData(editor, data) {\n    editor.setFragmentData(data);\n  },\n\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode(editor, node) {\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(JSON.stringify(node)));\n    }\n\n    return domNode;\n  },\n\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint(editor, point) {\n    var [node] = Editor.node(editor, point.path);\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor.void(editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n\n    for (var text of texts) {\n      var domNode = text.childNodes[0];\n\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n\n      var {\n        length\n      } = domNode.textContent;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength;\n\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n\n      start = end;\n    }\n\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(JSON.stringify(point)));\n    }\n\n    return domPoint;\n  },\n\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   *\r\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\r\n   *\r\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\r\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\r\n   */\n  toDOMRange(editor, range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    var isBackward = Range.isBackward(range);\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var window = ReactEditor.getWindow(editor);\n    var domRange = window.document.createRange();\n    var [startNode, startOffset] = isBackward ? domFocus : domAnchor;\n    var [endNode, endOffset] = isBackward ? domAnchor : domFocus; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n\n    var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n    var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');\n    var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n    var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n    return domRange;\n  },\n\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n\n    var {\n      clientX: x,\n      clientY: y,\n      target\n    } = event;\n\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n\n      if (point) {\n        var _range = Editor.range(editor, point);\n\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n\n    var domRange;\n    var {\n      document\n    } = window; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n\n    var range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false\n    });\n    return range;\n  },\n\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint(editor, domPoint, exactMatch) {\n    var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n\n    if (parentNode) {\n      var voidNode = parentNode.closest('[data-slate-void=\"true\"]');\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n\n        var _window = ReactEditor.getWindow(editor);\n\n        var range = _window.document.createRange();\n\n        range.setStart(textNode, 0);\n        range.setEnd(nearestNode, nearestOffset);\n        var contents = range.cloneContents();\n        var removals = [...Array.prototype.slice.call(contents.querySelectorAll('[data-slate-zero-width]')), ...Array.prototype.slice.call(contents.querySelectorAll('[contenteditable=false]'))];\n        removals.forEach(el => {\n          el.parentNode.removeChild(el);\n        }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n        offset = contents.textContent.length;\n        domNode = textNode;\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]'); // COMPAT: In read-only editors the leaf is not rendered.\n\n        if (!leafNode) {\n          offset = 1;\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]');\n          domNode = leafNode;\n          offset = domNode.textContent.length;\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent.length;\n          });\n        }\n      } // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n\n\n      if (domNode && offset === domNode.textContent.length && parentNode.hasAttribute('data-slate-zero-width')) {\n        offset--;\n      }\n    }\n\n    if (!textNode) {\n      if (exactMatch) {\n        return null;\n      }\n\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path,\n      offset\n    };\n  },\n\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange(editor, domRange, options) {\n    var {\n      exactMatch\n    } = options;\n    var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset; // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;\n        } else {\n          isCollapsed = domRange.isCollapsed;\n        }\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], exactMatch);\n\n    if (!anchor) {\n      return null;\n    }\n\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], exactMatch);\n\n    if (!focus) {\n      return null;\n    }\n\n    return {\n      anchor,\n      focus\n    };\n  },\n\n  hasRange(editor, range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path);\n  }\n\n};\n/**\r\n * Returns the number of characters that are the same at the beginning of the\r\n * String.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the offset of the start of the difference; null if there is no difference\r\n */\n\nfunction getDiffStart(prev, next) {\n  var length = Math.min(prev.length, next.length);\n\n  for (var i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i;\n  }\n\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Returns the number of characters that are the same at the end of the String\r\n * up to `max`. Max prevents double-counting characters when there are\r\n * multiple duplicate characters around the diff area.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @param max  the max length to test.\r\n * @returns number of characters that are the same at the end of the string\r\n */\n\n\nfunction getDiffEnd(prev, next, max) {\n  var prevLength = prev.length;\n  var nextLength = next.length;\n  var length = Math.min(prevLength, nextLength, max);\n\n  for (var i = 0; i < length; i++) {\n    var prevChar = prev.charAt(prevLength - i - 1);\n    var nextChar = next.charAt(nextLength - i - 1);\n    if (prevChar !== nextChar) return i;\n  }\n\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Takes two strings and returns an object representing two offsets. The\r\n * first, `start` represents the number of characters that are the same at\r\n * the front of the String. The `end` represents the number of characters\r\n * that are the same at the end of the String.\r\n *\r\n * Returns null if they are identical.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the difference text range; null if there are no differences.\r\n */\n\n\nfunction getDiffOffsets(prev, next) {\n  if (prev === next) return null;\n  var start = getDiffStart(prev, next);\n  if (start === null) return null;\n  var maxEnd = Math.min(prev.length - start, next.length - start);\n  var end = getDiffEnd(prev, next, maxEnd);\n  if (end === null) return null;\n  return {\n    start,\n    end\n  };\n}\n/**\r\n * Takes a text string and returns a slice from the string at the given text range\r\n *\r\n * @param text  the text\r\n * @param offsets  the text range\r\n * @returns the text slice at text range\r\n */\n\n\nfunction sliceText(text, offsets) {\n  return text.slice(offsets.start, text.length - offsets.end);\n}\n/**\r\n * Takes two strings and returns a smart diff that can be used to describe the\r\n * change in a way that can be used as operations like inserting, removing or\r\n * replacing text.\r\n *\r\n * @param prev the previous text\r\n * @param next the next text\r\n * @returns the text difference\r\n */\n\n\nfunction diffText(prev, next) {\n  if (prev === undefined || next === undefined) return null;\n  var offsets = getDiffOffsets(prev, next);\n  if (offsets == null) return null;\n  var insertText = sliceText(next, offsets);\n  var removeText = sliceText(prev, offsets);\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText\n  };\n}\n\nfunction combineInsertedText(insertedText) {\n  return insertedText.reduce((acc, _ref) => {\n    var {\n      text\n    } = _ref;\n    return \"\".concat(acc).concat(text.insertText);\n  }, '');\n}\n\nfunction getTextInsertion(editor, domNode) {\n  var node = ReactEditor.toSlateNode(editor, domNode);\n\n  if (!Text$1.isText(node)) {\n    return undefined;\n  }\n\n  var prevText = node.text;\n  var nextText = domNode.textContent; // textContent will pad an extra \\n when the textContent ends with an \\n\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1);\n  } // If the text is no different, there is no diff.\n\n\n  if (nextText !== prevText) {\n    var textDiff = diffText(prevText, nextText);\n\n    if (textDiff !== null) {\n      var textPath = ReactEditor.findPath(editor, node);\n      return {\n        text: textDiff,\n        path: textPath\n      };\n    }\n  }\n\n  return undefined;\n}\n\nfunction normalizeTextInsertionRange(editor, range, _ref2) {\n  var {\n    path,\n    text\n  } = _ref2;\n  var insertionRange = {\n    anchor: {\n      path,\n      offset: text.start\n    },\n    focus: {\n      path,\n      offset: text.end\n    }\n  };\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange;\n  }\n\n  var {\n    insertText,\n    removeText\n  } = text;\n  var isSingleCharacterInsertion = insertText.length === 1 || removeText.length === 1;\n  /**\r\n   * This code handles edge cases that arise from text diffing when the\r\n   * inserted or removed character is a single character, and the character\r\n   * right before or after the anchor is the same as the one being inserted or\r\n   * removed.\r\n   *\r\n   * Take this example: hello|o\r\n   *\r\n   * If another `o` is inserted at the selection's anchor in the example above,\r\n   * it should be inserted at the anchor, but using text diffing, we actually\r\n   * detect that the character was inserted after the second `o`:\r\n   *\r\n   * helloo[o]|\r\n   *\r\n   * Instead, in these very specific edge cases, we assume that the character\r\n   * needs to be inserted after the anchor rather than where the diff was found:\r\n   *\r\n   * hello[o]|o\r\n   */\n\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    var [_text] = Array.from(Editor.nodes(editor, {\n      at: range,\n      match: Text$1.isText\n    }));\n\n    if (_text) {\n      var [node] = _text;\n      var {\n        anchor\n      } = range;\n      var characterBeforeAnchor = node.text[anchor.offset - 1];\n      var characterAfterAnchor = node.text[anchor.offset];\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range;\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: {\n            path,\n            offset: anchor.offset - 1\n          },\n          focus: {\n            path,\n            offset: anchor.offset\n          }\n        };\n      }\n    }\n  }\n\n  return insertionRange;\n}\n\nfunction gatherMutationData(editor, mutations) {\n  var addedNodes = [];\n  var removedNodes = [];\n  var insertedText = [];\n  var characterDataMutations = [];\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList':\n        {\n          if (mutation.addedNodes.length) {\n            mutation.addedNodes.forEach(addedNode => {\n              addedNodes.push(addedNode);\n            });\n          }\n\n          mutation.removedNodes.forEach(removedNode => {\n            removedNodes.push(removedNode);\n          });\n          break;\n        }\n\n      case 'characterData':\n        {\n          characterDataMutations.push(mutation); // Changes to text nodes should consider the parent element\n\n          var {\n            parentNode\n          } = mutation.target;\n\n          if (!parentNode) {\n            return;\n          }\n\n          var textInsertion = getTextInsertion(editor, parentNode);\n\n          if (!textInsertion) {\n            return;\n          } // If we've already detected a diff at that path, we can return early\n\n\n          if (insertedText.some(_ref => {\n            var {\n              path\n            } = _ref;\n            return Path.equals(path, textInsertion.path);\n          })) {\n            return;\n          } // Add the text diff to the array of detected text insertions that need to be reconciled\n\n\n          insertedText.push(textInsertion);\n        }\n    }\n  });\n  return {\n    addedNodes,\n    removedNodes,\n    insertedText,\n    characterDataMutations\n  };\n}\n/**\r\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\r\n *\r\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\r\n * `addedNodes`.\r\n *\r\n * To account for these edge cases, the most reliable strategy to detect line break mutations\r\n * is to check whether a new block was inserted of the same type as the current block.\r\n */\n\n\nvar isLineBreak = (editor, _ref2) => {\n  var {\n    addedNodes\n  } = _ref2;\n  var {\n    selection\n  } = editor;\n  var parentNode = selection ? Node.parent(editor, selection.anchor.path) : null;\n  var parentDOMNode = parentNode ? ReactEditor.toDOMNode(editor, parentNode) : null;\n\n  if (!parentDOMNode) {\n    return false;\n  }\n\n  return addedNodes.some(addedNode => addedNode instanceof HTMLElement && addedNode.tagName === (parentDOMNode === null || parentDOMNode === void 0 ? void 0 : parentDOMNode.tagName));\n};\n/**\r\n * So long as we check for line break mutations before deletion mutations,\r\n * we can safely assume that a set of mutations was a deletion if there are\r\n * removed nodes.\r\n */\n\n\nvar isDeletion = (_, _ref3) => {\n  var {\n    removedNodes\n  } = _ref3;\n  return removedNodes.length > 0;\n};\n/**\r\n * If the selection was expanded and there are removed nodes,\r\n * the contents of the selection need to be replaced with the diff\r\n */\n\n\nvar isReplaceExpandedSelection = (_ref4, _ref5) => {\n  var {\n    selection\n  } = _ref4;\n  var {\n    removedNodes\n  } = _ref5;\n  return selection ? Range.isExpanded(selection) && removedNodes.length > 0 : false;\n};\n/**\r\n * Plain text insertion\r\n */\n\n\nvar isTextInsertion = (_, _ref6) => {\n  var {\n    insertedText\n  } = _ref6;\n  return insertedText.length > 0;\n};\n/**\r\n * Edge case. Detect mutations that remove leaf nodes and also update character data\r\n */\n\n\nvar isRemoveLeafNodes = (_, _ref7) => {\n  var {\n    addedNodes,\n    characterDataMutations,\n    removedNodes\n  } = _ref7;\n  return removedNodes.length > 0 && addedNodes.length === 0 && characterDataMutations.length > 0;\n};\n\nfunction restoreDOM(editor) {\n  try {\n    var onRestoreDOM = EDITOR_TO_RESTORE_DOM.get(editor);\n\n    if (onRestoreDOM) {\n      onRestoreDOM();\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n}\n/**\r\n * Based loosely on:\r\n *\r\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\r\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\r\n *\r\n * The input manager attempts to map observed mutations on the document to a\r\n * set of operations in order to reconcile Slate's internal value with the DOM.\r\n *\r\n * Mutations are processed synchronously as they come in. Only mutations that occur\r\n * during a user input loop are processed, as other mutations can occur within the\r\n * document that were not initiated by user input.\r\n *\r\n * The mutation reconciliation process attempts to match mutations to the following\r\n * patterns:\r\n *\r\n * - Text updates\r\n * - Deletions\r\n * - Line breaks\r\n *\r\n * @param editor\r\n */\n\n\nclass AndroidInputManager {\n  constructor(editor) {\n    this.editor = editor;\n    /**\r\n     * Handle MutationObserver flush\r\n     *\r\n     * @param mutations\r\n     */\n\n    this.flush = mutations => {\n      try {\n        this.reconcileMutations(mutations);\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.error(err); // Failed to reconcile mutations, restore DOM to its previous state\n\n        restoreDOM(this.editor);\n      }\n    };\n    /**\r\n     * Reconcile a batch of mutations\r\n     *\r\n     * @param mutations\r\n     */\n\n\n    this.reconcileMutations = mutations => {\n      var mutationData = gatherMutationData(this.editor, mutations);\n      var {\n        insertedText,\n        removedNodes\n      } = mutationData;\n\n      if (isReplaceExpandedSelection(this.editor, mutationData)) {\n        var text = combineInsertedText(insertedText);\n        this.replaceExpandedSelection(text);\n      } else if (isLineBreak(this.editor, mutationData)) {\n        this.insertBreak();\n      } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n        this.removeLeafNodes(removedNodes);\n      } else if (isDeletion(this.editor, mutationData)) {\n        this.deleteBackward();\n      } else if (isTextInsertion(this.editor, mutationData)) {\n        this.insertText(insertedText);\n      }\n    };\n    /**\r\n     * Apply text diff\r\n     */\n\n\n    this.insertText = insertedText => {\n      var {\n        selection\n      } = this.editor; // Insert the batched text diffs\n\n      insertedText.forEach(insertion => {\n        Transforms.insertText(this.editor, insertion.text.insertText, {\n          at: normalizeTextInsertionRange(this.editor, selection, insertion)\n        });\n      });\n    };\n    /**\r\n     * Handle line breaks\r\n     */\n\n\n    this.insertBreak = () => {\n      var {\n        selection\n      } = this.editor;\n      Editor.insertBreak(this.editor); // To-do: Need a more granular solution to restoring only a specific portion\n      // of the document. Restoring the entire document is expensive.\n\n      restoreDOM(this.editor);\n\n      if (selection) {\n        // Compat: Move selection to the newly inserted block if it has not moved\n        setTimeout(() => {\n          if (this.editor.selection && Range.equals(selection, this.editor.selection)) {\n            Transforms.move(this.editor);\n          }\n        }, 100);\n      }\n    };\n    /**\r\n     * Handle expanded selection being deleted or replaced by text\r\n     */\n\n\n    this.replaceExpandedSelection = text => {\n      Editor.deleteFragment(this.editor);\n\n      if (text.length) {\n        // Selection was replaced by text, insert the entire text diff\n        Editor.insertText(this.editor, text);\n      }\n\n      restoreDOM(this.editor);\n    };\n    /**\r\n     * Handle `backspace` that merges blocks\r\n     */\n\n\n    this.deleteBackward = () => {\n      Editor.deleteBackward(this.editor);\n      ReactEditor.focus(this.editor);\n      restoreDOM(this.editor);\n    };\n    /**\r\n     * Handle mutations that remove specific leaves\r\n     */\n\n\n    this.removeLeafNodes = nodes => {\n      for (var node of nodes) {\n        var slateNode = ReactEditor.toSlateNode(this.editor, node);\n\n        if (slateNode) {\n          var path = ReactEditor.findPath(this.editor, slateNode);\n          Transforms.delete(this.editor, {\n            at: path\n          });\n          restoreDOM(this.editor);\n        }\n      }\n    };\n\n    this.editor = editor;\n  }\n\n}\n\nfunction useMutationObserver(node, callback, options) {\n  var [mutationObserver] = useState(() => new MutationObserver(callback));\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect();\n  });\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    } // Attach mutation observer after render phase has finished\n\n\n    mutationObserver.observe(node.current, options); // Clean up after effect\n\n    return mutationObserver.disconnect.bind(mutationObserver);\n  });\n}\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = useRef(false);\n  var animationFrameRef = useRef(null);\n  var onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      var window = ReactEditor.getWindow(editor);\n      receivedUserInput.current = true;\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current);\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false;\n        animationFrameRef.current = null;\n      });\n    }\n  }, []);\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false;\n    }\n  });\n  return {\n    receivedUserInput,\n    onUserInput\n  };\n}\n\nvar MUTATION_OBSERVER_CONFIG = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true\n};\n\nfunction useAndroidInputManager(node) {\n  var editor = useSlateStatic();\n  var [inputManager] = useState(() => new AndroidInputManager(editor));\n  var {\n    receivedUserInput,\n    onUserInput\n  } = useTrackUserInput();\n  var timeoutId = useRef(null);\n  var isReconciling = useRef(false);\n  var flush = useCallback(mutations => {\n    if (!receivedUserInput.current) {\n      return;\n    }\n\n    isReconciling.current = true;\n    inputManager.flush(mutations);\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false;\n      timeoutId.current = null;\n    }, 250);\n  }, []);\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG);\n  return {\n    isReconciling,\n    onUserInput\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\r\n * Editable.\r\n */\n\n\nvar AndroidEditable = props => {\n  var {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props)),\n    style = {},\n    as: Component = 'div'\n  } = props,\n      attributes = _objectWithoutProperties(props, [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"style\", \"as\"]);\n\n  var editor = useSlate();\n  var ref = useRef(null);\n  var inputManager = useAndroidInputManager(ref); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(() => ({\n    isUpdatingSelection: false,\n    latestElement: null\n  }), []);\n  var [contentKey, setContentKey] = useState(0);\n  var onRestoreDOM = useCallback(() => {\n    setContentKey(prev => prev + 1);\n  }, [contentKey]); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n      EDITOR_TO_RESTORE_DOM.set(editor, onRestoreDOM);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n      EDITOR_TO_RESTORE_DOM.delete(editor);\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      var {\n        selection\n      } = editor;\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var domSelection = root.getSelection();\n\n      if (!domSelection || !ReactEditor.isFocused(editor)) {\n        return;\n      }\n\n      var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n      if (!selection && !hasDomSelection) {\n        return;\n      } // verify that the dom selection is in the editor\n\n\n      var editorElement = EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n\n      if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n        hasDomSelectionInEditor = true;\n      } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true\n        });\n\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return;\n        }\n      } // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n\n\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false\n        });\n        return;\n      } // Otherwise the DOM selection is out of sync, so update it.\n\n\n      var el = ReactEditor.toDOMNode(editor, editor);\n      state.isUpdatingSelection = true;\n      var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n      if (newDomRange) {\n        if (Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n\n        var leafEl = newDomRange.startContainer.parentElement;\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(newDomRange);\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el\n        }); // @ts-ignore\n\n        delete leafEl.getBoundingClientRect;\n      } else {\n        domSelection.removeAllRanges();\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false;\n      });\n    } catch (_unused) {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false;\n    }\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(event => {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      inputManager.onUserInput();\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n\n  useIsomorphicLayoutEffect(() => {\n    var node = ref.current; // @ts-ignore The `beforeinput` event isn't recognized.\n\n    node === null || node === void 0 ? void 0 : node.addEventListener('beforeinput', onDOMBeforeInput); // @ts-ignore The `beforeinput` event isn't recognized.\n\n    return () => node === null || node === void 0 ? void 0 : node.removeEventListener('beforeinput', onDOMBeforeInput);\n  }, [contentKey, propsOnDOMBeforeInput]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(() => {\n    try {\n      if (!readOnly && !state.isUpdatingSelection && !inputManager.isReconciling.current) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var {\n          activeElement\n        } = root;\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var domSelection = root.getSelection();\n\n        if (activeElement === el) {\n          state.latestElement = activeElement;\n          IS_FOCUSED.set(editor, true);\n        } else {\n          IS_FOCUSED.delete(editor);\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor);\n        }\n\n        var {\n          anchorNode,\n          focusNode\n        } = domSelection;\n        var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);\n        var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          var range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false\n          });\n          Transforms.select(editor, range);\n        } else {\n          Transforms.deselect(editor);\n        }\n      }\n    } catch (_unused2) {// Failed to update selection, likely due to reconciliation error\n    }\n  }, 100), [readOnly]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', onDOMSelectionChange);\n    return () => {\n      window.document.removeEventListener('selectionchange', onDOMSelectionChange);\n    };\n  });\n  var decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '') {\n    var start = Editor.start(editor, []);\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({\n    key: contentKey,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    spellCheck: attributes.spellCheck,\n    autoCorrect: attributes.autoCorrect,\n    autoCapitalize: attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread$1({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onCopy: useCallback(event => {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(event => {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n        var {\n          selection\n        } = editor;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n\n            if (Editor.isVoid(editor, node)) {\n              Transforms.delete(editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onFocus: useCallback(event => {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onBlur: useCallback(event => {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onPaste: useCallback(event => {\n      // This unfortunately needs to be handled with paste events instead.\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste) && !readOnly) {\n        event.preventDefault();\n        ReactEditor.insertData(editor, event.clipboardData);\n      }\n    }, [readOnly, attributes.onPaste])\n  }), useChildren({\n    decorations,\n    node: editor,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection: editor.selection\n  }))));\n};\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n\n\nvar FocusedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = () => {\n  return useContext(FocusedContext);\n};\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\n\nvar Slate = props => {\n  var {\n    editor,\n    children,\n    onChange,\n    value\n  } = props,\n      rest = _objectWithoutProperties(props, [\"editor\", \"children\", \"onChange\", \"value\"]);\n\n  var [key, setKey] = useState(0);\n  var context = useMemo(() => {\n    invariant(Node.isNodeList(value), \"[Slate] value is invalid! Expected a list of elements but got: \".concat(JSON.stringify(value)));\n    invariant(Editor.isEditor(editor), \"[Slate] editor is invalid! you passed: \".concat(JSON.stringify(editor)));\n    editor.children = value;\n    Object.assign(editor, rest);\n    return [editor];\n  }, [key, value, ...Object.values(rest)]);\n  var onContextChange = useCallback(() => {\n    onChange(editor.children);\n    setKey(key + 1);\n  }, [key, onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {});\n    };\n  }, []);\n  var [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor));\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor));\n  });\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n\n    document.addEventListener('focus', fn, true);\n    return () => document.removeEventListener('focus', fn, true);\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n\n    document.addEventListener('blur', fn, true);\n    return () => document.removeEventListener('blur', fn, true);\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children)));\n};\n/**\r\n * Get the current editor object from the React context.\r\n * @deprecated Use useSlateStatic instead.\r\n */\n\n\nvar useEditor = () => {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n/**\r\n * Utilities for single-line deletion\r\n */\n\n\nvar doRectsIntersect = (rect, compareRect) => {\n  var middle = (compareRect.top + compareRect.bottom) / 2;\n  return rect.top <= middle && rect.bottom >= middle;\n};\n\nvar areRangesSameLine = (editor, range1, range2) => {\n  var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();\n  var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);\n};\n/**\r\n * A helper utility that returns the end portion of a `Range`\r\n * which is located on a single line.\r\n *\r\n * @param {Editor} editor The editor object to compare against\r\n * @param {Range} parentRange The parent range to compare against\r\n * @returns {Range} A valid portion of the parentRange which is one a single line\r\n */\n\n\nvar findCurrentLineRange = (editor, parentRange) => {\n  var parentRangeBoundary = Editor.range(editor, Range.end(parentRange));\n  var positions = Array.from(Editor.positions(editor, {\n    at: parentRange\n  }));\n  var left = 0;\n  var right = positions.length;\n  var middle = Math.floor(right / 2);\n\n  if (areRangesSameLine(editor, Editor.range(editor, positions[left]), parentRangeBoundary)) {\n    return Editor.range(editor, positions[left], parentRangeBoundary);\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (areRangesSameLine(editor, Editor.range(editor, positions[middle]), parentRangeBoundary)) {\n      right = middle;\n    } else {\n      left = middle;\n    }\n\n    middle = Math.floor((left + right) / 2);\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary);\n};\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */\n\n\nvar withReact = editor => {\n  var e = editor;\n  var {\n    apply,\n    onChange,\n    deleteBackward\n  } = e;\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit);\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      var parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection\n      });\n\n      if (parentBlockEntry) {\n        var [, parentBlockPath] = parentBlockEntry;\n        var parentElementRange = Editor.range(editor, parentBlockPath, editor.selection.anchor);\n        var currentLineRange = findCurrentLineRange(e, parentElementRange);\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, {\n            at: currentLineRange\n          });\n        }\n      }\n    }\n  };\n\n  e.apply = op => {\n    var matches = [];\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n        {\n          for (var [node, path] of Editor.levels(e, {\n            at: op.path\n          })) {\n            var key = ReactEditor.findKey(e, node);\n            matches.push([path, key]);\n          }\n\n          break;\n        }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n        {\n          for (var [_node, _path] of Editor.levels(e, {\n            at: Path.parent(op.path)\n          })) {\n            var _key = ReactEditor.findKey(e, _node);\n\n            matches.push([_path, _key]);\n          }\n\n          break;\n        }\n\n      case 'move_node':\n        {\n          for (var [_node2, _path2] of Editor.levels(e, {\n            at: Path.common(Path.parent(op.path), Path.parent(op.newPath))\n          })) {\n            var _key2 = ReactEditor.findKey(e, _node2);\n\n            matches.push([_path2, _key2]);\n          }\n\n          break;\n        }\n    }\n\n    apply(op);\n\n    for (var [_path3, _key3] of matches) {\n      var [_node3] = Editor.node(e, _path3);\n      NODE_TO_KEY.set(_node3, _key3);\n    }\n  };\n\n  e.setFragmentData = data => {\n    var {\n      selection\n    } = e;\n\n    if (!selection) {\n      return;\n    }\n\n    var [start, end] = Range.edges(selection);\n    var startVoid = Editor.void(e, {\n      at: start.path\n    });\n    var endVoid = Editor.void(e, {\n      at: end.path\n    });\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return;\n    } // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n\n\n    var domRange = ReactEditor.toDOMRange(e, selection);\n    var contents = domRange.cloneContents();\n    var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node;\n      }\n    }); // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n\n    if (endVoid) {\n      var [voidNode] = endVoid;\n      var r = domRange.cloneRange();\n      var domNode = ReactEditor.toDOMNode(e, voidNode);\n      r.setEndAfter(domNode);\n      contents = r.cloneContents();\n    } // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n\n\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]');\n    } // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n\n\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {\n      var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n      zw.textContent = isNewline ? '\\n' : '';\n    }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n    if (isDOMText(attach)) {\n      var span = document.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n\n      span.style.whiteSpace = 'pre';\n      span.appendChild(attach);\n      contents.appendChild(span);\n      attach = span;\n    }\n\n    var fragment = e.getFragment();\n    var string = JSON.stringify(fragment);\n    var encoded = window.btoa(encodeURIComponent(string));\n    attach.setAttribute('data-slate-fragment', encoded);\n    data.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n    var div = document.createElement('div');\n    div.appendChild(contents);\n    div.setAttribute('hidden', 'true');\n    document.body.appendChild(div);\n    data.setData('text/html', div.innerHTML);\n    data.setData('text/plain', getPlainText(div));\n    document.body.removeChild(div);\n  };\n\n  e.insertData = data => {\n    var fragment = data.getData('application/x-slate-fragment');\n\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      e.insertFragment(parsed);\n      return;\n    }\n\n    var text = data.getData('text/plain');\n\n    if (text) {\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      var split = false;\n\n      for (var line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, {\n            always: true\n          });\n        }\n\n        e.insertText(line);\n        split = true;\n      }\n    }\n  };\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n\n      if (onContextChange) {\n        onContextChange();\n      }\n\n      onChange();\n    });\n  };\n\n  return e;\n}; // Components\n\n\nvar Editable$1 = IS_ANDROID ? AndroidEditable : Editable;\nexport { AndroidEditable, Editable as DefaultEditable, DefaultElement, DefaultLeaf, DefaultPlaceholder, Editable$1 as Editable, ReactEditor, Slate, useEditor, useFocused, useReadOnly, useSelected, useSlate, useSlateStatic, withReact };","map":{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/components/string.tsx","../src/utils/weak-maps.ts","../src/components/leaf.tsx","../src/utils/environment.ts","../src/hooks/use-isomorphic-layout-effect.ts","../src/utils/range-list.ts","../src/components/text.tsx","../src/hooks/use-selected.ts","../src/components/element.tsx","../src/hooks/use-slate-static.tsx","../src/hooks/use-decorate.ts","../src/hooks/use-children.tsx","../src/utils/hotkeys.ts","../src/hooks/use-read-only.ts","../src/hooks/use-slate.tsx","../src/utils/dom.ts","../src/components/editable.tsx","../src/utils/key.ts","../src/plugin/react-editor.ts","../src/components/android/diff-text.ts","../src/components/android/mutation-detection.ts","../src/components/android/restore-dom.ts","../src/components/android/android-input-manager.ts","../src/components/android/use-mutation-observer.ts","../src/components/android/use-track-user-input.ts","../src/components/android/use-android-input-manager.ts","../src/components/android/android-editable.tsx","../src/hooks/use-focused.ts","../src/components/slate.tsx","../src/hooks/use-editor.tsx","../src/utils/lines.ts","../src/plugin/with-react.ts","../src/index.ts"],"names":["objectWithoutPropertiesLoose","String","props","text","editor","useSlateStatic","path","ReactEditor","parentPath","Path","length","Node","leaf","parent","Editor","isLineBreak","React","isLast","isTrailing","TextString","ZeroWidthString","NODE_TO_INDEX","NODE_TO_PARENT","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","KEY_TO_ELEMENT","NODE_TO_ELEMENT","NODE_TO_KEY","IS_READ_ONLY","IS_FOCUSED","EDITOR_TO_ON_CHANGE","EDITOR_TO_RESTORE_DOM","PLACEHOLDER_SYMBOL","Symbol","keyForString","Leaf","renderLeaf","placeholderRef","useRef","useEffect","placeholderEl","editorEl","document","children","key","placeholderProps","attributes","style","position","pointerEvents","width","maxWidth","display","opacity","userSelect","textDecoration","contentEditable","ref","renderPlaceholder","MemoizedLeaf","next","prev","Text","DefaultLeaf","IS_IOS","navigator","window","IS_APPLE","IS_ANDROID","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME","IS_CHROME_LEGACY","IS_FIREFOX_LEGACY","CAN_USE_DOM","HAS_BEFORE_INPUT_SUPPORT","globalThis","useIsomorphicLayoutEffect","shallowCompare","Object","obj2","obj1","isDecoratorRangeListEqual","list","another","i","range","other","rangeOwnProps","otherOwnProps","Range","leaves","SlateText","MemoizedText","SelectedContext","createContext","useSelected","useContext","Element","renderElement","p","selection","readOnly","useReadOnly","isInline","useChildren","node","dir","getDirection","Tag","height","color","outline","decorations","element","value","MemoizedElement","DefaultElement","EditorContext","DecorateContext","useDecorate","decorate","isLeafBlock","n","sel","ds","d","id","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","SlateContext","useSlate","context","getDefaultView","isDOMComment","isDOMNode","isDOMElement","isDOMSelection","isDOMText","isPlainTextOnlyPaste","normalizeDOMPoint","domPoint","offset","index","getEditableChildAndIndex","getEditableChild","hasShadowRoot","childNodes","child","triedForward","triedBackward","direction","getPlainText","domNode","Array","getComputedStyle","Editable","onDOMBeforeInput","as","Component","state","useMemo","isComposing","isDraggingInternally","isUpdatingSelection","latestElement","root","domSelection","hasDomSelection","editorElement","hasDomSelectionInEditor","slateRange","exactMatch","el","newDomRange","leafEl","scrollIntoView","scrollMode","boundary","setTimeout","useCallback","hasEditableTarget","isDOMEventHandled","inputType","type","data","Transforms","unit","onDOMSelectionChange","throttle","activeElement","focusNode","anchorNodeSelectable","isTargetInsideVoid","focusNodeSelectable","placeholder","start","anchor","focus","role","spellCheck","autoCorrect","autoCapitalize","suppressContentEditableWarning","whiteSpace","wordWrap","onBeforeInput","isEventHandled","onBlur","relatedTarget","onClick","hasTarget","end","startVoid","at","endVoid","onCompositionEnd","onCompositionUpdate","onCompositionStart","onCopy","onCut","onDragOver","onDragStart","voidMatch","voids","onDrop","draggedRange","onDragEnd","onFocus","onKeyDown","nativeEvent","isRTL","Hotkeys","maybeHistoryEditor","reverse","edge","currentNode","onPaste","DefaultPlaceholder","defaultDecorate","editable","slateNode","shouldTreatEventAsHandled","handler","Key","constructor","getWindow","findKey","findPath","JSON","findDocumentOrShadowRoot","isFocused","isReadOnly","blur","preventScroll","deselect","hasDOMNode","options","targetEl","target","err","insertData","setFragmentData","toDOMNode","toDOMPoint","point","selector","texts","attr","trueLength","parseInt","Math","toDOMRange","isBackward","domAnchor","domFocus","domRange","startEl","startNode","isStartAtZeroWidth","endEl","endNode","isEndAtZeroWidth","toSlateNode","domEl","findEventRange","clientX","clientY","x","y","rect","isPrev","toSlatePoint","parentNode","nearestNode","textNode","voidNode","leafNode","contents","removals","toSlateRange","anchorNode","anchorOffset","focusOffset","isCollapsed","hasRange","prevLength","nextLength","prevChar","nextChar","getDiffStart","maxEnd","getDiffEnd","offsets","diffText","getDiffOffsets","insertText","sliceText","removeText","combineInsertedText","insertedText","getTextInsertion","prevText","nextText","textDiff","textPath","normalizeTextInsertionRange","insertionRange","isSingleCharacterInsertion","match","isText","characterBeforeAnchor","characterAfterAnchor","gatherMutationData","mutations","addedNodes","removedNodes","characterDataMutations","mutation","addedNode","removedNode","textInsertion","parentDOMNode","isDeletion","isReplaceExpandedSelection","isTextInsertion","isRemoveLeafNodes","restoreDOM","onRestoreDOM","console","AndroidInputManager","mutationData","insertion","nodes","useMutationObserver","callback","useState","mutationObserver","useTrackUserInput","receivedUserInput","animationFrameRef","onUserInput","MUTATION_OBSERVER_CONFIG","childList","characterData","characterDataOldValue","subtree","useAndroidInputManager","timeoutId","isReconciling","flush","inputManager","clearTimeout","AndroidEditable","setContentKey","contentKey","FocusedContext","useFocused","Slate","rest","invariant","onContextChange","onChange","setKey","setIsFocused","fn","useEditor","doRectsIntersect","middle","compareRect","areRangesSameLine","rect1","rect2","findCurrentLineRange","parentRangeBoundary","positions","parentRange","left","right","withReact","e","parentBlockEntry","parentElementRange","currentLineRange","op","matches","apply","attach","r","zw","isNewline","span","fragment","string","encoded","encodeURIComponent","div","decoded","decodeURIComponent","parsed","lines","split","always","ReactDOM","DefaultEditable"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import React from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\n\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n  return (\n    <span data-slate-string>\n      {text}\n      {isTrailing ? '\\n' : null}\n    </span>\n  )\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Node, Ancestor, Editor, Range } from 'slate'\n\nimport { Key } from './key'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\nexport const EDITOR_TO_WINDOW: WeakMap<Editor, Window> = new WeakMap()\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const KEY_TO_ELEMENT: WeakMap<Key, HTMLElement> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\nexport const EDITOR_TO_RESTORE_DOM = new WeakMap<Editor, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React, { useRef, useEffect } from 'react'\nimport { Element, Text } from 'slate'\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\n\n// auto-incrementing key for String component, force it refresh to\n// prevent inconsistent rendering by React with IME input\nlet keyForString = 0\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const placeholderRef = useRef<HTMLSpanElement | null>(null)\n\n  useEffect(() => {\n    const placeholderEl = placeholderRef?.current\n    const editorEl = document.querySelector<HTMLDivElement>(\n      '[data-slate-editor=\"true\"]'\n    )\n\n    if (!placeholderEl || !editorEl) {\n      return\n    }\n\n    editorEl.style.minHeight = `${placeholderEl.clientHeight}px`\n\n    return () => {\n      editorEl.style.minHeight = 'auto'\n    }\n  }, [placeholderRef, leaf])\n\n  let children = (\n    <String\n      key={keyForString++}\n      isLast={isLast}\n      leaf={leaf}\n      parent={parent}\n      text={text}\n    />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n        },\n        contentEditable: false,\n        ref: placeholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    next.leaf.text === prev.leaf.text &&\n    Text.matches(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","export const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_ANDROID =\n  typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent)\n\nexport const IS_CHROME =\n  typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent)\n\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent)\n\n// Firefox did not support `beforeInput` until `v87`.\nexport const IS_FIREFOX_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(\n    navigator.userAgent\n  )\n\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const CAN_USE_DOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nexport const HAS_BEFORE_INPUT_SUPPORT =\n  !IS_CHROME_LEGACY &&\n  !IS_EDGE_LEGACY &&\n  // globalThis is undefined in older browsers\n  typeof globalThis !== 'undefined' &&\n  globalThis.InputEvent &&\n  // @ts-ignore The `getTargetRanges` property isn't recognized.\n  typeof globalThis.InputEvent.prototype.getTargetRanges === 'function'\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from '../utils/environment'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import { Range } from 'slate'\nimport { PLACEHOLDER_SYMBOL } from './weak-maps'\n\nexport const shallowCompare = (obj1: {}, obj2: {}) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  )\n\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nexport const isDecoratorRangeListEqual = (\n  list: Range[],\n  another: Range[]\n): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    const { anchor: rangeAnchor, focus: rangeFocus, ...rangeOwnProps } = range\n    const { anchor: otherAnchor, focus: otherFocus, ...otherOwnProps } = other\n\n    if (\n      !Range.equals(range, other) ||\n      range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] ||\n      !shallowCompare(rangeOwnProps, otherOwnProps)\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  KEY_TO_ELEMENT,\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text,\n  } = props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  return (\n    <span data-slate-node=\"text\" ref={ref}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    isDecoratorRangeListEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React, { useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, NodeEntry, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport useChildren from '../hooks/use-children'\nimport { ReactEditor, useSlateStatic, useReadOnly } from '..'\nimport { SelectedContext } from '../hooks/use-selected'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = readOnly ? null : (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  return (\n    <SelectedContext.Provider value={!!selection}>\n      {renderElement({ attributes, children, element })}\n    </SelectedContext.Provider>\n  )\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isDecoratorRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { Editor } from 'slate'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\nimport { Range, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<(entry: NodeEntry) => Range[]>(\n  () => []\n)\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => Range[]) => {\n  return useContext(DecorateContext)\n}\n","import React from 'react'\nimport { Editor, Range, Element, NodeEntry, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '..'\nimport { useSlateStatic } from './use-slate-static'\nimport { useDecorate } from './use-decorate'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const decorate = useDecorate()\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <ElementComponent\n          decorations={ds}\n          element={n}\n          key={key.id}\n          renderElement={renderElement}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          selection={sel}\n        />\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <SlateProvider> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\n\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\ndeclare global {\n  interface Window {\n    Selection: typeof Selection['constructor']\n    DataTransfer: typeof DataTransfer['constructor']\n    Node: typeof Node['constructor']\n  }\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Returns the host window of a DOM node\n */\n\nexport const getDefaultView = (value: any): Window | null => {\n  return (\n    (value && value.ownerDocument && value.ownerDocument.defaultView) || null\n  )\n}\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  const window = getDefaultView(value)\n  return !!window && value instanceof window.Node\n}\n\n/**\n * Check if a value is a DOM selection.\n */\n\nexport const isDOMSelection = (value: any): value is DOMSelection => {\n  const window = value && value.anchorNode && getDefaultView(value.anchorNode)\n  return !!window && value instanceof window.Selection\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    let isLast = offset === node.childNodes.length\n    let index = isLast ? offset - 1 : offset\n    ;[node, index] = getEditableChildAndIndex(\n      node,\n      index,\n      isLast ? 'backward' : 'forward'\n    )\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward')\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Determines wether the active element is nested within a shadowRoot\n */\n\nexport const hasShadowRoot = () => {\n  return !!(\n    window.document.activeElement && window.document.activeElement.shadowRoot\n  )\n}\n\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChildAndIndex = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): [DOMNode, number] => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    index = i\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return [child, index]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const [child] = getEditableChildAndIndex(parent, index, direction)\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n","import React, { useEffect, useRef, useMemo, useCallback } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n} from 'slate'\nimport getDirection from 'direction'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport useChildren from '../hooks/use-children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_SAFARI,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  getDefaultView,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n} from '../utils/dom'\n\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_WINDOW,\n} from '../utils/weak-maps'\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    // Make sure the DOM selection state is in sync.\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n      })\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return\n      }\n    }\n\n    // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n      })\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    const el = ReactEditor.toDOMNode(editor, editor)\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      const leafEl = newDomRange.startContainer.parentElement!\n      leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n        newDomRange\n      )\n      scrollIntoView(leafEl, {\n        scrollMode: 'if-needed',\n        boundary: el,\n      })\n      // @ts-ignore\n      delete leafEl.getBoundingClientRect\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = (event as any).dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        event.preventDefault()\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = (event as any).getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange, {\n              exactMatch: false,\n            })\n\n            if (!selection || !Range.equals(selection, range)) {\n              Transforms.select(editor, range)\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n          Editor.deleteFragment(editor, { direction })\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing = false\n            }\n\n            const window = ReactEditor.getWindow(editor)\n            if (data instanceof window.DataTransfer) {\n              ReactEditor.insertData(editor, data as DataTransfer)\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data)\n            }\n\n            break\n          }\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (\n        !readOnly &&\n        !state.isComposing &&\n        !state.isUpdatingSelection &&\n        !state.isDraggingInternally\n      ) {\n        const root = ReactEditor.findDocumentOrShadowRoot(editor)\n        const { activeElement } = root\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = root.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n          })\n          Transforms.select(editor, range)\n        } else {\n          Transforms.deselect(editor)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  }, [onDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          // COMPAT: The Grammarly Chrome extension works by changing the DOM\n          // out from under `contenteditable` elements, which leads to weird\n          // behaviors so we have to disable it like editor. (2017/04/24)\n          data-gramm={false}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n          // have to use hacks to make these replacement-based features work.\n          spellCheck={!HAS_BEFORE_INPUT_SUPPORT ? false : attributes.spellCheck}\n          autoCorrect={\n            !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCorrect\n          }\n          autoCapitalize={\n            !HAS_BEFORE_INPUT_SUPPORT ? 'false' : attributes.autoCapitalize\n          }\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onBeforeInput={useCallback(\n            (event: React.FormEvent<HTMLDivElement>) => {\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to React's leaky polyfill instead just for it. It\n              // only works for the `insertText` input type.\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT &&\n                !readOnly &&\n                !isEventHandled(event, attributes.onBeforeInput) &&\n                hasEditableTarget(editor, event.target)\n              ) {\n                event.preventDefault()\n                if (!state.isComposing) {\n                  const text = (event as any).data as string\n                  Editor.insertText(editor, text)\n                }\n              }\n            },\n            [readOnly]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              // COMPAT: Safari doesn't always remove the selection even if the content-\n              // editable element no longer has focus. Refer to:\n              // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n              if (IS_SAFARI) {\n                const domSelection = root.getSelection()\n                domSelection?.removeAllRanges()\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const start = Editor.start(editor, path)\n                const end = Editor.end(editor, path)\n\n                const startVoid = Editor.void(editor, { at: start })\n                const endVoid = Editor.void(editor, { at: end })\n\n                if (\n                  startVoid &&\n                  endVoid &&\n                  Path.equals(startVoid[1], endVoid[1])\n                ) {\n                  const range = Editor.range(editor, start)\n                  Transforms.select(editor, range)\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                state.isComposing = false\n\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (!IS_SAFARI && !IS_FIREFOX_LEGACY && event.data) {\n                  Editor.insertText(editor, event.data)\n                }\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                state.isComposing = true\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                const { selection } = editor\n                if (selection && Range.isExpanded(selection)) {\n                  Editor.deleteFragment(editor)\n                }\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onDragOver={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragOver)\n              ) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                const node = ReactEditor.toSlateNode(editor, event.target)\n\n                if (Editor.isVoid(editor, node)) {\n                  event.preventDefault()\n                }\n              }\n            },\n            [attributes.onDragOver]\n          )}\n          onDragStart={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragStart)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const voidMatch =\n                  Editor.isVoid(editor, node) ||\n                  Editor.void(editor, { at: path, voids: true })\n\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                  const range = Editor.range(editor, path)\n                  Transforms.select(editor, range)\n                }\n\n                state.isDraggingInternally = true\n\n                ReactEditor.setFragmentData(editor, event.dataTransfer)\n              }\n            },\n            [attributes.onDragStart]\n          )}\n          onDrop={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDrop)\n              ) {\n                event.preventDefault()\n\n                // Keep a reference to the dragged range before updating selection\n                const draggedRange = editor.selection\n\n                // Find the range where the drop happened\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n\n                Transforms.select(editor, range)\n\n                if (state.isDraggingInternally) {\n                  if (draggedRange) {\n                    Transforms.delete(editor, {\n                      at: draggedRange,\n                    })\n                  }\n\n                  state.isDraggingInternally = false\n                }\n\n                ReactEditor.insertData(editor, data)\n\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                  ReactEditor.focus(editor)\n                }\n              }\n            },\n            [readOnly, attributes.onDrop]\n          )}\n          onDragEnd={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              // When dropping on a different droppable element than the current editor,\n              // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n              // Note: `onDragEnd` is only called when `onDrop` is not called\n              if (\n                !readOnly &&\n                state.isDraggingInternally &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragEnd)\n              ) {\n                state.isDraggingInternally = false\n              }\n            },\n            [readOnly, attributes.onDragEnd]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const el = ReactEditor.toDOMNode(editor, editor)\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                  el.focus()\n                  return\n                }\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onKeyDown={useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onKeyDown)\n              ) {\n                const { nativeEvent } = event\n                const { selection } = editor\n\n                const element =\n                  editor.children[\n                    selection !== null ? selection.focus.path[0] : 0\n                  ]\n                const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.redo === 'function') {\n                    maybeHistoryEditor.redo()\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isUndo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.undo === 'function') {\n                    maybeHistoryEditor.undo()\n                  }\n\n                  return\n                }\n\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', reverse: true })\n                  return\n                }\n\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line' })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, {\n                    unit: 'line',\n                    edge: 'focus',\n                    reverse: true,\n                  })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                  return\n                }\n\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: !isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'start' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'end' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: !isRTL })\n                  return\n                }\n\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: isRTL })\n                  return\n                }\n\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                  // We don't have a core behavior for these, but they change the\n                  // DOM if we don't prevent them, so we have to.\n                  if (\n                    Hotkeys.isBold(nativeEvent) ||\n                    Hotkeys.isItalic(nativeEvent) ||\n                    Hotkeys.isTransposeCharacter(nativeEvent)\n                  ) {\n                    event.preventDefault()\n                    return\n                  }\n\n                  if (Hotkeys.isSplitBlock(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n                } else {\n                  if (IS_CHROME || IS_SAFARI) {\n                    // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                    // an event when deleting backwards in a selected void inline node\n                    if (\n                      selection &&\n                      (Hotkeys.isDeleteBackward(nativeEvent) ||\n                        Hotkeys.isDeleteForward(nativeEvent)) &&\n                      Range.isCollapsed(selection)\n                    ) {\n                      const currentNode = Node.parent(\n                        editor,\n                        selection.anchor.path\n                      )\n\n                      if (\n                        Element.isElement(currentNode) &&\n                        Editor.isVoid(editor, currentNode) &&\n                        Editor.isInline(editor, currentNode)\n                      ) {\n                        event.preventDefault()\n                        Transforms.delete(editor, { unit: 'block' })\n\n                        return\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onKeyDown]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste)\n              ) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                if (\n                  !HAS_BEFORE_INPUT_SUPPORT ||\n                  isPlainTextOnlyPaste(event.nativeEvent)\n                ) {\n                  event.preventDefault()\n                  ReactEditor.insertData(editor, event.clipboardData)\n                }\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefObject<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => <span {...attributes}>{children}</span>\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => Range[] = () => []\n\n/**\n * Check if two DOM range objects are equal.\n */\n\nexport const isRangeEqual = (a: DOMRange, b: DOMRange) => {\n  return (\n    (a.startContainer === b.startContainer &&\n      a.startOffset === b.startOffset &&\n      a.endContainer === b.endContainer &&\n      a.endOffset === b.endOffset) ||\n    (a.startContainer === b.endContainer &&\n      a.startOffset === b.endOffset &&\n      a.endContainer === b.startContainer &&\n      a.endOffset === b.startOffset)\n  )\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nexport const hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in the editor.\n */\n\nexport const isTargetInsideVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms, BaseEditor } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  KEY_TO_ELEMENT,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n  EDITOR_TO_WINDOW,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  isDOMSelection,\n  normalizeDOMPoint,\n  hasShadowRoot,\n} from '../utils/dom'\nimport { IS_CHROME } from '../utils/environment'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends BaseEditor {\n  insertData: (data: DataTransfer) => void\n  setFragmentData: (data: DataTransfer) => void\n  hasRange: (editor: ReactEditor, range: Range) => boolean\n}\n\nexport const ReactEditor = {\n  /**\n   * Return the host window of the current editor.\n   */\n\n  getWindow(editor: ReactEditor): Window {\n    const window = EDITOR_TO_WINDOW.get(editor)\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor')\n    }\n    return window\n  },\n\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n   */\n\n  findDocumentOrShadowRoot(editor: ReactEditor): Document | ShadowRoot {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = el.getRootNode()\n\n    // The below exception will always be thrown for iframes because the document inside an iframe\n    // does not inherit it's prototype from the parent document, therefore we return early\n    if (el.ownerDocument !== document) return el.ownerDocument\n\n    if (!(root instanceof Document || root instanceof ShadowRoot))\n      throw new Error(\n        `Unable to find DocumentOrShadowRoot for editor element: ${el}`\n      )\n\n    // COMPAT: Only Chrome implements the DocumentOrShadowRoot mixin for\n    // ShadowRoot; other browsers still implement it on the Document\n    // interface. (2020/08/08)\n    // https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot#Properties\n    if (root.getSelection === undefined && el.ownerDocument !== null)\n      return el.ownerDocument\n\n    return root\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (root.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (root.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable ||\n        targetEl.isContentEditable ||\n        !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(editor: ReactEditor, data: DataTransfer): void {\n    editor.setFragmentData(data)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const window = ReactEditor.getWindow(editor)\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = window\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n    })\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint<T extends boolean>(\n    editor: ReactEditor,\n    domPoint: DOMPoint,\n    exactMatch: T\n  ): T extends true ? Point | null : Point {\n    const [nearestNode, nearestOffset] = exactMatch\n      ? domPoint\n      : normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const voidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        const window = ReactEditor.getWindow(editor)\n        const range = window.document.createRange()\n        range.setStart(textNode, 0)\n        range.setEnd(nearestNode, nearestOffset)\n        const contents = range.cloneContents()\n        const removals = [\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[data-slate-zero-width]')\n          ),\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[contenteditable=false]')\n          ),\n        ]\n\n        removals.forEach(el => {\n          el!.parentNode!.removeChild(el)\n        })\n\n        // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n        offset = contents.textContent!.length\n        domNode = textNode\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n\n        // COMPAT: In read-only editors the leaf is not rendered.\n        if (!leafNode) {\n          offset = 1\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n          domNode = leafNode\n          offset = domNode.textContent!.length\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent!.length\n          })\n        }\n      }\n\n      // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        parentNode.hasAttribute('data-slate-zero-width')\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      if (exactMatch) {\n        return null as T extends true ? Point | null : Point\n      }\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset } as T extends true ? Point | null : Point\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange<T extends boolean>(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection,\n    options: {\n      exactMatch: T\n    }\n  ): T extends true ? Range | null : Range {\n    const { exactMatch } = options\n    const el = isDOMSelection(domRange)\n      ? domRange.anchorNode\n      : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed =\n            domRange.anchorNode === domRange.focusNode &&\n            domRange.anchorOffset === domRange.focusOffset\n        } else {\n          isCollapsed = domRange.isCollapsed\n        }\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(\n      editor,\n      [anchorNode, anchorOffset],\n      exactMatch\n    )\n    if (!anchor) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], exactMatch)\n    if (!focus) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    return ({ anchor, focus } as unknown) as T extends true\n      ? Range | null\n      : Range\n  },\n\n  hasRange(editor: ReactEditor, range: Range): boolean {\n    const { anchor, focus } = range\n    return (\n      Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path)\n    )\n  },\n}\n","import { Editor, Path, Range, Text } from 'slate'\n\nimport { ReactEditor } from '../../'\nimport { DOMNode } from '../../utils/dom'\n\nexport type Diff = {\n  start: number\n  end: number\n  insertText: string\n  removeText: string\n}\n\nexport interface TextInsertion {\n  text: Diff\n  path: Path\n}\n\ntype TextRange = {\n  start: number\n  end: number\n}\n\n/**\n * Returns the number of characters that are the same at the beginning of the\n * String.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the offset of the start of the difference; null if there is no difference\n */\nfunction getDiffStart(prev: string, next: string): number | null {\n  const length = Math.min(prev.length, next.length)\n\n  for (let i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Returns the number of characters that are the same at the end of the String\n * up to `max`. Max prevents double-counting characters when there are\n * multiple duplicate characters around the diff area.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @param max  the max length to test.\n * @returns number of characters that are the same at the end of the string\n */\nfunction getDiffEnd(prev: string, next: string, max: number): number | null {\n  const prevLength = prev.length\n  const nextLength = next.length\n  const length = Math.min(prevLength, nextLength, max)\n\n  for (let i = 0; i < length; i++) {\n    const prevChar = prev.charAt(prevLength - i - 1)\n    const nextChar = next.charAt(nextLength - i - 1)\n    if (prevChar !== nextChar) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Takes two strings and returns an object representing two offsets. The\n * first, `start` represents the number of characters that are the same at\n * the front of the String. The `end` represents the number of characters\n * that are the same at the end of the String.\n *\n * Returns null if they are identical.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the difference text range; null if there are no differences.\n */\nfunction getDiffOffsets(prev: string, next: string): TextRange | null {\n  if (prev === next) return null\n  const start = getDiffStart(prev, next)\n  if (start === null) return null\n  const maxEnd = Math.min(prev.length - start, next.length - start)\n  const end = getDiffEnd(prev, next, maxEnd)!\n  if (end === null) return null\n  return { start, end }\n}\n\n/**\n * Takes a text string and returns a slice from the string at the given text range\n *\n * @param text  the text\n * @param offsets  the text range\n * @returns the text slice at text range\n */\nfunction sliceText(text: string, offsets: TextRange): string {\n  return text.slice(offsets.start, text.length - offsets.end)\n}\n\n/**\n * Takes two strings and returns a smart diff that can be used to describe the\n * change in a way that can be used as operations like inserting, removing or\n * replacing text.\n *\n * @param prev the previous text\n * @param next the next text\n * @returns the text difference\n */\nexport function diffText(prev?: string, next?: string): Diff | null {\n  if (prev === undefined || next === undefined) return null\n  const offsets = getDiffOffsets(prev, next)\n  if (offsets == null) return null\n  const insertText = sliceText(next, offsets)\n  const removeText = sliceText(prev, offsets)\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText,\n  }\n}\n\nexport function combineInsertedText(insertedText: TextInsertion[]): string {\n  return insertedText.reduce((acc, { text }) => `${acc}${text.insertText}`, '')\n}\n\nexport function getTextInsertion<T extends Editor>(\n  editor: T,\n  domNode: DOMNode\n): TextInsertion | undefined {\n  const node = ReactEditor.toSlateNode(editor, domNode)\n\n  if (!Text.isText(node)) {\n    return undefined\n  }\n\n  const prevText = node.text\n  let nextText = domNode.textContent!\n\n  // textContent will pad an extra \\n when the textContent ends with an \\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1)\n  }\n\n  // If the text is no different, there is no diff.\n  if (nextText !== prevText) {\n    const textDiff = diffText(prevText, nextText)\n    if (textDiff !== null) {\n      const textPath = ReactEditor.findPath(editor, node)\n\n      return {\n        text: textDiff,\n        path: textPath,\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function normalizeTextInsertionRange(\n  editor: Editor,\n  range: Range | null,\n  { path, text }: TextInsertion\n) {\n  const insertionRange = {\n    anchor: { path, offset: text.start },\n    focus: { path, offset: text.end },\n  }\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange\n  }\n\n  const { insertText, removeText } = text\n  const isSingleCharacterInsertion =\n    insertText.length === 1 || removeText.length === 1\n\n  /**\n   * This code handles edge cases that arise from text diffing when the\n   * inserted or removed character is a single character, and the character\n   * right before or after the anchor is the same as the one being inserted or\n   * removed.\n   *\n   * Take this example: hello|o\n   *\n   * If another `o` is inserted at the selection's anchor in the example above,\n   * it should be inserted at the anchor, but using text diffing, we actually\n   * detect that the character was inserted after the second `o`:\n   *\n   * helloo[o]|\n   *\n   * Instead, in these very specific edge cases, we assume that the character\n   * needs to be inserted after the anchor rather than where the diff was found:\n   *\n   * hello[o]|o\n   */\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    const [text] = Array.from(\n      Editor.nodes(editor, { at: range, match: Text.isText })\n    )\n\n    if (text) {\n      const [node] = text\n      const { anchor } = range\n      const characterBeforeAnchor = node.text[anchor.offset - 1]\n      const characterAfterAnchor = node.text[anchor.offset]\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: { path, offset: anchor.offset - 1 },\n          focus: { path, offset: anchor.offset },\n        }\n      }\n    }\n  }\n\n  return insertionRange\n}\n","import { Editor, Node, Path, Range } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\nimport { ReactEditor } from '../..'\nimport { TextInsertion, getTextInsertion } from './diff-text'\n\ninterface MutationData {\n  addedNodes: DOMNode[]\n  removedNodes: DOMNode[]\n  insertedText: TextInsertion[]\n  characterDataMutations: MutationRecord[]\n}\n\ntype MutationDetection = (editor: Editor, mutationData: MutationData) => boolean\n\nexport function gatherMutationData(\n  editor: Editor,\n  mutations: MutationRecord[]\n): MutationData {\n  const addedNodes: DOMNode[] = []\n  const removedNodes: DOMNode[] = []\n  const insertedText: TextInsertion[] = []\n  const characterDataMutations: MutationRecord[] = []\n\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList': {\n        if (mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(addedNode => {\n            addedNodes.push(addedNode)\n          })\n        }\n\n        mutation.removedNodes.forEach(removedNode => {\n          removedNodes.push(removedNode)\n        })\n\n        break\n      }\n      case 'characterData': {\n        characterDataMutations.push(mutation)\n\n        // Changes to text nodes should consider the parent element\n        const { parentNode } = mutation.target\n\n        if (!parentNode) {\n          return\n        }\n\n        const textInsertion = getTextInsertion(editor, parentNode)\n\n        if (!textInsertion) {\n          return\n        }\n\n        // If we've already detected a diff at that path, we can return early\n        if (\n          insertedText.some(({ path }) => Path.equals(path, textInsertion.path))\n        ) {\n          return\n        }\n\n        // Add the text diff to the array of detected text insertions that need to be reconciled\n        insertedText.push(textInsertion)\n      }\n    }\n  })\n\n  return { addedNodes, removedNodes, insertedText, characterDataMutations }\n}\n\n/**\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\n *\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\n * `addedNodes`.\n *\n * To account for these edge cases, the most reliable strategy to detect line break mutations\n * is to check whether a new block was inserted of the same type as the current block.\n */\nexport const isLineBreak: MutationDetection = (editor, { addedNodes }) => {\n  const { selection } = editor\n  const parentNode = selection\n    ? Node.parent(editor, selection.anchor.path)\n    : null\n  const parentDOMNode = parentNode\n    ? ReactEditor.toDOMNode(editor, parentNode)\n    : null\n\n  if (!parentDOMNode) {\n    return false\n  }\n\n  return addedNodes.some(\n    addedNode =>\n      addedNode instanceof HTMLElement &&\n      addedNode.tagName === parentDOMNode?.tagName\n  )\n}\n\n/**\n * So long as we check for line break mutations before deletion mutations,\n * we can safely assume that a set of mutations was a deletion if there are\n * removed nodes.\n */\nexport const isDeletion: MutationDetection = (_, { removedNodes }) => {\n  return removedNodes.length > 0\n}\n\n/**\n * If the selection was expanded and there are removed nodes,\n * the contents of the selection need to be replaced with the diff\n */\nexport const isReplaceExpandedSelection: MutationDetection = (\n  { selection },\n  { removedNodes }\n) => {\n  return selection\n    ? Range.isExpanded(selection) && removedNodes.length > 0\n    : false\n}\n\n/**\n * Plain text insertion\n */\nexport const isTextInsertion: MutationDetection = (_, { insertedText }) => {\n  return insertedText.length > 0\n}\n\n/**\n * Edge case. Detect mutations that remove leaf nodes and also update character data\n */\nexport const isRemoveLeafNodes: MutationDetection = (\n  _,\n  { addedNodes, characterDataMutations, removedNodes }\n) => {\n  return (\n    removedNodes.length > 0 &&\n    addedNodes.length === 0 &&\n    characterDataMutations.length > 0\n  )\n}\n","import { ReactEditor } from '../..'\nimport { EDITOR_TO_RESTORE_DOM } from '../../utils/weak-maps'\n\nexport function restoreDOM(editor: ReactEditor) {\n  try {\n    const onRestoreDOM = EDITOR_TO_RESTORE_DOM.get(editor)\n    if (onRestoreDOM) {\n      onRestoreDOM()\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  }\n}\n","import { ReactEditor } from '../../plugin/react-editor'\nimport { Editor, Range, Transforms } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\n\nimport {\n  normalizeTextInsertionRange,\n  combineInsertedText,\n  TextInsertion,\n} from './diff-text'\nimport {\n  gatherMutationData,\n  isDeletion,\n  isLineBreak,\n  isRemoveLeafNodes,\n  isReplaceExpandedSelection,\n  isTextInsertion,\n} from './mutation-detection'\nimport { restoreDOM } from './restore-dom'\n\n// Replace with `const debug = console.log` to debug\nconst debug = (...message: any[]) => {}\n\n/**\n * Based loosely on:\n *\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n *\n * The input manager attempts to map observed mutations on the document to a\n * set of operations in order to reconcile Slate's internal value with the DOM.\n *\n * Mutations are processed synchronously as they come in. Only mutations that occur\n * during a user input loop are processed, as other mutations can occur within the\n * document that were not initiated by user input.\n *\n * The mutation reconciliation process attempts to match mutations to the following\n * patterns:\n *\n * - Text updates\n * - Deletions\n * - Line breaks\n *\n * @param editor\n */\n\nexport class AndroidInputManager {\n  constructor(private editor: ReactEditor) {\n    this.editor = editor\n  }\n\n  /**\n   * Handle MutationObserver flush\n   *\n   * @param mutations\n   */\n\n  flush = (mutations: MutationRecord[]) => {\n    debug('flush')\n\n    try {\n      this.reconcileMutations(mutations)\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err)\n\n      // Failed to reconcile mutations, restore DOM to its previous state\n      restoreDOM(this.editor)\n    }\n  }\n\n  /**\n   * Reconcile a batch of mutations\n   *\n   * @param mutations\n   */\n\n  private reconcileMutations = (mutations: MutationRecord[]) => {\n    const mutationData = gatherMutationData(this.editor, mutations)\n    const { insertedText, removedNodes } = mutationData\n\n    debug('processMutations', mutations, mutationData)\n\n    if (isReplaceExpandedSelection(this.editor, mutationData)) {\n      const text = combineInsertedText(insertedText)\n      this.replaceExpandedSelection(text)\n    } else if (isLineBreak(this.editor, mutationData)) {\n      this.insertBreak()\n    } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n      this.removeLeafNodes(removedNodes)\n    } else if (isDeletion(this.editor, mutationData)) {\n      this.deleteBackward()\n    } else if (isTextInsertion(this.editor, mutationData)) {\n      this.insertText(insertedText)\n    }\n  }\n\n  /**\n   * Apply text diff\n   */\n\n  private insertText = (insertedText: TextInsertion[]) => {\n    debug('insertText')\n\n    const { selection } = this.editor\n\n    // Insert the batched text diffs\n    insertedText.forEach(insertion => {\n      Transforms.insertText(this.editor, insertion.text.insertText, {\n        at: normalizeTextInsertionRange(this.editor, selection, insertion),\n      })\n    })\n  }\n\n  /**\n   * Handle line breaks\n   */\n\n  private insertBreak = () => {\n    debug('insertBreak')\n\n    const { selection } = this.editor\n\n    Editor.insertBreak(this.editor)\n\n    // To-do: Need a more granular solution to restoring only a specific portion\n    // of the document. Restoring the entire document is expensive.\n    restoreDOM(this.editor)\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(() => {\n        if (\n          this.editor.selection &&\n          Range.equals(selection, this.editor.selection)\n        ) {\n          Transforms.move(this.editor)\n        }\n      }, 100)\n    }\n  }\n\n  /**\n   * Handle expanded selection being deleted or replaced by text\n   */\n\n  private replaceExpandedSelection = (text: string) => {\n    debug('replaceExpandedSelection')\n\n    // Delete expanded selection\n    Editor.deleteFragment(this.editor)\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(this.editor, text)\n    }\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle `backspace` that merges blocks\n   */\n\n  private deleteBackward = () => {\n    debug('deleteBackward')\n\n    Editor.deleteBackward(this.editor)\n    ReactEditor.focus(this.editor)\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle mutations that remove specific leaves\n   */\n  private removeLeafNodes = (nodes: DOMNode[]) => {\n    for (const node of nodes) {\n      const slateNode = ReactEditor.toSlateNode(this.editor, node)\n\n      if (slateNode) {\n        const path = ReactEditor.findPath(this.editor, slateNode)\n\n        Transforms.delete(this.editor, { at: path })\n        restoreDOM(this.editor)\n      }\n    }\n  }\n}\n\nexport default AndroidInputManager\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    // Attach mutation observer after render phase has finished\n    mutationObserver.observe(node.current, options)\n\n    // Clean up after effect\n    return mutationObserver.disconnect.bind(mutationObserver)\n  })\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { ReactEditor } from '../..'\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      const window = ReactEditor.getWindow(editor)\n\n      receivedUserInput.current = true\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current)\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false\n        animationFrameRef.current = null\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false\n    }\n  })\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import { RefObject, useCallback, useRef, useState } from 'react'\n\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nimport { AndroidInputManager } from './android-input-manager'\nimport { useMutationObserver } from './use-mutation-observer'\nimport { useTrackUserInput } from './use-track-user-input'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true,\n}\n\nexport function useAndroidInputManager(node: RefObject<HTMLElement>) {\n  const editor = useSlateStatic()\n  const [inputManager] = useState(() => new AndroidInputManager(editor))\n  const { receivedUserInput, onUserInput } = useTrackUserInput()\n  const timeoutId = useRef<NodeJS.Timeout | null>(null)\n  const isReconciling = useRef(false)\n  const flush = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    isReconciling.current = true\n    inputManager.flush(mutations)\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current)\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false\n      timeoutId.current = null\n    }, 250)\n  }, [])\n\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG)\n\n  return {\n    isReconciling,\n    onUserInput,\n  }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Descendant, Editor, Element, Node, Range, Transforms } from 'slate'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport { DefaultPlaceholder, ReactEditor } from '../..'\nimport { ReadOnlyContext } from '../../hooks/use-read-only'\nimport { useSlate } from '../../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../../hooks/use-decorate'\nimport {\n  DOMElement,\n  isDOMElement,\n  isDOMNode,\n  getDefaultView,\n  isPlainTextOnlyPaste,\n} from '../../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_RESTORE_DOM,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n} from '../../utils/weak-maps'\nimport { EditableProps } from '../editable'\nimport useChildren from '../../hooks/use-children'\nimport {\n  defaultDecorate,\n  hasEditableTarget,\n  isEventHandled,\n  isDOMEventHandled,\n  isTargetInsideVoid,\n} from '../editable'\n\nimport { useAndroidInputManager } from './use-android-input-manager'\n\n/**\n * Editable.\n */\n\nexport const AndroidEditable = (props: EditableProps): JSX.Element => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n  const inputManager = useAndroidInputManager(ref)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  const [contentKey, setContentKey] = useState(0)\n  const onRestoreDOM = useCallback(() => {\n    setContentKey(prev => prev + 1)\n  }, [contentKey])\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n      EDITOR_TO_RESTORE_DOM.set(editor, onRestoreDOM)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n      EDITOR_TO_RESTORE_DOM.delete(editor)\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = root.getSelection()\n\n      if (!domSelection || !ReactEditor.isFocused(editor)) {\n        return\n      }\n\n      const hasDomSelection = domSelection.type !== 'None'\n\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return\n      }\n\n      // verify that the dom selection is in the editor\n      const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n      let hasDomSelectionInEditor = false\n      if (\n        editorElement.contains(domSelection.anchorNode) &&\n        editorElement.contains(domSelection.focusNode)\n      ) {\n        hasDomSelectionInEditor = true\n      }\n\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n        })\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return\n        }\n      }\n\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n        })\n        return\n      }\n\n      // Otherwise the DOM selection is out of sync, so update it.\n      const el = ReactEditor.toDOMNode(editor, editor)\n      state.isUpdatingSelection = true\n\n      const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n      if (newDomRange) {\n        if (Range.isBackward(selection!)) {\n          domSelection.setBaseAndExtent(\n            newDomRange.endContainer,\n            newDomRange.endOffset,\n            newDomRange.startContainer,\n            newDomRange.startOffset\n          )\n        } else {\n          domSelection.setBaseAndExtent(\n            newDomRange.startContainer,\n            newDomRange.startOffset,\n            newDomRange.endContainer,\n            newDomRange.endOffset\n          )\n        }\n        const leafEl = newDomRange.startContainer.parentElement!\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n          newDomRange\n        )\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el,\n        })\n        // @ts-ignore\n        delete leafEl.getBoundingClientRect\n      } else {\n        domSelection.removeAllRanges()\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false\n      })\n    } catch {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false\n    }\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        inputManager.onUserInput()\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  useIsomorphicLayoutEffect(() => {\n    const node = ref.current\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    node?.addEventListener('beforeinput', onDOMBeforeInput)\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    return () => node?.removeEventListener('beforeinput', onDOMBeforeInput)\n  }, [contentKey, propsOnDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      try {\n        if (\n          !readOnly &&\n          !state.isUpdatingSelection &&\n          !inputManager.isReconciling.current\n        ) {\n          const root = ReactEditor.findDocumentOrShadowRoot(editor)\n          const { activeElement } = root\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const domSelection = root.getSelection()\n\n          if (activeElement === el) {\n            state.latestElement = activeElement\n            IS_FOCUSED.set(editor, true)\n          } else {\n            IS_FOCUSED.delete(editor)\n          }\n\n          if (!domSelection) {\n            return Transforms.deselect(editor)\n          }\n\n          const { anchorNode, focusNode } = domSelection\n\n          const anchorNodeSelectable =\n            hasEditableTarget(editor, anchorNode) ||\n            isTargetInsideVoid(editor, anchorNode)\n\n          const focusNodeSelectable =\n            hasEditableTarget(editor, focusNode) ||\n            isTargetInsideVoid(editor, focusNode)\n\n          if (anchorNodeSelectable && focusNodeSelectable) {\n            const range = ReactEditor.toSlateRange(editor, domSelection, {\n              exactMatch: false,\n            })\n            Transforms.select(editor, range)\n          } else {\n            Transforms.deselect(editor)\n          }\n        }\n      } catch {\n        // Failed to update selection, likely due to reconciliation error\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  })\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          key={contentKey}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          spellCheck={attributes.spellCheck}\n          autoCorrect={attributes.autoCorrect}\n          autoCapitalize={attributes.autoCapitalize}\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              // This unfortunately needs to be handled with paste events instead.\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste) &&\n                !readOnly\n              ) {\n                event.preventDefault()\n                ReactEditor.insertData(editor, event.clipboardData)\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\nimport { Editor, Node, Element, Descendant } from 'slate'\nimport invariant from 'tiny-invariant'\n\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { SlateContext } from '../hooks/use-slate'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Descendant[]\n  children: React.ReactNode\n  onChange: (value: Descendant[]) => void\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const [key, setKey] = useState(0)\n  const context: [ReactEditor] = useMemo(() => {\n    invariant(\n      Node.isNodeList(value),\n      `[Slate] value is invalid! Expected a list of elements but got: ${JSON.stringify(\n        value\n      )}`\n    )\n    invariant(\n      Editor.isEditor(editor),\n      `[Slate] editor is invalid! you passed: ${JSON.stringify(editor)}`\n    )\n\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  }, [key, value, ...Object.values(rest)])\n\n  const onContextChange = useCallback(() => {\n    onChange(editor.children)\n    setKey(key + 1)\n  }, [key, onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n    }\n  }, [])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('focus', fn, true)\n    return () => document.removeEventListener('focus', fn, true)\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('blur', fn, true)\n    return () => document.removeEventListener('blur', fn, true)\n  }, [])\n\n  return (\n    <SlateContext.Provider value={context}>\n      <EditorContext.Provider value={editor}>\n        <FocusedContext.Provider value={isFocused}>\n          {children}\n        </FocusedContext.Provider>\n      </EditorContext.Provider>\n    </SlateContext.Provider>\n  )\n}\n","import { useContext } from 'react'\n\nimport { EditorContext } from './use-slate-static'\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","/**\n * Utilities for single-line deletion\n */\n\nimport { Range, Editor } from 'slate'\nimport { ReactEditor } from '..'\n\nconst doRectsIntersect = (rect: DOMRect, compareRect: DOMRect) => {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n\nconst areRangesSameLine = (\n  editor: ReactEditor,\n  range1: Range,\n  range2: Range\n) => {\n  const rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1)\n}\n\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */\nexport const findCurrentLineRange = (\n  editor: ReactEditor,\n  parentRange: Range\n): Range => {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, { at: parentRange }))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    areRangesSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      areRangesSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport { EDITOR_TO_ON_CHANGE, NODE_TO_KEY } from '../utils/weak-maps'\nimport { isDOMText, getPlainText } from '../utils/dom'\nimport { findCurrentLineRange } from '../utils/lines'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange, deleteBackward } = e\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit)\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      const parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection,\n      })\n\n      if (parentBlockEntry) {\n        const [, parentBlockPath] = parentBlockEntry\n        const parentElementRange = Editor.range(\n          editor,\n          parentBlockPath,\n          editor.selection.anchor\n        )\n\n        const currentLineRange = findCurrentLineRange(e, parentElementRange)\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, { at: currentLineRange })\n        }\n      }\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node': {\n        for (const [node, path] of Editor.levels(e, { at: op.path })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.parent(op.path),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.common(Path.parent(op.path), Path.parent(op.newPath)),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: DataTransfer) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = document.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = document.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    document.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    document.body.removeChild(div)\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    const fragment = data.getData('application/x-slate-fragment')\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return\n    }\n\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n    }\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n","// Components\n// Environment-dependent Editable\nimport { Editable as DefaultEditable } from './components/editable'\nimport { AndroidEditable } from './components/android/android-editable'\nimport { IS_ANDROID } from './utils/environment'\n\nexport const Editable = IS_ANDROID ? AndroidEditable : DefaultEditable\nexport {\n  Editable as DefaultEditable,\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n  DefaultPlaceholder,\n} from './components/editable'\nexport { AndroidEditable } from './components/android/android-editable'\nexport { DefaultElement } from './components/element'\nexport { DefaultLeaf } from './components/leaf'\nexport { Slate } from './components/slate'\n\n// Hooks\nexport { useEditor } from './hooks/use-editor'\nexport { useSlateStatic } from './hooks/use-slate-static'\nexport { useFocused } from './hooks/use-focused'\nexport { useReadOnly } from './hooks/use-read-only'\nexport { useSelected } from './hooks/use-selected'\nexport { useSlate } from './hooks/use-slate'\n\n// Plugin\nexport { ReactEditor } from './plugin/react-editor'\nexport { withReact } from './plugin/with-react'\n"]},"metadata":{},"sourceType":"module"}