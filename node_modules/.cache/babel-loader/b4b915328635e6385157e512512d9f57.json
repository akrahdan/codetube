{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport actionToPath from '../pure-utils/actionToPath';\nimport nestAction from '../pure-utils/nestAction';\nimport { NOT_FOUND } from '../index';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nexport default (function (action, routesMap, prevLocation, history, notFoundPath, serializer) {\n  try {\n    var pathname = actionToPath(action, routesMap, serializer);\n    var kind = getKind(!!history.entries, pathname, history, action);\n    return nestAction(pathname, action, prevLocation, history, kind);\n  } catch (e) {\n    if (__DEV__) {\n      console.error('[redux-first-router] Internal exception when parsing action, fallback to NOT_FOUND. Original exception: ', e);\n    }\n\n    var payload = _extends({}, action.payload);\n\n    return nestAction(notFoundPath || prevLocation.pathname || '/', _extends({}, action, {\n      type: NOT_FOUND,\n      payload: payload\n    }), prevLocation, history);\n  }\n}); // REACT NATIVE FEATURE:\n// emulate npm `history` package and `historyCreateAction`  so that actions\n// and state indicate the user went back or forward. The idea is if you are\n// going back or forward to a route you were just at, apps can determine\n// from `state.location.kind === 'back|next'` and `action.kind` that things like\n// scroll position should be restored.\n// NOTE: for testability, history is also returned to make this a pure function\n\nvar getKind = function getKind(isMemoryHistory, pathname, history, action) {\n  var kind = action.meta && action.meta.location && action.meta.location.kind;\n\n  if (kind) {\n    return kind;\n  } else if (!isMemoryHistory) {\n    return 'push';\n  }\n\n  if (goingBack(history, pathname)) {\n    history.index--;\n    return 'back';\n  } else if (goingForward(history, pathname)) {\n    history.index++;\n    return 'next';\n  }\n\n  return 'push';\n};\n\nvar goingBack = function goingBack(hist, path) {\n  var prev = hist.entries[hist.index - 1];\n  return prev && prev.pathname === path;\n};\n\nvar goingForward = function goingForward(hist, path) {\n  var next = hist.entries[hist.index + 1];\n  return next && next.pathname === path;\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/redux-first-router/dist/es/action-creators/middlewareCreateAction.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","actionToPath","nestAction","NOT_FOUND","__DEV__","process","env","NODE_ENV","action","routesMap","prevLocation","history","notFoundPath","serializer","pathname","kind","getKind","entries","e","console","error","payload","type","isMemoryHistory","meta","location","goingBack","index","goingForward","hist","path","prev","next"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport actionToPath from '../pure-utils/actionToPath';\n\nimport nestAction from '../pure-utils/nestAction';\nimport { NOT_FOUND } from '../index';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nexport default (function (action, routesMap, prevLocation, history, notFoundPath, serializer) {\n  try {\n    var pathname = actionToPath(action, routesMap, serializer);\n    var kind = getKind(!!history.entries, pathname, history, action);\n    return nestAction(pathname, action, prevLocation, history, kind);\n  } catch (e) {\n    if (__DEV__) {\n      console.error('[redux-first-router] Internal exception when parsing action, fallback to NOT_FOUND. Original exception: ', e);\n    }\n\n    var payload = _extends({}, action.payload);\n\n    return nestAction(notFoundPath || prevLocation.pathname || '/', _extends({}, action, { type: NOT_FOUND, payload: payload }), prevLocation, history);\n  }\n});\n\n// REACT NATIVE FEATURE:\n// emulate npm `history` package and `historyCreateAction`  so that actions\n// and state indicate the user went back or forward. The idea is if you are\n// going back or forward to a route you were just at, apps can determine\n// from `state.location.kind === 'back|next'` and `action.kind` that things like\n// scroll position should be restored.\n// NOTE: for testability, history is also returned to make this a pure function\nvar getKind = function getKind(isMemoryHistory, pathname, history, action) {\n  var kind = action.meta && action.meta.location && action.meta.location.kind;\n\n  if (kind) {\n    return kind;\n  } else if (!isMemoryHistory) {\n    return 'push';\n  }\n\n  if (goingBack(history, pathname)) {\n    history.index--;\n    return 'back';\n  } else if (goingForward(history, pathname)) {\n    history.index++;\n    return 'next';\n  }\n\n  return 'push';\n};\n\nvar goingBack = function goingBack(hist, path) {\n  var prev = hist.entries[hist.index - 1];\n  return prev && prev.pathname === path;\n};\n\nvar goingForward = function goingForward(hist, path) {\n  var next = hist.entries[hist.index + 1];\n  return next && next.pathname === path;\n};"]},"metadata":{},"sourceType":"module"}