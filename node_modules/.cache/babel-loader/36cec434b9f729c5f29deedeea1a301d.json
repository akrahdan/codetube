{"ast":null,"code":"import{createApi,fetchBaseQuery}from\"@reduxjs/toolkit/query/react\";import cookie from\"react-cookies\";export var authApi=createApi({baseQuery:fetchBaseQuery({baseUrl:\"/\",prepareHeaders:function prepareHeaders(headers){var csrfToken=cookie.load(\"csrftoken\");var token=localStorage.getItem('token');if(csrfToken){headers.set(\"X-CSRFToken\",csrfToken);}if(token){headers.set(\"Authorization\",\"Token \".concat(token));}headers.set(\"Content-Type\",\"application/json\");return headers;}}),tagTypes:[\"Login\",\"Signup\",\"Logout\",\"User\",\"Token\"],endpoints:function endpoints(build){return{login:build.mutation({query:function query(body){return{url:\"rest-auth/login/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),signup:build.mutation({query:function query(body){return{url:\"rest-auth/registration/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),logout:build.mutation({query:function query(body){return{url:\"rest-auth/logout/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),getCurrentUser:build.query({query:function query(){return{url:\"rest-auth/user/\",method:\"GET\",responseHandler:function responseHandler(response){return response.json();}};}})};}});var getCurrentUser=authApi.endpoints.getCurrentUser;export{getCurrentUser};var useLoginMutation=authApi.useLoginMutation,useSignupMutation=authApi.useSignupMutation,useLogoutMutation=authApi.useLogoutMutation,useGetCurrentUserQuery=authApi.useGetCurrentUserQuery;export{useLoginMutation,useSignupMutation,useLogoutMutation,useGetCurrentUserQuery};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/auth.ts"],"names":["createApi","fetchBaseQuery","cookie","authApi","baseQuery","baseUrl","prepareHeaders","headers","csrfToken","load","token","localStorage","getItem","set","tagTypes","endpoints","build","login","mutation","query","body","url","method","responseHandler","response","json","signup","logout","getCurrentUser","useLoginMutation","useSignupMutation","useLogoutMutation","useGetCurrentUserQuery"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,KAA0C,8BAA1C,CAEA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CAuCA,MAAO,IAAMC,CAAAA,OAAO,CAAGH,SAAS,CAAC,CAC/BI,SAAS,CAAEH,cAAc,CAAC,CACxBI,OAAO,CAAE,GADe,CAExBC,cAAc,CAAE,wBAACC,OAAD,CAAa,CAC3B,GAAMC,CAAAA,SAAS,CAAGN,MAAM,CAACO,IAAP,CAAY,WAAZ,CAAlB,CACA,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAIJ,SAAJ,CAAe,CACbD,OAAO,CAACM,GAAR,CAAY,aAAZ,CAA2BL,SAA3B,EAED,CACD,GAAGE,KAAH,CAAU,CACRH,OAAO,CAACM,GAAR,CAAY,eAAZ,iBAAsCH,KAAtC,GACD,CAEDH,OAAO,CAACM,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EAEA,MAAON,CAAAA,OAAP,CACD,CAhBuB,CAAD,CADM,CAmB/BO,QAAQ,CAAE,CAAC,OAAD,CAAU,QAAV,CAAoB,QAApB,CAA8B,MAA9B,CAAsC,OAAtC,CAnBqB,CAoB/BC,SAAS,CAAE,mBAACC,KAAD,QAAY,CACrBC,KAAK,CAAED,KAAK,CAACE,QAAN,CAAsC,CAC3CC,KAAK,CAAE,eAACC,IAAD,QAAW,CAChBC,GAAG,CAAE,kBADW,CAEhBC,MAAM,CAAE,MAFQ,CAGhBF,IAAI,CAAJA,IAHgB,CAIhBG,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAJD,CAAX,EADoC,CAAtC,CADc,CASrBC,MAAM,CAAEV,KAAK,CAACE,QAAN,CAAwC,CAC9CC,KAAK,CAAE,eAACC,IAAD,QAAW,CAChBC,GAAG,CAAE,yBADW,CAEhBC,MAAM,CAAE,MAFQ,CAGhBF,IAAI,CAAJA,IAHgB,CAIhBG,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAJD,CAAX,EADuC,CAAxC,CATa,CAiBrBE,MAAM,CAAEX,KAAK,CAACE,QAAN,CAAgD,CACtDC,KAAK,CAAE,eAACC,IAAD,QAAW,CAChBC,GAAG,CAAE,mBADW,CAEhBC,MAAM,CAAE,MAFQ,CAGhBF,IAAI,CAAJA,IAHgB,CAIhBG,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAJD,CAAX,EAD+C,CAAhD,CAjBa,CAyBrBG,cAAc,CAAEZ,KAAK,CAACG,KAAN,CAAwB,CACtCA,KAAK,CAAE,uBAAO,CACZE,GAAG,CAAE,iBADO,CAEZC,MAAM,CAAE,KAFI,CAIZC,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAJL,CAAP,EAD+B,CAAxB,CAzBK,CAAZ,EApBoB,CAAD,CAAzB,C,GAwDQG,CAAAA,c,CAAmBzB,OAAO,CAACY,S,CAA3Ba,c,2BAEAC,CAAAA,gB,CAAqF1B,O,CAArF0B,gB,CAAkBC,iB,CAAmE3B,O,CAAnE2B,iB,CAAmBC,iB,CAAgD5B,O,CAAhD4B,iB,CAAmBC,sB,CAA6B7B,O,CAA7B6B,sB","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport internal from \"stream\";\n\nexport interface Login {\n  email: string;\n  password: string;\n  csrfmiddlewaretoken:string;\n}\n\nexport interface Signup {\n  email: string;\n  username: string;\n  password1: string;\n  password2: string;\n  csrfmiddlewaretoken:string;\n}\n\nexport interface Token {\n  key: string;\n}\n\nexport interface User {\n  pk:number;\n  email: string;\n  username:string;\n  first_name:string;\n  last_name:string;\n  \n}\n\nexport interface Logout {\n \n  csrfmiddlewaretoken:string;\n}\n\nexport interface LogoutResponse {\n  detail: string;\n}\n\nexport const authApi = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n      const token = localStorage.getItem('token')\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n        \n      }\n      if(token) {\n        headers.set(\"Authorization\", `Token ${token}`)\n      }\n      \n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"Login\", \"Signup\", \"Logout\", \"User\", \"Token\"],\n  endpoints: (build) => ({\n    login: build.mutation<Token, Partial<Login>>({\n      query: (body) => ({\n        url: \"rest-auth/login/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    signup: build.mutation<Signup, Partial<Signup>>({\n      query: (body) => ({\n        url: \"rest-auth/registration/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    logout: build.mutation<Logout, Partial<LogoutResponse>>({\n      query: (body) => ({\n        url: \"rest-auth/logout/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    getCurrentUser: build.query<User, void>({\n      query: () => ({\n        url: \"rest-auth/user/\",\n        method: \"GET\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n  }),\n});\n\nexport const { getCurrentUser } = authApi.endpoints;\n\nexport const { useLoginMutation, useSignupMutation, useLogoutMutation, useGetCurrentUserQuery,  } = authApi;\n"]},"metadata":{},"sourceType":"module"}