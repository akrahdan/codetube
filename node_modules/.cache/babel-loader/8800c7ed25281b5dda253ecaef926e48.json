{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState, DefaultResolutions } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nimport { selectVideoFormat } from \"portal/scenes/CoursePlayer/utilities/video-format-support\";\nimport { coursesApi } from \"services/courses\";\nconst validModes = Object.values(InteractionModes);\nconst mediaType = selectVideoFormat();\nconsole.log(\"VideoFormat: \", DefaultResolutions[mediaType][0]);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  course: null,\n  muted: false,\n  currentUrl: null,\n  currentUrlIndex: 0,\n  previousVolume: null,\n  title: null,\n  subtitle: null,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: DefaultResolutions[mediaType][0],\n  supportedResolutions: null,\n  mediaType,\n  settings: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n        console.log(\"Play: \", state.overlay);\n      }\n\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n    pause: (state, action) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n        console.log(\"Pause: \", state.overlay);\n      }\n\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setCurrentUrl: (state, action) => {\n      state.currentUrl = action.payload;\n    },\n    setCurrentUrlIndex: (state, action) => {\n      state.currentUrlIndex = action.payload;\n    },\n    setPlaying: (state, action) => {\n      state.playing = action.payload;\n    },\n    setTitle: (state, action) => {\n      state.title = action.payload;\n    },\n    setSubtitle: (state, action) => {\n      state.subtitle = action.payload;\n    },\n    syncSettings: (state, action) => {\n      state.settings = action.payload;\n    },\n    setMediaType: (state, action) => {\n      state.mediaType = action.payload;\n    },\n    setPreferredResolutions: (state, action) => {\n      state.preferredResolutions = action.payload;\n    },\n    setCurrentResolution: (state, action) => {\n      state.currentResolution = action.payload;\n    },\n    setSupportedResolutions: (state, action) => {\n      state.supportedResolutions = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setContainerSize: (state, action) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize);\n\n      if (containerSize.width === 0 && containerSize.height === 0 && state.containerSize) {\n        containerSize = state.containerSize;\n      }\n\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint;\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setAutoplay: (state, action) => {\n      state.userAutoplaySetting = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(coursesApi.endpoints.fetchPlayerCourse.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.course = payload;\n    });\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setMediaType,\n  syncSettings,\n  setCurrentUrl,\n  setCurrentUrlIndex,\n  setSubtitle,\n  setTitle\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;\nexport const selectPlayerCourse = state => state.player.course;\nexport const selectDuration = state => state.player.course;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","DefaultResolutions","buildClipProgress","calculateAspectRatio","findBreakpoint","selectVideoFormat","coursesApi","validModes","Object","values","mediaType","console","log","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","course","muted","currentUrl","currentUrlIndex","previousVolume","title","subtitle","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","clipProgress","buffering","containerSize","breakpoint","playerSize","layout","loading","userAutoplaySetting","currentResolution","supportedResolutions","settings","playerSlice","name","reducers","play","state","action","icon","payload","key","Math","random","fade","pause","setPlaybackSpeed","setCurrentUrl","setCurrentUrlIndex","setPlaying","setTitle","setSubtitle","syncSettings","setMediaType","setPreferredResolutions","preferredResolutions","setCurrentResolution","setSupportedResolutions","setActiveMenu","setVolumeSliderActive","setVolume","clamped","volume","setPreviousVolume","setInteractionMode","Error","join","interactionMode","showUI","visible","toggleFullscreen","fullscreenState","FULLSCREEN","NORMAL","hideUI","setDuration","setTime","setContainerSize","width","height","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setLoading","setAutoplay","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","fastRewind","startTime","rewindTime","toggleMute","extraReducers","builder","addMatcher","endpoints","fetchPlayerCourse","matchFulfilled","selectPlayer","player","actions","togglePlayPause","dispatch","getState","reducer","selectPlayerCourse","selectDuration"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n  DefaultResolutions,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nimport { selectVideoFormat } from \"portal/scenes/CoursePlayer/utilities/video-format-support\";\nimport {\n  CoursePlayerResponse,\n  CourseResponse,\n  coursesApi,\n} from \"services/courses\";\nimport { Url } from \"url\";\n\nconst validModes = Object.values(InteractionModes);\nconst mediaType = selectVideoFormat();\nconsole.log(\"VideoFormat: \", DefaultResolutions[mediaType][0]);\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  currentUrl: string;\n  title: string;\n  subtitle: string;\n  currentUrlIndex: number;\n  course: CoursePlayerResponse;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  resolution: ResolutionH;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: number;\n  buffering: boolean;\n  containerSize: ContainerSize;\n  breakpoint: ContainerSize;\n  playerSize: ContainerSize;\n  layout: string;\n  loading: boolean;\n  userAutoplaySetting: boolean;\n  preferredResolutions: any;\n  currentResolution: any;\n  supportedResolutions: Resolution[];\n  mediaType: string;\n  settings: any;\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\ninterface ResolutionH {\n  width: number;\n  height: number;\n  index: number;\n}\ninterface Resolution {\n  width?: string;\n  height: string;\n  index: number;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  course: null,\n  muted: false,\n  currentUrl: null,\n  currentUrlIndex: 0,\n  previousVolume: null,\n  title: null,\n  subtitle: null,\n\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: DefaultResolutions[mediaType][0],\n  supportedResolutions: null,\n  mediaType,\n  settings: null,\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n        console.log(\"Play: \", state.overlay);\n      }\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n\n    pause: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n        console.log(\"Pause: \", state.overlay);\n      }\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setCurrentUrl: (state, action: PayloadAction<string>) => {\n      state.currentUrl = action.payload;\n    },\n\n    setCurrentUrlIndex: (state, action: PayloadAction<number>) => {\n      state.currentUrlIndex = action.payload;\n    },\n\n    setPlaying: (state, action: PayloadAction<boolean>) => {\n      state.playing = action.payload;\n    },\n    setTitle: (state, action: PayloadAction<string>) => {\n      state.title = action.payload;\n    },\n\n    setSubtitle: (state, action: PayloadAction<string>) => {\n      state.subtitle = action.payload;\n    },\n\n    syncSettings: (state, action: PayloadAction<any>) => {\n      state.settings = action.payload;\n    },\n\n    setMediaType: (state, action: PayloadAction<string>) => {\n      state.mediaType = action.payload;\n    },\n\n    setPreferredResolutions: (state, action: PayloadAction<any>) => {\n      state.preferredResolutions = action.payload;\n    },\n\n    setCurrentResolution: (state, action: PayloadAction<any>) => {\n      state.currentResolution = action.payload;\n    },\n\n    setSupportedResolutions: (state, action: PayloadAction<Resolution[]>) => {\n      state.supportedResolutions = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setContainerSize: (state, action: PayloadAction<ContainerSize>) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize);\n      if (\n        containerSize.width === 0 &&\n        containerSize.height === 0 &&\n        state.containerSize\n      ) {\n        containerSize = state.containerSize;\n      }\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint;\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n\n    setAutoplay: (state, action: PayloadAction<boolean>) => {\n      state.userAutoplaySetting = action.payload;\n    },\n\n    setClipProgress: (state, action: PayloadAction<number>) => {\n      state.clipProgress = buildClipProgress(\n        state.clipProgress,\n        action.payload,\n        state.duration\n      );\n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      coursesApi.endpoints.fetchPlayerCourse.matchFulfilled,\n      (state, { payload }) => {\n        state.course = payload;\n      }\n    );\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setMediaType,\n  syncSettings,\n  setCurrentUrl,\n  setCurrentUrlIndex,\n  setSubtitle,\n  setTitle\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n\nexport const selectPlayerCourse = (state: RootState) => state.player.course;\nexport const selectDuration = (state: RootState) => state.player.course;\n"]},"metadata":{},"sourceType":"module"}