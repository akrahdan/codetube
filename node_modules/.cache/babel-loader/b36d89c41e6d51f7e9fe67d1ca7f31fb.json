{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/GridFormInputGroup/GridFormRadioGroupInput/index.tsx\";\nimport { isString } from 'lodash';\nimport React from 'react';\nimport { Radio, RadioGroup } from '../../../Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GridFormRadioGroupInput = ({\n  className,\n  field,\n  register,\n  setValue,\n  showRequired\n}) => {\n  var _field$ariaLabel;\n\n  const ariaLabel = (_field$ariaLabel = field.ariaLabel) !== null && _field$ariaLabel !== void 0 ? _field$ariaLabel : isString(field.label) ? field.label : undefined;\n  return /*#__PURE__*/_jsxDEV(RadioGroup, {\n    className: className,\n    htmlForPrefix: field.name,\n    name: field.name,\n    role: \"radiogroup\",\n    \"aria-label\": ariaLabel,\n    \"aria-required\": showRequired,\n    onChange: event => {\n      var _field$onUpdate;\n\n      const {\n        value\n      } = event.target;\n      setValue(field.name, value);\n      (_field$onUpdate = field.onUpdate) === null || _field$onUpdate === void 0 ? void 0 : _field$onUpdate.call(field, value);\n    },\n    children: field.options.map(({\n      label,\n      value\n    }) => /*#__PURE__*/_jsxDEV(Radio, {\n      disabled: field.disabled,\n      label: label,\n      ref: register(field.validation),\n      value: value,\n      id: field.id\n    }, value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = GridFormRadioGroupInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridFormRadioGroupInput\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/GridFormInputGroup/GridFormRadioGroupInput/index.tsx"],"names":["isString","React","Radio","RadioGroup","GridFormRadioGroupInput","className","field","register","setValue","showRequired","ariaLabel","label","undefined","name","event","value","target","onUpdate","options","map","disabled","validation","id"],"mappings":";AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,eAAlC;;AAWA,OAAO,MAAMC,uBAA+D,GAAG,CAAC;AAC9EC,EAAAA,SAD8E;AAE9EC,EAAAA,KAF8E;AAG9EC,EAAAA,QAH8E;AAI9EC,EAAAA,QAJ8E;AAK9EC,EAAAA;AAL8E,CAAD,KAMzE;AAAA;;AACJ,QAAMC,SAA6B,uBACjCJ,KAAK,CAACI,SAD2B,+DACbV,QAAQ,CAACM,KAAK,CAACK,KAAP,CAAR,GAAwBL,KAAK,CAACK,KAA9B,GAAsCC,SAD5D;AAGA,sBACE,QAAC,UAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,aAAa,EAAEC,KAAK,CAACO,IAFvB;AAGE,IAAA,IAAI,EAAEP,KAAK,CAACO,IAHd;AAIE,IAAA,IAAI,EAAC,YAJP;AAKE,kBAAYH,SALd;AAME,qBAAeD,YANjB;AAOE,IAAA,QAAQ,EAAGK,KAAD,IAAW;AAAA;;AACnB,YAAM;AAAEC,QAAAA;AAAF,UAAYD,KAAK,CAACE,MAAxB;AACAR,MAAAA,QAAQ,CAACF,KAAK,CAACO,IAAP,EAAaE,KAAb,CAAR;AACA,yBAAAT,KAAK,CAACW,QAAN,yEAAAX,KAAK,EAAYS,KAAZ,CAAL;AACD,KAXH;AAAA,cAaGT,KAAK,CAACY,OAAN,CAAcC,GAAd,CAAkB,CAAC;AAAER,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAD,kBACjB,QAAC,KAAD;AACE,MAAA,QAAQ,EAAET,KAAK,CAACc,QADlB;AAGE,MAAA,KAAK,EAAET,KAHT;AAIE,MAAA,GAAG,EAAEJ,QAAQ,CAACD,KAAK,CAACe,UAAP,CAJf;AAKE,MAAA,KAAK,EAAEN,KALT;AAME,MAAA,EAAE,EAAET,KAAK,CAACgB;AANZ,OAEOP,KAFP;AAAA;AAAA;AAAA;AAAA,YADD;AAbH;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CApCM;KAAMX,uB","sourcesContent":["import { isString } from 'lodash';\nimport React from 'react';\nimport { UseFormMethods } from 'react-hook-form';\n\nimport { Radio, RadioGroup } from '../../../Form';\nimport { GridFormRadioGroupField } from '../../types';\n\nexport type GridFormRadioGroupInputProps = {\n  className?: string;\n  field: GridFormRadioGroupField;\n  register: UseFormMethods['register'];\n  setValue: (name: string, value: string) => void;\n  showRequired?: boolean;\n};\n\nexport const GridFormRadioGroupInput: React.FC<GridFormRadioGroupInputProps> = ({\n  className,\n  field,\n  register,\n  setValue,\n  showRequired,\n}) => {\n  const ariaLabel: string | undefined =\n    field.ariaLabel ?? (isString(field.label) ? field.label : undefined);\n\n  return (\n    <RadioGroup\n      className={className}\n      htmlForPrefix={field.name}\n      name={field.name}\n      role=\"radiogroup\"\n      aria-label={ariaLabel}\n      aria-required={showRequired}\n      onChange={(event) => {\n        const { value } = event.target;\n        setValue(field.name, value);\n        field.onUpdate?.(value);\n      }}\n    >\n      {field.options.map(({ label, value }) => (\n        <Radio\n          disabled={field.disabled}\n          key={value}\n          label={label}\n          ref={register(field.validation)}\n          value={value}\n          id={field.id}\n        />\n      ))}\n    </RadioGroup>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}