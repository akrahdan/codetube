{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly';\nimport { useTheme } from '@pluralsight/ps-design-system-theme';\nimport glamorDefault, * as glamorExports from 'glamor';\nimport React from 'react';\nimport stylesheet from '../css/index';\nvar glamor = glamorDefault || glamorExports;\nvar styles = {\n  label: function (themeName) {\n    return glamor.css(stylesheet['psds-dropdown__label'], stylesheet[\".psds-dropdown__label.psds-theme--\" + themeName]);\n  }\n};\nexport var Label = function (props) {\n  var themeName = useTheme();\n  return React.createElement(\"label\", null, props.label ? React.createElement(\"span\", __assign({}, styles.label(themeName)), props.label) : React.createElement(ScreenReaderOnly, {\n    as: \"span\"\n  }, \"Dropdown\"));\n};\nLabel.displayName = 'Dropdown.Label';","map":{"version":3,"sources":["../../../src/react/label.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,gBAAP,MAA6B,gDAA7B;AACA,SAEE,QAFF,QAGO,qCAHP;AAKA,OAAO,aAAP,EAAsB,KAAK,aAA3B,MAA8C,QAA9C;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAP,MAAuB,cAAvB;AAEA,IAAM,MAAM,GAAG,aAAa,IAAI,aAAhC;AAEA,IAAM,MAAM,GAAG;AACb,EAAA,KAAK,EAAE,UAAC,SAAD,EAAsC;AAC3C,WAAA,MAAM,CAAC,GAAP,CACE,UAAU,CAAC,sBAAD,CADZ,EAEE,UAAU,CAAC,uCAAqC,SAAtC,CAFZ,CAAA;AAGC;AALU,CAAf;AAYA,OAAO,IAAM,KAAK,GAAyB,UAAA,KAAA,EAAK;AAC9C,MAAM,SAAS,GAAG,QAAQ,EAA1B;AACA,SACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EACG,KAAK,CAAC,KAAN,GACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAU,MAAM,CAAC,KAAP,CAAa,SAAb,CAAV,CAAA,EAAoC,KAAK,CAAC,KAA1C,CADD,GAGC,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;AAAC,IAAA,EAAE,EAAC;AAAJ,GAAjB,EAA2B,UAA3B,CAJJ,CADF;AASD,CAXM;AAaP,KAAK,CAAC,WAAN,GAAoB,gBAApB","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly';\nimport { useTheme } from '@pluralsight/ps-design-system-theme';\nimport glamorDefault, * as glamorExports from 'glamor';\nimport React from 'react';\nimport stylesheet from '../css/index';\nvar glamor = glamorDefault || glamorExports;\nvar styles = {\n    label: function (themeName) {\n        return glamor.css(stylesheet['psds-dropdown__label'], stylesheet[\".psds-dropdown__label.psds-theme--\" + themeName]);\n    }\n};\nexport var Label = function (props) {\n    var themeName = useTheme();\n    return (React.createElement(\"label\", null, props.label ? (React.createElement(\"span\", __assign({}, styles.label(themeName)), props.label)) : (React.createElement(ScreenReaderOnly, { as: \"span\" }, \"Dropdown\"))));\n};\nLabel.displayName = 'Dropdown.Label';\n//# sourceMappingURL=label.js.map"]},"metadata":{},"sourceType":"module"}