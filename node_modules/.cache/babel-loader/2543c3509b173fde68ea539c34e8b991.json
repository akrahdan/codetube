{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/LayoutMenu/AccordionMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport { AccordionArea, Anchor, Box, Text } from '@codecademy/gamut';\nimport { MiniChevronDownIcon } from '@codecademy/gamut-icons';\nimport styled from '@emotion/styled';\nimport React, { useState } from 'react';\nimport { system, transitionConcat } from '@codecademy/gamut-styles';\nimport { SectionItemLink } from './SectionItemLink';\nimport { SelectedSectionItem } from './SelectedSectionItem'; // this is needed to add a few pixels of extra space for the left side of the focus-visible outline\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledAccordionArea = styled(AccordionArea)`\n  padding-bottom: ${({\n  theme\n}) => theme.spacing[32]};\n  position: relative;\n  left: -4px;\n`;\n_c = StyledAccordionArea;\nconst ExpandChevron = styled(MiniChevronDownIcon)(system.css({\n  transform: 'rotate(0deg)',\n  transition: transitionConcat(['transform'], 'slow', 'ease-out')\n}), system.states({\n  expanded: {\n    transform: 'rotate(180deg)'\n  }\n}));\nexport const AccordionMenu = ({\n  section,\n  onSectionToggle,\n  onItemClick,\n  selectedItem\n}) => {\n  _s();\n\n  const [expanded, setExpanded] = useState(true);\n  return /*#__PURE__*/_jsxDEV(StyledAccordionArea, {\n    expanded: expanded,\n    top: /*#__PURE__*/_jsxDEV(Anchor, {\n      variant: \"interface\",\n      width: \"max-content\",\n      py: 12,\n      px: 4,\n      onClick: () => {\n        onSectionToggle(section.slug);\n        setExpanded(prev => !prev);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        variant: \"title-xs\",\n        children: section.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ExpandChevron, {\n        ml: 12,\n        size: 14,\n        expanded: expanded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this),\n    children: section.items.map(item => /*#__PURE__*/_jsxDEV(Box, {\n      py: 8,\n      px: 4,\n      children: selectedItem === item.slug ? /*#__PURE__*/_jsxDEV(SelectedSectionItem, {\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(SectionItemLink, {\n        href: item.href,\n        onClick: event => {\n          item.onClick(event);\n          onItemClick();\n        },\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, item.slug, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccordionMenu, \"NZEs4N34I2vU569ODzuIjdsqMlo=\");\n\n_c2 = AccordionMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledAccordionArea\");\n$RefreshReg$(_c2, \"AccordionMenu\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/LayoutMenu/AccordionMenu.tsx"],"names":["AccordionArea","Anchor","Box","Text","MiniChevronDownIcon","styled","React","useState","system","transitionConcat","SectionItemLink","SelectedSectionItem","StyledAccordionArea","theme","spacing","ExpandChevron","css","transform","transition","states","expanded","AccordionMenu","section","onSectionToggle","onItemClick","selectedItem","setExpanded","slug","prev","title","items","map","item","href","event","onClick"],"mappings":"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","sourcesContent":["import { AccordionArea, Anchor, Box, Text } from '@codecademy/gamut';\nimport { MiniChevronDownIcon } from '@codecademy/gamut-icons';\nimport styled from '@emotion/styled';\nimport React, { useState } from 'react';\n\n\nimport { system, transitionConcat } from '@codecademy/gamut-styles';\nimport { SectionItemLink } from './SectionItemLink';\nimport { SelectedSectionItem } from './SelectedSectionItem';\n\n// this is needed to add a few pixels of extra space for the left side of the focus-visible outline\n\nconst StyledAccordionArea = styled(AccordionArea)`\n  padding-bottom: ${({ theme }) => theme.spacing[32]};\n  position: relative;\n  left: -4px;\n`;\n\nconst ExpandChevron = styled(MiniChevronDownIcon)(\n  system.css({\n    transform: 'rotate(0deg)',\n    transition: transitionConcat(['transform'], 'slow', 'ease-out'),\n  }),\n  system.states({\n    expanded: { transform: 'rotate(180deg)' },\n  })\n);\n\nexport type SectionItem = {\n  title: string;\n  slug: string;\n  href: string;\n  onClick: (event: React.MouseEvent) => void;\n};\n\nexport type Section = {\n  title: string;\n  slug: string;\n  items: SectionItem[];\n};\n\nexport type AccordionMenuProps = {\n  section: Section;\n  onSectionToggle: (sectionSlug: string) => void;\n  onItemClick: () => void;\n  selectedItem?: string;\n};\n\nexport const AccordionMenu: React.FC<AccordionMenuProps> = ({\n  section,\n  onSectionToggle,\n  onItemClick,\n  selectedItem,\n}) => {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <StyledAccordionArea\n      expanded={expanded}\n      top={\n        <Anchor\n          variant=\"interface\"\n          width=\"max-content\"\n          py={12}\n          px={4}\n          onClick={() => {\n            onSectionToggle(section.slug);\n            setExpanded((prev) => !prev);\n          }}\n        >\n          <Text variant=\"title-xs\">{section.title}</Text>\n          <ExpandChevron ml={12} size={14} expanded={expanded} />\n        </Anchor>\n      }\n    >\n      {section.items.map((item) => (\n        <Box key={item.slug} py={8} px={4}>\n          {selectedItem === item.slug ? (\n            <SelectedSectionItem>{item.title}</SelectedSectionItem>\n          ) : (\n            <SectionItemLink\n              href={item.href}\n              onClick={(event) => {\n                item.onClick(event);\n                onItemClick();\n              }}\n            >\n              {item.title}\n            </SectionItemLink>\n          )}\n        </Box>\n      ))}\n    </StyledAccordionArea>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}