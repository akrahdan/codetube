{"ast":null,"code":"import*as sharedRouteActions from'./sharedRouteActions';export var getRouteMetaForLocation=function getRouteMetaForLocation(routesMeta,locationType,statusCode){var route=function(){switch(statusCode){case 404:return routesMeta[\"\".concat(sharedRouteActions.error404)];case 500:return routesMeta[\"\".concat(sharedRouteActions.error500)];}return routesMeta[locationType];}();if(!route){throw new Error(\"Could not find equivalent route for '\".concat(locationType,\"'.\"));}return route;};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/location/routing.tsx"],"names":["sharedRouteActions","getRouteMetaForLocation","routesMeta","locationType","statusCode","route","error404","error500","Error"],"mappings":"AAEA,MAAO,GAAKA,CAAAA,kBAAZ,KAAoC,sBAApC,CAgBA,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CACrCC,UADqC,CAErCC,YAFqC,CAGrCC,UAHqC,CAIlC,CACH,GAAMC,CAAAA,KAAK,CAAI,UAAM,CACnB,OAAQD,UAAR,EACE,IAAK,IAAL,CACE,MAAOF,CAAAA,UAAU,WAAIF,kBAAkB,CAACM,QAAvB,EAAjB,CAEF,IAAK,IAAL,CACE,MAAOJ,CAAAA,UAAU,WAAIF,kBAAkB,CAACO,QAAvB,EAAjB,CALJ,CAQA,MAAOL,CAAAA,UAAU,CAACC,YAAD,CAAjB,CACD,CAVa,EAAd,CAYA,GAAI,CAACE,KAAL,CAAY,CACV,KAAM,IAAIG,CAAAA,KAAJ,gDAAkDL,YAAlD,OAAN,CACD,CAED,MAAOE,CAAAA,KAAP,CACD,CAtBM","sourcesContent":["import React from 'react';\n\nimport * as sharedRouteActions from './sharedRouteActions';\n\nexport type MetaScene = {\n  portalData: unknown;\n};\n\nexport type RouteMeta = {\n  scene: React.ComponentType<MetaScene & any>;\n\n  /**\n   * The page_name to use for visit tracking events\n   * Specify undefined if the scene will handle visit tracking\n   */\n  pageName: string | undefined;\n};\n\nexport const getRouteMetaForLocation = (\n  routesMeta: Record<string, RouteMeta>,\n  locationType: string,\n  statusCode?: number\n) => {\n  const route = (() => {\n    switch (statusCode) {\n      case 404:\n        return routesMeta[`${sharedRouteActions.error404}`];\n\n      case 500:\n        return routesMeta[`${sharedRouteActions.error500}`];\n    }\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};\n"]},"metadata":{},"sourceType":"module"}