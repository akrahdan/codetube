{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/Forms/RegistrationForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport { v4 as uuid } from 'uuid';\nimport cookie from 'react-cookies';\n// import { pushDataLayerEvent, trackUserClick } from '~/libs/eventTracking';\n// import { logger } from '~/libs/logging/logger';\nimport { passwordTips } from 'libs/passwordTips'; // import { csrf } from '~/libs/superagent-auth';\n// import { safeRedirectUrl } from '~/libs/url';\n\n// import registrationStrings from '~/localized/registration.json';\n// import { useFeatureFlag } from 'state/features/hooks';\nimport { showModal } from 'state/modals/modalSlice';\nimport { useAppDispatch } from 'store/hooks';\nimport { redirectAfterLogin } from './helpers';\nimport styles from './styles/index.module.scss';\nimport { UserSubmitKey } from './types';\nimport { VALIDATORS } from './validators';\nimport { useSignupMutation } from 'services/auth';\nimport { hideCurrentModal } from 'state/modals/modalSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RegistrationForm = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch(); // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [serializedForm, setSerializedForm] = useState();\n  const [recaptchaError, setRecaptchaError] = useState();\n  const captcha = useRef(null);\n  const {\n    emailValidation,\n    passwordValidation\n  } = useMemo(() => ({\n    emailValidation: VALIDATORS.email(),\n    passwordValidation: VALIDATORS.password()\n  }), []); // if (ssoFeatureFlag) {\n  //   return <RegistrationSSOForm onSuccess={onSuccess} />;\n  // }\n\n  const resetRecaptcha = () => {\n    setDisabled(false);\n    setRecaptchaInstanceId(uuid());\n  };\n\n  const [signup] = useSignupMutation();\n\n  const submitForm = async values => {\n    values.password2 = values.password1;\n    values.csrfmiddlewaretoken = cookie.load('csrftoken');\n    values.csrfmiddlewaretoken = cookie.load('csrftoken');\n    const user = await signup(values).unwrap();\n    localStorage.setItem('token', user.token);\n    dispatch(hideCurrentModal());\n    setDisabled(true);\n  };\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n\n\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const {\n    currentPage,\n    locationType,\n    redirectUrl\n  } = props;\n  const signingUpFromExercise = locationType === 'location/EXERCISE'; // const safeRedirect = redirectUrl && safeRedirectUrl(redirectUrl);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.registrationContainer,\n    children: [/*#__PURE__*/_jsxDEV(GridForm, {\n      className: styles.loginForm,\n      fields: [{\n        name: UserSubmitKey.EMAIL,\n        label: 'Email',\n        type: 'email',\n        defaultValue: '',\n        size: 12,\n        onUpdate\n      }, {\n        name: UserSubmitKey.USERNAME,\n        label: 'Username',\n        type: 'text',\n        defaultValue: '',\n        size: 12,\n        onUpdate\n      }, {\n        name: UserSubmitKey.PASSWORD1,\n        label: 'Password',\n        type: 'password',\n        tooltip: {\n          children: /*#__PURE__*/_jsxDEV(Markdown, {\n            text: passwordTips\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this),\n          id: 'password-tooltip',\n          alignment: 'bottom-left',\n          className: styles.tooltipContainer\n        },\n        size: 12,\n        onUpdate,\n        defaultValue: ''\n      }],\n      submit: {\n        contents: 'Create Account',\n        position: 'stretch',\n        theme: 'brand-red',\n        size: 12,\n        disabled: isDisabled || submitLocked\n      },\n      validation: \"all\",\n      onSubmit: submitForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 16,\n      children: recaptchaError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.recaptchaError,\n        children: recaptchaError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      className: styles.textDisplay,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.textCenter,\n        children: [\"Already have an account?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: styles.textLink,\n          onClick: () => dispatch(showModal('login')),\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegistrationForm, \"nubJvE41dlwug3MG14h+fRtF4YM=\", false, function () {\n  return [useAppDispatch, useMountedState, useSignupMutation];\n});\n\n_c = RegistrationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/Forms/RegistrationForm/index.tsx"],"names":["Box","GridForm","Markdown","Text","delay","React","useMemo","useRef","useState","useMountedState","v4","uuid","cookie","passwordTips","showModal","useAppDispatch","redirectAfterLogin","styles","UserSubmitKey","VALIDATORS","useSignupMutation","hideCurrentModal","RegistrationForm","onSuccess","props","dispatch","isMounted","isDisabled","setDisabled","submitLocked","setSubmitLocked","recaptchaInstanceId","setRecaptchaInstanceId","serializedForm","setSerializedForm","recaptchaError","setRecaptchaError","captcha","emailValidation","passwordValidation","email","password","resetRecaptcha","signup","submitForm","values","password2","password1","csrfmiddlewaretoken","load","user","unwrap","localStorage","setItem","token","onUpdate","currentPage","locationType","redirectUrl","signingUpFromExercise","registrationContainer","loginForm","name","EMAIL","label","type","defaultValue","size","USERNAME","PASSWORD1","tooltip","children","id","alignment","className","tooltipContainer","contents","position","theme","disabled","textDisplay","textCenter","textLink"],"mappings":"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","sourcesContent":["import { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport request from 'superagent';\nimport { v4 as uuid } from 'uuid';\nimport cookie from 'react-cookies';\nimport { OauthButtonGroup } from 'components/Forms/OauthButtonGroup';\nimport { RecaptchaWrapper } from 'components/Forms/RecaptchaWrapper';\nimport { cfdata } from 'libs/cfdata';\n// import { pushDataLayerEvent, trackUserClick } from '~/libs/eventTracking';\n// import { logger } from '~/libs/logging/logger';\nimport { passwordTips } from 'libs/passwordTips';\n// import { csrf } from '~/libs/superagent-auth';\n// import { safeRedirectUrl } from '~/libs/url';\nimport { registerPath } from 'libs/urlHelpers';\n// import registrationStrings from '~/localized/registration.json';\n// import { useFeatureFlag } from 'state/features/hooks';\n\nimport { showModal } from 'state/modals/modalSlice';\nimport { useAppDispatch } from 'store/hooks';\nimport { redirectAfterLogin, serializeRegistrationValues } from './helpers';\nimport { RegistrationSSOForm } from './RegistrationSSOForm';\nimport styles from './styles/index.module.scss';\nimport {\n  RegistrationFormProps,\n  SerializedValues,\n  SubmitValues,\n  UserSubmitKey,\n} from './types';\nimport { extractValidationErrors, VALIDATORS } from './validators';\nimport { useSignupMutation } from 'services/auth';\nimport { hideCurrentModal } from 'state/modals/modalSlice';\nexport const RegistrationForm: React.FC<RegistrationFormProps> = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  const dispatch = useAppDispatch()\n  // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [\n    serializedForm,\n    setSerializedForm,\n  ] = useState<SerializedValues | null>();\n  const [recaptchaError, setRecaptchaError] = useState<string | undefined>();\n\n  const captcha = useRef<RecaptchaWrapper | null>(null);\n\n  const { emailValidation, passwordValidation } = useMemo(\n    () => ({\n      emailValidation: VALIDATORS.email(),\n      passwordValidation: VALIDATORS.password(),\n    }),\n    []\n  );\n\n  // if (ssoFeatureFlag) {\n  //   return <RegistrationSSOForm onSuccess={onSuccess} />;\n  // }\n\n \n\n  const resetRecaptcha = () => {\n    \n    setDisabled(false);\n    setRecaptchaInstanceId(uuid());\n  };\n\n  const [ signup ] = useSignupMutation()\n\n  const submitForm = async (values) => {\n    values.password2 = values.password1\n    values.csrfmiddlewaretoken = cookie.load('csrftoken')\n    \n     values.csrfmiddlewaretoken = cookie.load('csrftoken');\n      const user = await signup(values).unwrap()\n      localStorage.setItem('token', user.token);\n      \n      dispatch(hideCurrentModal())\n      setDisabled(true);\n  }\n\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const { currentPage, locationType, redirectUrl } = props;\n  const signingUpFromExercise = locationType === 'location/EXERCISE';\n  // const safeRedirect = redirectUrl && safeRedirectUrl(redirectUrl);\n\n  return (\n    <div className={styles.registrationContainer}>\n      <GridForm\n        className={styles.loginForm}\n        fields={[\n          {\n            name: UserSubmitKey.EMAIL,\n            label: 'Email',\n            type: 'email',\n            defaultValue: '',\n            size: 12,\n            onUpdate,\n           \n          },\n\n          {\n            name: UserSubmitKey.USERNAME,\n            label: 'Username',\n            type: 'text',\n            defaultValue: '',\n            size: 12,\n            onUpdate,\n           \n          },\n          {\n            name: UserSubmitKey.PASSWORD1,\n            label: 'Password',\n            type: 'password',\n            tooltip: {\n              children: <Markdown text={passwordTips} />,\n              id: 'password-tooltip',\n              alignment: 'bottom-left',\n              className: styles.tooltipContainer,\n            },\n            size: 12,\n            onUpdate,\n            defaultValue: '',\n            \n          },\n           \n        ]}\n        submit={{\n          contents: 'Create Account',\n          position: 'stretch',\n          theme: 'brand-red',\n          size: 12,\n          disabled: isDisabled || submitLocked,\n        }}\n        validation=\"all\"\n        onSubmit={submitForm}\n      />\n      <Box pt={16}>\n        {recaptchaError && (\n          <div className={styles.recaptchaError} >\n            {recaptchaError}\n          </div>\n        )}\n        \n      </Box>\n      <Text className={styles.textDisplay} >\n        <p className={styles.textCenter}>\n          Already have an account?{\" \"}\n          <a className={styles.textLink} onClick={() => dispatch(showModal('login')) }>\n            Sign in\n          </a>\n          .\n        </p>\n      </Text>\n\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}