{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import{ArrowChevronDownIcon,MiniChevronDownIcon}from'@codecademy/gamut-icons';import{variant}from'@codecademy/gamut-styles';import{css}from'@emotion/react';import styled from'@emotion/styled';import React,{forwardRef,useMemo,useState}from'react';import{Box,FlexBox}from'../Box';import{conditionalStyles,conditionalStyleState,formFieldStyles}from'./styles/shared-system-props';import{parseSelectOptions}from'./utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var selectSizeVariants=variant({defaultVariant:'base',prop:'sizeVariant',variants:{small:{height:'2rem',px:8,py:0},base:{height:'auto',pr:48}}});var SelectBase=styled.select(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  \",\"\\n  \",\"\\n  \",\"\\n  cursor: pointer;\\n  display: block;\\n  -moz-appearance: none;\\n  -webkit-appearance: none;\\n  appearance: none;\\n\"])),formFieldStyles,conditionalStyles,selectSizeVariants);var allowClickStyle=css(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  pointer-events: none;\\n\"])));var StyledFlexbox=styled(FlexBox)(allowClickStyle);export var Select=/*#__PURE__*/forwardRef(function(_ref,ref){var className=_ref.className,defaultValue=_ref.defaultValue,options=_ref.options,error=_ref.error,id=_ref.id,sizeVariant=_ref.sizeVariant,rest=_objectWithoutProperties(_ref,[\"className\",\"defaultValue\",\"options\",\"error\",\"id\",\"sizeVariant\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),activatedStyle=_useState2[0],setActivatedStyle=_useState2[1];var changeHandler=function changeHandler(event){var _rest$onChange;rest===null||rest===void 0?void 0:(_rest$onChange=rest.onChange)===null||_rest$onChange===void 0?void 0:_rest$onChange.call(rest,event);setActivatedStyle(true);};var selectOptions=useMemo(function(){return parseSelectOptions({options:options,id:id});},[options,id]);return/*#__PURE__*/_jsxs(Box,{position:\"relative\",width:\"100%\",textColor:error?'red':'navy',minWidth:\"7rem\",className:className,children:[/*#__PURE__*/_jsx(StyledFlexbox,{pr:12,alignItems:\"center\",position:\"absolute\",right:\"0\",top:\"0\",bottom:\"0\",\"aria-hidden\":true,children:sizeVariant==='small'?/*#__PURE__*/_jsx(MiniChevronDownIcon,{size:12}):/*#__PURE__*/_jsx(ArrowChevronDownIcon,{size:16})}),/*#__PURE__*/_jsx(SelectBase,_objectSpread(_objectSpread({},rest),{},{defaultValue:defaultValue||'',id:id||rest.htmlFor,ref:ref,error:error,sizeVariant:sizeVariant,variant:conditionalStyleState(Boolean(error),activatedStyle),onChange:function onChange(event){return changeHandler(event);},children:selectOptions}))]});});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Select.tsx"],"names":["ArrowChevronDownIcon","MiniChevronDownIcon","variant","css","styled","React","forwardRef","useMemo","useState","Box","FlexBox","conditionalStyles","conditionalStyleState","formFieldStyles","parseSelectOptions","selectSizeVariants","defaultVariant","prop","variants","small","height","px","py","base","pr","SelectBase","select","allowClickStyle","StyledFlexbox","Select","ref","className","defaultValue","options","error","id","sizeVariant","rest","activatedStyle","setActivatedStyle","changeHandler","event","onChange","selectOptions","htmlFor","Boolean"],"mappings":"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","sourcesContent":["import {\n  ArrowChevronDownIcon,\n  MiniChevronDownIcon,\n} from '@codecademy/gamut-icons';\nimport { variant } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  SelectHTMLAttributes,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { Box, FlexBox } from '../Box';\nimport {\n  conditionalStyles,\n  conditionalStyleState,\n  formFieldStyles,\n} from './styles/shared-system-props';\nimport { parseSelectOptions } from './utils';\n\nexport type SelectComponentProps = Pick<\n  SelectHTMLAttributes<HTMLSelectElement>,\n  'disabled' | 'id'\n> & {\n  error?: boolean;\n  htmlFor?: string;\n  options?: string[] | Record<string, number | string>;\n};\n\nexport type SelectWrapperProps = SelectComponentProps &\n  SelectHTMLAttributes<HTMLSelectElement> & {\n    sizeVariant?: 'small' | 'base';\n  };\n\nexport interface SelectProps\n  extends SelectWrapperProps,\n    StyleProps<typeof conditionalStyles> {}\n\nconst selectSizeVariants = variant({\n  defaultVariant: 'base',\n  prop: 'sizeVariant',\n  variants: {\n    small: {\n      height: '2rem',\n      px: 8,\n      py: 0,\n    },\n    base: {\n      height: 'auto',\n      pr: 48,\n    },\n  },\n});\n\nconst SelectBase = styled.select<SelectProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  ${selectSizeVariants}\n  cursor: pointer;\n  display: block;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n`;\n\nconst allowClickStyle = css`\n  pointer-events: none;\n`;\n\nconst StyledFlexbox = styled(FlexBox)(allowClickStyle);\n\nexport const Select = forwardRef<HTMLSelectElement, SelectWrapperProps>(\n  (\n    { className, defaultValue, options, error, id, sizeVariant, ...rest },\n    ref\n  ) => {\n    const [activatedStyle, setActivatedStyle] = useState(false);\n\n    const changeHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n      rest?.onChange?.(event);\n      setActivatedStyle(true);\n    };\n\n    const selectOptions = useMemo(() => {\n      return parseSelectOptions({ options, id });\n    }, [options, id]);\n\n    return (\n      <Box\n        position=\"relative\"\n        width=\"100%\"\n        textColor={error ? 'red' : 'navy'}\n        minWidth=\"7rem\"\n        className={className}\n      >\n        <StyledFlexbox\n          pr={12}\n          alignItems=\"center\"\n          position=\"absolute\"\n          right=\"0\"\n          top=\"0\"\n          bottom=\"0\"\n          aria-hidden\n        >\n          {sizeVariant === 'small' ? (\n            <MiniChevronDownIcon size={12} />\n          ) : (\n            <ArrowChevronDownIcon size={16} />\n          )}\n        </StyledFlexbox>\n        <SelectBase\n          {...rest}\n          defaultValue={defaultValue || ''}\n          id={id || rest.htmlFor}\n          ref={ref}\n          error={error}\n          sizeVariant={sizeVariant}\n          variant={conditionalStyleState(Boolean(error), activatedStyle)}\n          onChange={(event) => changeHandler(event)}\n        >\n          {selectOptions}\n        </SelectBase>\n      </Box>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}