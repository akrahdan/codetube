{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/Coachmark/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Popover } from '../Popover';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Coachmark = ({\n  children,\n  shouldShow,\n  activeElClassName,\n  delay = 500,\n  renderPopover,\n  popoverProps\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const activeElRef = useRef(null);\n  useEffect(() => {\n    let timer;\n\n    if (shouldShow) {\n      timer = setTimeout(() => {\n        setIsOpen(shouldShow);\n      }, delay);\n    } else {\n      setIsOpen(shouldShow);\n    }\n\n    return () => clearTimeout(timer);\n  }, [shouldShow, delay]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: activeElRef,\n      className: activeElClassName,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popover, { ...popoverProps,\n      targetRef: activeElRef,\n      isOpen: isOpen,\n      children: renderPopover()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Coachmark, \"KJxelmPnOyOCNFn3IBLZTEdhMOQ=\");\n\n_c = Coachmark;\n\nvar _c;\n\n$RefreshReg$(_c, \"Coachmark\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/Coachmark/index.tsx"],"names":["React","useEffect","useRef","useState","Popover","Coachmark","children","shouldShow","activeElClassName","delay","renderPopover","popoverProps","isOpen","setIsOpen","activeElRef","timer","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAASC,OAAT,QAAsC,YAAtC;;;AA0BA,OAAO,MAAMC,SAAmC,GAAG,CAAC;AAClDC,EAAAA,QADkD;AAElDC,EAAAA,UAFkD;AAGlDC,EAAAA,iBAHkD;AAIlDC,EAAAA,KAAK,GAAG,GAJ0C;AAKlDC,EAAAA,aALkD;AAMlDC,EAAAA;AANkD,CAAD,KAO7C;AAAA;;AACJ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAU,KAAV,CAApC;AAEA,QAAMW,WAAW,GAAGZ,MAAM,CAAiB,IAAjB,CAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,KAAJ;;AACA,QAAIR,UAAJ,EAAgB;AACdQ,MAAAA,KAAK,GAAGC,UAAU,CAAC,MAAM;AACvBH,QAAAA,SAAS,CAACN,UAAD,CAAT;AACD,OAFiB,EAEfE,KAFe,CAAlB;AAGD,KAJD,MAIO;AACLI,MAAAA,SAAS,CAACN,UAAD,CAAT;AACD;;AAED,WAAO,MAAMU,YAAY,CAACF,KAAD,CAAzB;AACD,GAXQ,EAWN,CAACR,UAAD,EAAaE,KAAb,CAXM,CAAT;AAaA,sBACE;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEK,WAAV;AAAuB,MAAA,SAAS,EAAEN,iBAAlC;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,OAAD,OAAaK,YAAb;AAA2B,MAAA,SAAS,EAAEG,WAAtC;AAAmD,MAAA,MAAM,EAAEF,MAA3D;AAAA,gBACGF,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAUD,CAnCM;;GAAML,S;;KAAAA,S","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { Popover, PopoverProps } from '../Popover';\n\nexport type CoachmarkProps = {\n  /**\n   * Applied to the element to which the coachmark points.\n   */\n  activeElClassName?: string;\n  /**\n   * Amount of time (in ms) to delay rendering the coachmark.\n   * @default 500\n   */\n  delay?: number;\n  /**\n   * Whether the coachmark is rendered.\n   */\n  shouldShow: boolean;\n  /**\n   * Function that returns the contents of the coachmark.\n   */\n  renderPopover: (onDismiss?: () => void) => JSX.Element;\n  /**\n   * Props to be passed into the popover component.\n   */\n  popoverProps?: Partial<PopoverProps>;\n};\n\nexport const Coachmark: React.FC<CoachmarkProps> = ({\n  children,\n  shouldShow,\n  activeElClassName,\n  delay = 500,\n  renderPopover,\n  popoverProps,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const activeElRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (shouldShow) {\n      timer = setTimeout(() => {\n        setIsOpen(shouldShow);\n      }, delay);\n    } else {\n      setIsOpen(shouldShow);\n    }\n\n    return () => clearTimeout(timer);\n  }, [shouldShow, delay]);\n\n  return (\n    <>\n      <div ref={activeElRef} className={activeElClassName}>\n        {children}\n      </div>\n      <Popover {...popoverProps} targetRef={activeElRef} isOpen={isOpen}>\n        {renderPopover()}\n      </Popover>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}