{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/video.tsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { updateVideoViews } from \"services/courses\";\nimport { store } from 'store';\nimport { play, pause, setVolume, setTime, ready, seekEnd, seekStart, setBufferedTime, setMediaType, setOverlay, setBuffering, setFullscreen, setLoading, setAutoplay, setPlaying, setCurrentResolution, setPreferredResolutions, setSupportedResolutions, setClipProgress, setCurrentUrl, setClipId, setSubtitle, setCurrentLecture } from \"state/player/playerSlice\";\nimport css from \"./video.module.css\";\nimport { DefaultResolutions } from \"../constants\"; // import withAdobeHeartbeat from './with-adobe-heartbeat'\n\nimport { FullscreenState, HLS_SDK_URL, HLS_SDK_URL_SAFARI, MediaTypes } from \"../constants\";\nimport { getSDK } from \"../utilities/get-sdk\";\nimport { throttle } from \"../utilities/throttle\"; // import { sendPlaySuccessEvent } from '../../analytics/player-events'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst initialState = {\n  isPlaying: false,\n  reportedVolume: null,\n  reportedPlaybackRate: 1,\n  isBuffering: false,\n  canPlay: false,\n  ready: true\n};\n\nconst mapState = (state, ownProps) => ({\n  playing: state.player.playing,\n  playbackRate: state.player.playbackSpeed,\n  volume: state.player.volume,\n  buffering: state.player.buffering,\n  views: state.player.views,\n  route: ownProps.history,\n  currentLecture: state.player.currentLecture,\n  loading: state.player.loading,\n  course: state.player.course,\n  clipId: state.player.clipId,\n  muted: state.player.muted,\n  time: state.player.time,\n  currentUrl: state.player.currentUrl,\n  mediaType: state.player.mediaType,\n  overlay: state.player.overlay,\n  currentResolution: state.player.currentResolution,\n  supportedResolutions: state.player.supportedResolutions,\n  preferredResolutions: state.player.preferredResolutions\n});\n\nconst mapDispatch = dispatch => ({\n  setVolume: payload => dispatch(setVolume(payload)),\n  setDuration: payload => dispatch(setVolume(payload)),\n  setTime: payload => dispatch(setTime(payload)),\n  setBufferedTime: payload => dispatch(setBufferedTime(payload)),\n  ready: payload => dispatch(ready(payload)),\n  seekEnd: payload => dispatch(seekEnd()),\n  setNextUrl: payload => dispatch(setCurrentUrl(payload)),\n  seekStart: payload => dispatch(seekStart()),\n  play: payload => dispatch(play(payload)),\n  pause: payload => dispatch(pause(payload)),\n  setCurrentLecture: payload => dispatch(setCurrentLecture(payload)),\n  setClipId: payload => dispatch(setClipId(payload)),\n  setSubtitle: payload => dispatch(setSubtitle(payload)),\n  setBuffering: payload => dispatch(setBuffering(payload)),\n  setOverlay: payload => dispatch(setOverlay(payload)),\n  setFullscreen: payload => dispatch(setFullscreen(payload)),\n  setLoading: payload => dispatch(setLoading(payload)),\n  setPlaying: payload => dispatch(setPlaying(payload)),\n  setClipProgress: payload => dispatch(setClipProgress(payload)),\n  setAutoplay: payload => dispatch(setAutoplay(payload)),\n  setMediaType: payload => dispatch(setMediaType(payload)),\n  setCurrentResolution: payload => dispatch(setCurrentResolution(payload)),\n  setPreferredResolutions: payload => dispatch(setPreferredResolutions(payload)),\n  setSupportedResolutions: payload => dispatch(setSupportedResolutions(payload))\n});\n\nconst connector = connect(mapState, mapDispatch);\nexport class Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newReadyPromise = () => {\n      return new Promise(resolve => {\n        this.ready = () => {\n          this.setState({\n            ready: true\n          }, () => {\n            resolve();\n          });\n        };\n      });\n    };\n\n    this.isSafari = () => navigator.vendor.match(/apple/i);\n\n    this.isHlsSource = source => HLS_EXTENSIONS.test(source);\n\n    this.destroyHls = () => {\n      this.setState({\n        hlsPlaying: false\n      });\n      this.hls && this.hls.destroy();\n    };\n\n    this.startHls = async source => {\n      const {\n        setSupportedResolutions,\n        setMediaType,\n        setCurrentResolution,\n        preferredResolutions,\n        currentResolution,\n        time\n      } = this.props;\n      const sdkUrl = this.isSafari() ? HLS_SDK_URL_SAFARI : HLS_SDK_URL; //https://github.com/video-dev/hls.js/issues/1543\n\n      const Hls = await getSDK(sdkUrl, \"Hls\");\n      if (!Hls.isSupported()) return setMediaType && setMediaType(MediaTypes.MP4);\n      this.Hls = Hls;\n      this.hls = new Hls({\n        autoStartLoad: false\n      });\n      this.hls.loadSource(source);\n      const videoElement = document.getElementById(\"video-element\");\n      this.hls.attachMedia(videoElement);\n      this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {\n        this.hls.startLoad(time || 0);\n        const autoLevel = {\n          height: \"Auto\",\n          index: -1\n        };\n        const supportedResolutions = data.levels.map(r => ({\n          width: r.width,\n          height: r.height,\n          index: data.levels.indexOf(r)\n        }));\n        setSupportedResolutions && setSupportedResolutions(supportedResolutions.concat(autoLevel));\n        const preferredResolution = preferredResolutions.hls ? preferredResolutions.hls : null;\n        const newResolution = preferredResolution && supportedResolutions.find(r => preferredResolution.width === r.width && preferredResolution.height === r.height);\n\n        if (!newResolution) {\n          setCurrentResolution && setCurrentResolution(autoLevel);\n          return;\n        }\n\n        this.hls && (this.hls.currentLevel = newResolution.index);\n        const resolutionShouldChange = newResolution !== currentResolution;\n        resolutionShouldChange && setCurrentResolution && setCurrentResolution(newResolution);\n      });\n      this.hls.on(Hls.Events.ERROR, this.handleHlsError.bind(this));\n      this.hls.on(Hls.Events.MEDIA_ATTACHED, (event, data) => {\n        this.setState({\n          hlsPlaying: true\n        });\n      });\n    };\n\n    this.onHlsLevelChange = ({\n      height,\n      index\n    }) => {\n      const {\n        currentResolution,\n        setCurrentResolution\n      } = this.props;\n\n      if (height === currentResolution.height) {\n        return;\n      }\n\n      this.hls && (this.hls.currentLevel = index);\n      setCurrentResolution && setCurrentResolution({\n        height,\n        index\n      });\n    };\n\n    this.requestNewUrls = () => {\n      const {\n        setLoading\n      } = this.props;\n      setLoading && setLoading(true);\n    };\n\n    this.onMediaTypeChange = newMediaType => {\n      const {\n        setSupportedResolutions,\n        setCurrentResolution,\n        preferredResolutions\n      } = this.props;\n      console.log(\"Mediatype: \", newMediaType);\n\n      if (newMediaType !== MediaTypes.HLS) {\n        setSupportedResolutions && setSupportedResolutions(DefaultResolutions[newMediaType]);\n        const resolution = preferredResolutions && preferredResolutions[newMediaType];\n        setCurrentResolution && setCurrentResolution(resolution);\n      }\n\n      if (newMediaType === MediaTypes.WEBM || newMediaType === MediaTypes.MP4) {\n        this.requestNewUrls();\n      }\n    };\n\n    this.iosEndFullscreen = () => {\n      this.props.setFullscreen(FullscreenState.NORMAL);\n    };\n\n    this.setVolume = percent => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && percent === 0 ? player.muted = true : player.muted = false; // player.volume is read only on mobile iOS\n\n        player && isFinite(percent) && (player.volume = percent);\n      });\n    };\n\n    this.setPlaybackRate = rate => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && (player.playbackRate = rate);\n      });\n    };\n\n    this.onCaptionUpdate = e => {};\n\n    this.toggleCaptions = language => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && [...player.textTracks].forEach(track => {\n          if (track.mode === \"showing\" && track.language !== language.code) track.mode = \"disabled\";\n\n          if (track.language === language.code) {\n            track.oncuechange = this.onCaptionUpdate;\n            track.mode = \"hidden\";\n          } else {\n            track.oncuechange = null;\n          }\n        });\n      });\n    };\n\n    this.seekTo = amount => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && (player.currentTime = amount);\n      });\n    };\n\n    this.onRateChange = rate => {\n      const {\n        current: player\n      } = this.element;\n      player && this.setState({\n        reportedPlaybackRate: player.playbackRate\n      });\n    };\n\n    this.onVolumeChange = rate => {\n      const {\n        current: player\n      } = this.element;\n      player && this.setState({\n        reportedVolume: player.volume\n      });\n    };\n\n    this.onPlay = () => {\n      const {\n        setPlaying\n      } = this.props; // const { isStagingEnv, urls, currentUrlIndex, userId } = this.props\n\n      this.setState({\n        isPlaying: true\n      }); // const currentUrl = urls[currentUrlIndex || 0]\n      // // sendPlaySuccessEvent(currentUrl, isStagingEnv, userId)\n\n      setPlaying && setPlaying(true);\n      this.updateProgress();\n    };\n\n    this.onPause = () => {\n      const {\n        setPlaying\n      } = this.props;\n      this.setState({\n        isPlaying: false\n      });\n      setPlaying && setPlaying(false);\n    };\n\n    this.onCanPlay = () => {\n      const {\n        setBuffering,\n        buffering,\n        loading,\n        setLoading\n      } = this.props;\n      this.setState({\n        canPlay: true\n      });\n      if (loading) setLoading && setLoading(false);\n\n      if (buffering) {\n        setBuffering && setBuffering(false); //adobeHeartbeat && adobeHeartbeat.trackBufferComplete()\n      }\n    };\n\n    this.onLoadedData = () => {\n      const {\n        setBuffering,\n        buffering,\n        setOverlay\n      } = this.props;\n      const {\n        onReady\n      } = this.state;\n\n      if (!buffering) {\n        this.setState({\n          isBuffering: true\n        });\n        setBuffering && setBuffering(true);\n      }\n\n      setOverlay && setOverlay(null);\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element; //adobeHeartbeat && adobeHeartbeat.initHeartbeat(player.duration)\n      });\n    };\n\n    this.onEnded = e => {\n      const {\n        pause,\n        clipId,\n        time,\n        currentLecture,\n        views,\n        course,\n        route,\n        setCurrentLecture,\n        setNextUrl,\n        setClipId,\n        setSubtitle,\n        history\n      } = this.props; // end && end()\n\n      pause && pause(false);\n      console.log('History', history); // adobeHeartbeat && adobeHeartbeat.trackComplete()\n\n      if (views && views.length) {\n        var _course$sections;\n\n        const view = views.find(view => view.lecture == (currentLecture === null || currentLecture === void 0 ? void 0 : currentLecture.id));\n        view && store.dispatch(updateVideoViews.initiate({\n          id: view.id,\n          lecture: currentLecture === null || currentLecture === void 0 ? void 0 : currentLecture.id,\n          complete: true,\n          progress: time\n        }));\n        const lectures = course && ((_course$sections = course.sections) === null || _course$sections === void 0 ? void 0 : _course$sections.flatMap(sec => sec.lectures));\n\n        if (lectures && lectures.length) {\n          const currentUrlIndex = lectures === null || lectures === void 0 ? void 0 : lectures.findIndex(lec => lec.id == (currentLecture === null || currentLecture === void 0 ? void 0 : currentLecture.id));\n\n          if (currentUrlIndex < lectures.length - 1) {\n            const nextLectureIndex = currentUrlIndex + 1;\n            const lecture = lectures[nextLectureIndex];\n            history === null || history === void 0 ? void 0 : history.push({\n              search: \"?\" + new URLSearchParams({\n                clipid: lecture === null || lecture === void 0 ? void 0 : lecture.video.key\n              })\n            });\n            lecture && setNextUrl(lecture.video_url);\n            lecture && setCurrentLecture(lecture);\n            lecture && setSubtitle(lecture === null || lecture === void 0 ? void 0 : lecture.title);\n            lecture && setClipId(lecture === null || lecture === void 0 ? void 0 : lecture.video.key);\n          } else {\n            const lecture = lectures[0];\n            history === null || history === void 0 ? void 0 : history.push({\n              search: \"?\" + new URLSearchParams({\n                clipid: lecture === null || lecture === void 0 ? void 0 : lecture.video.key\n              })\n            });\n            lecture && setNextUrl(lecture.video_url);\n            lecture && setCurrentLecture(lecture);\n            lecture && setSubtitle(lecture === null || lecture === void 0 ? void 0 : lecture.title);\n            lecture && setClipId(lecture === null || lecture === void 0 ? void 0 : lecture.video.key);\n          }\n        }\n      }\n    };\n\n    this.updateTracks = videoElement => {// const { closedCaptioningLanguage, closedCaptioningEnabled, setClosedCaptioningCueList } = this.props\n      // const tracks = videoElement && videoElement.textTracks\n      // tracks &&\n      //   Object.values(tracks).forEach((track) => {\n      //     const isActive = closedCaptioningEnabled && track.language === closedCaptioningLanguage.code\n      //     if (isActive) {\n      //       track.mode = 'hidden'\n      //       videoElement.textTracks[0].mode = 'hidden' // Firefox\n      //       track.oncuechange = (e) => {\n      //         e.currentTarget.activeCues && setClosedCaptioningCueList(e.currentTarget.activeCues)\n      //       }\n      //     } else {\n      //       track.mode = 'disabled'\n      //     }\n      //   })\n    };\n\n    this.onLoadedMetadata = () => {\n      const {\n        ready,\n        registerPlayer\n      } = this.props;\n      this.ready();\n      const duration = this.getDuration();\n      ready && ready(duration);\n      const videoElement = document.getElementById(\"video-element\");\n      registerPlayer && registerPlayer(videoElement); // this.updateTracks(videoElement)\n    };\n\n    this.getSrc = ({\n      currentUrl\n    }) => {\n      // return currentUrlIndex !== null && urls && urls.length > 0 ? urls[currentUrlIndex].url : null\n      let source = currentUrl;\n      return source;\n    };\n\n    this.onSeeking = () => {// const { adobeHeartbeat } = this.props\n      // adobeHeartbeat && adobeHeartbeat.trackSeekStart()\n    };\n\n    this.onSeeked = () => {// const { adobeHeartbeat } = this.props\n      // adobeHeartbeat && adobeHeartbeat.trackSeekComplete()\n    };\n\n    this.updateProgress = () => {\n      const {\n        clipId,\n        setTime,\n        playing\n      } = this.props;\n      if (!playing) return;\n      const reportedTime = this.getPlayedSeconds();\n      setTime && setTime(reportedTime);\n      reportedTime > 0 && this.throttledSetClipProgress({\n        clipId,\n        videoSecondsWatched: reportedTime\n      });\n      this.progressTimeout = setTimeout(this.updateProgress, 50);\n    };\n\n    this.onProgress = () => {\n      const {\n        setBufferedTime\n      } = this.props;\n      const bufferedTime = this.getSecondsLoaded();\n      setBufferedTime && setBufferedTime(bufferedTime);\n    };\n\n    this.onWaiting = () => {\n      const {\n        setBuffering\n      } = this.props; //adobeHeartbeat && adobeHeartbeat.trackBufferStart()\n\n      setBuffering && setBuffering(true);\n    };\n\n    this.state = { ...initialState,\n      clipId: props.clipId,\n      onReady: this.newReadyPromise(),\n      hlsPlaying: false,\n      videoSrc: null\n    };\n    this.element = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      playing,\n      volume,\n      muted,\n      playbackRate,\n      time,\n      mediaType,\n      currentResolution,\n      setClipProgress\n    } = this.props;\n    this.throttledSetClipProgress = throttle(setClipProgress, 1000);\n    const src = this.getSrc(this.props);\n\n    if (muted || volume !== null) {\n      volume && this.setVolume(muted ? 0 : volume);\n    }\n\n    if (playbackRate) {\n      this.setPlaybackRate(playbackRate);\n    }\n\n    if (time) {\n      this.seekTo(time);\n    }\n\n    if (src) {\n      this.maybeStartHls(src, mediaType);\n    }\n\n    this.onMediaTypeChange(mediaType);\n  }\n\n  componentWillUnmount() {\n    this.destroyHls();\n    clearTimeout(this.progressTimeout);\n  }\n\n  maybeStartHls(source, mediaType) {\n    const {\n      setMediaType\n    } = this.props;\n    const {\n      hlsPlaying\n    } = this.state;\n    const isHlsSource = this.isHlsSource(source);\n    const shouldPlayHls = mediaType === MediaTypes.HLS && isHlsSource;\n    if (hlsPlaying) this.destroyHls();\n\n    if (shouldPlayHls) {\n      this.startHls(source);\n    }\n\n    if (mediaType === MediaTypes.HLS && !shouldPlayHls) {\n      setMediaType && setMediaType(MediaTypes.MP4);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      clipId,\n      mediaType,\n      currentResolution\n    } = this.props;\n    const {\n      reportedPlaybackRate,\n      reportedVolume,\n      ready,\n      isPlaying,\n      hlsPlaying\n    } = this.state;\n    const newSource = this.getSrc(nextProps); // Handle URL change\n\n    const sourceDidChange = clipId !== nextProps.clipId || mediaType !== nextProps.mediaType || this.getSrc(this.props) !== newSource;\n    const resolutionDidChange = nextProps.currentResolution !== currentResolution;\n    const mediaTypeDidChange = mediaType && mediaType !== nextProps.mediaType;\n    if (mediaTypeDidChange) this.onMediaTypeChange(nextProps.mediaType);\n\n    if (sourceDidChange && newSource) {\n      this.maybeStartHls(newSource, mediaType);\n    }\n\n    if (sourceDidChange && ready) {\n      this.setState({\n        onReady: this.newReadyPromise(),\n        ready: false,\n        reportedVolume: null,\n        reportedPlaybackRate: null,\n        isPlaying: null\n      }, () => {});\n    }\n\n    if (!ready) {\n      return;\n    } // Handle playing change\n\n\n    if (nextProps.playing && !isPlaying) {\n      this.play(true);\n    }\n\n    if (!nextProps.playing && isPlaying) {\n      this.pause(true);\n    } // Handle volume change\n\n\n    if (nextProps.volume !== null || nextProps.muted) {\n      if (!nextProps.muted) {\n        if (nextProps.volume !== reportedVolume) {\n          this.setVolume(nextProps.volume);\n        }\n      }\n\n      if (nextProps.muted && reportedVolume !== 0) {\n        this.setVolume(0);\n      }\n    }\n\n    if (nextProps.playbackRate !== reportedPlaybackRate) {\n      this.setPlaybackRate(nextProps.playbackRate);\n    } // Handle time change\n\n\n    const timeDelta = Math.abs(nextProps.time - this.getPlayedSeconds());\n\n    if (timeDelta >= 1) {\n      this.seekTo(nextProps.time);\n    }\n\n    if (resolutionDidChange && hlsPlaying) this.onHlsLevelChange(nextProps.currentResolution);\n  }\n\n  connectIosFullscreenExit() {\n    const {\n      onReady\n    } = this.state;\n    onReady.then(() => {\n      const {\n        current: player\n      } = this.element;\n\n      if (player.webkitExitFullscreen) {\n        player.addEventListener(\"webkitendfullscreen\", this.iosEndFullscreen, false);\n      }\n    });\n  } //#region Player API\n\n\n  play() {\n    const {\n      onReady\n    } = this.state;\n    onReady.then(() => {\n      //   const { adobeHeartbeat, clipId, title } = this.props\n      const {\n        current: player\n      } = this.element;\n\n      if (player) {\n        const promise = player.play(); // adobeHeartbeat && adobeHeartbeat.trackPlay()\n\n        if (promise) {\n          promise.catch(e => {\n            const {\n              pause\n            } = this.props;\n            pause && pause(false);\n          });\n        }\n      }\n    });\n  }\n\n  pause() {\n    const {\n      onReady\n    } = this.state;\n    onReady.then(() => {\n      const {\n        current: player\n      } = this.element;\n      player && player.pause();\n    });\n  }\n\n  getDuration() {\n    const {\n      current: player\n    } = this.element;\n    return player ? player.duration : 0;\n  }\n\n  getPlayedSeconds() {\n    const {\n      current: player\n    } = this.element;\n    return player ? player.currentTime : 0;\n  }\n\n  getSecondsLoaded() {\n    const {\n      current: player\n    } = this.element;\n\n    if (!player) {\n      return 0;\n    }\n\n    const bufferedLength = player.buffered.length;\n    if (bufferedLength === 0) return 0;\n    let maxBuffered = 0,\n        currentBuffered;\n\n    for (let i = 0; i < bufferedLength; i++) {\n      currentBuffered = player.buffered.end(i);\n      maxBuffered = currentBuffered > maxBuffered ? currentBuffered : maxBuffered;\n    }\n\n    return maxBuffered;\n  } //#endregion\n\n\n  renderTrack(language) {}\n\n  handleHlsError(event, data) {// const { onVideoError } = this.props\n    // if (data.fatal) {\n    //   switch (data.type) {\n    //     case this.Hls.ErrorTypes.MEDIA_ERROR:\n    //       this.hls.recoverMediaError()\n    //       break\n    //     default:\n    //       this.destroyHls()\n    //       onVideoError && onVideoError(mapHlsError(data), 'handleHlsError')\n    //       break\n    //   }\n    // }\n  }\n\n  render() {\n    // const { onVideoError, versionId, closedCaptioningLanguage, mediaType } = this.props\n    const {\n      playbackRate,\n      mediaType,\n      supportedResolutions,\n      buffering,\n      loading\n    } = this.props;\n    let source = this.getSrc(this.props); //let source = \"https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\";\n\n    if (!source) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.video\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (mediaType === MediaTypes.HLS) source = undefined;\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"video-element\",\n      className: css.video,\n      ref: this.element,\n      src: source,\n      preload: \"auto\",\n      playsInline: true,\n      autoPlay: true,\n      controls: false,\n      loop: false,\n      onLoadedMetadata: this.onLoadedMetadata,\n      onLoadedData: this.onLoadedData,\n      onCanPlay: this.onCanPlay,\n      onPlay: this.onPlay,\n      onSeeking: this.onSeeking,\n      onSeeked: this.onSeeked,\n      onPause: this.onPause,\n      onEnded: this.onEnded,\n      onVolumeChange: this.onVolumeChange,\n      onRateChange: this.onRateChange,\n      onWaiting: this.onWaiting,\n      onProgress: this.onProgress // onError={(e) => {\n      //   const { current: player } = this.element\n      //   onVideoError && onVideoError(mapGenericVideoError(player.error), 'videoElement.onError')\n      // }}\n\n    }, source, false, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default _c2 = connector(_c = withRouter(Video));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$connector\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/video.tsx"],"names":["React","Component","connect","withRouter","updateVideoViews","store","play","pause","setVolume","setTime","ready","seekEnd","seekStart","setBufferedTime","setMediaType","setOverlay","setBuffering","setFullscreen","setLoading","setAutoplay","setPlaying","setCurrentResolution","setPreferredResolutions","setSupportedResolutions","setClipProgress","setCurrentUrl","setClipId","setSubtitle","setCurrentLecture","css","DefaultResolutions","FullscreenState","HLS_SDK_URL","HLS_SDK_URL_SAFARI","MediaTypes","getSDK","throttle","HLS_EXTENSIONS","initialState","isPlaying","reportedVolume","reportedPlaybackRate","isBuffering","canPlay","mapState","state","ownProps","playing","player","playbackRate","playbackSpeed","volume","buffering","views","route","history","currentLecture","loading","course","clipId","muted","time","currentUrl","mediaType","overlay","currentResolution","supportedResolutions","preferredResolutions","mapDispatch","dispatch","payload","setDuration","setNextUrl","connector","Video","constructor","props","newReadyPromise","Promise","resolve","setState","isSafari","navigator","vendor","match","isHlsSource","source","test","destroyHls","hlsPlaying","hls","destroy","startHls","sdkUrl","Hls","isSupported","MP4","autoStartLoad","loadSource","videoElement","document","getElementById","attachMedia","on","Events","MANIFEST_PARSED","event","data","startLoad","autoLevel","height","index","levels","map","r","width","indexOf","concat","preferredResolution","newResolution","find","currentLevel","resolutionShouldChange","ERROR","handleHlsError","bind","MEDIA_ATTACHED","onHlsLevelChange","requestNewUrls","onMediaTypeChange","newMediaType","console","log","HLS","resolution","WEBM","iosEndFullscreen","NORMAL","percent","onReady","then","current","element","isFinite","setPlaybackRate","rate","onCaptionUpdate","e","toggleCaptions","language","textTracks","forEach","track","mode","code","oncuechange","seekTo","amount","currentTime","onRateChange","onVolumeChange","onPlay","updateProgress","onPause","onCanPlay","onLoadedData","onEnded","length","view","lecture","id","initiate","complete","progress","lectures","sections","flatMap","sec","currentUrlIndex","findIndex","lec","nextLectureIndex","push","search","URLSearchParams","clipid","video","key","video_url","title","updateTracks","onLoadedMetadata","registerPlayer","duration","getDuration","getSrc","onSeeking","onSeeked","reportedTime","getPlayedSeconds","throttledSetClipProgress","videoSecondsWatched","progressTimeout","setTimeout","onProgress","bufferedTime","getSecondsLoaded","onWaiting","videoSrc","createRef","componentDidMount","src","maybeStartHls","componentWillUnmount","clearTimeout","shouldPlayHls","componentWillReceiveProps","nextProps","newSource","sourceDidChange","resolutionDidChange","mediaTypeDidChange","timeDelta","Math","abs","connectIosFullscreenExit","webkitExitFullscreen","addEventListener","promise","catch","bufferedLength","buffered","maxBuffered","currentBuffered","i","end","renderTrack","render","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { updateVideoViews } from \"services/courses\";\nimport { AppDispatch, RootState, store } from 'store';\nimport {\n  play,\n  pause,\n  setVolume,\n  setDuration,\n  setTime,\n  ready,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  setBufferedTime,\n  setMediaType,\n  setOverlay,\n  setBuffering,\n  setFullscreen,\n  setLoading,\n  setAutoplay,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setClipProgress,\n  setCurrentUrl,\n  setClipId,\n  setSubtitle,\n  setCurrentLecture\n} from \"state/player/playerSlice\";\nimport css from \"./video.module.css\";\n\nimport { DefaultResolutions } from \"../constants\";\n\n// import withAdobeHeartbeat from './with-adobe-heartbeat'\n\nimport {\n  FullscreenState,\n  HLS_SDK_URL,\n  HLS_SDK_URL_SAFARI,\n  MediaTypes,\n} from \"../constants\";\nimport { getSDK } from \"../utilities/get-sdk\";\nimport { throttle } from \"../utilities/throttle\";\n// import { sendPlaySuccessEvent } from '../../analytics/player-events'\nimport { mapHlsError, mapGenericVideoError } from \"../utilities/video-error\";\nimport { Truncate } from \"@codecademy/gamut\";\nimport { connected } from \"process\";\n\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst initialState = {\n  isPlaying: false,\n  reportedVolume: null,\n  reportedPlaybackRate: 1,\n  isBuffering: false,\n  canPlay: false,\n  ready: true,\n};\n\nconst mapState = (state: RootState, ownProps: RouteComponentProps<{ id: string }>) => ({\n  playing: state.player.playing,\n  playbackRate: state.player.playbackSpeed,\n  volume: state.player.volume,\n  buffering: state.player.buffering,\n  views: state.player.views,\n  route: ownProps.history,\n  currentLecture: state.player.currentLecture,\n  loading: state.player.loading,\n  course: state.player.course,\n  clipId: state.player.clipId,\n  muted: state.player.muted,\n  time: state.player.time,\n  currentUrl: state.player.currentUrl,\n  mediaType: state.player.mediaType,\n  overlay: state.player.overlay,\n  currentResolution: state.player.currentResolution,\n  supportedResolutions: state.player.supportedResolutions,\n  preferredResolutions: state.player.preferredResolutions,\n});\n\nconst mapDispatch = (dispatch: AppDispatch) => ({\n  setVolume: (payload) => dispatch(setVolume(payload)),\n  setDuration: (payload) => dispatch(setVolume(payload)),\n  setTime: (payload) => dispatch(setTime(payload)),\n  setBufferedTime: (payload) => dispatch(setBufferedTime(payload)),\n  ready: (payload) => dispatch(ready(payload)),\n  seekEnd: (payload) => dispatch(seekEnd()),\n  setNextUrl: (payload) => dispatch(setCurrentUrl(payload)),\n  seekStart: (payload) => dispatch(seekStart()),\n  play: (payload) => dispatch(play(payload)),\n  pause: (payload) => dispatch(pause(payload)),\n  setCurrentLecture: (payload) => dispatch(setCurrentLecture(payload)),\n  setClipId: (payload) => dispatch(setClipId(payload)),\n  setSubtitle: (payload) => dispatch(setSubtitle(payload)),\n  setBuffering: (payload) => dispatch(setBuffering(payload)),\n  setOverlay: (payload) => dispatch(setOverlay(payload)),\n  setFullscreen: (payload) => dispatch(setFullscreen(payload)),\n  setLoading: (payload) => dispatch(setLoading(payload)),\n  setPlaying: (payload) => dispatch(setPlaying(payload)),\n  setClipProgress: (payload) => dispatch(setClipProgress(payload)),\n  setAutoplay: (payload) => dispatch(setAutoplay(payload)),\n  setMediaType: (payload) => dispatch(setMediaType(payload)),\n  setCurrentResolution: (payload) => dispatch(setCurrentResolution(payload)),\n  setPreferredResolutions: (payload) =>\n    dispatch(setPreferredResolutions(payload)),\n  setSupportedResolutions: (payload) =>\n    dispatch(setSupportedResolutions(payload)),\n});\n\n\nconst connector = connect(mapState, mapDispatch);\ntype VideoProps = ConnectedProps<typeof connector> & RouteComponentProps;\n\nexport class Video extends Component<VideoProps, any> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...initialState,\n      clipId: props.clipId,\n      onReady: this.newReadyPromise(),\n      hlsPlaying: false,\n      videoSrc: null,\n    };\n\n    this.element = React.createRef();\n  }\n\n  newReadyPromise = () => {\n    return new Promise((resolve) => {\n      this.ready = () => {\n        this.setState({ ready: true }, () => {\n          resolve();\n        });\n      };\n    });\n  };\n\n  isSafari = () => navigator.vendor.match(/apple/i);\n\n  componentDidMount() {\n    const {\n      playing,\n      volume,\n      muted,\n      playbackRate,\n      time,\n     \n      mediaType,\n      currentResolution,\n   \n      setClipProgress,\n    } = this.props;\n    this.throttledSetClipProgress = throttle(setClipProgress, 1000);\n    const src = this.getSrc(this.props);\n\n    if (muted || volume !== null) {\n      volume && this.setVolume(muted ? 0 : volume);\n    }\n\n    if (playbackRate) {\n      this.setPlaybackRate(playbackRate);\n    }\n\n    if (time) {\n      this.seekTo(time);\n    }\n\n    \n\n    if (src) {\n      this.maybeStartHls(src, mediaType);\n    }\n    this.onMediaTypeChange(mediaType);\n  }\n\n  componentWillUnmount() {\n    this.destroyHls();\n    clearTimeout(this.progressTimeout);\n  }\n\n  maybeStartHls(source, mediaType) {\n    const { setMediaType } = this.props;\n    const { hlsPlaying } = this.state;\n    const isHlsSource = this.isHlsSource(source);\n    const shouldPlayHls = mediaType === MediaTypes.HLS && isHlsSource;\n\n    if (hlsPlaying) this.destroyHls();\n\n    if (shouldPlayHls) {\n      this.startHls(source);\n    }\n\n    if (mediaType === MediaTypes.HLS && !shouldPlayHls) {\n      setMediaType && setMediaType(MediaTypes.MP4);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n     \n      clipId,\n     \n      mediaType,\n      currentResolution,\n \n    } = this.props;\n    const {\n      reportedPlaybackRate,\n      reportedVolume,\n      ready,\n      isPlaying,\n      hlsPlaying,\n    } = this.state;\n\n    const newSource = this.getSrc(nextProps);\n\n    // Handle URL change\n    const sourceDidChange = clipId !== nextProps.clipId ||\n      mediaType !== nextProps.mediaType ||\n      this.getSrc(this.props) !== newSource;\n\n  \n\n    const resolutionDidChange =\n      nextProps.currentResolution !== currentResolution;\n\n    const mediaTypeDidChange = mediaType && mediaType !== nextProps.mediaType;\n\n    if (mediaTypeDidChange) this.onMediaTypeChange(nextProps.mediaType);\n\n    if (sourceDidChange && newSource) {\n     \n      this.maybeStartHls(newSource, mediaType);\n    }\n\n    if (sourceDidChange && ready) {\n      this.setState(\n        {\n          onReady: this.newReadyPromise(),\n          ready: false,\n          reportedVolume: null,\n          reportedPlaybackRate: null,\n          isPlaying: null,\n        },\n        () => {\n        \n        }\n      );\n    }\n\n    if (!ready) {\n      return;\n    }\n\n    // Handle playing change\n    if (nextProps.playing && !isPlaying) {\n      this.play(true);\n    }\n    if (!nextProps.playing && isPlaying) {\n      this.pause(true);\n    }\n\n    // Handle volume change\n    if (nextProps.volume !== null || nextProps.muted) {\n      if (!nextProps.muted) {\n        if (nextProps.volume !== reportedVolume) {\n          this.setVolume(nextProps.volume);\n        }\n      }\n\n      if (nextProps.muted && reportedVolume !== 0) {\n        this.setVolume(0);\n      }\n    }\n\n    if (nextProps.playbackRate !== reportedPlaybackRate) {\n      this.setPlaybackRate(nextProps.playbackRate);\n    }\n\n    // Handle time change\n    const timeDelta = Math.abs(nextProps.time - this.getPlayedSeconds());\n\n    if (timeDelta >= 1) {\n      this.seekTo(nextProps.time);\n    }\n\n    \n\n    if (resolutionDidChange && hlsPlaying)\n      this.onHlsLevelChange(nextProps.currentResolution);\n  }\n\n  isHlsSource = (source) => HLS_EXTENSIONS.test(source);\n\n  destroyHls = () => {\n    this.setState({ hlsPlaying: false });\n    this.hls && this.hls.destroy();\n  };\n\n  startHls = async (source) => {\n    const {\n      setSupportedResolutions,\n      setMediaType,\n      setCurrentResolution,\n      preferredResolutions,\n      currentResolution,\n      time,\n    } = this.props;\n    const sdkUrl = this.isSafari() ? HLS_SDK_URL_SAFARI : HLS_SDK_URL; //https://github.com/video-dev/hls.js/issues/1543\n    const Hls = await getSDK(sdkUrl, \"Hls\");\n    if (!Hls.isSupported()) return setMediaType && setMediaType(MediaTypes.MP4);\n    this.Hls = Hls;\n\n    this.hls = new Hls({ autoStartLoad: false });\n    this.hls.loadSource(source);\n\n    const videoElement = document.getElementById(\"video-element\");\n    this.hls.attachMedia(videoElement);\n\n    this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {\n      this.hls.startLoad(time || 0);\n      const autoLevel = { height: \"Auto\", index: -1 };\n      const supportedResolutions = data.levels.map((r) => ({\n        width: r.width,\n        height: r.height,\n        index: data.levels.indexOf(r),\n      }));\n      setSupportedResolutions &&\n        setSupportedResolutions(supportedResolutions.concat(autoLevel));\n\n      const preferredResolution = preferredResolutions.hls\n        ? preferredResolutions.hls\n        : null;\n      const newResolution =\n        preferredResolution &&\n        supportedResolutions.find(\n          (r) =>\n            preferredResolution.width === r.width &&\n            preferredResolution.height === r.height\n        );\n\n      if (!newResolution) {\n        setCurrentResolution && setCurrentResolution(autoLevel);\n        return;\n      }\n\n      this.hls && (this.hls.currentLevel = newResolution.index);\n      const resolutionShouldChange = newResolution !== currentResolution;\n      resolutionShouldChange &&\n        setCurrentResolution &&\n        setCurrentResolution(newResolution);\n    });\n    this.hls.on(Hls.Events.ERROR, this.handleHlsError.bind(this));\n    this.hls.on(Hls.Events.MEDIA_ATTACHED, (event, data) => {\n      this.setState({ hlsPlaying: true });\n    });\n  };\n\n  onHlsLevelChange = ({ height, index }) => {\n    const { currentResolution, setCurrentResolution } = this.props;\n\n    if (height === currentResolution.height) {\n      return;\n    }\n    this.hls && (this.hls.currentLevel = index);\n    setCurrentResolution && setCurrentResolution({ height, index });\n  };\n\n  requestNewUrls = () => {\n    const { setLoading } = this.props;\n    setLoading && setLoading(true);\n  };\n\n  onMediaTypeChange = (newMediaType) => {\n    const {\n      setSupportedResolutions,\n      setCurrentResolution,\n      preferredResolutions,\n    } = this.props;\n    console.log(\"Mediatype: \", newMediaType);\n    if (newMediaType !== MediaTypes.HLS) {\n      setSupportedResolutions &&\n        setSupportedResolutions(DefaultResolutions[newMediaType]);\n\n      const resolution =\n        preferredResolutions && preferredResolutions[newMediaType];\n      setCurrentResolution && setCurrentResolution(resolution);\n    }\n\n    if (newMediaType === MediaTypes.WEBM || newMediaType === MediaTypes.MP4) {\n      this.requestNewUrls();\n    }\n  };\n\n  iosEndFullscreen = () => {\n    this.props.setFullscreen(FullscreenState.NORMAL);\n  };\n\n  connectIosFullscreenExit() {\n    const { onReady } = this.state;\n    onReady.then(() => {\n      const { current: player } = this.element;\n      if (player.webkitExitFullscreen) {\n        player.addEventListener(\n          \"webkitendfullscreen\",\n          this.iosEndFullscreen,\n          false\n        );\n      }\n    });\n  }\n\n  //#region Player API\n  play() {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      //   const { adobeHeartbeat, clipId, title } = this.props\n      const { current: player } = this.element;\n\n      if (player) {\n        const promise = player.play();\n\n        // adobeHeartbeat && adobeHeartbeat.trackPlay()\n\n        if (promise) {\n          promise.catch((e) => {\n            const { pause } = this.props;\n            pause && pause(false);\n\n           \n          });\n        }\n      }\n    });\n  }\n\n  pause() {\n    const { onReady } = this.state;\n   \n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && player.pause();\n\n    });\n  }\n\n  setVolume = (percent) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n      player && percent === 0 ? (player.muted = true) : (player.muted = false); // player.volume is read only on mobile iOS\n      player && isFinite(percent) && (player.volume = percent);\n    });\n  };\n\n  setPlaybackRate = (rate) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && (player.playbackRate = rate);\n    });\n  };\n\n  onCaptionUpdate = (e) => {\n    \n  };\n\n  toggleCaptions = (language) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player &&\n        [...player.textTracks].forEach((track) => {\n          if (track.mode === \"showing\" && track.language !== language.code)\n            track.mode = \"disabled\";\n\n          if (track.language === language.code) {\n            track.oncuechange = this.onCaptionUpdate;\n            track.mode = \"hidden\";\n          } else {\n            track.oncuechange = null;\n          }\n        });\n    });\n  };\n\n  seekTo = (amount) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && (player.currentTime = amount);\n    });\n  };\n\n  getDuration() {\n    const { current: player } = this.element;\n\n    return player ? player.duration : 0;\n  }\n\n  getPlayedSeconds() {\n    const { current: player } = this.element;\n\n    return player ? player.currentTime : 0;\n  }\n\n  getSecondsLoaded() {\n    const { current: player } = this.element;\n\n    if (!player) {\n      return 0;\n    }\n\n    const bufferedLength = player.buffered.length;\n\n    if (bufferedLength === 0) return 0;\n\n    let maxBuffered = 0,\n      currentBuffered;\n    for (let i = 0; i < bufferedLength; i++) {\n      currentBuffered = player.buffered.end(i);\n      maxBuffered =\n        currentBuffered > maxBuffered ? currentBuffered : maxBuffered;\n    }\n\n    return maxBuffered;\n  }\n  //#endregion\n\n  onRateChange = (rate) => {\n    const { current: player } = this.element;\n\n    player && this.setState({ reportedPlaybackRate: player.playbackRate });\n  };\n\n  onVolumeChange = (rate) => {\n    const { current: player } = this.element;\n\n    player && this.setState({ reportedVolume: player.volume });\n  };\n\n  onPlay = () => {\n    const { setPlaying } = this.props;\n    // const { isStagingEnv, urls, currentUrlIndex, userId } = this.props\n    this.setState({ isPlaying: true });\n    // const currentUrl = urls[currentUrlIndex || 0]\n    // // sendPlaySuccessEvent(currentUrl, isStagingEnv, userId)\n    setPlaying && setPlaying(true);\n    this.updateProgress();\n  };\n\n  onPause = () => {\n    const { setPlaying } = this.props;\n    this.setState({ isPlaying: false });\n    setPlaying && setPlaying(false);\n  };\n\n  onCanPlay = () => {\n    const { setBuffering, buffering, loading, setLoading } =\n      this.props;\n\n    this.setState({ canPlay: true });\n    if (loading) setLoading && setLoading(false);\n\n    if (buffering) {\n      setBuffering && setBuffering(false);\n      //adobeHeartbeat && adobeHeartbeat.trackBufferComplete()\n    }\n  };\n\n  onLoadedData = () => {\n    const { setBuffering, buffering, setOverlay } = this.props;\n    const { onReady } = this.state;\n\n    if (!buffering) {\n      this.setState({ isBuffering: true });\n      setBuffering && setBuffering(true);\n    }\n\n    setOverlay && setOverlay(null);\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n      //adobeHeartbeat && adobeHeartbeat.initHeartbeat(player.duration)\n    });\n  };\n\n  onEnded = (e) => {\n    const {\n     \n      pause,\n     \n      clipId,\n      time,\n      currentLecture,\n      views,\n      course,\n      route,\n      setCurrentLecture,\n      setNextUrl,\n      setClipId,\n      setSubtitle,\n      history\n    } = this.props;\n\n    // end && end()\n\n    pause && pause(false);\n    console.log('History', history)\n    // adobeHeartbeat && adobeHeartbeat.trackComplete()\n    if (views && views.length) {\n      const view = views.find((view) => view.lecture == currentLecture?.id);\n      view && store.dispatch(updateVideoViews.initiate({\n        id: view.id,\n        lecture: currentLecture?.id,\n        complete: true,\n        progress: time,\n      }));\n      const lectures = course && course.sections?.flatMap(sec => sec.lectures)\n      \n      if (lectures && lectures.length) {\n        const currentUrlIndex = lectures?.findIndex(lec => lec.id == currentLecture?.id)\n        if(currentUrlIndex < (lectures.length - 1)) {\n          const nextLectureIndex = currentUrlIndex + 1\n          const lecture = lectures[nextLectureIndex]\n          \n          history?.push({\n            search: \"?\" + new URLSearchParams({ clipid: lecture?.video.key })\n          });\n          lecture && setNextUrl(lecture.video_url)\n          lecture && setCurrentLecture(lecture)\n          lecture && setSubtitle(lecture?.title)\n          lecture && setClipId(lecture?.video.key)\n          \n        } else {\n          const lecture = lectures[0]\n          history?.push({\n            search: \"?\" + new URLSearchParams({ clipid: lecture?.video.key })\n          });\n          lecture && setNextUrl(lecture.video_url)\n          lecture && setCurrentLecture(lecture)\n          lecture && setSubtitle(lecture?.title)\n          lecture && setClipId(lecture?.video.key)\n        }\n        \n      }\n    }\n\n \n  };\n\n  renderTrack(language) {\n \n  }\n\n  updateTracks = (videoElement) => {\n    // const { closedCaptioningLanguage, closedCaptioningEnabled, setClosedCaptioningCueList } = this.props\n    // const tracks = videoElement && videoElement.textTracks\n    // tracks &&\n    //   Object.values(tracks).forEach((track) => {\n    //     const isActive = closedCaptioningEnabled && track.language === closedCaptioningLanguage.code\n    //     if (isActive) {\n    //       track.mode = 'hidden'\n    //       videoElement.textTracks[0].mode = 'hidden' // Firefox\n    //       track.oncuechange = (e) => {\n    //         e.currentTarget.activeCues && setClosedCaptioningCueList(e.currentTarget.activeCues)\n    //       }\n    //     } else {\n    //       track.mode = 'disabled'\n    //     }\n    //   })\n  };\n\n  onLoadedMetadata = () => {\n    const { ready, registerPlayer } = this.props;\n    this.ready();\n\n    const duration = this.getDuration();\n    ready && ready(duration);\n\n    const videoElement = document.getElementById(\"video-element\");\n    registerPlayer && registerPlayer(videoElement);\n    // this.updateTracks(videoElement)\n  };\n\n  getSrc = ({  currentUrl } : VideoProps) => {\n    // return currentUrlIndex !== null && urls && urls.length > 0 ? urls[currentUrlIndex].url : null\n    let source = currentUrl;\n    return source;\n  };\n\n  onSeeking = () => {\n    // const { adobeHeartbeat } = this.props\n    // adobeHeartbeat && adobeHeartbeat.trackSeekStart()\n  };\n\n  onSeeked = () => {\n    // const { adobeHeartbeat } = this.props\n    // adobeHeartbeat && adobeHeartbeat.trackSeekComplete()\n  };\n\n  updateProgress = () => {\n    const { clipId, setTime, playing } = this.props;\n\n    if (!playing) return;\n\n    const reportedTime = this.getPlayedSeconds();\n    setTime && setTime(reportedTime);\n    reportedTime > 0 &&\n      this.throttledSetClipProgress({\n        clipId,\n        videoSecondsWatched: reportedTime,\n      });\n\n    this.progressTimeout = setTimeout(this.updateProgress, 50);\n  };\n\n  onProgress = () => {\n    const { setBufferedTime } = this.props;\n    const bufferedTime = this.getSecondsLoaded();\n\n    setBufferedTime && setBufferedTime(bufferedTime);\n  };\n\n  handleHlsError(event, data) {\n    // const { onVideoError } = this.props\n    // if (data.fatal) {\n    //   switch (data.type) {\n    //     case this.Hls.ErrorTypes.MEDIA_ERROR:\n    //       this.hls.recoverMediaError()\n    //       break\n    //     default:\n    //       this.destroyHls()\n    //       onVideoError && onVideoError(mapHlsError(data), 'handleHlsError')\n    //       break\n    //   }\n    // }\n  }\n\n  onWaiting = () => {\n    const {  setBuffering } = this.props;\n    //adobeHeartbeat && adobeHeartbeat.trackBufferStart()\n    setBuffering && setBuffering(true);\n  };\n\n  render() {\n    // const { onVideoError, versionId, closedCaptioningLanguage, mediaType } = this.props\n    const {\n      playbackRate,\n      mediaType,\n      supportedResolutions,\n      buffering,\n      loading,\n    } = this.props;\n\n    let source = this.getSrc(this.props);\n    //let source = \"https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\";\n\n    if (!source) {\n      return <div className={css.video} />;\n    }\n\n    if (mediaType === MediaTypes.HLS) source = undefined;\n\n    return (\n      <video\n        id=\"video-element\"\n        key={source}\n        className={css.video}\n        ref={this.element}\n        src={source}\n        preload=\"auto\"\n        playsInline\n        autoPlay\n        controls={false}\n        loop={false}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onLoadedData={this.onLoadedData}\n        onCanPlay={this.onCanPlay}\n        onPlay={this.onPlay}\n        onSeeking={this.onSeeking}\n        onSeeked={this.onSeeked}\n        onPause={this.onPause}\n        onEnded={this.onEnded}\n        onVolumeChange={this.onVolumeChange}\n        onRateChange={this.onRateChange}\n        onWaiting={this.onWaiting}\n        onProgress={this.onProgress}\n        // onError={(e) => {\n        //   const { current: player } = this.element\n        //   onVideoError && onVideoError(mapGenericVideoError(player.error), 'videoElement.onError')\n        // }}\n      >\n        {/* {closedCaptioningLanguage && versionId && this.renderTrack(closedCaptioningLanguage)} */}\n      </video>\n    );\n  }\n}\n\n\nexport default connector(withRouter((Video)));\n\n\n"]},"metadata":{},"sourceType":"module"}