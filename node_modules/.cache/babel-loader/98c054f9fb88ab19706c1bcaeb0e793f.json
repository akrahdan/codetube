{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { theme } from \"@codecademy/gamut-styles\";\nimport React from 'react';\nimport { routesMeta } from \"portal/routes\";\nimport { createRootComponent } from \"components/createRootComponent\";\nimport { getRouteMetaForLocation } from \"libs/location/routing\";\nimport { selectLocationType } from \"state/location/selectors\";\nimport { setCredentials } from 'state/auth/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useGetCurrentUserQuery } from 'services/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PortalRouter = ({\n  portalData,\n  statusCode\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    data\n  } = useGetCurrentUserQuery();\n  const {};\n\n  if (data) {\n    const token = localStorage.getItem('token');\n    const userResponse = {\n      user: data,\n      token\n    };\n    dispatch(setCredentials(userResponse));\n  }\n\n  const locationType = useAppSelector(selectLocationType);\n  const {\n    scene: Scene,\n    pageName\n  } = getRouteMetaForLocation(routesMeta, locationType);\n  return /*#__PURE__*/_jsxDEV(Scene, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PortalRouter, \"Q0NLdNfYACRwTygMa2D0R0e02zU=\", false, function () {\n  return [useAppDispatch, useGetCurrentUserQuery, useAppSelector];\n});\n\n_c = PortalRouter;\nexport default _c2 = createRootComponent(PortalRouter, {\n  theme\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PortalRouter\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/index.tsx"],"names":["theme","React","routesMeta","createRootComponent","getRouteMetaForLocation","selectLocationType","setCredentials","useAppDispatch","useAppSelector","useGetCurrentUserQuery","PortalRouter","portalData","statusCode","dispatch","data","token","localStorage","getItem","userResponse","user","locationType","scene","Scene","pageName"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,uBAAT,QAAwC,uBAAxC;AAEA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,aAA/C;AACA,SAASC,sBAAT,QAAuC,eAAvC;;AASA,OAAO,MAAMC,YAAmC,GAAG,CAAC;AAChDC,EAAAA,UADgD;AAEhDC,EAAAA;AAFgD,CAAD,KAI7C;AAAA;;AACF,QAAMC,QAAQ,GAAGN,cAAc,EAA/B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWL,sBAAsB,EAAvC;AACA,QAAM,EAAN;;AACA,MAAIK,IAAJ,EAAW;AACV,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAEL,IADa;AAEnBC,MAAAA;AAFmB,KAArB;AAIAF,IAAAA,QAAQ,CAACP,cAAc,CAACY,YAAD,CAAf,CAAR;AACA;;AAEF,QAAME,YAAY,GAAGZ,cAAc,CAACH,kBAAD,CAAnC;AACA,QAAM;AAAEgB,IAAAA,KAAK,EAAEC,KAAT;AAAgBC,IAAAA;AAAhB,MAA6BnB,uBAAuB,CACtDF,UADsD,EAEtDkB,YAFsD,CAA1D;AAKC,sBACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA1BM;;GAAMV,Y;UAKQH,c,EACAE,sB,EAWGD,c;;;KAjBXE,Y;AA8Bb,qBAAeP,mBAAmB,CAACO,YAAD,EAAc;AAAEV,EAAAA;AAAF,CAAd,CAAlC","sourcesContent":["import { theme } from \"@codecademy/gamut-styles\"\nimport React, { useEffect } from 'react'\nimport { routesMeta } from \"portal/routes\";\nimport { createRootComponent } from \"components/createRootComponent\";\nimport { getRouteMetaForLocation } from \"libs/location/routing\";\nimport { createReduxBinder } from \"libs/reduxBinder\";\nimport { selectLocationType } from \"state/location/selectors\";\nimport { setCredentials } from 'state/auth/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useGetCurrentUserQuery } from 'services/auth';\nimport { useFetchInstructorInfoQuery } from \"services/courses\";\n\n\nexport type PortalProps = {\n    portalData: unknown,\n    statusCode: number\n}\n\nexport const PortalRouter: React.FC<PortalProps> = ({\n    portalData,\n    statusCode\n   \n}) => {\n    const dispatch = useAppDispatch();\n    const { data } = useGetCurrentUserQuery()\n    const { }\n    if (data ) {\n     const token = localStorage.getItem('token');\n     const userResponse = {\n       user: data,\n       token\n     }\n     dispatch(setCredentials(userResponse))\n    }\n\n   const locationType = useAppSelector(selectLocationType);\n   const { scene: Scene, pageName } = getRouteMetaForLocation(\n       routesMeta,\n       locationType,\n   )\n\n    return(\n        <Scene />\n    )\n}\n\n\n\nexport default createRootComponent(PortalRouter,{ theme });\n \n"]},"metadata":{},"sourceType":"module"}