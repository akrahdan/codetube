{"ast":null,"code":"import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nconst rows = {\n  1: 1,\n  2: 2,\n  3: 3\n};\nconst columns = {\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  10: 10,\n  11: 11\n};\nconst gridProps = variance.create({\n  rowOffset: {\n    property: 'gridRowStart',\n    scale: rows,\n    transform: row => row === 0 ? 'auto' : row\n  },\n  rowspan: {\n    property: 'gridRowEnd',\n    scale: rows,\n    transform: row => `span ${row}`\n  },\n  size: {\n    property: 'gridColumnEnd',\n    scale: { ...columns,\n      12: 12\n    },\n    transform: col => `span ${col}`\n  },\n  offset: {\n    property: 'gridColumnStart',\n    scale: {\n      0: 0,\n      ...columns\n    },\n    transform: col => col === 0 ? 'auto' : `${col + 1}`\n  }\n});\nconst columnVariants = variant({\n  variants: {\n    fitContent: {\n      display: 'grid',\n      gridTemplateColumns: 'minmax(0, 1fr)'\n    }\n  }\n});\nconst columnProps = variance.compose(system.layout, system.space, system.grid, gridProps);\nexport const Column = styled('div', styledOptions(columnProps.propNames))(columnProps({\n  size: 12\n}), columnVariants, columnProps);\nColumn.defaultProps = {\n  variant: 'fitContent'\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Layout/Column.tsx"],"names":["styledOptions","system","variant","variance","styled","rows","columns","gridProps","create","rowOffset","property","scale","transform","row","rowspan","size","col","offset","columnVariants","variants","fitContent","display","gridTemplateColumns","columnProps","compose","layout","space","grid","Column","propNames","defaultProps"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,MAAxB,EAAgCC,OAAhC,QAA+C,0BAA/C;AACA,SAAqBC,QAArB,QAAqC,sBAArC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,IAAI,GAAG;AAAE,KAAG,CAAL;AAAQ,KAAG,CAAX;AAAc,KAAG;AAAjB,CAAb;AAEA,MAAMC,OAAO,GAAG;AACd,KAAG,CADW;AAEd,KAAG,CAFW;AAGd,KAAG,CAHW;AAId,KAAG,CAJW;AAKd,KAAG,CALW;AAMd,KAAG,CANW;AAOd,KAAG,CAPW;AAQd,KAAG,CARW;AASd,KAAG,CATW;AAUd,MAAI,EAVU;AAWd,MAAI;AAXU,CAAhB;AAcA,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAT,CAAgB;AAChCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,cADD;AAETC,IAAAA,KAAK,EAAEN,IAFE;AAGTO,IAAAA,SAAS,EAAGC,GAAD,IAAkBA,GAAG,KAAK,CAAR,GAAY,MAAZ,GAAqBA;AAHzC,GADqB;AAMhCC,EAAAA,OAAO,EAAE;AACPJ,IAAAA,QAAQ,EAAE,YADH;AAEPC,IAAAA,KAAK,EAAEN,IAFA;AAGPO,IAAAA,SAAS,EAAGC,GAAD,IAAU,QAAOA,GAAI;AAHzB,GANuB;AAWhCE,EAAAA,IAAI,EAAE;AACJL,IAAAA,QAAQ,EAAE,eADN;AAEJC,IAAAA,KAAK,EAAE,EAAE,GAAGL,OAAL;AAAc,UAAI;AAAlB,KAFH;AAGJM,IAAAA,SAAS,EAAGI,GAAD,IAAkB,QAAOA,GAAI;AAHpC,GAX0B;AAgBhCC,EAAAA,MAAM,EAAE;AACNP,IAAAA,QAAQ,EAAE,iBADJ;AAENC,IAAAA,KAAK,EAAE;AAAE,SAAG,CAAL;AAAQ,SAAGL;AAAX,KAFD;AAGNM,IAAAA,SAAS,EAAGI,GAAD,IAAkBA,GAAG,KAAK,CAAR,GAAY,MAAZ,GAAsB,GAAEA,GAAG,GAAG,CAAE;AAHvD;AAhBwB,CAAhB,CAAlB;AAuBA,MAAME,cAAc,GAAGhB,OAAO,CAAC;AAC7BiB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE,MADC;AAEVC,MAAAA,mBAAmB,EAAE;AAFX;AADJ;AADmB,CAAD,CAA9B;AASA,MAAMC,WAAW,GAAGpB,QAAQ,CAACqB,OAAT,CAClBvB,MAAM,CAACwB,MADW,EAElBxB,MAAM,CAACyB,KAFW,EAGlBzB,MAAM,CAAC0B,IAHW,EAIlBpB,SAJkB,CAApB;AAYA,OAAO,MAAMqB,MAAM,GAAGxB,MAAM,CAC1B,KAD0B,EAE1BJ,aAAa,CAACuB,WAAW,CAACM,SAAb,CAFa,CAAN,CAGPN,WAAW,CAAC;AAAER,EAAAA,IAAI,EAAE;AAAR,CAAD,CAHJ,EAGoBG,cAHpB,EAGoCK,WAHpC,CAAf;AAKPK,MAAM,CAACE,YAAP,GAAsB;AAAE5B,EAAAA,OAAO,EAAE;AAAX,CAAtB","sourcesContent":["import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\n\nconst rows = { 1: 1, 2: 2, 3: 3 };\n\nconst columns = {\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  10: 10,\n  11: 11,\n};\n\nconst gridProps = variance.create({\n  rowOffset: {\n    property: 'gridRowStart',\n    scale: rows,\n    transform: (row: number) => (row === 0 ? 'auto' : row),\n  },\n  rowspan: {\n    property: 'gridRowEnd',\n    scale: rows,\n    transform: (row) => `span ${row}`,\n  },\n  size: {\n    property: 'gridColumnEnd',\n    scale: { ...columns, 12: 12 },\n    transform: (col: number) => `span ${col}`,\n  },\n  offset: {\n    property: 'gridColumnStart',\n    scale: { 0: 0, ...columns },\n    transform: (col: number) => (col === 0 ? 'auto' : `${col + 1}`),\n  },\n});\n\nconst columnVariants = variant({\n  variants: {\n    fitContent: {\n      display: 'grid',\n      gridTemplateColumns: 'minmax(0, 1fr)',\n    },\n  },\n});\n\nconst columnProps = variance.compose(\n  system.layout,\n  system.space,\n  system.grid,\n  gridProps\n);\n\nexport type ColumnVariantProps = StyleProps<typeof columnVariants>;\nexport type ColumnStyleProps = StyleProps<typeof columnProps>;\n\nexport interface ColumnProps extends ColumnVariantProps, ColumnStyleProps {}\n\nexport const Column = styled(\n  'div',\n  styledOptions(columnProps.propNames)\n)<ColumnProps>(columnProps({ size: 12 }), columnVariants, columnProps);\n\nColumn.defaultProps = { variant: 'fitContent' };\n"]},"metadata":{},"sourceType":"module"}