{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactResizeDetector from 'react-resize-detector';\nimport css from './container.module.css';\nimport { setContainerSize } from 'state/player/playerSlice';\nimport { isIE } from '../utilities/is-ie';\nimport { FullscreenState } from '../constants';\nimport { setFullscreen, isFullscreen, collapseFullscreen } from '../fullscreen-helper'; // const resize = container => (width, height) => {\n//   const {\n//     props: { setContainerSize },\n//   } = container\n//   setContainerSize({ width, height })\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Container extends Component {\n  constructor(props) {\n    super(props); //this.resize = resize(this)\n  }\n\n  updateFullscreenState(fullscreenState) {\n    const container = this.content;\n    const videoElement = document.getElementById('video-element');\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement);\n    } else {\n      collapseFullscreen(videoElement);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState;\n    const nextFullscreenState = nextProps.fullscreenState;\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return;\n    }\n\n    this.updateFullscreenState(nextFullscreenState);\n    return nextProps;\n  }\n\n  render() {\n    let {\n      containerSize,\n      interactionMode,\n      playerSize,\n      refreshRate,\n      fullscreenState,\n      setContainerSize\n    } = this.props;\n    return [/*#__PURE__*/_jsxDEV(ReactResizeDetector, {\n      handleWidth: true,\n      handleHeight: true,\n      onResize: (width, height) => {\n        this.props.setContainerSize({\n          width,\n          height\n        });\n      },\n      refreshMode: \"throttle\",\n      refreshRate: refreshRate || 15\n    }, 'resize detector', false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.container,\n      style: fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize\n      } : {},\n      ref: el => this.element = el,\n      \"interaction-mode\": interactionMode,\n      \"is-ie\": `${isIE()}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.content,\n        style: fullscreenState === FullscreenState.NORMAL ? { ...playerSize\n        } : {\n          width: '100%',\n          height: '100%'\n        },\n        ref: el => this.content = el,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, \"container\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)];\n  }\n\n}\nexport default connect(state => ({\n  containerSize: state.player.containerSize,\n  breakpoint: state.player.breakpoint,\n  interactionMode: state.player.interactionMode,\n  playerSize: state.player.playerSize,\n  fullscreenState: state.player.fullscreenState\n}), dispatch => ({\n  setContainersize: size => dispatch(setContainerSize(size))\n}))(Container);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.js"],"names":["React","Component","connect","ReactResizeDetector","css","setContainerSize","isIE","FullscreenState","setFullscreen","isFullscreen","collapseFullscreen","Container","constructor","props","updateFullscreenState","fullscreenState","container","content","videoElement","document","getElementById","FULLSCREEN","componentWillReceiveProps","nextProps","currentFullscreenState","nextFullscreenState","render","containerSize","interactionMode","playerSize","refreshRate","width","height","el","element","NORMAL","children","state","player","breakpoint","dispatch","setContainersize","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport ReactResizeDetector from 'react-resize-detector'\nimport css from './container.module.css'\nimport { setContainerSize } from 'state/player/playerSlice'\nimport { isIE } from '../utilities/is-ie';\nimport { FullscreenState } from '../constants'\nimport { setFullscreen, isFullscreen, collapseFullscreen } from '../fullscreen-helper'\n\n// const resize = container => (width, height) => {\n  \n//   const {\n//     props: { setContainerSize },\n//   } = container\n//   setContainerSize({ width, height })\n// }\n\nexport class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    //this.resize = resize(this)\n  }\n\n  updateFullscreenState(fullscreenState) {\n    const container = this.content\n    const videoElement = document.getElementById('video-element')\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement)\n    } else {\n      collapseFullscreen(videoElement)\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState\n    const nextFullscreenState = nextProps.fullscreenState\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return\n    }\n\n    this.updateFullscreenState(nextFullscreenState)\n\n    return nextProps\n  }\n\n  render() {\n    let { containerSize, interactionMode, playerSize, refreshRate, fullscreenState, setContainerSize } = this.props\n\n    return [\n      <ReactResizeDetector\n        key={'resize detector'}\n        handleWidth\n        handleHeight\n        onResize={(width, height) => {\n          this.props.setContainerSize({ width, height })\n        }}\n        refreshMode=\"throttle\"\n        refreshRate={refreshRate || 15}\n      />,\n      <div\n        key=\"container\"\n        className={css.container}\n        style={fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize } : {}}\n        ref={el => (this.element = el)}\n        interaction-mode={interactionMode}\n        is-ie={`${isIE()}`}\n      >\n        <div className={css.content} style={fullscreenState === FullscreenState.NORMAL ? { ...playerSize } : { width: '100%', height: '100%' }} ref={el => (this.content = el)}>\n          {this.props.children}\n        </div>\n      </div>,\n    ]\n  }\n}\n\nexport default connect(\n  state => ({\n    containerSize: state.player.containerSize,\n    breakpoint: state.player.breakpoint,\n    interactionMode: state.player.interactionMode,\n    playerSize: state.player.playerSize,\n    fullscreenState: state.player.fullscreenState,\n  }),\n  dispatch => ({\n    setContainersize: (size) => dispatch(setContainerSize(size)),\n  })\n)(Container)"]},"metadata":{},"sourceType":"module"}