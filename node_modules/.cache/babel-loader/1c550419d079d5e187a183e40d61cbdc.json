{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Tabs/Tabs/index.tsx\";\nimport { isNumber } from 'lodash';\nimport React, { Component } from 'react';\nimport { TabList } from '../TabList';\nimport { TabPanel } from '../TabPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status\n */\nexport class Tabs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeTabIndex: this.props.defaultActiveTabIndex || 0\n    };\n    this.idPrefix = Math.random().toString().replace('.', '');\n\n    this.createBaseId = index => `${this.idPrefix}-${index}`;\n\n    this.isControlled = () => isNumber(this.props.activeTabIndex);\n\n    this.updateTabIndexState = index => {\n      this.setState({\n        activeTabIndex: index\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const stateIndexChanged = this.state.activeTabIndex !== prevState.activeTabIndex;\n\n    if (stateIndexChanged && this.props.onChange) {\n      this.props.onChange(this.state.activeTabIndex);\n    }\n  }\n\n  render() {\n    let activeTabIndex = this.isControlled() ? this.props.activeTabIndex : this.state.activeTabIndex;\n    const onChange = this.isControlled() ? this.props.onChange : this.updateTabIndexState;\n\n    if (!onChange) {\n      throw new Error('Tabs component is controlled but no tab change callback (onChange) was provided');\n    }\n\n    const childrenArray = React.Children.toArray(this.props.children);\n    let clonedTabPanels = childrenArray.filter(c => c.type === TabPanel);\n\n    if (activeTabIndex >= clonedTabPanels.length) {\n      activeTabIndex = clonedTabPanels.length - 1;\n    }\n\n    const tabListChild = childrenArray.find(c => c.type === TabList);\n    const clonedTabList = /*#__PURE__*/React.cloneElement(tabListChild, {\n      activeTabIndex,\n      onChange,\n      createBaseId: this.createBaseId\n    });\n    clonedTabPanels = clonedTabPanels.map((panel, index) => /*#__PURE__*/React.cloneElement(panel, {\n      active: index === activeTabIndex,\n      renderAllPanels: this.props.renderAllPanels,\n      id: `${this.createBaseId(index)}-panel`,\n      key: this.createBaseId(index)\n    }));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props.className,\n      children: [clonedTabList, clonedTabPanels]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Tabs/Tabs/index.tsx"],"names":["isNumber","React","Component","TabList","TabPanel","Tabs","state","activeTabIndex","props","defaultActiveTabIndex","idPrefix","Math","random","toString","replace","createBaseId","index","isControlled","updateTabIndexState","setState","componentDidUpdate","prevProps","prevState","stateIndexChanged","onChange","render","Error","childrenArray","Children","toArray","children","clonedTabPanels","filter","c","type","length","tabListChild","find","clonedTabList","cloneElement","map","panel","active","renderAllPanels","id","key","className"],"mappings":"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","sourcesContent":["import { isNumber } from 'lodash';\nimport React, { Component, ReactElement } from 'react';\n\nimport { TabList } from '../TabList';\nimport { TabPanel } from '../TabPanel';\n\nexport interface TabsProps {\n  /**\n   * Changes this to a controlled component by only forcing this index to be active.\n   */\n  activeTabIndex?: number;\n\n  children: ReactElement<any, any>[];\n\n  className?: string;\n\n  /**\n   * Index to start the active tab on, if not provided by `activeTabIndex`.\n   */\n  defaultActiveTabIndex?: number;\n\n  /**\n   * Callback for when a tab index is requested to be active.\n   *\n   * @param activeTabIndex  New active tab index.\n   */\n  onChange?: (activeTabIndex: number) => void;\n\n  renderAllPanels?: boolean;\n}\n\nexport interface TabsState {\n  activeTabIndex: number;\n}\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status\n */\nexport class Tabs extends Component<TabsProps> {\n  state: TabsState = {\n    activeTabIndex: this.props.defaultActiveTabIndex || 0,\n  };\n\n  componentDidUpdate(prevProps: TabsProps, prevState: TabsState) {\n    const stateIndexChanged =\n      this.state.activeTabIndex !== prevState.activeTabIndex;\n    if (stateIndexChanged && this.props.onChange) {\n      this.props.onChange(this.state.activeTabIndex);\n    }\n  }\n\n  idPrefix = Math.random().toString().replace('.', '');\n\n  createBaseId = (index: number) => `${this.idPrefix}-${index}`;\n\n  isControlled = () => isNumber(this.props.activeTabIndex);\n\n  updateTabIndexState = (index: number) => {\n    this.setState({ activeTabIndex: index });\n  };\n\n  render() {\n    let activeTabIndex = this.isControlled()\n      ? this.props.activeTabIndex\n      : this.state.activeTabIndex;\n\n    const onChange = this.isControlled()\n      ? this.props.onChange\n      : this.updateTabIndexState;\n\n    if (!onChange) {\n      throw new Error(\n        'Tabs component is controlled but no tab change callback (onChange) was provided'\n      );\n    }\n\n    const childrenArray = React.Children.toArray(\n      this.props.children\n    ) as ReactElement[];\n    let clonedTabPanels = childrenArray.filter((c) => c.type === TabPanel);\n\n    if (activeTabIndex! >= clonedTabPanels.length) {\n      activeTabIndex = clonedTabPanels.length - 1;\n    }\n\n    const tabListChild = childrenArray.find((c) => c.type === TabList)!;\n    const clonedTabList = React.cloneElement(tabListChild, {\n      activeTabIndex,\n      onChange,\n      createBaseId: this.createBaseId,\n    });\n\n    clonedTabPanels = clonedTabPanels.map((panel, index) =>\n      React.cloneElement(panel, {\n        active: index === activeTabIndex,\n        renderAllPanels: this.props.renderAllPanels,\n        id: `${this.createBaseId(index)}-panel`,\n        key: this.createBaseId(index),\n      })\n    );\n\n    return (\n      <div className={this.props.className}>\n        {clonedTabList}\n        {clonedTabPanels}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}