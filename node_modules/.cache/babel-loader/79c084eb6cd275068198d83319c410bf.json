{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState, DefaultResolutions } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nimport { selectVideoFormat } from \"portal/scenes/CoursePlayer/utilities/video-format-support\";\nimport { getClipProgressById } from 'portal/scenes/CoursePlayer/utilities/sync-clip-progress';\nimport { coursesApi } from \"services/courses\";\nconst validModes = Object.values(InteractionModes);\nconst mediaType = selectVideoFormat();\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  views: null,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  currentLecture: null,\n  volumeSliderActive: false,\n  course: null,\n  muted: false,\n  currentUrl: null,\n  currentUrlIndex: 0,\n  previousVolume: null,\n  title: null,\n  subtitle: null,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  clipProgress: [],\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  clipId: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: DefaultResolutions[mediaType][0],\n  supportedResolutions: null,\n  mediaType,\n  settings: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        }; // console.log(\"Play: \", state.overlay);\n      }\n\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n    pause: (state, action) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setCurrentUrl: (state, action) => {\n      state.currentUrl = action.payload;\n    },\n    setCurrentLecture: (state, action) => {\n      state.currentLecture = action.payload;\n    },\n    setCurrentViews: (state, action) => {\n      state.views = action.payload;\n    },\n    setCurrentUrlIndex: (state, action) => {\n      state.currentUrlIndex = action.payload;\n    },\n    setPlaying: (state, action) => {\n      state.playing = action.payload;\n    },\n    setTitle: (state, action) => {\n      state.title = action.payload;\n    },\n    setSubtitle: (state, action) => {\n      state.subtitle = action.payload;\n    },\n    syncSettings: (state, action) => {\n      state.settings = action.payload;\n    },\n    setMediaType: (state, action) => {\n      state.mediaType = action.payload;\n    },\n    setPreferredResolutions: (state, action) => {\n      state.preferredResolutions = action.payload;\n    },\n    setCurrentResolution: (state, action) => {\n      state.currentResolution = action.payload;\n    },\n    setSupportedResolutions: (state, action) => {\n      state.supportedResolutions = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setClipId: (state, action) => {\n      const lastProgressTimeFromLocalStorage = getClipProgressById(state.clipProgress, action.payload);\n      state.time = lastProgressTimeFromLocalStorage || 0;\n      state.clipId = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setContainerSize: (state, action) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize);\n\n      if (containerSize.width === 0 && containerSize.height === 0 && state.containerSize) {\n        containerSize = state.containerSize;\n      }\n\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint;\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setAutoplay: (state, action) => {\n      state.userAutoplaySetting = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(coursesApi.endpoints.fetchPlayerCourse.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.course = payload;\n    });\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setMediaType,\n  syncSettings,\n  setCurrentUrl,\n  setCurrentUrlIndex,\n  setSubtitle,\n  setTitle,\n  setClipId,\n  setCurrentLecture\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;\nexport const selectPlayerCourse = state => state.player.course;\nexport const selectDuration = state => state.player.duration;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","DefaultResolutions","buildClipProgress","calculateAspectRatio","findBreakpoint","selectVideoFormat","getClipProgressById","coursesApi","validModes","Object","values","mediaType","includes","modes","mode","indexOf","initialState","playing","views","playbackSpeed","activeMenu","currentLecture","volumeSliderActive","course","muted","currentUrl","currentUrlIndex","previousVolume","title","subtitle","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","clipProgress","buffering","containerSize","breakpoint","clipId","playerSize","layout","loading","userAutoplaySetting","currentResolution","supportedResolutions","settings","playerSlice","name","reducers","play","state","action","icon","payload","key","Math","random","fade","pause","setPlaybackSpeed","setCurrentUrl","setCurrentLecture","setCurrentViews","setCurrentUrlIndex","setPlaying","setTitle","setSubtitle","syncSettings","setMediaType","setPreferredResolutions","preferredResolutions","setCurrentResolution","setSupportedResolutions","setActiveMenu","setClipId","lastProgressTimeFromLocalStorage","setVolumeSliderActive","setVolume","clamped","volume","setPreviousVolume","setInteractionMode","Error","join","interactionMode","showUI","visible","toggleFullscreen","fullscreenState","FULLSCREEN","NORMAL","hideUI","setDuration","setTime","setContainerSize","console","log","width","height","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setLoading","setAutoplay","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","fastRewind","startTime","rewindTime","toggleMute","extraReducers","builder","addMatcher","endpoints","fetchPlayerCourse","matchFulfilled","selectPlayer","player","actions","togglePlayPause","dispatch","getState","reducer","selectPlayerCourse","selectDuration"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n  DefaultResolutions,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nimport { selectVideoFormat } from \"portal/scenes/CoursePlayer/utilities/video-format-support\";\nimport { getClipProgressById, getClipProgressFromLocalStorage } from 'portal/scenes/CoursePlayer/utilities/sync-clip-progress'\nimport {\n  CoursePlayerResponse,\n  CourseResponse,\n  coursesApi,\n  Lecture,\n} from \"services/courses\";\nimport { Url } from \"url\";\n\nconst validModes = Object.values(InteractionModes);\nconst mediaType = selectVideoFormat();\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface Progress {\n  clipId: string;\n  videoSecondsWatched: number\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  currentUrl: string;\n  views: string[];\n  clipId: string;\n  title: string;\n  subtitle: string;\n  currentUrlIndex: number;\n  currentLecture: Lecture;\n  course: CoursePlayerResponse;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  resolution: ResolutionH;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: Progress[];\n  buffering: boolean;\n  containerSize: ContainerSize;\n  breakpoint: ContainerSize;\n  playerSize: ContainerSize;\n  layout: string;\n  loading: boolean;\n  userAutoplaySetting: boolean;\n  preferredResolutions: any;\n  currentResolution: any;\n  supportedResolutions: Resolution[];\n  mediaType: string;\n  settings: any;\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\ninterface ResolutionH {\n  width: number;\n  height: number;\n  index: number;\n}\ninterface Resolution {\n  width?: string;\n  height: string;\n  index: number;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  views: null,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  currentLecture: null,\n  volumeSliderActive: false,\n  course: null,\n  muted: false,\n  currentUrl: null,\n  currentUrlIndex: 0,\n  previousVolume: null,\n  title: null,\n  subtitle: null,\n\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n\n  clipProgress: [],\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  clipId: null,\n  playerSize: null,\n  layout: null,\n  loading: false,\n  userAutoplaySetting: false,\n  ...Defaults,\n  currentResolution: DefaultResolutions[mediaType][0],\n  supportedResolutions: null,\n  mediaType,\n  settings: null,\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n        // console.log(\"Play: \", state.overlay);\n      }\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n\n    pause: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PAUSE\";\n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n        \n      }\n      state.playing = false;\n      state.playheadStart = state.time;\n    },\n\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setCurrentUrl: (state, action: PayloadAction<string>) => {\n      state.currentUrl = action.payload;\n    },\n\n    setCurrentLecture: (state, action: PayloadAction<Lecture>) => {\n      state.currentLecture = action.payload;\n    },\n\n    setCurrentViews: (state, action: PayloadAction<string[]>) => {\n      state.views = action.payload;\n    },\n\n    setCurrentUrlIndex: (state, action: PayloadAction<number>) => {\n      state.currentUrlIndex = action.payload;\n    },\n\n    setPlaying: (state, action: PayloadAction<boolean>) => {\n      state.playing = action.payload;\n    },\n    setTitle: (state, action: PayloadAction<string>) => {\n      state.title = action.payload;\n    },\n\n    setSubtitle: (state, action: PayloadAction<string>) => {\n      state.subtitle = action.payload;\n    },\n\n    syncSettings: (state, action: PayloadAction<any>) => {\n      state.settings = action.payload;\n    },\n\n    setMediaType: (state, action: PayloadAction<string>) => {\n      state.mediaType = action.payload;\n    },\n\n    setPreferredResolutions: (state, action: PayloadAction<any>) => {\n      state.preferredResolutions = action.payload;\n    },\n\n    setCurrentResolution: (state, action: PayloadAction<any>) => {\n      state.currentResolution = action.payload;\n    },\n\n    setSupportedResolutions: (state, action: PayloadAction<Resolution[]>) => {\n      state.supportedResolutions = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setClipId: (state, action: PayloadAction<string>) => {\n      const lastProgressTimeFromLocalStorage = getClipProgressById(state.clipProgress, action.payload)\n      state.time = lastProgressTimeFromLocalStorage ||  0\n      state.clipId = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setContainerSize: (state, action: PayloadAction<ContainerSize>) => {\n      var containerSize = action.payload;\n      console.log(\"Container: \", containerSize);\n      if (\n        containerSize.width === 0 &&\n        containerSize.height === 0 &&\n        state.containerSize\n      ) {\n        containerSize = state.containerSize;\n      }\n      const breakpoint = findBreakpoint(containerSize);\n      state.breakpoint = breakpoint;\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${breakpoint.height}p`;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n\n    setAutoplay: (state, action: PayloadAction<boolean>) => {\n      state.userAutoplaySetting = action.payload;\n    },\n\n    setClipProgress: (state, action: PayloadAction<Progress>) => {\n      state.clipProgress = buildClipProgress(\n        state.clipProgress,\n        action.payload,\n        state.duration\n      );\n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      coursesApi.endpoints.fetchPlayerCourse.matchFulfilled,\n      (state, { payload }) => {\n        state.course = payload;\n      }\n    );\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n  setAutoplay,\n  setLoading,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setMediaType,\n  syncSettings,\n  setCurrentUrl,\n  setCurrentUrlIndex,\n  setSubtitle,\n  setTitle,\n  setClipId,\n  setCurrentLecture\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n\nexport const selectPlayerCourse = (state: RootState) => state.player.course;\nexport const selectDuration = (state: RootState) => state.player.duration;\n"]},"metadata":{},"sourceType":"module"}