{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{styledOptions,system,variant}from'@codecademy/gamut-styles';import{variance}from'@codecademy/variance';import styled from'@emotion/styled';var rows={1:1,2:2,3:3};var columns={1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,11:11};var gridProps=variance.create({rowOffset:{property:'gridRowStart',scale:rows,transform:function transform(row){return row===0?'auto':row;}},rowspan:{property:'gridRowEnd',scale:rows,transform:function transform(row){return\"span \".concat(row);}},size:{property:'gridColumnEnd',scale:_objectSpread(_objectSpread({},columns),{},{12:12}),transform:function transform(col){return\"span \".concat(col);}},offset:{property:'gridColumnStart',scale:_objectSpread({0:0},columns),transform:function transform(col){return col===0?'auto':\"\".concat(col+1);}}});var columnVariants=variant({variants:{fitContent:{display:'grid',gridTemplateColumns:'minmax(0, 1fr)'}}});var columnProps=variance.compose(system.layout,system.space,system.grid,gridProps);export var Column=styled('div',styledOptions(columnProps.propNames))(columnProps({size:12}),columnVariants,columnProps);Column.defaultProps={variant:'fitContent'};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Layout/Column.tsx"],"names":["styledOptions","system","variant","variance","styled","rows","columns","gridProps","create","rowOffset","property","scale","transform","row","rowspan","size","col","offset","columnVariants","variants","fitContent","display","gridTemplateColumns","columnProps","compose","layout","space","grid","Column","propNames","defaultProps"],"mappings":"2JAAA,OAASA,aAAT,CAAwBC,MAAxB,CAAgCC,OAAhC,KAA+C,0BAA/C,CACA,OAAqBC,QAArB,KAAqC,sBAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CAEA,GAAMC,CAAAA,IAAI,CAAG,CAAE,EAAG,CAAL,CAAQ,EAAG,CAAX,CAAc,EAAG,CAAjB,CAAb,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACd,EAAG,CADW,CAEd,EAAG,CAFW,CAGd,EAAG,CAHW,CAId,EAAG,CAJW,CAKd,EAAG,CALW,CAMd,EAAG,CANW,CAOd,EAAG,CAPW,CAQd,EAAG,CARW,CASd,EAAG,CATW,CAUd,GAAI,EAVU,CAWd,GAAI,EAXU,CAAhB,CAcA,GAAMC,CAAAA,SAAS,CAAGJ,QAAQ,CAACK,MAAT,CAAgB,CAChCC,SAAS,CAAE,CACTC,QAAQ,CAAE,cADD,CAETC,KAAK,CAAEN,IAFE,CAGTO,SAAS,CAAE,mBAACC,GAAD,QAAkBA,CAAAA,GAAG,GAAK,CAAR,CAAY,MAAZ,CAAqBA,GAAvC,EAHF,CADqB,CAMhCC,OAAO,CAAE,CACPJ,QAAQ,CAAE,YADH,CAEPC,KAAK,CAAEN,IAFA,CAGPO,SAAS,CAAE,mBAACC,GAAD,uBAAiBA,GAAjB,GAHJ,CANuB,CAWhCE,IAAI,CAAE,CACJL,QAAQ,CAAE,eADN,CAEJC,KAAK,gCAAOL,OAAP,MAAgB,GAAI,EAApB,EAFD,CAGJM,SAAS,CAAE,mBAACI,GAAD,uBAAyBA,GAAzB,GAHP,CAX0B,CAgBhCC,MAAM,CAAE,CACNP,QAAQ,CAAE,iBADJ,CAENC,KAAK,gBAAI,EAAG,CAAP,EAAaL,OAAb,CAFC,CAGNM,SAAS,CAAE,mBAACI,GAAD,QAAkBA,CAAAA,GAAG,GAAK,CAAR,CAAY,MAAZ,WAAwBA,GAAG,CAAG,CAA9B,CAAlB,EAHL,CAhBwB,CAAhB,CAAlB,CAuBA,GAAME,CAAAA,cAAc,CAAGhB,OAAO,CAAC,CAC7BiB,QAAQ,CAAE,CACRC,UAAU,CAAE,CACVC,OAAO,CAAE,MADC,CAEVC,mBAAmB,CAAE,gBAFX,CADJ,CADmB,CAAD,CAA9B,CASA,GAAMC,CAAAA,WAAW,CAAGpB,QAAQ,CAACqB,OAAT,CAClBvB,MAAM,CAACwB,MADW,CAElBxB,MAAM,CAACyB,KAFW,CAGlBzB,MAAM,CAAC0B,IAHW,CAIlBpB,SAJkB,CAApB,CAYA,MAAO,IAAMqB,CAAAA,MAAM,CAAGxB,MAAM,CAC1B,KAD0B,CAE1BJ,aAAa,CAACuB,WAAW,CAACM,SAAb,CAFa,CAAN,CAGPN,WAAW,CAAC,CAAER,IAAI,CAAE,EAAR,CAAD,CAHJ,CAGoBG,cAHpB,CAGoCK,WAHpC,CAAf,CAKPK,MAAM,CAACE,YAAP,CAAsB,CAAE5B,OAAO,CAAE,YAAX,CAAtB","sourcesContent":["import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\n\nconst rows = { 1: 1, 2: 2, 3: 3 };\n\nconst columns = {\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  10: 10,\n  11: 11,\n};\n\nconst gridProps = variance.create({\n  rowOffset: {\n    property: 'gridRowStart',\n    scale: rows,\n    transform: (row: number) => (row === 0 ? 'auto' : row),\n  },\n  rowspan: {\n    property: 'gridRowEnd',\n    scale: rows,\n    transform: (row) => `span ${row}`,\n  },\n  size: {\n    property: 'gridColumnEnd',\n    scale: { ...columns, 12: 12 },\n    transform: (col: number) => `span ${col}`,\n  },\n  offset: {\n    property: 'gridColumnStart',\n    scale: { 0: 0, ...columns },\n    transform: (col: number) => (col === 0 ? 'auto' : `${col + 1}`),\n  },\n});\n\nconst columnVariants = variant({\n  variants: {\n    fitContent: {\n      display: 'grid',\n      gridTemplateColumns: 'minmax(0, 1fr)',\n    },\n  },\n});\n\nconst columnProps = variance.compose(\n  system.layout,\n  system.space,\n  system.grid,\n  gridProps\n);\n\nexport type ColumnVariantProps = StyleProps<typeof columnVariants>;\nexport type ColumnStyleProps = StyleProps<typeof columnProps>;\n\nexport interface ColumnProps extends ColumnVariantProps, ColumnStyleProps {}\n\nexport const Column = styled(\n  'div',\n  styledOptions(columnProps.propNames)\n)<ColumnProps>(columnProps({ size: 12 }), columnVariants, columnProps);\n\nColumn.defaultProps = { variant: 'fitContent' };\n"]},"metadata":{},"sourceType":"module"}