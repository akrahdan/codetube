{"ast":null,"code":"import Uri from'jsuri';import{cfdata}from'libs/cfdata';import{userAttributes}from'libs/userAttributes';/**\n * superagent csrf plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {csrf} from '~/libs/superagent-auth';\n *\n * request\n *      .use(csrf)\n *\n */export function csrf(request){var authToken=cfdata.get('authenticity_token');if(authToken){request.set('X-CSRF-Token',authToken);}}/**\n * superagent userAuth plugin\n *\n * sets the user auth token param\n *\n * general usage:\n * import {userAuth} from '~/libs/superagent-auth';\n *\n * request\n *   .use(userAuth)\n *\n */export function userAuth(request){var userAuthToken=userAttributes.authenticationToken();if(userAuthToken){var uri=new Uri(request.url).addQueryParam('authentication_token',userAuthToken);request.url=uri.toString();}if(window.CFDATA.current_user){request.set('X-Auth-Token',window.CFDATA.current_user.authentication_token);}}/**\n * superagent API auth plugin\n *\n * sets the auth needed for API requests\n *\n * general usage:\n * import {apiAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(apiAuth)\n *\n */export function apiAuth(request){var userAuthToken=userAttributes.authenticationToken();if(userAuthToken){request.set('X-Auth-Token',userAuthToken);// request.set('X-User-Id', userAttributes.id());\n}}/**\n * superagent jwt plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {jwtAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(jwtAuth)\n *\n */export function jwtAuth(request){// const token = userAttributes.get('jwt');\n// if (token) {\n//   request.set('Authorization', `Bearer ${token}`);\n// }\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/superagent-auth.ts"],"names":["Uri","cfdata","userAttributes","csrf","request","authToken","get","set","userAuth","userAuthToken","authenticationToken","uri","url","addQueryParam","toString","window","CFDATA","current_user","authentication_token","apiAuth","jwtAuth"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,OAAhB,CAGA,OAASC,MAAT,KAAuB,aAAvB,CACA,OAASC,cAAT,KAA+B,qBAA/B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,IAAT,CAAcC,OAAd,CAA0C,CAC/C,GAAMC,CAAAA,SAAS,CAAGJ,MAAM,CAACK,GAAP,CAAW,oBAAX,CAAlB,CACA,GAAID,SAAJ,CAAe,CACbD,OAAO,CAACG,GAAR,CAAY,cAAZ,CAA4BF,SAA5B,EACD,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASG,CAAAA,QAAT,CAAkBJ,OAAlB,CAA8C,CACnD,GAAMK,CAAAA,aAAa,CAAGP,cAAc,CAACQ,mBAAf,EAAtB,CACA,GAAID,aAAJ,CAAmB,CACjB,GAAME,CAAAA,GAAG,CAAG,GAAIX,CAAAA,GAAJ,CAAQI,OAAO,CAACQ,GAAhB,EAAqBC,aAArB,CACV,sBADU,CAEVJ,aAFU,CAAZ,CAIAL,OAAO,CAACQ,GAAR,CAAcD,GAAG,CAACG,QAAJ,EAAd,CACD,CACD,GAAIC,MAAM,CAACC,MAAP,CAAeC,YAAnB,CAAiC,CAC/Bb,OAAO,CAACG,GAAR,CACE,cADF,CAEEQ,MAAM,CAACC,MAAP,CAAeC,YAAf,CAA4BC,oBAF9B,EAID,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,OAAT,CAAiBf,OAAjB,CAA6C,CAClD,GAAMK,CAAAA,aAAa,CAAGP,cAAc,CAACQ,mBAAf,EAAtB,CACA,GAAID,aAAJ,CAAmB,CACjBL,OAAO,CAACG,GAAR,CAAY,cAAZ,CAA4BE,aAA5B,EACA;AACD,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASW,CAAAA,OAAT,CAAiBhB,OAAjB,CAA6C,CAClD;AACA;AACA;AACA;AACD","sourcesContent":["import Uri from 'jsuri';\nimport { SuperAgentRequest } from 'superagent';\n\nimport { cfdata } from 'libs/cfdata';\nimport { userAttributes } from 'libs/userAttributes';\n\n/**\n * superagent csrf plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {csrf} from '~/libs/superagent-auth';\n *\n * request\n *      .use(csrf)\n *\n */\nexport function csrf(request: SuperAgentRequest) {\n  const authToken = cfdata.get('authenticity_token');\n  if (authToken) {\n    request.set('X-CSRF-Token', authToken);\n  }\n}\n\n/**\n * superagent userAuth plugin\n *\n * sets the user auth token param\n *\n * general usage:\n * import {userAuth} from '~/libs/superagent-auth';\n *\n * request\n *   .use(userAuth)\n *\n */\nexport function userAuth(request: SuperAgentRequest) {\n  const userAuthToken = userAttributes.authenticationToken();\n  if (userAuthToken) {\n    const uri = new Uri(request.url).addQueryParam(\n      'authentication_token',\n      userAuthToken\n    );\n    request.url = uri.toString();\n  }\n  if (window.CFDATA!.current_user) {\n    request.set(\n      'X-Auth-Token',\n      window.CFDATA!.current_user.authentication_token\n    );\n  }\n}\n\n/**\n * superagent API auth plugin\n *\n * sets the auth needed for API requests\n *\n * general usage:\n * import {apiAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(apiAuth)\n *\n */\nexport function apiAuth(request: SuperAgentRequest) {\n  const userAuthToken = userAttributes.authenticationToken();\n  if (userAuthToken) {\n    request.set('X-Auth-Token', userAuthToken);\n    // request.set('X-User-Id', userAttributes.id());\n  }\n}\n\n/**\n * superagent jwt plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {jwtAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(jwtAuth)\n *\n */\nexport function jwtAuth(request: SuperAgentRequest) {\n  // const token = userAttributes.get('jwt');\n  // if (token) {\n  //   request.set('Authorization', `Bearer ${token}`);\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}