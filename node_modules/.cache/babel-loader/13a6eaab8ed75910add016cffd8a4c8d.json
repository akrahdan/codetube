{"ast":null,"code":"import _defineProperty from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _reducer;import{configureStore}from\"@reduxjs/toolkit\";import{connectRoutes}from'redux-first-router';import queryString from'query-string';import{routesMap}from'portal/routes';import{authApi}from\"services/auth\";import{projectApi}from\"services/projects\";import{coursesApi}from\"services/courses\";import modalReducer from'state/modals/modalSlice';import authReducer from'state/auth/authSlice';import courseReducer from\"state/course/courseSplice\";import projectReducer from'state/project/projectSplice';import playerReducer from'state/player/playerSlice';import instructorReducer from'state/instructor/instructorSplice';import curriculumSplice from\"state/curriculum/currriculumSplice\";import targetSplice from\"state/target/targetSplice\";var _connectRoutes=connectRoutes(routesMap,{querySerializer:queryString,initialDispatch:false,scrollTop:true}),routerMiddleWare=_connectRoutes.middleware,routerEnhancer=_connectRoutes.enhancer,initialDispatch=_connectRoutes.initialDispatch,location=_connectRoutes.reducer;export var store=configureStore({reducer:(_reducer={location:location,auth:authReducer,modal:modalReducer,player:playerReducer,course:courseReducer,curriculum:curriculumSplice,project:projectReducer,target:targetSplice,instructor:instructorReducer},_defineProperty(_reducer,authApi.reducerPath,authApi.reducer),_defineProperty(_reducer,coursesApi.reducerPath,coursesApi.reducer),_defineProperty(_reducer,projectApi.reducerPath,projectApi.reducer),_reducer),middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware({serializableCheck:false}).concat(authApi.middleware,routerMiddleWare);},enhancers:function enhancers(defaultEnhancers){return defaultEnhancers.concat(routerEnhancer);}});initialDispatch();","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/store/index.ts"],"names":["configureStore","connectRoutes","queryString","routesMap","authApi","projectApi","coursesApi","modalReducer","authReducer","courseReducer","projectReducer","playerReducer","instructorReducer","curriculumSplice","targetSplice","querySerializer","initialDispatch","scrollTop","routerMiddleWare","middleware","routerEnhancer","enhancer","location","reducer","store","auth","modal","player","course","curriculum","project","target","instructor","reducerPath","getDefaultMiddleware","serializableCheck","concat","enhancers","defaultEnhancers"],"mappings":"sLAAA,OAASA,cAAT,KAA0E,kBAA1E,CACA,OAASC,aAAT,KAA8B,oBAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,OAASC,SAAT,KAA0B,eAA1B,CAGA,OAASC,OAAT,KAAwB,eAAxB,CACA,OAASC,UAAT,KAA2B,mBAA3B,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,yBAAzB,CACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,2BAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,MAAOC,CAAAA,aAAP,KAA0B,0BAA1B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,mCAA9B,CACA,MAAQC,CAAAA,gBAAR,KAA+B,oCAA/B,CACA,MAAOC,CAAAA,YAAP,KAAyB,2BAAzB,C,mBAiBsGb,aAAa,CAACE,SAAD,CAAY,CAC3HY,eAAe,CAAEb,WAD0G,CAE3Hc,eAAe,CAAE,KAF0G,CAG3HC,SAAS,CAAE,IAHgH,CAAZ,C,CAA/FC,gB,gBAAZC,U,CAAwCC,c,gBAAVC,Q,CAA0BL,e,gBAAAA,e,CAA0BM,Q,gBAATC,O,CAMjF,MAAO,IAAMC,CAAAA,KAAK,CAAGxB,cAAc,CAAC,CAChCuB,OAAO,YACHD,QAAQ,CAAEA,QADP,CAEHG,IAAI,CAAEjB,WAFH,CAGHkB,KAAK,CAAEnB,YAHJ,CAIHoB,MAAM,CAAEhB,aAJL,CAKHiB,MAAM,CAAEnB,aALL,CAMHoB,UAAU,CAAEhB,gBANT,CAOHiB,OAAO,CAAEpB,cAPN,CAQHqB,MAAM,CAAEjB,YARL,CASHkB,UAAU,CAAEpB,iBATT,2BAUFR,OAAO,CAAC6B,WAVN,CAUoB7B,OAAO,CAACmB,OAV5B,2BAWFjB,UAAU,CAAC2B,WAXT,CAWuB3B,UAAU,CAACiB,OAXlC,2BAYFlB,UAAU,CAAC4B,WAZT,CAYuB5B,UAAU,CAACkB,OAZlC,WADyB,CAehCJ,UAAU,CAAE,oBAACe,oBAAD,QACZA,CAAAA,oBAAoB,CAAC,CACjBC,iBAAiB,CAAE,KADF,CAAD,CAApB,CAEGC,MAFH,CAEUhC,OAAO,CAACe,UAFlB,CAE8BD,gBAF9B,CADY,EAfoB,CAmBhCmB,SAAS,CAAE,mBAACC,gBAAD,QAAsBA,CAAAA,gBAAgB,CAACF,MAAjB,CAAwBhB,cAAxB,CAAtB,EAnBqB,CAAD,CAA5B,CAqBPJ,eAAe","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes'\nimport rootReducer, { reduceInitialState } from 'portal/state/reducers';\nimport { SiteState } from 'state/types';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport { coursesApi } from \"services/courses\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nimport courseReducer from \"state/course/courseSplice\";\nimport projectReducer from 'state/project/projectSplice';\nimport playerReducer from 'state/player/playerSlice';\nimport instructorReducer from 'state/instructor/instructorSplice';\nimport  curriculumSplice  from \"state/curriculum/currriculumSplice\";\nimport targetSplice from \"state/target/targetSplice\";\n\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nconst { middleware: routerMiddleWare, enhancer: routerEnhancer, initialDispatch, reducer: location} = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialDispatch: false,\n    scrollTop: true,\n});\n\nexport const store = configureStore({\n    reducer: {\n        location: location,\n        auth: authReducer,\n        modal: modalReducer,\n        player: playerReducer,\n        course: courseReducer,\n        curriculum: curriculumSplice,\n        project: projectReducer,\n        target: targetSplice,\n        instructor: instructorReducer,\n        [authApi.reducerPath]: authApi.reducer,\n        [coursesApi.reducerPath]: coursesApi.reducer,\n        [projectApi.reducerPath]: projectApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware({\n        serializableCheck: false\n    }).concat(authApi.middleware, routerMiddleWare),\n    enhancers: (defaultEnhancers) => defaultEnhancers.concat(routerEnhancer)\n})\ninitialDispatch()\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n ReturnType, \n RootState,\n unknown,\n Action<string>\n >;"]},"metadata":{},"sourceType":"module"}