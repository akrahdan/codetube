{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Profile/CoursesSection/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Anchor, Text } from '@codecademy/gamut';\nimport { ListSection } from '@codecademy/gamut-labs';\nimport React, { useEffect, useState } from 'react';\nimport { catalogPath } from 'libs/urlHelpers';\nimport { useGetMyProjectsQuery } from 'services/projects';\nimport { EnrollmentCard } from './EnrollmentCard';\nimport { EnrollmentLoadingCard } from './EnrollmentLoadingCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CoursesSection = ({\n  isCurrentUser,\n  enrollments\n}) => {\n  _s();\n\n  const {\n    data: projectsQuery,\n    isLoading\n  } = useGetMyProjectsQuery();\n  const [projects, setProjects] = useState();\n  const loadingCardsToDisplay = enrollments.length > 3 ? enrollments.slice(0, 3) : enrollments;\n  const isEmpty = (projects === null || projects === void 0 ? void 0 : projects.length) === 0;\n\n  const renderEmptyMessage = () => /*#__PURE__*/_jsxDEV(Text, {\n    children: [/*#__PURE__*/_jsxDEV(Anchor, {\n      href: catalogPath,\n      onClick: () => console.log(),\n      variant: \"standard\",\n      children: \"Browse our Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), ' ', \"to start a course now\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    if (projectsQuery && projectsQuery.length) {\n      const rresult = projectsQuery.map(q => q.project);\n      setProjects(rresult);\n    }\n  }, [projectsQuery]);\n\n  const renderContent = () => isEmpty ? renderEmptyMessage() : projects === null || projects === void 0 ? void 0 : projects.map(project => /*#__PURE__*/_jsxDEV(EnrollmentCard, {\n    containerProgress: {\n      percent_complete: 0\n    },\n    id: project.id,\n    title: project.title,\n    onEnrollmentClick: value => console.log()\n  }, project.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this));\n\n  const renderLoadingState = () => loadingCardsToDisplay.map(enrollment => /*#__PURE__*/_jsxDEV(EnrollmentLoadingCard, {}, `enrollment-loading-card-${enrollment.id}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this));\n\n  if (!isCurrentUser && isEmpty) return null;\n  return /*#__PURE__*/_jsxDEV(ListSection, {\n    title: \"My Projects\",\n    onShowAllOrLessClick: () => console.log(),\n    children: isLoading ? renderLoadingState() : renderContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoursesSection, \"Eul4tRKE3q+jh9SeQ04gFRaeASk=\", false, function () {\n  return [useGetMyProjectsQuery];\n});\n\n_c = CoursesSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoursesSection\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Profile/CoursesSection/index.tsx"],"names":["Anchor","Text","ListSection","React","useEffect","useState","catalogPath","useGetMyProjectsQuery","EnrollmentCard","EnrollmentLoadingCard","CoursesSection","isCurrentUser","enrollments","data","projectsQuery","isLoading","projects","setProjects","loadingCardsToDisplay","length","slice","isEmpty","renderEmptyMessage","console","log","rresult","map","q","project","renderContent","percent_complete","id","title","value","renderLoadingState","enrollment"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAIA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;AAaA,OAAO,MAAMC,cAA6C,GAAG,CAAC;AAC5DC,EAAAA,aAD4D;AAE5DC,EAAAA;AAF4D,CAAD,KAGvD;AAAA;;AAGJ,QAAM;AAAEC,IAAAA,IAAI,EAAEC,aAAR;AAAuBC,IAAAA;AAAvB,MAAqCR,qBAAqB,EAAhE;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,EAAxC;AACA,QAAMa,qBAAqB,GACzBN,WAAW,CAACO,MAAZ,GAAqB,CAArB,GAAyBP,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAzB,GAAmDR,WADrD;AAEA,QAAMS,OAAO,GAAG,CAAAL,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,MAAqB,CAArC;;AACA,QAAMG,kBAAkB,GAAG,mBACzB,QAAC,IAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,IAAI,EAAEhB,WADR;AAEE,MAAA,OAAO,EAAE,MAAMiB,OAAO,CAACC,GAAR,EAFjB;AAGE,MAAA,OAAO,EAAC,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOY,GAPZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,aAAa,IAAIA,aAAa,CAACK,MAAnC,EAA2C;AACzC,YAAMM,OAAgC,GAAGX,aAAa,CAACY,GAAd,CAAkBC,CAAC,IAAIA,CAAC,CAACC,OAAzB,CAAzC;AACAX,MAAAA,WAAW,CAACQ,OAAD,CAAX;AACD;AACF,GALQ,EAKN,CAACX,aAAD,CALM,CAAT;;AASA,QAAMe,aAAa,GAAG,MACpBR,OAAO,GACHC,kBAAkB,EADf,GAEHN,QAFG,aAEHA,QAFG,uBAEHA,QAAQ,CAAEU,GAAV,CAAeE,OAAD,iBACd,QAAC,cAAD;AAEE,IAAA,iBAAiB,EACf;AACEE,MAAAA,gBAAgB,EAAE;AADpB,KAHJ;AAOE,IAAA,EAAE,EAAEF,OAAO,CAACG,EAPd;AAQE,IAAA,KAAK,EAAEH,OAAO,CAACI,KARjB;AAUE,IAAA,iBAAiB,EAAGC,KAAD,IAAWV,OAAO,CAACC,GAAR;AAVhC,KACOI,OAAO,CAACG,EADf;AAAA;AAAA;AAAA;AAAA,UADA,CAHN;;AAkBA,QAAMG,kBAAkB,GAAG,MACzBhB,qBAAqB,CAACQ,GAAtB,CAA2BS,UAAD,iBACxB,QAAC,qBAAD,MAA6B,2BAA0BA,UAAU,CAACJ,EAAG,EAArE;AAAA;AAAA;AAAA;AAAA,UADF,CADF;;AAKA,MAAI,CAACpB,aAAD,IAAkBU,OAAtB,EAA+B,OAAO,IAAP;AAC/B,sBACE,QAAC,WAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,oBAAoB,EAAE,MAAME,OAAO,CAACC,GAAR,EAF9B;AAAA,cAIGT,SAAS,GAAGmB,kBAAkB,EAArB,GAA0BL,aAAa;AAJnD;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjEM;;GAAMnB,c;UAMgCH,qB;;;KANhCG,c","sourcesContent":["import { Anchor, Text } from '@codecademy/gamut';\nimport { ListSection } from '@codecademy/gamut-labs';\nimport React, { useEffect, useState } from 'react';\n\nimport { catalogPath } from 'libs/urlHelpers';\nimport { useGetMyProjectsQuery } from 'services/projects';\nimport type { OrderResponse, ProjectEntityResponse } from 'services/projects';\nimport { allCourses } from './allCourses';\n\nimport { EnrollmentCard } from './EnrollmentCard';\nimport { EnrollmentLoadingCard } from './EnrollmentLoadingCard';\n\nexport interface Enrollment {\n  length: number,\n  id: string\n}\nexport type CoursesSectionProps = {\n  isCurrentUser: boolean;\n  enrollments: Enrollment[];\n};\n\n\n\nexport const CoursesSection: React.FC<CoursesSectionProps> = ({\n  isCurrentUser,\n  enrollments,\n}) => {\n\n  \n  const { data: projectsQuery, isLoading } = useGetMyProjectsQuery()\n  const [projects, setProjects] = useState<ProjectEntityResponse[]>()\n  const loadingCardsToDisplay =\n    enrollments.length > 3 ? enrollments.slice(0, 3) : enrollments;\n  const isEmpty = projects?.length === 0;\n  const renderEmptyMessage = () => (\n    <Text>\n      <Anchor\n        href={catalogPath}\n        onClick={() => console.log()}\n        variant=\"standard\"\n      >\n        Browse our Projects\n      </Anchor>{' '}\n      to start a course now\n    </Text>\n  );\n\n  useEffect(() => {\n    if (projectsQuery && projectsQuery.length) {\n      const rresult: ProjectEntityResponse[] = projectsQuery.map(q => q.project)\n      setProjects(rresult)\n    }\n  }, [projectsQuery])\n\n\n\n  const renderContent = () =>\n    isEmpty\n      ? renderEmptyMessage()\n      : projects?.map((project) => (\n        <EnrollmentCard\n          key={project.id}\n          containerProgress={\n            {\n              percent_complete: 0\n            }\n          }\n          id={project.id}\n          title={project.title}\n\n          onEnrollmentClick={(value) => console.log()}\n        />\n      ));\n\n  const renderLoadingState = () =>\n    loadingCardsToDisplay.map((enrollment) => (\n      <EnrollmentLoadingCard key={`enrollment-loading-card-${enrollment.id}`} />\n    ));\n\n  if (!isCurrentUser && isEmpty) return null;\n  return (\n    <ListSection\n      title=\"My Projects\"\n      onShowAllOrLessClick={() => console.log()}\n    >\n      {isLoading ? renderLoadingState() : renderContent()}\n    </ListSection>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}