{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/TextArea.tsx\",\n    _s = $RefreshSig$();\n\nimport styled from '@emotion/styled';\nimport React, { forwardRef, useState } from 'react';\nimport { conditionalStyles, conditionalStyleState, formFieldStyles } from './styles/shared-system-props';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTextArea = styled.textarea`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  position: initial;\n`;\n_c = StyledTextArea;\nexport const TextArea = /*#__PURE__*/forwardRef(_c2 = _s(({\n  error,\n  className,\n  id,\n  ...rest\n}, ref) => {\n  _s();\n\n  const [activated, setActivated] = useState(false);\n\n  const changeHandler = event => {\n    var _rest$onChange;\n\n    rest === null || rest === void 0 ? void 0 : (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, event);\n    setActivated(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTextArea, { ...rest,\n    id: id || rest.htmlFor,\n    className: className,\n    ref: ref,\n    variant: conditionalStyleState(Boolean(error), activated),\n    onChange: event => changeHandler(event)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n}, \"lubKhke75WbVElLuWqHxnnv4ZEY=\"));\n_c3 = TextArea;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledTextArea\");\n$RefreshReg$(_c2, \"TextArea$forwardRef\");\n$RefreshReg$(_c3, \"TextArea\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/TextArea.tsx"],"names":["styled","React","forwardRef","useState","conditionalStyles","conditionalStyleState","formFieldStyles","StyledTextArea","textarea","TextArea","error","className","id","rest","ref","activated","setActivated","changeHandler","event","onChange","htmlFor","Boolean"],"mappings":";;;AACA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,IAEEC,UAFF,EAIEC,QAJF,QAKO,OALP;AAOA,SACEC,iBADF,EAEEC,qBAFF,EAGEC,eAHF,QAIO,8BAJP;;AAmBA,MAAMC,cAAc,GAAGP,MAAM,CAACQ,QAAwB;AACtD,IAAIF,eAAgB;AACpB,IAAIF,iBAAkB;AACtB;AACA,CAJA;KAAMG,c;AAMN,OAAO,MAAME,QAAQ,gBAAGP,UAAU,UAChC,CAAC;AAAEQ,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA,EAApB;AAAwB,KAAGC;AAA3B,CAAD,EAAoCC,GAApC,KAA4C;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMc,aAAa,GAAIC,KAAD,IAA6C;AAAA;;AACjEL,IAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,8BAAAA,IAAI,CAAEM,QAAN,uEAAAN,IAAI,EAAaK,KAAb,CAAJ;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;;AAKA,sBACE,QAAC,cAAD,OACMH,IADN;AAEE,IAAA,EAAE,EAAED,EAAE,IAAIC,IAAI,CAACO,OAFjB;AAGE,IAAA,SAAS,EAAET,SAHb;AAIE,IAAA,GAAG,EAAEG,GAJP;AAKE,IAAA,OAAO,EAAET,qBAAqB,CAACgB,OAAO,CAACX,KAAD,CAAR,EAAiBK,SAAjB,CALhC;AAME,IAAA,QAAQ,EAAGG,KAAD,IAAWD,aAAa,CAACC,KAAD;AANpC;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAnB+B,kCAA3B;MAAMT,Q","sourcesContent":["import { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  TextareaHTMLAttributes,\n  useState,\n} from 'react';\n\nimport {\n  conditionalStyles,\n  conditionalStyleState,\n  formFieldStyles,\n} from './styles/shared-system-props';\n\nexport type TextWrapperProps = TextareaHTMLAttributes<HTMLTextAreaElement> & {\n  className?: string;\n  error?: boolean;\n  htmlFor?: string;\n  name?: string;\n  required?: boolean;\n  value?: string;\n};\n\nexport interface TextAreaProps\n  extends TextWrapperProps,\n    StyleProps<typeof conditionalStyles> {}\n\nconst StyledTextArea = styled.textarea<TextAreaProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  position: initial;\n`;\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextWrapperProps>(\n  ({ error, className, id, ...rest }, ref) => {\n    const [activated, setActivated] = useState(false);\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n      rest?.onChange?.(event);\n      setActivated(true);\n    };\n\n    return (\n      <StyledTextArea\n        {...rest}\n        id={id || rest.htmlFor}\n        className={className}\n        ref={ref}\n        variant={conditionalStyleState(Boolean(error), activated)}\n        onChange={(event) => changeHandler(event)}\n      />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}