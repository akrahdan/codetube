{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { breakpoints as originalBreakpoints } from '@codecademy/gamut-styles';\nimport { mapValues } from 'lodash';\nimport { createBreakpoint } from 'react-use';\nexport var breakpoints = mapValues(_objectSpread({\n  xxs: 0\n}, originalBreakpoints), function (value) {\n  return parseInt(value, 10);\n});\n/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport var useBreakpoint = createBreakpoint(breakpoints);\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAtOrAbove(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] >= breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAt(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] === breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAtOrBelow(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] <= breakpoints[breakpoint];\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut-labs/dist/lib/breakpointHooks/index.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","breakpoints","originalBreakpoints","mapValues","createBreakpoint","xxs","parseInt","useBreakpoint","useBreakpointAtOrAbove","breakpoint","currentBreakpoint","useBreakpointAt","useBreakpointAtOrBelow"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { breakpoints as originalBreakpoints } from '@codecademy/gamut-styles';\nimport { mapValues } from 'lodash';\nimport { createBreakpoint } from 'react-use';\nexport var breakpoints = mapValues(_objectSpread({\n  xxs: 0\n}, originalBreakpoints), function (value) {\n  return parseInt(value, 10);\n});\n/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport var useBreakpoint = createBreakpoint(breakpoints);\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAtOrAbove(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] >= breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAt(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] === breakpoints[breakpoint];\n}\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\n\nexport function useBreakpointAtOrBelow(breakpoint) {\n  var currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] <= breakpoints[breakpoint];\n}"]},"metadata":{},"sourceType":"module"}