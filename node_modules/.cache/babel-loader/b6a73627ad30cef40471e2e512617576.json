{"ast":null,"code":"import{each,isObject}from'lodash';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var formatAsOptions=function formatAsOptions(_ref){var label=_ref.label,value=_ref.value,key=_ref.key;var option=key?/*#__PURE__*/_jsx(\"option\",{label:label,value:value,\"data-testid\":key,children:label},key):/*#__PURE__*/_jsx(\"option\",{label:value,value:value,\"data-testid\":label,children:value},label);return option;};export var parseOptions=function parseOptions(_ref2){var options=_ref2.options,id=_ref2.id;var parsedOptions=[];if(options instanceof Array){options.forEach(function(value){var label=id?\"\".concat(id,\"-\").concat(value):value;parsedOptions.push({label:label,value:value});});}else if(isObject(options)){each(options,function(label,value){var key=id?\"\".concat(id,\"-\").concat(value):value;parsedOptions.push({label:label,value:value,key:key});});}return parsedOptions;};export var parseSelectOptions=function parseSelectOptions(props){return parseOptions(props).map(formatAsOptions);};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/utils.tsx"],"names":["each","isObject","React","formatAsOptions","label","value","key","option","parseOptions","options","id","parsedOptions","Array","forEach","push","parseSelectOptions","props","map"],"mappings":"AAAA,OAASA,IAAT,CAAeC,QAAf,KAA+B,QAA/B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,2CAQA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAA2C,IAAxCC,CAAAA,KAAwC,MAAxCA,KAAwC,CAAjCC,KAAiC,MAAjCA,KAAiC,CAA1BC,GAA0B,MAA1BA,GAA0B,CACjE,GAAMC,CAAAA,MAAM,CAAGD,GAAG,cAChB,eAAQ,KAAK,CAAEF,KAAf,CAAgC,KAAK,CAAEC,KAAvC,CAA8C,cAAaC,GAA3D,UACGF,KADH,EAA2BE,GAA3B,CADgB,cAKhB,eAAQ,KAAK,CAAED,KAAf,CAAkC,KAAK,CAAEA,KAAzC,CAAgD,cAAaD,KAA7D,UACGC,KADH,EAA2BD,KAA3B,CALF,CAUA,MAAOG,CAAAA,MAAP,CACD,CAZD,CAaA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,OAAuC,IAApCC,CAAAA,OAAoC,OAApCA,OAAoC,CAA3BC,EAA2B,OAA3BA,EAA2B,CACjE,GAAMC,CAAAA,aAAoC,CAAG,EAA7C,CAEA,GAAIF,OAAO,WAAYG,CAAAA,KAAvB,CAA8B,CAC5BH,OAAO,CAACI,OAAR,CAAgB,SAACR,KAAD,CAAW,CACzB,GAAMD,CAAAA,KAAK,CAAGM,EAAE,WAAMA,EAAN,aAAYL,KAAZ,EAAsBA,KAAtC,CACAM,aAAa,CAACG,IAAd,CAAmB,CAAEV,KAAK,CAALA,KAAF,CAASC,KAAK,CAALA,KAAT,CAAnB,EACD,CAHD,EAID,CALD,IAKO,IAAIJ,QAAQ,CAACQ,OAAD,CAAZ,CAAuB,CAC5BT,IAAI,CAACS,OAAD,CAAU,SAACL,KAAD,CAAQC,KAAR,CAAkB,CAC9B,GAAMC,CAAAA,GAAG,CAAGI,EAAE,WAAMA,EAAN,aAAYL,KAAZ,EAAsBA,KAApC,CACAM,aAAa,CAACG,IAAd,CAAmB,CAAEV,KAAK,CAALA,KAAF,CAASC,KAAK,CAALA,KAAT,CAAgBC,GAAG,CAAHA,GAAhB,CAAnB,EACD,CAHG,CAAJ,CAID,CAED,MAAOK,CAAAA,aAAP,CACD,CAhBM,CAkBP,MAAO,IAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAA6B,CAC7D,MAAOR,CAAAA,YAAY,CAACQ,KAAD,CAAZ,CAAoBC,GAApB,CAAwBd,eAAxB,CAAP,CACD,CAFM","sourcesContent":["import { each, isObject } from 'lodash';\nimport React from 'react';\nimport { OptionTypeBase } from 'react-select';\n\nexport type ParseOptionProps = {\n  id?: string | number;\n  options?: string[] | Record<string, string | number>;\n};\n\nconst formatAsOptions = ({ label, value, key }: OptionTypeBase) => {\n  const option = key ? (\n    <option label={label} key={key} value={value} data-testid={key}>\n      {label}\n    </option>\n  ) : (\n    <option label={value} key={label} value={value} data-testid={label}>\n      {value}\n    </option>\n  );\n\n  return option;\n};\nexport const parseOptions = ({ options, id }: ParseOptionProps) => {\n  const parsedOptions: Array<OptionTypeBase> = [];\n\n  if (options instanceof Array) {\n    options.forEach((value) => {\n      const label = id ? `${id}-${value}` : value;\n      parsedOptions.push({ label, value });\n    });\n  } else if (isObject(options)) {\n    each(options, (label, value) => {\n      const key = id ? `${id}-${value}` : value;\n      parsedOptions.push({ label, value, key });\n    });\n  }\n\n  return parsedOptions;\n};\n\nexport const parseSelectOptions = (props: ParseOptionProps) => {\n  return parseOptions(props).map(formatAsOptions);\n};\n"]},"metadata":{},"sourceType":"module"}