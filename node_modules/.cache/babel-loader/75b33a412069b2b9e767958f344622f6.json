{"ast":null,"code":"import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport { typographyElementVariants, typographyStyleVariants } from './variants';\nconst displayVariants = variant({\n  variants: typographyStyleVariants\n});\nconst elementVariants = variant({\n  prop: 'as',\n  variants: typographyElementVariants\n});\nconst truncateVariants = variant({\n  prop: 'truncate',\n  base: {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    width: 1,\n    maxWidth: 1\n  },\n  variants: {\n    ellipsis: {\n      textOverflow: 'ellipsis'\n    },\n    fade: {\n      position: 'relative',\n      textOverflow: 'clip',\n      '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        textColor: 'background-current',\n        inset: 0,\n        left: 0.65,\n        background: 'linear-gradient(to right, rgba(0, 0, 0, 0), currentColor 75%)'\n      }\n    }\n  }\n});\nconst textStates = system.states({\n  center: {\n    textAlign: 'center'\n  },\n  block: {\n    display: 'block'\n  },\n  screenreader: {\n    display: 'inline-block',\n    height: '1px',\n    width: '1px',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    position: 'absolute',\n    color: 'transparent',\n    left: -9999,\n    p: 0,\n    m: 0,\n    border: 'none'\n  },\n  smooth: {\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale'\n  }\n});\nconst textProps = variance.compose(system.layout, system.typography, system.color, system.space);\nexport const Text = styled('span', styledOptions())(elementVariants, displayVariants, truncateVariants, textStates, textProps);\nText.defaultProps = {\n  as: 'span',\n  m: 0\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Typography/Text.tsx"],"names":["styledOptions","system","variant","variance","styled","typographyElementVariants","typographyStyleVariants","displayVariants","variants","elementVariants","prop","truncateVariants","base","display","whiteSpace","overflow","width","maxWidth","ellipsis","textOverflow","fade","position","content","textColor","inset","left","background","textStates","states","center","textAlign","block","screenreader","height","color","p","m","border","smooth","WebkitFontSmoothing","MozOsxFontSmoothing","textProps","compose","layout","typography","space","Text","defaultProps","as"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,MAAxB,EAAgCC,OAAhC,QAA+C,0BAA/C;AACA,SAAqBC,QAArB,QAAqC,sBAArC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,yBAAT,EAAoCC,uBAApC,QAAmE,YAAnE;AAEA,MAAMC,eAAe,GAAGL,OAAO,CAAC;AAC9BM,EAAAA,QAAQ,EAAEF;AADoB,CAAD,CAA/B;AAIA,MAAMG,eAAe,GAAGP,OAAO,CAAC;AAC9BQ,EAAAA,IAAI,EAAE,IADwB;AAE9BF,EAAAA,QAAQ,EAAEH;AAFoB,CAAD,CAA/B;AAKA,MAAMM,gBAAgB,GAAGT,OAAO,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,UADyB;AAE/BE,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,cADL;AAEJC,IAAAA,UAAU,EAAE,QAFR;AAGJC,IAAAA,QAAQ,EAAE,QAHN;AAIJC,IAAAA,KAAK,EAAE,CAJH;AAKJC,IAAAA,QAAQ,EAAE;AALN,GAFyB;AAS/BT,EAAAA,QAAQ,EAAE;AACRU,IAAAA,QAAQ,EAAE;AACRC,MAAAA,YAAY,EAAE;AADN,KADF;AAIRC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,UADN;AAEJF,MAAAA,YAAY,EAAE,MAFV;AAGJ,iBAAW;AACTG,QAAAA,OAAO,EAAE,IADA;AAETD,QAAAA,QAAQ,EAAE,UAFD;AAGTE,QAAAA,SAAS,EAAE,oBAHF;AAITC,QAAAA,KAAK,EAAE,CAJE;AAKTC,QAAAA,IAAI,EAAE,IALG;AAMTC,QAAAA,UAAU,EACR;AAPO;AAHP;AAJE;AATqB,CAAD,CAAhC;AA6BA,MAAMC,UAAU,GAAG1B,MAAM,CAAC2B,MAAP,CAAc;AAC/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE;AADL,GADuB;AAI/BC,EAAAA,KAAK,EAAE;AACLlB,IAAAA,OAAO,EAAE;AADJ,GAJwB;AAO/BmB,EAAAA,YAAY,EAAE;AACZnB,IAAAA,OAAO,EAAE,cADG;AAEZoB,IAAAA,MAAM,EAAE,KAFI;AAGZjB,IAAAA,KAAK,EAAE,KAHK;AAIZF,IAAAA,UAAU,EAAE,QAJA;AAKZC,IAAAA,QAAQ,EAAE,QALE;AAMZM,IAAAA,QAAQ,EAAE,UANE;AAOZa,IAAAA,KAAK,EAAE,aAPK;AAQZT,IAAAA,IAAI,EAAE,CAAC,IARK;AASZU,IAAAA,CAAC,EAAE,CATS;AAUZC,IAAAA,CAAC,EAAE,CAVS;AAWZC,IAAAA,MAAM,EAAE;AAXI,GAPiB;AAoB/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,mBAAmB,EAAE,aADf;AAENC,IAAAA,mBAAmB,EAAE;AAFf;AApBuB,CAAd,CAAnB;AA0BA,MAAMC,SAAS,GAAGtC,QAAQ,CAACuC,OAAT,CAChBzC,MAAM,CAAC0C,MADS,EAEhB1C,MAAM,CAAC2C,UAFS,EAGhB3C,MAAM,CAACiC,KAHS,EAIhBjC,MAAM,CAAC4C,KAJS,CAAlB;AAcA,OAAO,MAAMC,IAAI,GAAG1C,MAAM,CAAC,MAAD,EAASJ,aAAa,EAAtB,CAAN,CAClBS,eADkB,EAElBF,eAFkB,EAGlBI,gBAHkB,EAIlBgB,UAJkB,EAKlBc,SALkB,CAAb;AAQPK,IAAI,CAACC,YAAL,GAAoB;AAClBC,EAAAA,EAAE,EAAE,MADc;AAElBZ,EAAAA,CAAC,EAAE;AAFe,CAApB","sourcesContent":["import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\n\nimport { typographyElementVariants, typographyStyleVariants } from './variants';\n\nconst displayVariants = variant({\n  variants: typographyStyleVariants,\n});\n\nconst elementVariants = variant({\n  prop: 'as',\n  variants: typographyElementVariants,\n});\n\nconst truncateVariants = variant({\n  prop: 'truncate',\n  base: {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    width: 1,\n    maxWidth: 1,\n  },\n  variants: {\n    ellipsis: {\n      textOverflow: 'ellipsis',\n    },\n    fade: {\n      position: 'relative',\n      textOverflow: 'clip',\n      '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        textColor: 'background-current',\n        inset: 0,\n        left: 0.65,\n        background:\n          'linear-gradient(to right, rgba(0, 0, 0, 0), currentColor 75%)',\n      },\n    },\n  },\n});\n\nconst textStates = system.states({\n  center: {\n    textAlign: 'center',\n  },\n  block: {\n    display: 'block',\n  },\n  screenreader: {\n    display: 'inline-block',\n    height: '1px',\n    width: '1px',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    position: 'absolute',\n    color: 'transparent',\n    left: -9999,\n    p: 0,\n    m: 0,\n    border: 'none',\n  },\n  smooth: {\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n  },\n});\n\nconst textProps = variance.compose(\n  system.layout,\n  system.typography,\n  system.color,\n  system.space\n);\n\nexport interface TextProps\n  extends StyleProps<typeof textProps>,\n    StyleProps<typeof textStates>,\n    StyleProps<typeof truncateVariants>,\n    StyleProps<typeof elementVariants>,\n    StyleProps<typeof displayVariants> {}\n\nexport const Text = styled('span', styledOptions<'span'>())<TextProps>(\n  elementVariants,\n  displayVariants,\n  truncateVariants,\n  textStates,\n  textProps\n);\n\nText.defaultProps = {\n  as: 'span',\n  m: 0,\n};\n"]},"metadata":{},"sourceType":"module"}