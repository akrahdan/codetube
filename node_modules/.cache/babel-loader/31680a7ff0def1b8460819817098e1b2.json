{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport cookie from \"react-cookies\";\nexport const projectApi = createApi({\n  reducerPath: \"projectApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [\"ProjectEntityResponse\"],\n  endpoints: build => ({\n    fetchProjects: build.query({\n      query: () => ({\n        url: \"api/projects/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchProjects: build.query({\n      query: () => ({\n        url: \"api/projects/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createProject: build.mutation({\n      query: body => ({\n        url: \"/projects/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateProject: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/projects/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    createPricing: build.mutation({\n      query: body => ({\n        url: \"/projects/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createSyllabus: build.mutation({\n      query: body => ({\n        url: \"/projects/syllabus/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createIncluded: build.mutation({\n      query: body => ({\n        url: \"/projects/included/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createLearningOutcome: build.mutation({\n      query: body => ({\n        url: \"/projects/outcome/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createHeading: build.mutation({\n      query: body => ({\n        url: \"/projects/heading/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editSyllabus: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/projects/syllabus/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editIncluded: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/projects/included/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editHeading: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => {\n        return {\n          url: `/projects/heading/${id}/`,\n          method: \"PUT\",\n          body\n        };\n      }\n    }),\n    editLearningOutcome: build.mutation({\n      query: (id, ...body) => ({\n        url: `/projects/outcome/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: response => response.json()\n      })\n    }),\n    submitReview: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/projects/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    fetchOutcomes: build.query({\n      query: pk => ({\n        url: `/projects/${pk}/outcomes/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchIncluded: build.query({\n      query: pk => ({\n        url: `/projects/${pk}/included/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSyllabus: build.query({\n      query: id => {\n        return {\n          url: `/projects/${id}/syllabuses/`,\n          method: \"GET\"\n        };\n      }\n    }),\n    deleteSyllabus: build.mutation({\n      query: id => {\n        return {\n          url: `/projects/syllabus/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteHeading: build.mutation({\n      query: id => {\n        return {\n          url: `/projects/heading/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteIncluded: build.mutation({\n      query: id => {\n        return {\n          url: `/projects/included/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteOutcome: build.mutation({\n      query: id => {\n        return {\n          url: `/projects/outcome/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useFetchProjectsQuery,\n  useCreateHeadingMutation,\n  useCreateIncludedMutation,\n  useCreateLearningOutcomeMutation,\n  useCreatePricingMutation,\n  useCreateProjectMutation,\n  useCreateSyllabusMutation,\n  useDeleteHeadingMutation,\n  useDeleteIncludedMutation,\n  useDeleteOutcomeMutation,\n  useDeleteSyllabusMutation,\n  useEditHeadingMutation,\n  useEditIncludedMutation,\n  useEditLearningOutcomeMutation,\n  useEditSyllabusMutation,\n  useFetchIncludedQuery,\n  useFetchOutcomesQuery,\n  useFetchSyllabusQuery,\n  useLazyFetchIncludedQuery,\n  useLazyFetchOutcomesQuery,\n  useLazyFetchProjectsQuery,\n  useLazyFetchSyllabusQuery,\n  useUpdateProjectMutation,\n  useSubmitReviewMutation\n} = projectApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/projects.ts"],"names":["createApi","fetchBaseQuery","cookie","projectApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchProjects","query","url","method","responseHandler","response","json","createProject","mutation","body","updateProject","data","id","createPricing","createSyllabus","createIncluded","createLearningOutcome","createHeading","editSyllabus","editIncluded","editHeading","editLearningOutcome","submitReview","fetchOutcomes","pk","fetchIncluded","fetchSyllabus","deleteSyllabus","deleteHeading","deleteIncluded","deleteOutcome","useFetchProjectsQuery","useCreateHeadingMutation","useCreateIncludedMutation","useCreateLearningOutcomeMutation","useCreatePricingMutation","useCreateProjectMutation","useCreateSyllabusMutation","useDeleteHeadingMutation","useDeleteIncludedMutation","useDeleteOutcomeMutation","useDeleteSyllabusMutation","useEditHeadingMutation","useEditIncludedMutation","useEditLearningOutcomeMutation","useEditSyllabusMutation","useFetchIncludedQuery","useFetchOutcomesQuery","useFetchSyllabusQuery","useLazyFetchIncludedQuery","useLazyFetchOutcomesQuery","useLazyFetchProjectsQuery","useLazyFetchSyllabusQuery","useUpdateProjectMutation","useSubmitReviewMutation"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\n\nexport interface TitleDescription {\n  id: number;\n  title: string;\n  description: string;\n  project: number;\n}\n\nexport interface HeaderDescription {\n  id: number;\n  heading: string;\n  description: string;\n  projects: number[];\n}\n\nexport interface Pricing {\n  amount: string;\n  currency: string;\n  course: number;\n}\n\nexport interface Review {\n  id: number;\n  state: string;\n}\n\nexport interface Course {\n  id: string;\n  title: string;\n  description: string;\n  url: string;\n  tags: string[];\n}\n\n\nexport interface ProjectEntityResponse {\n  id: string;\n  title: string;\n  lead: Boolean;\n  description: string;\n  slug: string;\n  goal: string;\n  hero: string;\n  category: number;\n  thumbnail_url: string;\n  experience: string;\n  courses: Course[];\n  completion_time: string;\n  related: ProjectEntityResponse[];\n  header: HeaderDescription;\n  header_primary_color: string;\n  header_secondary_color: string;\n  video_headline: string;\n  difficulty: string;\n  progress: string;\n  tags: string[];\n  price: Number;\n  outcomes: TitleDescription[];\n  included: TitleDescription[];\n  syllabuses: TitleDescription[];\n}\n\nexport const projectApi = createApi({\n  reducerPath: \"projectApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n\n  tagTypes: [\"ProjectEntityResponse\"],\n  endpoints: (build) => ({\n    fetchProjects: build.query<ProjectEntityResponse[], void>({\n      query: () => ({\n        url: \"api/projects/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchProjects: build.query<ProjectEntityResponse[], void>({\n      query: () => ({\n        url: \"api/projects/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createProject: build.mutation<\n      ProjectEntityResponse,\n      Partial<ProjectEntityResponse>\n    >({\n      query: (body) => ({\n        url: \"/projects/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateProject: build.mutation<\n      ProjectEntityResponse,\n      Partial<ProjectEntityResponse>\n    >({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/projects/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    createPricing: build.mutation<Pricing[], Partial<Pricing>>({\n      query: (body) => ({\n        url: \"/projects/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createSyllabus: build.mutation<\n      TitleDescription[],\n      Partial<TitleDescription>\n    >({\n      query: (body) => ({\n        url: \"/projects/syllabus/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createIncluded: build.mutation<\n      TitleDescription[],\n      Partial<TitleDescription>\n    >({\n      query: (body) => ({\n        url: \"/projects/included/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createLearningOutcome: build.mutation<\n      TitleDescription[],\n      Partial<TitleDescription>\n    >({\n      query: (body) => ({\n        url: \"/projects/outcome/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createHeading: build.mutation<\n      HeaderDescription,\n      Partial<HeaderDescription>\n    >({\n      query: (body) => ({\n        url: \"/projects/heading/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editSyllabus: build.mutation<TitleDescription, Partial<TitleDescription>>({\n      query: ({ id, ...body }) => ({\n        url: `/projects/syllabus/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editIncluded: build.mutation<TitleDescription, Partial<TitleDescription>>({\n      query: ({ id, ...body }) => ({\n        url: `/projects/included/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editHeading: build.mutation<HeaderDescription, Partial<HeaderDescription>>({\n      query: ({ id, ...body }) => {\n        return {\n          url: `/projects/heading/${id}/`,\n          method: \"PUT\",\n          body,\n        };\n      },\n    }),\n\n    editLearningOutcome: build.mutation<\n      TitleDescription,\n      Partial<TitleDescription>\n    >({\n      query: (id, ...body) => ({\n        url: `/projects/outcome/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    submitReview: build.mutation<Review, Partial<Review>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/projects/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    fetchOutcomes: build.query<TitleDescription[], number>({\n      query: (pk) => ({\n        url: `/projects/${pk}/outcomes/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchIncluded: build.query<TitleDescription[], number>({\n      query: (pk) => ({\n        url: `/projects/${pk}/included/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchSyllabus: build.query<TitleDescription[], Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/projects/${id}/syllabuses/`,\n          method: \"GET\",\n        };\n      },\n    }),\n\n    deleteSyllabus: build.mutation<TitleDescription, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/projects/syllabus/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteHeading: build.mutation<TitleDescription, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/projects/heading/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteIncluded: build.mutation<TitleDescription, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/projects/included/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n    deleteOutcome: build.mutation<TitleDescription, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/projects/outcome/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useFetchProjectsQuery,\n  useCreateHeadingMutation,\n  useCreateIncludedMutation,\n  useCreateLearningOutcomeMutation,\n  useCreatePricingMutation,\n  useCreateProjectMutation,\n  useCreateSyllabusMutation,\n  useDeleteHeadingMutation,\n  useDeleteIncludedMutation,\n  useDeleteOutcomeMutation,\n  useDeleteSyllabusMutation,\n  useEditHeadingMutation,\n  useEditIncludedMutation,\n  useEditLearningOutcomeMutation,\n  useEditSyllabusMutation,\n  useFetchIncludedQuery,\n  useFetchOutcomesQuery,\n  useFetchSyllabusQuery,\n  useLazyFetchIncludedQuery,\n  useLazyFetchOutcomesQuery,\n  useLazyFetchProjectsQuery,\n  useLazyFetchSyllabusQuery,\n  useUpdateProjectMutation,\n  useSubmitReviewMutation,\n} = projectApi;\n"]},"metadata":{},"sourceType":"module"}