{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Checkbox.tsx\";\nimport { colors, noSelect, pxRem, screenReaderOnly } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef } from 'react';\nimport { variables } from './_variables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst activeColor = colors.hyper;\nconst CheckboxLabel = styled.label`\n  ${noSelect}\n  display: flex;\n  align-items: flex-start;\n  cursor: pointer;\n  margin: (${variables.formPadding} / 2) 0;\n  width: 100%;\n  font-weight: normal;\n  padding: ${variables.formPadding} 0;\n`;\n_c = CheckboxLabel;\nconst CheckboxElement = styled.div`\n  position: relative;\n  margin-right: 0.5rem;\n  min-width: 1.5rem;\n  height: 1.5rem;\n  border: 2px solid ${variables.borderColor};\n  border-radius: ${variables.borderRadius};\n  transition: all 0.1s ease-in-out;\n  margin-top: ${({\n  multiline\n}) => multiline && '3px'};\n`;\n_c2 = CheckboxElement;\nconst CheckboxVector = styled.svg`\n  position: absolute;\n  top: -2px;\n  left: -2px;\n`;\n_c3 = CheckboxVector;\nconst Polyline = styled.polyline`\n  fill: none;\n  stroke: ${colors['gray-100']};\n  stroke-width: 2;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-dasharray: 18px;\n  stroke-dashoffset: 18px;\n`; // Maybe ScreenReaderFocusable\n\n_c4 = Polyline;\nconst Input = styled.input`\n  ${screenReaderOnly}\n\n  &:focus + ${CheckboxLabel} > ${CheckboxElement} {\n    outline: ${pxRem(2)} solid ${activeColor};\n    outline-offset: ${pxRem(2)};\n  }\n\n  &:checked + ${CheckboxLabel} ${CheckboxElement} {\n    border-color: ${activeColor};\n\n    ${CheckboxVector} {\n      path {\n        fill: ${activeColor};\n      }\n\n      ${Polyline} {\n        stroke-dashoffset: 0;\n        transition: stroke-dashoffset ${variables.transitionTime};\n      }\n    }\n  }\n\n  &:checked:disabled + ${CheckboxLabel} ${CheckboxElement} {\n    border-color: ${variables.itemBackgroundHover};\n\n    ${CheckboxVector} {\n      ${Polyline} {\n        fill: ${variables.itemBackgroundHover};\n      }\n      path {\n        fill: ${variables.itemBackgroundHover};\n      }\n    }\n  }\n`;\n_c5 = Input;\nconst CheckboxText = styled.span`\n  align-self: center;\n  font-size: ${({\n  multiline\n}) => multiline && '0.75rem'};\n`;\n_c6 = CheckboxText;\nexport const Checkbox = /*#__PURE__*/forwardRef(_c7 = ({\n  className,\n  label,\n  htmlFor,\n  multiline,\n  id,\n  ...rest\n}, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: className,\n  children: [/*#__PURE__*/_jsxDEV(Input, {\n    id: id || htmlFor,\n    type: \"checkbox\",\n    ...rest,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(CheckboxLabel, {\n    htmlFor: id || htmlFor,\n    children: [/*#__PURE__*/_jsxDEV(CheckboxElement, {\n      multiline: multiline,\n      children: /*#__PURE__*/_jsxDEV(CheckboxVector, {\n        width: \"24px\",\n        height: \"24px\",\n        viewBox: \"0 0 20 20\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          points: \"4 11 8 15 16 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CheckboxText, {\n      multiline: multiline,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 112,\n  columnNumber: 5\n}, this));\n_c8 = Checkbox;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"CheckboxLabel\");\n$RefreshReg$(_c2, \"CheckboxElement\");\n$RefreshReg$(_c3, \"CheckboxVector\");\n$RefreshReg$(_c4, \"Polyline\");\n$RefreshReg$(_c5, \"Input\");\n$RefreshReg$(_c6, \"CheckboxText\");\n$RefreshReg$(_c7, \"Checkbox$forwardRef\");\n$RefreshReg$(_c8, \"Checkbox\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Checkbox.tsx"],"names":["colors","noSelect","pxRem","screenReaderOnly","styled","React","forwardRef","variables","activeColor","hyper","CheckboxLabel","label","formPadding","CheckboxElement","div","borderColor","borderRadius","multiline","CheckboxVector","svg","Polyline","polyline","Input","input","transitionTime","itemBackgroundHover","CheckboxText","span","Checkbox","className","htmlFor","id","rest","ref"],"mappings":"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","sourcesContent":["import {\n  colors,\n  noSelect,\n  pxRem,\n  screenReaderOnly,\n} from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react';\n\nimport { variables } from './_variables';\n\nexport type CheckboxProps = InputHTMLAttributes<HTMLInputElement> &\n  Multiline & {\n    checked?: boolean;\n    className?: string;\n    disabled?: boolean;\n    htmlFor: string;\n    label: ReactNode;\n    name?: string;\n    required?: boolean;\n    value?: string;\n    id?: string;\n  };\n\ntype Multiline = { multiline?: boolean };\n\nconst activeColor = colors.hyper;\n\nconst CheckboxLabel = styled.label`\n  ${noSelect}\n  display: flex;\n  align-items: flex-start;\n  cursor: pointer;\n  margin: (${variables.formPadding} / 2) 0;\n  width: 100%;\n  font-weight: normal;\n  padding: ${variables.formPadding} 0;\n`;\n\nconst CheckboxElement = styled.div<Multiline>`\n  position: relative;\n  margin-right: 0.5rem;\n  min-width: 1.5rem;\n  height: 1.5rem;\n  border: 2px solid ${variables.borderColor};\n  border-radius: ${variables.borderRadius};\n  transition: all 0.1s ease-in-out;\n  margin-top: ${({ multiline }) => multiline && '3px'};\n`;\n\nconst CheckboxVector = styled.svg`\n  position: absolute;\n  top: -2px;\n  left: -2px;\n`;\n\nconst Polyline = styled.polyline`\n  fill: none;\n  stroke: ${colors['gray-100']};\n  stroke-width: 2;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-dasharray: 18px;\n  stroke-dashoffset: 18px;\n`;\n\n// Maybe ScreenReaderFocusable\nconst Input = styled.input`\n  ${screenReaderOnly}\n\n  &:focus + ${CheckboxLabel} > ${CheckboxElement} {\n    outline: ${pxRem(2)} solid ${activeColor};\n    outline-offset: ${pxRem(2)};\n  }\n\n  &:checked + ${CheckboxLabel} ${CheckboxElement} {\n    border-color: ${activeColor};\n\n    ${CheckboxVector} {\n      path {\n        fill: ${activeColor};\n      }\n\n      ${Polyline} {\n        stroke-dashoffset: 0;\n        transition: stroke-dashoffset ${variables.transitionTime};\n      }\n    }\n  }\n\n  &:checked:disabled + ${CheckboxLabel} ${CheckboxElement} {\n    border-color: ${variables.itemBackgroundHover};\n\n    ${CheckboxVector} {\n      ${Polyline} {\n        fill: ${variables.itemBackgroundHover};\n      }\n      path {\n        fill: ${variables.itemBackgroundHover};\n      }\n    }\n  }\n`;\n\nconst CheckboxText = styled.span<Multiline>`\n  align-self: center;\n  font-size: ${({ multiline }) => multiline && '0.75rem'};\n`;\n\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ className, label, htmlFor, multiline, id, ...rest }, ref) => (\n    <div className={className}>\n      <Input id={id || htmlFor} type=\"checkbox\" {...rest} ref={ref} />\n      <CheckboxLabel htmlFor={id || htmlFor}>\n        <CheckboxElement multiline={multiline}>\n          <CheckboxVector width=\"24px\" height=\"24px\" viewBox=\"0 0 20 20\">\n            <path\n              d=\"M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z\"\n              fill=\"none\"\n            />\n            <Polyline points=\"4 11 8 15 16 6\" />\n          </CheckboxVector>\n        </CheckboxElement>\n        <CheckboxText multiline={multiline}>{label}</CheckboxText>\n      </CheckboxLabel>\n    </div>\n  )\n);\n"]},"metadata":{},"sourceType":"module"}