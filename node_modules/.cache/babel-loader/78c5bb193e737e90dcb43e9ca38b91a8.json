{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nconst {\n  middleware: router\n} = connectRoutes(routesMap, {\n  querySerializer: queryString,\n  initialDispatch: false,\n  scrollTop: true\n});\nexport const store = configureStore({\n  reducer: {\n    location: router.reducer,\n    auth: authReducer,\n    modal: modalReducer,\n    [authApi.reducerPath]: authApi.reducer,\n    [projectApi.reducerPath]: projectApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(authApi.middleware)\n});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/store/index.ts"],"names":["configureStore","connectRoutes","queryString","routesMap","authApi","projectApi","modalReducer","authReducer","middleware","router","querySerializer","initialDispatch","scrollTop","store","reducer","location","auth","modal","reducerPath","getDefaultMiddleware","concat"],"mappings":"AAAA,SAASA,cAAT,QAA0E,kBAA1E;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;AAGA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAgBA,MAAM;AAAEC,EAAAA,UAAU,EAAEC;AAAd,IAAwBR,aAAa,CAACE,SAAD,EAAY;AACnDO,EAAAA,eAAe,EAAER,WADkC;AAEnDS,EAAAA,eAAe,EAAE,KAFkC;AAGnDC,EAAAA,SAAS,EAAE;AAHwC,CAAZ,CAA3C;AAMA,OAAO,MAAMC,KAAK,GAAGb,cAAc,CAAC;AAChCc,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAEN,MAAM,CAACK,OADZ;AAELE,IAAAA,IAAI,EAAET,WAFD;AAGLU,IAAAA,KAAK,EAAEX,YAHF;AAIL,KAACF,OAAO,CAACc,WAAT,GAAuBd,OAAO,CAACU,OAJ1B;AAKL,KAACT,UAAU,CAACa,WAAZ,GAA0Bb,UAAU,CAACS;AALhC,GADuB;AAQhCN,EAAAA,UAAU,EAAGW,oBAAD,IACZA,oBAAoB,GAAGC,MAAvB,CAA8BhB,OAAO,CAACI,UAAtC;AATgC,CAAD,CAA5B","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes'\nimport rootReducer, { reduceInitialState } from 'portal/state/reducers';\nimport { SiteState } from 'state/types';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nconst { middleware: router} = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialDispatch: false,\n    scrollTop: true,\n});\n\nexport const store = configureStore({\n    reducer: {\n        location: router.reducer,\n        auth: authReducer,\n        modal: modalReducer,\n        [authApi.reducerPath]: authApi.reducer,\n        [projectApi.reducerPath]: projectApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware().concat(authApi.middleware)\n})\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n ReturnType, \n RootState,\n unknown,\n Action<string>\n >;"]},"metadata":{},"sourceType":"module"}