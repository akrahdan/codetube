{"ast":null,"code":"import cx from'classnames';import React,{useEffect}from'react';import{StepButton}from'./StepButton';import styles from'./styles.module.scss';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */export var InputStepper=function InputStepper(_ref){var label=_ref.label,value=_ref.value,_ref$max=_ref.max,max=_ref$max===void 0?999:_ref$max,_ref$min=_ref.min,min=_ref$min===void 0?0:_ref$min,onChange=_ref.onChange,ariaLabel=_ref.ariaLabel,onStepperButtonClick=_ref.onStepperButtonClick,className=_ref.className;var normalize=function normalize(value){if(max&&value>max){return max;}if(value<min){return min;}return value;};var calculateWidthFromMax=function calculateWidthFromMax(){if(max<10){return styles.mini;}if(max>99){return styles.long;}return styles.standardWidth;};var increment=function increment(incrementAmount){var incrementedValue=normalize(value+incrementAmount);if(onStepperButtonClick){onStepperButtonClick(incrementAmount>0?'increase_selection':'decrease_selection');}onChange(incrementedValue);};var onChangeEvent=function onChangeEvent(event){var rawValue=event.target.value||\"\".concat(min);var normalizedValue=normalize(parseInt(rawValue,10));if(normalizedValue===value){return;}onChange(normalizedValue);};// ensure that the value comes in normalized & update the state\n// to reflect the normalized value. Taking a timeout approach so as\n// to avoid kicking off re-render while already mid-render\nvar normalizedValue=normalize(value);useEffect(function(){if(normalizedValue!==value){window.setTimeout(function(){return onChange(normalizedValue);},0);}});var inputId='inputStepper';var labelId='inputStepperLabel';var inputWidthClass=calculateWidthFromMax();return/*#__PURE__*/_jsxs(\"div\",{className:cx(styles.stepper,className),children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.column,children:[/*#__PURE__*/_jsx(\"input\",{className:cx(styles.input,inputWidthClass),type:\"number\",max:max,min:min,value:normalizedValue,name:inputId,id:inputId,\"aria-live\":\"polite\",\"aria-labelledby\":\"\".concat(labelId,\" \").concat(inputId),\"aria-label\":\"current value of \".concat(value),onChange:onChangeEvent}),/*#__PURE__*/_jsx(\"label\",{id:labelId,className:styles.label,\"aria-label\":ariaLabel,htmlFor:inputId,children:label})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.column,children:[/*#__PURE__*/_jsx(StepButton,{onClick:function onClick(){return increment(1);},type:\"up\",labelledBy:\"\".concat(labelId,\" \").concat(inputId)}),/*#__PURE__*/_jsx(StepButton,{onClick:function onClick(){return increment(-1);},type:\"down\",labelledBy:\"\".concat(labelId,\" \").concat(inputId)})]})]});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/InputStepper/index.tsx"],"names":["cx","React","useEffect","StepButton","styles","InputStepper","label","value","max","min","onChange","ariaLabel","onStepperButtonClick","className","normalize","calculateWidthFromMax","mini","long","standardWidth","increment","incrementAmount","incrementedValue","onChangeEvent","event","rawValue","target","normalizedValue","parseInt","window","setTimeout","inputId","labelId","inputWidthClass","stepper","column","input"],"mappings":"AAAA,MAAOA,CAAAA,EAAP,KAAe,YAAf,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAASC,UAAT,KAA2B,cAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,C,wFAmCA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAyC,CAAG,QAA5CA,CAAAA,YAA4C,MASnD,IARJC,CAAAA,KAQI,MARJA,KAQI,CAPJC,KAOI,MAPJA,KAOI,eANJC,GAMI,CANJA,GAMI,mBANE,GAMF,wBALJC,GAKI,CALJA,GAKI,mBALE,CAKF,UAJJC,QAII,MAJJA,QAII,CAHJC,SAGI,MAHJA,SAGI,CAFJC,oBAEI,MAFJA,oBAEI,CADJC,SACI,MADJA,SACI,CACJ,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACP,KAAD,CAAmB,CACnC,GAAIC,GAAG,EAAID,KAAK,CAAGC,GAAnB,CAAwB,CACtB,MAAOA,CAAAA,GAAP,CACD,CACD,GAAID,KAAK,CAAGE,GAAZ,CAAiB,CACf,MAAOA,CAAAA,GAAP,CACD,CACD,MAAOF,CAAAA,KAAP,CACD,CARD,CAUA,GAAMQ,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CAClC,GAAIP,GAAG,CAAG,EAAV,CAAc,CACZ,MAAOJ,CAAAA,MAAM,CAACY,IAAd,CACD,CACD,GAAIR,GAAG,CAAG,EAAV,CAAc,CACZ,MAAOJ,CAAAA,MAAM,CAACa,IAAd,CACD,CACD,MAAOb,CAAAA,MAAM,CAACc,aAAd,CACD,CARD,CAUA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,eAAD,CAA6B,CAC7C,GAAMC,CAAAA,gBAAgB,CAAGP,SAAS,CAACP,KAAK,CAAGa,eAAT,CAAlC,CACA,GAAIR,oBAAJ,CAA0B,CACxBA,oBAAoB,CAClBQ,eAAe,CAAG,CAAlB,CAAsB,oBAAtB,CAA6C,oBAD3B,CAApB,CAGD,CACDV,QAAQ,CAACW,gBAAD,CAAR,CACD,CARD,CAUA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAgD,CACpE,GAAMC,CAAAA,QAAQ,CAAGD,KAAK,CAACE,MAAN,CAAalB,KAAb,YAAyBE,GAAzB,CAAjB,CACA,GAAMiB,CAAAA,eAAe,CAAGZ,SAAS,CAACa,QAAQ,CAACH,QAAD,CAAW,EAAX,CAAT,CAAjC,CACA,GAAIE,eAAe,GAAKnB,KAAxB,CAA+B,CAC7B,OACD,CACDG,QAAQ,CAACgB,eAAD,CAAR,CACD,CAPD,CASA;AACA;AACA;AACA,GAAMA,CAAAA,eAAe,CAAGZ,SAAS,CAACP,KAAD,CAAjC,CACAL,SAAS,CAAC,UAAM,CACd,GAAIwB,eAAe,GAAKnB,KAAxB,CAA+B,CAC7BqB,MAAM,CAACC,UAAP,CAAkB,iBAAMnB,CAAAA,QAAQ,CAACgB,eAAD,CAAd,EAAlB,CAAmD,CAAnD,EACD,CACF,CAJQ,CAAT,CAMA,GAAMI,CAAAA,OAAO,CAAG,cAAhB,CACA,GAAMC,CAAAA,OAAO,CAAG,mBAAhB,CACA,GAAMC,CAAAA,eAAe,CAAGjB,qBAAqB,EAA7C,CAEA,mBACE,aAAK,SAAS,CAAEf,EAAE,CAACI,MAAM,CAAC6B,OAAR,CAAiBpB,SAAjB,CAAlB,wBACE,aAAK,SAAS,CAAET,MAAM,CAAC8B,MAAvB,wBAEE,cACE,SAAS,CAAElC,EAAE,CAACI,MAAM,CAAC+B,KAAR,CAAeH,eAAf,CADf,CAEE,IAAI,CAAC,QAFP,CAGE,GAAG,CAAExB,GAHP,CAIE,GAAG,CAAEC,GAJP,CAKE,KAAK,CAAEiB,eALT,CAME,IAAI,CAAEI,OANR,CAOE,EAAE,CAAEA,OAPN,CAQE,YAAU,QARZ,CASE,4BAAoBC,OAApB,aAA+BD,OAA/B,CATF,CAUE,wCAAgCvB,KAAhC,CAVF,CAWE,QAAQ,CAAEe,aAXZ,EAFF,cAiBE,cACE,EAAE,CAAES,OADN,CAEE,SAAS,CAAE3B,MAAM,CAACE,KAFpB,CAGE,aAAYK,SAHd,CAIE,OAAO,CAAEmB,OAJX,UAMGxB,KANH,EAjBF,GADF,cA6BE,aAAK,SAAS,CAAEF,MAAM,CAAC8B,MAAvB,wBACE,KAAC,UAAD,EACE,OAAO,CAAE,yBAAMf,CAAAA,SAAS,CAAC,CAAD,CAAf,EADX,CAEE,IAAI,CAAC,IAFP,CAGE,UAAU,WAAKY,OAAL,aAAgBD,OAAhB,CAHZ,EADF,cAME,KAAC,UAAD,EACE,OAAO,CAAE,yBAAMX,CAAAA,SAAS,CAAC,CAAC,CAAF,CAAf,EADX,CAEE,IAAI,CAAC,MAFP,CAGE,UAAU,WAAKY,OAAL,aAAgBD,OAAhB,CAHZ,EANF,GA7BF,GADF,CA4CD,CA3GM","sourcesContent":["import cx from 'classnames';\nimport React, { useEffect } from 'react';\n\nimport { StepButton } from './StepButton';\nimport styles from './styles.module.scss';\n\nexport type InputStepperButtonTargets =\n  | 'increase_selection'\n  | 'decrease_selection';\n\nexport type InputStepperProps = {\n  /** Label to show beneath the numeric value */\n  label: string;\n\n  /** Value to assign the numeric field */\n  value: number;\n\n  /** Maximum value allowed */\n  max?: number;\n\n  /** Minimum value allowed */\n  min?: number;\n\n  /** Action to perform when the value of this field has changed */\n  onChange: (val: number) => void;\n\n  /**\n   * Label to use for accessibility purposes; will be read on the label, the\n   * input field itself, and the stepper buttons via aria-labelledby\n   */\n  ariaLabel: string;\n\n  /** Tracking callback to run when the step buttons are clicked */\n  onStepperButtonClick?: (target: InputStepperButtonTargets) => void;\n\n  /** Any additional styling that should be applied to the stepper */\n  className?: string;\n};\n\n/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */\nexport const InputStepper: React.FC<InputStepperProps> = ({\n  label,\n  value,\n  max = 999,\n  min = 0,\n  onChange,\n  ariaLabel,\n  onStepperButtonClick,\n  className,\n}) => {\n  const normalize = (value: number) => {\n    if (max && value > max) {\n      return max;\n    }\n    if (value < min) {\n      return min;\n    }\n    return value;\n  };\n\n  const calculateWidthFromMax = () => {\n    if (max < 10) {\n      return styles.mini;\n    }\n    if (max > 99) {\n      return styles.long;\n    }\n    return styles.standardWidth;\n  };\n\n  const increment = (incrementAmount: 1 | -1) => {\n    const incrementedValue = normalize(value + incrementAmount);\n    if (onStepperButtonClick) {\n      onStepperButtonClick(\n        incrementAmount > 0 ? 'increase_selection' : 'decrease_selection'\n      );\n    }\n    onChange(incrementedValue);\n  };\n\n  const onChangeEvent = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const rawValue = event.target.value || `${min}`;\n    const normalizedValue = normalize(parseInt(rawValue, 10));\n    if (normalizedValue === value) {\n      return;\n    }\n    onChange(normalizedValue);\n  };\n\n  // ensure that the value comes in normalized & update the state\n  // to reflect the normalized value. Taking a timeout approach so as\n  // to avoid kicking off re-render while already mid-render\n  const normalizedValue = normalize(value);\n  useEffect(() => {\n    if (normalizedValue !== value) {\n      window.setTimeout(() => onChange(normalizedValue), 0);\n    }\n  });\n\n  const inputId = 'inputStepper';\n  const labelId = 'inputStepperLabel';\n  const inputWidthClass = calculateWidthFromMax();\n\n  return (\n    <div className={cx(styles.stepper, className)}>\n      <div className={styles.column}>\n        {/** render the actual input field */}\n        <input\n          className={cx(styles.input, inputWidthClass)}\n          type=\"number\"\n          max={max}\n          min={min}\n          value={normalizedValue}\n          name={inputId}\n          id={inputId}\n          aria-live=\"polite\"\n          aria-labelledby={`${labelId} ${inputId}`}\n          aria-label={`current value of ${value}`}\n          onChange={onChangeEvent}\n        />\n\n        {/* render the label for the input field */}\n        <label\n          id={labelId}\n          className={styles.label}\n          aria-label={ariaLabel}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n      </div>\n\n      {/** step up and step down buttons */}\n      <div className={styles.column}>\n        <StepButton\n          onClick={() => increment(1)}\n          type=\"up\"\n          labelledBy={`${labelId} ${inputId}`}\n        />\n        <StepButton\n          onClick={() => increment(-1)}\n          type=\"down\"\n          labelledBy={`${labelId} ${inputId}`}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}