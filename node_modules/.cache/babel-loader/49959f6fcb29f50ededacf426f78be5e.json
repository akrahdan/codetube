{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/GridFormInputGroup/index.tsx\";\nimport React from 'react';\nimport { FormError, FormGroup, FormGroupLabel } from '../../Form';\nimport { HiddenText } from '../../HiddenText';\nimport { Column } from '../../Layout';\nimport { GridFormCheckboxInput } from './GridFormCheckboxInput';\nimport { GridFormCustomInput } from './GridFormCustomInput';\nimport { GridFormFileInput } from './GridFormFileInput';\nimport { GridFormHiddenInput } from './GridFormHiddenInput';\nimport { GridFormRadioGroupInput } from './GridFormRadioGroupInput';\nimport { GridFormSelectInput } from './GridFormSelectInput';\nimport { GridFormSweetContainerInput } from './GridFormSweetContainerInput';\nimport { GridFormTextArea } from './GridFormTextArea';\nimport { GridFormTextInput } from './GridFormTextInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GridFormInputGroup = ({\n  error,\n  isFirstError,\n  field,\n  register,\n  setValue,\n  showRequired,\n  required\n}) => {\n  var _field$rowspan2;\n\n  const errorMessage = error || field.customError;\n  const isRequired = showRequired && required;\n\n  const getInput = () => {\n    switch (field.type) {\n      case 'checkbox':\n        return /*#__PURE__*/_jsxDEV(GridFormCheckboxInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this);\n\n      case 'custom':\n      case 'custom-group':\n        return /*#__PURE__*/_jsxDEV(GridFormCustomInput, {\n          field: field,\n          register: register,\n          setValue: setValue,\n          error: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n\n      case 'radio-group':\n        return /*#__PURE__*/_jsxDEV(GridFormRadioGroupInput, {\n          field: field,\n          register: register,\n          showRequired: isRequired,\n          setValue: setValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this);\n\n      case 'select':\n        return /*#__PURE__*/_jsxDEV(GridFormSelectInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n\n      case 'file':\n        return /*#__PURE__*/_jsxDEV(GridFormFileInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this);\n\n      case 'textarea':\n        return /*#__PURE__*/_jsxDEV(GridFormTextArea, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this);\n\n      case 'hidden':\n        return /*#__PURE__*/_jsxDEV(GridFormHiddenInput, {\n          register: register,\n          field: field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 16\n        }, this);\n\n      case 'sweet-container':\n        return /*#__PURE__*/_jsxDEV(GridFormSweetContainerInput, {\n          register: register,\n          field: field,\n          label: field.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(GridFormTextInput, {\n          error: !!errorMessage,\n          field: field,\n          register: register,\n          showRequired: isRequired\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  const unwrappedInput = field => ['hidden', 'sweet-container'].includes(field.type);\n\n  if (unwrappedInput(field)) {\n    return getInput();\n  }\n\n  if (field.type === 'custom-group') {\n    var _field$rowspan;\n\n    return /*#__PURE__*/_jsxDEV(Column, {\n      size: field === null || field === void 0 ? void 0 : field.size,\n      rowspan: (_field$rowspan = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan !== void 0 ? _field$rowspan : 1,\n      children: getInput()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n\n  const label = /*#__PURE__*/_jsxDEV(FormGroupLabel, {\n    disabled: field.disabled,\n    htmlFor: field.id || field.name,\n    tooltip: field.tooltip,\n    showRequired: isRequired,\n    children: field.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Column, {\n    size: field === null || field === void 0 ? void 0 : field.size,\n    rowspan: (_field$rowspan2 = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan2 !== void 0 ? _field$rowspan2 : 1,\n    children: /*#__PURE__*/_jsxDEV(FormGroup, {\n      mb: 0,\n      children: [field.hideLabel ? /*#__PURE__*/_jsxDEV(HiddenText, {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 28\n      }, this) : label, getInput(), errorMessage && /*#__PURE__*/_jsxDEV(FormError, {\n        role: isFirstError ? 'alert' : 'status',\n        \"aria-live\": isFirstError ? 'assertive' : 'off',\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_c = GridFormInputGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridFormInputGroup\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/GridFormInputGroup/index.tsx"],"names":["React","FormError","FormGroup","FormGroupLabel","HiddenText","Column","GridFormCheckboxInput","GridFormCustomInput","GridFormFileInput","GridFormHiddenInput","GridFormRadioGroupInput","GridFormSelectInput","GridFormSweetContainerInput","GridFormTextArea","GridFormTextInput","GridFormInputGroup","error","isFirstError","field","register","setValue","showRequired","required","errorMessage","customError","isRequired","getInput","type","label","unwrappedInput","includes","size","rowspan","disabled","id","name","tooltip","hideLabel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UseFormMethods } from 'react-hook-form';\n\nimport { FormError, FormGroup, FormGroupLabel } from '../../Form';\nimport { HiddenText } from '../../HiddenText';\nimport { Column } from '../../Layout';\nimport {\n  GridFormField,\n  GridFormHiddenField,\n  GridFormSweetContainerField,\n} from '../types';\nimport { GridFormCheckboxInput } from './GridFormCheckboxInput';\nimport { GridFormCustomInput } from './GridFormCustomInput';\nimport { GridFormFileInput } from './GridFormFileInput';\nimport { GridFormHiddenInput } from './GridFormHiddenInput';\nimport { GridFormRadioGroupInput } from './GridFormRadioGroupInput';\nimport { GridFormSelectInput } from './GridFormSelectInput';\nimport { GridFormSweetContainerInput } from './GridFormSweetContainerInput';\nimport { GridFormTextArea } from './GridFormTextArea';\nimport { GridFormTextInput } from './GridFormTextInput';\n\nexport type GridFormInputGroupProps = {\n  error?: string;\n  isFirstError?: boolean;\n  field: GridFormField;\n  register: UseFormMethods['register'];\n  setValue: UseFormMethods['setValue'];\n  required?: boolean;\n  showRequired?: boolean;\n};\n\nexport const GridFormInputGroup: React.FC<GridFormInputGroupProps> = ({\n  error,\n  isFirstError,\n  field,\n  register,\n  setValue,\n  showRequired,\n  required,\n}) => {\n  const errorMessage = error || field.customError;\n  const isRequired = showRequired && required;\n\n  const getInput = () => {\n    switch (field.type) {\n      case 'checkbox':\n        return (\n          <GridFormCheckboxInput\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'custom':\n      case 'custom-group':\n        return (\n          <GridFormCustomInput\n            field={field}\n            register={register}\n            setValue={setValue}\n            error={errorMessage}\n          />\n        );\n\n      case 'radio-group':\n        return (\n          <GridFormRadioGroupInput\n            field={field}\n            register={register}\n            showRequired={isRequired}\n            setValue={setValue}\n          />\n        );\n\n      case 'select':\n        return (\n          <GridFormSelectInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'file':\n        return (\n          <GridFormFileInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <GridFormTextArea\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n      case 'hidden':\n        return <GridFormHiddenInput register={register} field={field} />;\n\n      case 'sweet-container':\n        return (\n          <GridFormSweetContainerInput\n            register={register}\n            field={field}\n            label={field.label}\n          />\n        );\n\n      default:\n        return (\n          <GridFormTextInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n    }\n  };\n\n  const unwrappedInput = (\n    field: GridFormField\n  ): field is GridFormHiddenField | GridFormSweetContainerField =>\n    ['hidden', 'sweet-container'].includes(field.type);\n\n  if (unwrappedInput(field)) {\n    return getInput();\n  }\n\n  if (field.type === 'custom-group') {\n    return (\n      <Column size={field?.size} rowspan={field?.rowspan ?? 1}>\n        {getInput()}\n      </Column>\n    );\n  }\n\n  const label = (\n    <FormGroupLabel\n      disabled={field.disabled}\n      htmlFor={field.id || field.name}\n      tooltip={field.tooltip}\n      showRequired={isRequired}\n    >\n      {field.label}\n    </FormGroupLabel>\n  );\n\n  return (\n    <Column size={field?.size} rowspan={field?.rowspan ?? 1}>\n      <FormGroup mb={0}>\n        {field.hideLabel ? <HiddenText>{label}</HiddenText> : label}\n        {getInput()}\n        {errorMessage && (\n          <FormError\n            role={isFirstError ? 'alert' : 'status'}\n            aria-live={isFirstError ? 'assertive' : 'off'}\n          >\n            {errorMessage}\n          </FormError>\n        )}\n      </FormGroup>\n    </Column>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}