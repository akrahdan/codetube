{"ast":null,"code":"/* global define, module */\n\n/**\r\n * Create Konami Code Sequence recognition « Up Up Bottom Bottom Left Right Left Right B A » on specific HTMLElement or on global HTMLDocument. Usage of finger is also possible with « Up Up Bottom Bottom Left Right Left Right Tap Tap ».\r\n * @class KonamiCode\r\n * @version 0.8.0\r\n * @author {@link https://www.lesieur.name/|Bruno Lesieur}\r\n * @param {Object|Function} [options]             - Container for all options. If type of `options` is Function, it is executed after Konami Code Sequence has been recognize.\r\n * @param {Function}        [options.callback]    - If `options` is not a Function, `options.callback` is executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n * @param {Node}            [options.listener]    - By default it is the HTMLDocument `window.document`. You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n * @param {boolean}         [options.debug]       - By default it is set to `false`. When you set this value to `true`, that allows you to see all debug message in the console.\r\n */\n(function (root, factory) {\n  var initialClass = root.KonamiCode,\n      api = root.KonamiCode = factory;\n  /**\r\n   * If a previous `KonamiCode` variable exist into global environment, you could kept it by changing name of current KonamiCode.\r\n   * You can also just use that function to change the name of Global « KonamiCode » variable.\r\n   * @function noConflict\r\n   * @memberOf KonamiCode.\r\n   * @example <script src=\"other/konami-code.js\"></script>\r\n   * <script src=\"last/konami-code.js\"></script>\r\n   * <script>\r\n   *      var MyKC = KonamiCode.noConflict();\r\n   *      console.log(KonamiCode); // Return the other KonamiCode\r\n   *      console.log(MyKC); // Return your KonamiCode\r\n   * </script>\r\n   */\n\n  api.noConflict = function () {\n    root.KonamiCode = initialClass;\n    return api;\n  };\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function () {\n      return factory;\n    });\n  }\n\n  if (typeof module === \"object\" && module.exports) {\n    module.exports = factory;\n  }\n})(this, function callee(options) {\n  var publics = this,\n      privates = {},\n      statics = callee;\n  /**\r\n   * Return the number of time KonamiCode was instanciated.\r\n   * @function getNumberOfInstance\r\n   * @memberOf KonamiCode.\r\n   * @return {number} - Number of KonamiCode instance create from begining.\r\n   */\n\n  statics.getNumberOfInstance = function () {\n    return statics._numberOfInstance;\n  };\n  /**\r\n   * Active the listening of Konami Code Sequence.\r\n   * @function enable\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.enable = function () {\n    privates.listenCodeCharSequence();\n    privates.listenCodeGestureSequence();\n    privates.debug && privates.debug(\"Listener enabled for all.\");\n    return publics;\n  };\n  /**\r\n   * Active the listening of Konami Code Sequence for Keyboard Keys.\r\n   * @function enableKeyboardKeys\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.enableKeyboardKeys = function () {\n    privates.listenCodeCharSequence();\n    privates.debug && privates.debug(\"Listener enabled for Keyboard Keys.\");\n    return publics;\n  };\n  /**\r\n   * Active the listening of Konami Code Sequence for Touch Gesture.\r\n   * @function enableTouchGesture\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.enableTouchGesture = function () {\n    privates.listenCodeGestureSequence();\n    privates.debug && privates.debug(\"Listener enabled for Touch Gesture.\");\n    return publics;\n  };\n  /**\r\n   * Unactive the listening of Konami Code Sequence.\r\n   * @function disable\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.disable = function () {\n    privates.stopCodeCharSequence();\n    privates.stopCodeGestureSequence();\n    privates.debug && privates.debug(\"Listener disabled for all.\");\n    return publics;\n  };\n  /**\r\n   * Unactive the listening of Konami Code Sequence for Keyboard Keys.\r\n   * @function disabledKeyboardKeys\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.disableKeyboardKeys = function () {\n    privates.stopCodeCharSequence();\n    privates.debug && privates.debug(\"Listener disabled for Keyboard Keys.\");\n    return publics;\n  };\n  /**\r\n   * Unactive the listening of Konami Code Sequence for Touch Gesture.\r\n   * @function disabledTouchGesture\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.disableTouchGesture = function () {\n    privates.stopCodeGestureSequence();\n    privates.debug && privates.debug(\"Listener disabled for Touch Gesture.\");\n    return publics;\n  };\n  /**\r\n   * Change the listener. The old listener will no longer work. Note: change the listener enable this instance if it is previously disabled.\r\n   * @function setListener\r\n   * @param {Node} listener - You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.setListener = function (listener) {\n    privates.stopCodeCharSequence();\n    privates.stopCodeGestureSequence();\n    privates.listener = listener || document;\n    privates.listenCodeCharSequence();\n    privates.listenCodeGestureSequence();\n    privates.debug && privates.debug(\"Listener changed.\", listener);\n    return publics;\n  };\n  /**\r\n   * Change the Function executed after Konami Code Sequence has been entered.\r\n   * @function setCallback\r\n   * @param {Function} callback - Function executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   * @example new KonamiCode().setCallback(function (konamiCode) {\r\n   *     konamiCode.disable();\r\n   *     // Do something here.\r\n   * });\r\n   */\n\n\n  publics.setCallback = function (callback) {\n    privates.afterCodeSequenceCallback = typeof callback === \"function\" && callback || privates.defaultCallback;\n    privates.debug && privates.debug(\"Callback changed.\", callback);\n    return publics;\n  };\n  /**\r\n   * Change options of instance currently existing.\r\n   * @function setOptions\r\n   * @param {Object}   [options]          - Container for all options.\r\n   * @param {Function} [options.callback] - Function executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n   * @param {Node}     [options.listener] - By default it is the HTMLDocument `window.document`. You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n   * @param {boolean}  [options.debug]    - By default it is set to `false`. When you set this value to `true`, that allows you to see all debug message in the console.\r\n   * @memberOf KonamiCode#\r\n   * @return {KonamiCode} Current instance of KonamiCode\r\n   */\n\n\n  publics.setOptions = function (options) {\n    privates.initOptions(options);\n    return publics;\n  };\n\n  privates.keptLastCodeChar = function () {\n    if (privates.input.length > privates.konamiCodeChar.length) {\n      privates.input = privates.input.substr(privates.input.length - privates.konamiCodeChar.length);\n    }\n  };\n\n  privates.defaultCallback = function () {\n    privates.debug && privates.debug(\"Konami Code Sequence Entered. There is no action defined.\");\n  };\n\n  privates.checkIfCodeCharIsValid = function () {\n    if (privates.input === privates.konamiCodeChar) {\n      privates.afterCodeSequenceCallback(publics);\n    }\n  };\n\n  privates.codeSequenceEventKeyDown = function (event) {\n    privates.input += event.keyCode;\n    privates.keptLastCodeChar();\n    privates.checkIfCodeCharIsValid();\n  };\n\n  privates.codeSequenceEventTouchMove = function (event) {\n    var touch;\n\n    if (event.touches.length === 1 && privates.capture === true) {\n      touch = event.touches[0];\n      privates.stopX = touch.pageX;\n      privates.stopY = touch.pageY;\n      privates.tap = false;\n      privates.capture = false;\n      privates.checkIfCodeGestureIsValid();\n    }\n  };\n\n  privates.codeSequenceEventTouchEnd = function () {\n    if (privates.tap === true) {\n      privates.checkIfCodeGestureIsValid();\n    }\n  };\n\n  privates.codeSequenceEventTouchStart = function (event) {\n    privates.startX = event.changedTouches[0].pageX;\n    privates.startY = event.changedTouches[0].pageY;\n    privates.tap = true;\n    privates.capture = true;\n  };\n\n  privates.stopCodeCharSequence = function () {\n    privates.listener.removeEventListener(\"keydown\", privates.codeSequenceEventKeyDown);\n  };\n\n  privates.stopCodeGestureSequence = function () {\n    privates.listener.removeEventListener(\"touchstart\", privates.codeSequenceEventTouchStart);\n    privates.listener.removeEventListener(\"touchmove\", privates.codeSequenceEventTouchMove);\n    privates.listener.removeEventListener(\"touchend\", privates.codeSequenceEventTouchEnd);\n  };\n\n  privates.listenCodeCharSequence = function () {\n    privates.stopCodeCharSequence();\n    privates.listener.addEventListener(\"keydown\", privates.codeSequenceEventKeyDown);\n  };\n\n  privates.listenCodeGestureSequence = function () {\n    privates.originalCodeGesture = privates.konamiCodeGesture;\n    privates.stopCodeGestureSequence();\n    privates.listener.addEventListener(\"touchstart\", privates.codeSequenceEventTouchStart);\n    privates.listener.addEventListener(\"touchmove\", privates.codeSequenceEventTouchMove);\n    privates.listener.addEventListener(\"touchend\", privates.codeSequenceEventTouchEnd, false);\n  };\n\n  privates.checkIfCodeGestureIsValid = function () {\n    var xMagnitude = Math.abs(privates.startX - privates.stopX),\n        yMagnitude = Math.abs(privates.startY - privates.stopY),\n        x = privates.startX - privates.stopX < 0 ? \"rt\" : \"lt\",\n        y = privates.startY - privates.stopY < 0 ? \"dn\" : \"up\",\n        result = xMagnitude > yMagnitude ? x : y;\n    result = privates.tap === true ? \"tp\" : result;\n\n    if (result === privates.konamiCodeGesture.substr(0, 2)) {\n      privates.konamiCodeGesture = privates.konamiCodeGesture.substr(2, privates.konamiCodeGesture.length - 2);\n    } else {\n      privates.konamiCodeGesture = privates.originalCodeGesture;\n    }\n\n    if (privates.konamiCodeGesture.length === 0) {\n      privates.konamiCodeGesture = privates.originalCodeGesture;\n      privates.afterCodeSequenceCallback(publics);\n    }\n  };\n\n  privates.checkDebugMode = function (options) {\n    if (options && options.debug === true) {\n      privates.debug = function (message, obj) {\n        if (obj !== undefined) {\n          console.log(message, obj);\n        } else {\n          console.log(message);\n        }\n      };\n\n      privates.debug && privates.debug(\"Debug Mode On.\");\n    } else {\n      privates.debug = false;\n    }\n  };\n\n  privates.initOptions = function (options) {\n    privates.checkDebugMode(options);\n    privates.listener = options && options.listener || document;\n    privates.afterCodeSequenceCallback = typeof options === \"function\" && options || options && typeof options.callback === \"function\" && options.callback || privates.defaultCallback;\n  };\n\n  privates.init = function () {\n    privates.input = \"\";\n    privates.konamiCodeChar = \"38384040373937396665\";\n    privates.konamiCodeGesture = \"upupdndnltrtltrttptp\";\n    privates.startX = 0;\n    privates.startY = 0;\n    privates.stopX = 0;\n    privates.stopY = 0;\n    privates.tap = false;\n    privates.capture = false;\n    statics._numberOfInstance = statics._numberOfInstance ? statics._numberOfInstance + 1 : 1;\n    privates.initOptions(options);\n    privates.listenCodeCharSequence();\n    privates.listenCodeGestureSequence();\n  };\n\n  privates.init();\n});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/konami-code-js/src/konami-code.js"],"names":["root","factory","initialClass","KonamiCode","api","noConflict","define","amd","module","exports","callee","options","publics","privates","statics","getNumberOfInstance","_numberOfInstance","enable","listenCodeCharSequence","listenCodeGestureSequence","debug","enableKeyboardKeys","enableTouchGesture","disable","stopCodeCharSequence","stopCodeGestureSequence","disableKeyboardKeys","disableTouchGesture","setListener","listener","document","setCallback","callback","afterCodeSequenceCallback","defaultCallback","setOptions","initOptions","keptLastCodeChar","input","length","konamiCodeChar","substr","checkIfCodeCharIsValid","codeSequenceEventKeyDown","event","keyCode","codeSequenceEventTouchMove","touch","touches","capture","stopX","pageX","stopY","pageY","tap","checkIfCodeGestureIsValid","codeSequenceEventTouchEnd","codeSequenceEventTouchStart","startX","changedTouches","startY","removeEventListener","addEventListener","originalCodeGesture","konamiCodeGesture","xMagnitude","Math","abs","yMagnitude","x","y","result","checkDebugMode","message","obj","undefined","console","log","init"],"mappings":"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","sourcesContent":["/* global define, module */\r\n\r\n/**\r\n * Create Konami Code Sequence recognition « Up Up Bottom Bottom Left Right Left Right B A » on specific HTMLElement or on global HTMLDocument. Usage of finger is also possible with « Up Up Bottom Bottom Left Right Left Right Tap Tap ».\r\n * @class KonamiCode\r\n * @version 0.8.0\r\n * @author {@link https://www.lesieur.name/|Bruno Lesieur}\r\n * @param {Object|Function} [options]             - Container for all options. If type of `options` is Function, it is executed after Konami Code Sequence has been recognize.\r\n * @param {Function}        [options.callback]    - If `options` is not a Function, `options.callback` is executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n * @param {Node}            [options.listener]    - By default it is the HTMLDocument `window.document`. You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n * @param {boolean}         [options.debug]       - By default it is set to `false`. When you set this value to `true`, that allows you to see all debug message in the console.\r\n */\r\n(function (root, factory) {\r\n    var initialClass = root.KonamiCode,\r\n        api = root.KonamiCode = factory;\r\n\r\n    /**\r\n     * If a previous `KonamiCode` variable exist into global environment, you could kept it by changing name of current KonamiCode.\r\n     * You can also just use that function to change the name of Global « KonamiCode » variable.\r\n     * @function noConflict\r\n     * @memberOf KonamiCode.\r\n     * @example <script src=\"other/konami-code.js\"></script>\r\n     * <script src=\"last/konami-code.js\"></script>\r\n     * <script>\r\n     *      var MyKC = KonamiCode.noConflict();\r\n     *      console.log(KonamiCode); // Return the other KonamiCode\r\n     *      console.log(MyKC); // Return your KonamiCode\r\n     * </script>\r\n     */\r\n    api.noConflict = function () {\r\n        root.KonamiCode = initialClass;\r\n        return api;\r\n    };\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(function () {\r\n            return factory;\r\n        });\r\n    }\r\n\r\n    if (typeof module === \"object\" && module.exports) {\r\n        module.exports = factory;\r\n    }\r\n}(this, function callee(options) {\r\n    var publics = this,\r\n        privates = {},\r\n        statics = callee;\r\n\r\n    /**\r\n     * Return the number of time KonamiCode was instanciated.\r\n     * @function getNumberOfInstance\r\n     * @memberOf KonamiCode.\r\n     * @return {number} - Number of KonamiCode instance create from begining.\r\n     */\r\n    statics.getNumberOfInstance = function () {\r\n        return statics._numberOfInstance;\r\n    };\r\n\r\n    /**\r\n     * Active the listening of Konami Code Sequence.\r\n     * @function enable\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.enable = function () {\r\n        privates.listenCodeCharSequence();\r\n        privates.listenCodeGestureSequence();\r\n        privates.debug && privates.debug(\"Listener enabled for all.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Active the listening of Konami Code Sequence for Keyboard Keys.\r\n     * @function enableKeyboardKeys\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.enableKeyboardKeys = function () {\r\n        privates.listenCodeCharSequence();\r\n        privates.debug && privates.debug(\"Listener enabled for Keyboard Keys.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Active the listening of Konami Code Sequence for Touch Gesture.\r\n     * @function enableTouchGesture\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.enableTouchGesture = function () {\r\n        privates.listenCodeGestureSequence();\r\n        privates.debug && privates.debug(\"Listener enabled for Touch Gesture.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Unactive the listening of Konami Code Sequence.\r\n     * @function disable\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.disable = function () {\r\n        privates.stopCodeCharSequence();\r\n        privates.stopCodeGestureSequence();\r\n        privates.debug && privates.debug(\"Listener disabled for all.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Unactive the listening of Konami Code Sequence for Keyboard Keys.\r\n     * @function disabledKeyboardKeys\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.disableKeyboardKeys = function () {\r\n        privates.stopCodeCharSequence();\r\n        privates.debug && privates.debug(\"Listener disabled for Keyboard Keys.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Unactive the listening of Konami Code Sequence for Touch Gesture.\r\n     * @function disabledTouchGesture\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.disableTouchGesture = function () {\r\n        privates.stopCodeGestureSequence();\r\n        privates.debug && privates.debug(\"Listener disabled for Touch Gesture.\");\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Change the listener. The old listener will no longer work. Note: change the listener enable this instance if it is previously disabled.\r\n     * @function setListener\r\n     * @param {Node} listener - You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.setListener = function (listener) {\r\n        privates.stopCodeCharSequence();\r\n        privates.stopCodeGestureSequence();\r\n        privates.listener = listener || document;\r\n        privates.listenCodeCharSequence();\r\n        privates.listenCodeGestureSequence();\r\n        privates.debug && privates.debug(\"Listener changed.\", listener);\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Change the Function executed after Konami Code Sequence has been entered.\r\n     * @function setCallback\r\n     * @param {Function} callback - Function executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     * @example new KonamiCode().setCallback(function (konamiCode) {\r\n     *     konamiCode.disable();\r\n     *     // Do something here.\r\n     * });\r\n     */\r\n    publics.setCallback = function (callback) {\r\n        privates.afterCodeSequenceCallback = (typeof callback === \"function\" && callback) || privates.defaultCallback;\r\n        privates.debug && privates.debug(\"Callback changed.\", callback);\r\n\r\n        return publics;\r\n    };\r\n\r\n    /**\r\n     * Change options of instance currently existing.\r\n     * @function setOptions\r\n     * @param {Object}   [options]          - Container for all options.\r\n     * @param {Function} [options.callback] - Function executed after Konami Code Sequence has been entered. The first parameter provided by the callback is current instance of KonamiCode.\r\n     * @param {Node}     [options.listener] - By default it is the HTMLDocument `window.document`. You can pass some HTMLElement like `<input>` (HTMLInputElement) to only recognize Konami Code Sequence from this element.\r\n     * @param {boolean}  [options.debug]    - By default it is set to `false`. When you set this value to `true`, that allows you to see all debug message in the console.\r\n     * @memberOf KonamiCode#\r\n     * @return {KonamiCode} Current instance of KonamiCode\r\n     */\r\n    publics.setOptions = function (options) {\r\n        privates.initOptions(options);\r\n\r\n        return publics;\r\n    };\r\n\r\n    privates.keptLastCodeChar = function () {\r\n        if (privates.input.length > privates.konamiCodeChar.length) {\r\n            privates.input = privates.input.substr((privates.input.length - privates.konamiCodeChar.length));\r\n        }\r\n    };\r\n\r\n    privates.defaultCallback = function () {\r\n        privates.debug && privates.debug(\"Konami Code Sequence Entered. There is no action defined.\");\r\n    };\r\n\r\n    privates.checkIfCodeCharIsValid = function () {\r\n        if (privates.input === privates.konamiCodeChar) {\r\n            privates.afterCodeSequenceCallback(publics);\r\n        }\r\n    };\r\n\r\n    privates.codeSequenceEventKeyDown = function (event) {\r\n        privates.input += event.keyCode;\r\n        privates.keptLastCodeChar();\r\n        privates.checkIfCodeCharIsValid();\r\n    };\r\n\r\n    privates.codeSequenceEventTouchMove = function (event) {\r\n        var touch;\r\n        if (event.touches.length === 1 && privates.capture === true) {\r\n            touch = event.touches[0];\r\n            privates.stopX = touch.pageX;\r\n            privates.stopY = touch.pageY;\r\n            privates.tap = false;\r\n            privates.capture = false;\r\n            privates.checkIfCodeGestureIsValid();\r\n        }\r\n    };\r\n\r\n    privates.codeSequenceEventTouchEnd = function () {\r\n        if (privates.tap === true) {\r\n            privates.checkIfCodeGestureIsValid();\r\n        }\r\n    };\r\n\r\n    privates.codeSequenceEventTouchStart = function (event) {\r\n        privates.startX = event.changedTouches[0].pageX;\r\n        privates.startY = event.changedTouches[0].pageY;\r\n        privates.tap = true;\r\n        privates.capture = true;\r\n    };\r\n\r\n    privates.stopCodeCharSequence = function () {\r\n        privates.listener.removeEventListener(\"keydown\", privates.codeSequenceEventKeyDown);\r\n    };\r\n\r\n    privates.stopCodeGestureSequence = function () {\r\n        privates.listener.removeEventListener(\"touchstart\", privates.codeSequenceEventTouchStart);\r\n        privates.listener.removeEventListener(\"touchmove\", privates.codeSequenceEventTouchMove);\r\n        privates.listener.removeEventListener(\"touchend\", privates.codeSequenceEventTouchEnd);\r\n    };\r\n\r\n    privates.listenCodeCharSequence = function () {\r\n        privates.stopCodeCharSequence();\r\n        privates.listener.addEventListener(\"keydown\", privates.codeSequenceEventKeyDown);\r\n    };\r\n\r\n    privates.listenCodeGestureSequence = function () {\r\n        privates.originalCodeGesture = privates.konamiCodeGesture;\r\n        privates.stopCodeGestureSequence();\r\n        privates.listener.addEventListener(\"touchstart\", privates.codeSequenceEventTouchStart);\r\n        privates.listener.addEventListener(\"touchmove\", privates.codeSequenceEventTouchMove);\r\n        privates.listener.addEventListener(\"touchend\", privates.codeSequenceEventTouchEnd, false);\r\n    };\r\n\r\n    privates.checkIfCodeGestureIsValid = function () {\r\n        var xMagnitude = Math.abs(privates.startX - privates.stopX),\r\n            yMagnitude = Math.abs(privates.startY - privates.stopY),\r\n            x = (privates.startX - privates.stopX < 0) ? \"rt\" : \"lt\",\r\n            y = (privates.startY - privates.stopY < 0) ? \"dn\" : \"up\",\r\n            result = (xMagnitude > yMagnitude) ? x : y;\r\n\r\n        result = (privates.tap === true) ? \"tp\" : result;\r\n\r\n        if (result === privates.konamiCodeGesture.substr(0, 2)) {\r\n            privates.konamiCodeGesture = privates.konamiCodeGesture.substr(2, privates.konamiCodeGesture.length - 2);\r\n        } else {\r\n            privates.konamiCodeGesture = privates.originalCodeGesture;\r\n        }\r\n\r\n        if (privates.konamiCodeGesture.length === 0) {\r\n            privates.konamiCodeGesture = privates.originalCodeGesture;\r\n            privates.afterCodeSequenceCallback(publics);\r\n        }\r\n    };\r\n\r\n    privates.checkDebugMode = function (options) {\r\n        if (options && options.debug === true) {\r\n            privates.debug = function (message, obj) {\r\n                if (obj !== undefined) {\r\n                    console.log(message, obj);\r\n                } else {\r\n                    console.log(message);\r\n                }\r\n            };\r\n            privates.debug && privates.debug(\"Debug Mode On.\");\r\n        } else {\r\n            privates.debug = false;\r\n        }\r\n    };\r\n\r\n    privates.initOptions = function (options) {\r\n        privates.checkDebugMode(options);\r\n        privates.listener = (options && options.listener) || document;\r\n        privates.afterCodeSequenceCallback =\r\n            (typeof options === \"function\" && options) ||\r\n            (options && typeof options.callback === \"function\" && options.callback) ||\r\n            privates.defaultCallback;\r\n    };\r\n\r\n    privates.init = function () {\r\n        privates.input = \"\";\r\n        privates.konamiCodeChar = \"38384040373937396665\";\r\n        privates.konamiCodeGesture = \"upupdndnltrtltrttptp\";\r\n        privates.startX = 0;\r\n        privates.startY = 0;\r\n        privates.stopX = 0;\r\n        privates.stopY = 0;\r\n        privates.tap = false;\r\n        privates.capture = false;\r\n        statics._numberOfInstance = (statics._numberOfInstance) ? statics._numberOfInstance + 1 : 1;\r\n\r\n        privates.initOptions(options);\r\n\r\n        privates.listenCodeCharSequence();\r\n        privates.listenCodeGestureSequence();\r\n    };\r\n\r\n    privates.init();\r\n}));"]},"metadata":{},"sourceType":"script"}