{"ast":null,"code":"import{theme}from\"@codecademy/gamut-styles\";import React from'react';import{routesMeta}from\"portal/routes\";import{createRootComponent}from\"components/createRootComponent\";import{getRouteMetaForLocation}from\"libs/location/routing\";import{selectLocationType}from\"state/location/selectors\";import{setCredentials}from'state/auth/authSlice';import{useAppDispatch,useAppSelector}from'store/hooks';import{useGetCurrentUserQuery}from'services/auth';import{useGetProfileQuery}from\"services/auth\";import{useFetchInstructorInfoQuery}from\"services/courses\";import{jsx as _jsx}from\"react/jsx-runtime\";export var PortalRouter=function PortalRouter(_ref){var portalData=_ref.portalData,statusCode=_ref.statusCode;var dispatch=useAppDispatch();var _useGetCurrentUserQue=useGetCurrentUserQuery(),data=_useGetCurrentUserQue.data;var _useGetProfileQuery=useGetProfileQuery(),profileQuery=_useGetProfileQuery.data;var _useFetchInstructorIn=useFetchInstructorInfoQuery(),instructor=_useFetchInstructorIn.data;if(data){var token=localStorage.getItem('token');var userResponse={user:data,token:token};dispatch(setCredentials(userResponse));}var locationType=useAppSelector(selectLocationType);var _getRouteMetaForLocat=getRouteMetaForLocation(routesMeta,locationType),Scene=_getRouteMetaForLocat.scene,pageName=_getRouteMetaForLocat.pageName;return/*#__PURE__*/_jsx(Scene,{});};export default createRootComponent(PortalRouter,{theme:theme});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/index.tsx"],"names":["theme","React","routesMeta","createRootComponent","getRouteMetaForLocation","selectLocationType","setCredentials","useAppDispatch","useAppSelector","useGetCurrentUserQuery","useGetProfileQuery","useFetchInstructorInfoQuery","PortalRouter","portalData","statusCode","dispatch","data","profileQuery","instructor","token","localStorage","getItem","userResponse","user","locationType","Scene","scene","pageName"],"mappings":"AAAA,OAASA,KAAT,KAAsB,0BAAtB,CACA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CACA,OAASC,UAAT,KAA2B,eAA3B,CACA,OAASC,mBAAT,KAAoC,gCAApC,CACA,OAASC,uBAAT,KAAwC,uBAAxC,CAEA,OAASC,kBAAT,KAAmC,0BAAnC,CACA,OAASC,cAAT,KAA+B,sBAA/B,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,aAA/C,CACA,OAASC,sBAAT,KAAuC,eAAvC,CACA,OAASC,kBAAT,KAAmC,eAAnC,CACA,OAASC,2BAAT,KAA4C,kBAA5C,C,2CAQA,MAAO,IAAMC,CAAAA,YAAmC,CAAG,QAAtCA,CAAAA,YAAsC,MAI7C,IAHFC,CAAAA,UAGE,MAHFA,UAGE,CAFFC,UAEE,MAFFA,UAEE,CACF,GAAMC,CAAAA,QAAQ,CAAGR,cAAc,EAA/B,CADE,0BAEeE,sBAAsB,EAFrC,CAEMO,IAFN,uBAEMA,IAFN,yBAG6BN,kBAAkB,EAH/C,CAGYO,YAHZ,qBAGMD,IAHN,2BAI2BL,2BAA2B,EAJtD,CAIYO,UAJZ,uBAIMF,IAJN,CAKF,GAAIA,IAAJ,CAAW,CACV,GAAMG,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,IAAI,CAAEP,IADa,CAEnBG,KAAK,CAALA,KAFmB,CAArB,CAIAJ,QAAQ,CAACT,cAAc,CAACgB,YAAD,CAAf,CAAR,CACA,CAEF,GAAME,CAAAA,YAAY,CAAGhB,cAAc,CAACH,kBAAD,CAAnC,CAdG,0BAegCD,uBAAuB,CACtDF,UADsD,CAEtDsB,YAFsD,CAfvD,CAeYC,KAfZ,uBAeKC,KAfL,CAemBC,QAfnB,uBAemBA,QAfnB,CAoBF,mBACI,KAAC,KAAD,IADJ,CAGH,CA3BM,CA+BP,cAAexB,CAAAA,mBAAmB,CAACS,YAAD,CAAc,CAAEZ,KAAK,CAALA,KAAF,CAAd,CAAlC","sourcesContent":["import { theme } from \"@codecademy/gamut-styles\"\nimport React, { useEffect } from 'react'\nimport { routesMeta } from \"portal/routes\";\nimport { createRootComponent } from \"components/createRootComponent\";\nimport { getRouteMetaForLocation } from \"libs/location/routing\";\nimport { createReduxBinder } from \"libs/reduxBinder\";\nimport { selectLocationType } from \"state/location/selectors\";\nimport { setCredentials } from 'state/auth/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useGetCurrentUserQuery } from 'services/auth';\nimport { useGetProfileQuery } from \"services/auth\";\nimport { useFetchInstructorInfoQuery } from \"services/courses\";\n\n\nexport type PortalProps = {\n    portalData: unknown,\n    statusCode: number\n}\n\nexport const PortalRouter: React.FC<PortalProps> = ({\n    portalData,\n    statusCode\n   \n}) => {\n    const dispatch = useAppDispatch();\n    const { data } = useGetCurrentUserQuery()\n    const { data: profileQuery } = useGetProfileQuery()\n    const { data: instructor } = useFetchInstructorInfoQuery()\n    if (data ) {\n     const token = localStorage.getItem('token');\n     const userResponse = {\n       user: data,\n       token\n     }\n     dispatch(setCredentials(userResponse))\n    }\n\n   const locationType = useAppSelector(selectLocationType);\n   const { scene: Scene, pageName } = getRouteMetaForLocation(\n       routesMeta,\n       locationType,\n   )\n\n    return(\n        <Scene />\n    )\n}\n\n\n\nexport default createRootComponent(PortalRouter,{ theme });\n \n"]},"metadata":{},"sourceType":"module"}