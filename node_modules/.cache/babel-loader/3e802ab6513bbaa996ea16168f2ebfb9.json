{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/video.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateVideoViews } from \"services/courses\";\nimport { store } from 'store';\nimport { play, pause, setVolume, setDuration, setTime, ready, seekEnd, seekStart, registerPlayer, setBufferedTime, setMediaType, setOverlay, setBuffering, setFullscreen, setLoading, setAutoplay, setPlaying, setCurrentResolution, setPreferredResolutions, setSupportedResolutions, setClipProgress, setCurrentUrl, setCurrentLecture } from \"state/player/playerSlice\";\nimport css from \"./video.module.css\";\nimport { DefaultResolutions } from \"../constants\"; // import withAdobeHeartbeat from './with-adobe-heartbeat'\n\nimport { FullscreenState, HLS_SDK_URL, HLS_SDK_URL_SAFARI, MediaTypes } from \"../constants\";\nimport { getSDK } from \"../utilities/get-sdk\";\nimport { throttle } from \"../utilities/throttle\"; // import { sendPlaySuccessEvent } from '../../analytics/player-events'\n\nimport { mapHlsError, mapGenericVideoError } from \"../utilities/video-error\";\nimport { Truncate } from \"@codecademy/gamut\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst initialState = {\n  isPlaying: false,\n  reportedVolume: null,\n  reportedPlaybackRate: 1,\n  isBuffering: false,\n  canPlay: false,\n  ready: true\n};\nexport class Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newReadyPromise = () => {\n      return new Promise(resolve => {\n        this.ready = () => {\n          this.setState({\n            ready: true\n          }, () => {\n            resolve();\n          });\n        };\n      });\n    };\n\n    this.isSafari = () => navigator.vendor.match(/apple/i);\n\n    this.isHlsSource = source => HLS_EXTENSIONS.test(source);\n\n    this.destroyHls = () => {\n      this.setState({\n        hlsPlaying: false\n      });\n      this.hls && this.hls.destroy();\n    };\n\n    this.startHls = async source => {\n      const {\n        setSupportedResolutions,\n        setMediaType,\n        setCurrentResolution,\n        preferredResolutions,\n        currentResolution,\n        time\n      } = this.props;\n      const sdkUrl = this.isSafari() ? HLS_SDK_URL_SAFARI : HLS_SDK_URL; //https://github.com/video-dev/hls.js/issues/1543\n\n      const Hls = await getSDK(sdkUrl, \"Hls\");\n      if (!Hls.isSupported()) return setMediaType && setMediaType(MediaTypes.MP4);\n      this.Hls = Hls;\n      this.hls = new Hls({\n        autoStartLoad: false\n      });\n      this.hls.loadSource(source);\n      const videoElement = document.getElementById(\"video-element\");\n      this.hls.attachMedia(videoElement);\n      this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {\n        this.hls.startLoad(time || 0);\n        const autoLevel = {\n          height: \"Auto\",\n          index: -1\n        };\n        const supportedResolutions = data.levels.map(r => ({\n          width: r.width,\n          height: r.height,\n          index: data.levels.indexOf(r)\n        }));\n        setSupportedResolutions && setSupportedResolutions(supportedResolutions.concat(autoLevel));\n        const preferredResolution = preferredResolutions.hls ? preferredResolutions.hls : null;\n        const newResolution = preferredResolution && supportedResolutions.find(r => preferredResolution.width === r.width && preferredResolution.height === r.height);\n\n        if (!newResolution) {\n          setCurrentResolution && setCurrentResolution(autoLevel);\n          return;\n        }\n\n        this.hls && (this.hls.currentLevel = newResolution.index);\n        const resolutionShouldChange = newResolution !== currentResolution;\n        resolutionShouldChange && setCurrentResolution && setCurrentResolution(newResolution);\n      });\n      this.hls.on(Hls.Events.ERROR, this.handleHlsError.bind(this));\n      this.hls.on(Hls.Events.MEDIA_ATTACHED, (event, data) => {\n        this.setState({\n          hlsPlaying: true\n        });\n      });\n    };\n\n    this.onHlsLevelChange = ({\n      height,\n      index\n    }) => {\n      const {\n        currentResolution,\n        setCurrentResolution\n      } = this.props;\n\n      if (height === currentResolution.height) {\n        return;\n      }\n\n      this.hls && (this.hls.currentLevel = index);\n      setCurrentResolution && setCurrentResolution({\n        height,\n        index\n      });\n    };\n\n    this.requestNewUrls = () => {\n      const {\n        setLoading,\n        requestUrls\n      } = this.props;\n      requestUrls && requestUrls(true);\n      setLoading && setLoading(true);\n    };\n\n    this.onMediaTypeChange = newMediaType => {\n      const {\n        setSupportedResolutions,\n        setCurrentResolution,\n        preferredResolutions\n      } = this.props;\n      console.log(\"Mediatype: \", newMediaType);\n\n      if (newMediaType !== MediaTypes.HLS) {\n        setSupportedResolutions && setSupportedResolutions(DefaultResolutions[newMediaType]);\n        const resolution = preferredResolutions && preferredResolutions[newMediaType];\n        setCurrentResolution && setCurrentResolution(resolution);\n      }\n\n      if (newMediaType === MediaTypes.WEBM || newMediaType === MediaTypes.MP4) {\n        this.requestNewUrls();\n      }\n    };\n\n    this.iosEndFullscreen = () => {\n      this.props.setFullscreen(FullscreenState.NORMAL);\n    };\n\n    this.setVolume = percent => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && percent === 0 ? player.muted = true : player.muted = false; // player.volume is read only on mobile iOS\n\n        player && isFinite(percent) && (player.volume = percent);\n      });\n    };\n\n    this.setPlaybackRate = rate => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && (player.playbackRate = rate);\n      });\n    };\n\n    this.onCaptionUpdate = e => {\n      e.currentTarget.activeCues && this.props.setClosedCaptioningCueList(e.currentTarget.activeCues);\n    };\n\n    this.toggleCaptions = language => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && [...player.textTracks].forEach(track => {\n          if (track.mode === \"showing\" && track.language !== language.code) track.mode = \"disabled\";\n\n          if (track.language === language.code) {\n            track.oncuechange = this.onCaptionUpdate;\n            track.mode = \"hidden\";\n          } else {\n            track.oncuechange = null;\n          }\n        });\n      });\n    };\n\n    this.seekTo = amount => {\n      const {\n        onReady\n      } = this.state;\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element;\n        player && (player.currentTime = amount);\n      });\n    };\n\n    this.onRateChange = rate => {\n      const {\n        current: player\n      } = this.element;\n      player && this.setState({\n        reportedPlaybackRate: player.playbackRate\n      });\n    };\n\n    this.onVolumeChange = rate => {\n      const {\n        current: player\n      } = this.element;\n      player && this.setState({\n        reportedVolume: player.volume\n      });\n    };\n\n    this.onPlay = () => {\n      const {\n        setPlaying\n      } = this.props; // const { isStagingEnv, urls, currentUrlIndex, userId } = this.props\n\n      this.setState({\n        isPlaying: true\n      }); // const currentUrl = urls[currentUrlIndex || 0]\n      // // sendPlaySuccessEvent(currentUrl, isStagingEnv, userId)\n\n      setPlaying && setPlaying(true);\n      this.updateProgress();\n    };\n\n    this.onPause = () => {\n      const {\n        setPlaying\n      } = this.props;\n      this.setState({\n        isPlaying: false\n      });\n      setPlaying && setPlaying(false);\n    };\n\n    this.onCanPlay = () => {\n      const {\n        setBuffering,\n        buffering,\n        loading,\n        setLoading,\n        adobeHeartbeat\n      } = this.props;\n      this.setState({\n        canPlay: true\n      });\n      if (loading) setLoading && setLoading(false);\n\n      if (buffering) {\n        setBuffering && setBuffering(false); //adobeHeartbeat && adobeHeartbeat.trackBufferComplete()\n      }\n    };\n\n    this.onLoadedData = () => {\n      const {\n        setBuffering,\n        buffering,\n        setOverlay,\n        adobeHeartbeat\n      } = this.props;\n      const {\n        onReady\n      } = this.state;\n\n      if (!buffering) {\n        this.setState({\n          isBuffering: true\n        });\n        setBuffering && setBuffering(true);\n      }\n\n      setOverlay && setOverlay(null);\n      onReady.then(() => {\n        const {\n          current: player\n        } = this.element; //adobeHeartbeat && adobeHeartbeat.initHeartbeat(player.duration)\n      });\n    };\n\n    this.onEnded = e => {\n      const {\n        adobeHeartbeat,\n        end,\n        pause,\n        userAutoplaySetting,\n        clipId,\n        time,\n        currentLecture,\n        views,\n        course,\n        setNextUrl\n      } = this.props; // end && end()\n\n      pause && pause(false); // adobeHeartbeat && adobeHeartbeat.trackComplete()\n\n      if (views && views.length) {\n        var _course$sections;\n\n        const view = views.find(view => view.lecture == currentLecture.id);\n        store.dispatch(updateVideoViews.initiate({\n          id: view.id,\n          lecture: currentLecture.id,\n          complete: true,\n          progress: time\n        }));\n        const lectures = course && ((_course$sections = course.sections) === null || _course$sections === void 0 ? void 0 : _course$sections.flatMap(sec => sec.lectures));\n        console.log(\"Lec: \", lectures);\n\n        if (lectures && lectures.length) {\n          const currentUrlIndex = lectures.findIndex(lec => lec.id == currentLecture.id);\n\n          if (currentUrlIndex < lectures.length - 1) {\n            const nextLectureIndex = currentUrlIndex + 1;\n            const lecture = lectures[nextLectureIndex];\n            lecture && setNextUrl(lecture.video_url);\n          } else {\n            const lecture = lectures[0];\n            lecture && setNextUrl(lecture.video_url);\n          }\n        }\n      } // userAutoplaySetting && nextCallback && nextCallback(e)\n\n    };\n\n    this.updateTracks = videoElement => {// const { closedCaptioningLanguage, closedCaptioningEnabled, setClosedCaptioningCueList } = this.props\n      // const tracks = videoElement && videoElement.textTracks\n      // tracks &&\n      //   Object.values(tracks).forEach((track) => {\n      //     const isActive = closedCaptioningEnabled && track.language === closedCaptioningLanguage.code\n      //     if (isActive) {\n      //       track.mode = 'hidden'\n      //       videoElement.textTracks[0].mode = 'hidden' // Firefox\n      //       track.oncuechange = (e) => {\n      //         e.currentTarget.activeCues && setClosedCaptioningCueList(e.currentTarget.activeCues)\n      //       }\n      //     } else {\n      //       track.mode = 'disabled'\n      //     }\n      //   })\n    };\n\n    this.onLoadedMetadata = () => {\n      const {\n        ready,\n        registerPlayer\n      } = this.props;\n      this.ready();\n      const duration = this.getDuration();\n      ready && ready(duration);\n      const videoElement = document.getElementById(\"video-element\");\n      registerPlayer && registerPlayer(videoElement); // this.updateTracks(videoElement)\n    };\n\n    this.getSrc = ({\n      currentUrlIndex,\n      currentUrl\n    }) => {\n      // return currentUrlIndex !== null && urls && urls.length > 0 ? urls[currentUrlIndex].url : null\n      let source = currentUrl;\n      return source;\n    };\n\n    this.onSeeking = () => {// const { adobeHeartbeat } = this.props\n      // adobeHeartbeat && adobeHeartbeat.trackSeekStart()\n    };\n\n    this.onSeeked = () => {// const { adobeHeartbeat } = this.props\n      // adobeHeartbeat && adobeHeartbeat.trackSeekComplete()\n    };\n\n    this.updateProgress = () => {\n      const {\n        clipId,\n        setTime,\n        playing\n      } = this.props;\n      if (!playing) return;\n      const reportedTime = this.getPlayedSeconds();\n      setTime && setTime(reportedTime);\n      reportedTime > 0 && this.throttledSetClipProgress({\n        clipId,\n        videoSecondsWatched: reportedTime\n      });\n      this.progressTimeout = setTimeout(this.updateProgress, 50);\n    };\n\n    this.onProgress = () => {\n      const {\n        setBufferedTime\n      } = this.props;\n      const bufferedTime = this.getSecondsLoaded();\n      setBufferedTime && setBufferedTime(bufferedTime);\n    };\n\n    this.onWaiting = () => {\n      const {\n        adobeHeartbeat,\n        setBuffering\n      } = this.props; //adobeHeartbeat && adobeHeartbeat.trackBufferStart()\n\n      setBuffering && setBuffering(true);\n    };\n\n    this.state = { ...initialState,\n      clipId: props.clipId,\n      onReady: this.newReadyPromise(),\n      hlsPlaying: false,\n      videoSrc: null\n    };\n    this.element = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      playing,\n      volume,\n      muted,\n      playbackRate,\n      time,\n      closedCaptioningEnabled,\n      closedCaptioningLanguage,\n      mediaType,\n      currentResolution,\n      userAutoplaySetting,\n      setClipProgress\n    } = this.props;\n    this.throttledSetClipProgress = throttle(setClipProgress, 1000);\n    const src = this.getSrc(this.props);\n\n    if (muted || volume !== null) {\n      volume && this.setVolume(muted ? 0 : volume);\n    }\n\n    if (playbackRate) {\n      this.setPlaybackRate(playbackRate);\n    }\n\n    if (time) {\n      this.seekTo(time);\n    }\n\n    if (closedCaptioningEnabled) {\n      this.toggleCaptions(closedCaptioningLanguage);\n    }\n\n    if (src) {\n      this.maybeStartHls(src, mediaType);\n    }\n\n    this.onMediaTypeChange(mediaType);\n  }\n\n  componentWillUnmount() {\n    this.destroyHls();\n    clearTimeout(this.progressTimeout);\n  }\n\n  maybeStartHls(source, mediaType) {\n    const {\n      setMediaType\n    } = this.props;\n    const {\n      hlsPlaying\n    } = this.state;\n    const isHlsSource = this.isHlsSource(source);\n    const shouldPlayHls = mediaType === MediaTypes.HLS && isHlsSource;\n    if (hlsPlaying) this.destroyHls();\n\n    if (shouldPlayHls) {\n      this.startHls(source);\n    }\n\n    if (mediaType === MediaTypes.HLS && !shouldPlayHls) {\n      setMediaType && setMediaType(MediaTypes.MP4);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      adobeHeartbeat,\n      clipId,\n      closedCaptioningEnabled,\n      closedCaptioningLanguage,\n      currentUrlIndex,\n      mediaType,\n      currentResolution,\n      setClosedCaptioningCueList\n    } = this.props;\n    const {\n      reportedPlaybackRate,\n      reportedVolume,\n      ready,\n      isPlaying,\n      hlsPlaying\n    } = this.state;\n    const newSource = this.getSrc(nextProps); // Handle URL change\n\n    const sourceDidChange = currentUrlIndex !== nextProps.currentUrlIndex || clipId !== nextProps.clipId || mediaType !== nextProps.mediaType || this.getSrc(this.props) !== newSource;\n    const captionsDidChange = nextProps.closedCaptioningEnabled !== closedCaptioningEnabled || nextProps.closedCaptioningLanguage !== closedCaptioningLanguage;\n    const resolutionDidChange = nextProps.currentResolution !== currentResolution;\n    const mediaTypeDidChange = mediaType && mediaType !== nextProps.mediaType;\n    if (mediaTypeDidChange) this.onMediaTypeChange(nextProps.mediaType);\n\n    if (sourceDidChange && newSource) {\n      setClosedCaptioningCueList && setClosedCaptioningCueList(null);\n      this.maybeStartHls(newSource, mediaType);\n    }\n\n    if (sourceDidChange && ready) {\n      this.setState({\n        onReady: this.newReadyPromise(),\n        ready: false,\n        reportedVolume: null,\n        reportedPlaybackRate: null,\n        isPlaying: null\n      }, () => {\n        adobeHeartbeat && adobeHeartbeat.trackComplete();\n      });\n    }\n\n    if (!ready) {\n      return;\n    } // Handle playing change\n\n\n    if (nextProps.playing && !isPlaying) {\n      this.play(true);\n    }\n\n    if (!nextProps.playing && isPlaying) {\n      this.pause(true);\n    } // Handle volume change\n\n\n    if (nextProps.volume !== null || nextProps.muted) {\n      if (!nextProps.muted) {\n        if (nextProps.volume !== reportedVolume) {\n          this.setVolume(nextProps.volume);\n        }\n      }\n\n      if (nextProps.muted && reportedVolume !== 0) {\n        this.setVolume(0);\n      }\n    }\n\n    if (nextProps.playbackRate !== reportedPlaybackRate) {\n      this.setPlaybackRate(nextProps.playbackRate);\n    } // Handle time change\n\n\n    const timeDelta = Math.abs(nextProps.time - this.getPlayedSeconds());\n\n    if (timeDelta >= 1) {\n      this.seekTo(nextProps.time);\n    }\n\n    if (captionsDidChange) {\n      this.toggleCaptions(nextProps.closedCaptioningLanguage);\n    }\n\n    if (resolutionDidChange && hlsPlaying) this.onHlsLevelChange(nextProps.currentResolution);\n  }\n\n  connectIosFullscreenExit() {\n    const {\n      onReady\n    } = this.state;\n    onReady.then(() => {\n      const {\n        current: player\n      } = this.element;\n\n      if (player.webkitExitFullscreen) {\n        player.addEventListener(\"webkitendfullscreen\", this.iosEndFullscreen, false);\n      }\n    });\n  } //#region Player API\n\n\n  play() {\n    const {\n      onReady\n    } = this.state;\n    onReady.then(() => {\n      //   const { adobeHeartbeat, clipId, title } = this.props\n      const {\n        current: player\n      } = this.element;\n\n      if (player) {\n        const promise = player.play(); // adobeHeartbeat && adobeHeartbeat.trackPlay()\n\n        if (promise) {\n          promise.catch(e => {\n            const {\n              onError,\n              pause\n            } = this.props;\n            pause && pause(false);\n            onError && onError(e);\n          });\n        }\n      }\n    });\n  }\n\n  pause() {\n    const {\n      onReady\n    } = this.state;\n    const {\n      adobeHeartbeat,\n      onPause\n    } = this.props;\n    onReady.then(() => {\n      const {\n        current: player\n      } = this.element;\n      player && player.pause(); //   adobeHeartbeat && adobeHeartbeat.trackPause()\n\n      onPause && onPause();\n    });\n  }\n\n  getDuration() {\n    const {\n      current: player\n    } = this.element;\n    return player ? player.duration : 0;\n  }\n\n  getPlayedSeconds() {\n    const {\n      current: player\n    } = this.element;\n    return player ? player.currentTime : 0;\n  }\n\n  getSecondsLoaded() {\n    const {\n      current: player\n    } = this.element;\n\n    if (!player) {\n      return 0;\n    }\n\n    const bufferedLength = player.buffered.length;\n    if (bufferedLength === 0) return 0;\n    let maxBuffered = 0,\n        currentBuffered;\n\n    for (let i = 0; i < bufferedLength; i++) {\n      currentBuffered = player.buffered.end(i);\n      maxBuffered = currentBuffered > maxBuffered ? currentBuffered : maxBuffered;\n    }\n\n    return maxBuffered;\n  } //#endregion\n\n\n  renderTrack(language) {// const { clipId, versionId } = this.props\n    // return (\n    //   <track\n    //     key={language.code}\n    //     label={language.name}\n    //     kind=\"captions\"\n    //     srcLang={language.code}\n    //     src={\"\"}\n    //   />\n    // )\n  }\n\n  handleHlsError(event, data) {// const { onVideoError } = this.props\n    // if (data.fatal) {\n    //   switch (data.type) {\n    //     case this.Hls.ErrorTypes.MEDIA_ERROR:\n    //       this.hls.recoverMediaError()\n    //       break\n    //     default:\n    //       this.destroyHls()\n    //       onVideoError && onVideoError(mapHlsError(data), 'handleHlsError')\n    //       break\n    //   }\n    // }\n  }\n\n  render() {\n    // const { onVideoError, versionId, closedCaptioningLanguage, mediaType } = this.props\n    const {\n      playbackRate,\n      mediaType,\n      supportedResolutions,\n      buffering,\n      loading\n    } = this.props;\n    let source = this.getSrc(this.props); //let source = \"https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\";\n\n    if (!source) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.video\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (mediaType === MediaTypes.HLS) source = undefined;\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"video-element\",\n      className: css.video,\n      ref: this.element,\n      src: source,\n      preload: \"auto\",\n      playsInline: true,\n      autoPlay: true,\n      controls: false,\n      loop: false,\n      onLoadedMetadata: this.onLoadedMetadata,\n      onLoadedData: this.onLoadedData,\n      onCanPlay: this.onCanPlay,\n      onPlay: this.onPlay,\n      onSeeking: this.onSeeking,\n      onSeeked: this.onSeeked,\n      onPause: this.onPause,\n      onEnded: this.onEnded,\n      onVolumeChange: this.onVolumeChange,\n      onRateChange: this.onRateChange,\n      onWaiting: this.onWaiting,\n      onProgress: this.onProgress // onError={(e) => {\n      //   const { current: player } = this.element\n      //   onVideoError && onVideoError(mapGenericVideoError(player.error), 'videoElement.onError')\n      // }}\n\n    }, source, false, {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playing: state.player.playing,\n  playbackRate: state.player.playbackSpeed,\n  volume: state.player.volume,\n  buffering: state.player.buffering,\n  views: state.player.views,\n  currentLecture: state.player.currentLecture,\n  loading: state.player.loading,\n  course: state.player.course,\n  clipId: state.player.clipId,\n  muted: state.player.muted,\n  time: state.player.time,\n  currentUrl: state.player.currentUrl,\n  mediaType: state.player.mediaType,\n  overlay: state.player.overlay,\n  currentResolution: state.player.currentResolution,\n  supportedResolutions: state.player.supportedResolutions,\n  preferredResolutions: state.player.preferredResolutions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setVolume: payload => dispatch(setVolume(payload)),\n  setDuration: payload => dispatch(setVolume(payload)),\n  setTime: payload => dispatch(setTime(payload)),\n  setBufferedTime: payload => dispatch(setBufferedTime(payload)),\n  ready: payload => dispatch(ready(payload)),\n  seekEnd: payload => dispatch(seekEnd()),\n  setNextUrl: payload => dispatch(setCurrentUrl(payload)),\n  seekStart: payload => dispatch(seekStart()),\n  play: payload => dispatch(play(payload)),\n  pause: payload => dispatch(pause(payload)),\n  setCurrentLecture: payload => dispatch(setC(payload)),\n  setBuffering: payload => dispatch(setBuffering(payload)),\n  setOverlay: payload => dispatch(setOverlay(payload)),\n  setFullscreen: payload => dispatch(setFullscreen(payload)),\n  setLoading: payload => dispatch(setLoading(payload)),\n  setPlaying: payload => dispatch(setPlaying(payload)),\n  setClipProgress: payload => dispatch(setClipProgress(payload)),\n  setAutoplay: payload => dispatch(setAutoplay(payload)),\n  setMediaType: payload => dispatch(setMediaType(payload)),\n  setCurrentResolution: payload => dispatch(setCurrentResolution(payload)),\n  setPreferredResolutions: payload => dispatch(setPreferredResolutions(payload)),\n  setSupportedResolutions: payload => dispatch(setSupportedResolutions(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video); // export default withAdobeHeartbeat(\n//   connect(\n//     (state) => ({\n//       userAutoplaySetting: state.userAutoplaySetting,\n//       buffering: state.buffering,\n//       clipCompletedCallback: state.clipCompletedCallback,\n//       clipId: state.clipId,\n//       versionId: state.versionId,\n//       closedCaptioningEnabled: state.closedCaptioningEnabled,\n//       closedCaptioningLanguage: state.closedCaptioningLanguage,\n//       currentResolution: state.currentResolution,\n//       currentUrlIndex: state.currentUrlIndex,\n//       loading: state.loading,\n//       muted: state.muted,\n//       nextCallback: state.nextCallback,\n//       resolution: state.resolutionValue,\n//       playbackRate: state.playbackSpeed,\n//       playing: state.playing,\n//       poster: state.poster,\n//       time: state.time,\n//       title: state.title,\n//       urls: state.urls,\n//       userId: state.userId,\n//       version: state.versions ? state.versions.VERSION : '0.0.0',\n//       volume: state.volume,\n//       mediaType: state.mediaType,\n//       preferredResolutions: state.preferredResolutions,\n//       overlay: state.overlay,\n//       isStagingEnv: state.isStagingEnv,\n//       autoPlay: state.autoPlay,\n//     }),\n//     (store) => ({\n//       registerPlayer: actions.registerPlayer,\n//       seekStart: actions.seekStart,\n//       onVideoError: actions.onVideoError,\n//       setBuffering: actions.setBuffering,\n//       setLoading: actions.setLoading,\n//       setMediaType: actions.setMediaType,\n//       setLoading: actions.setLoading,\n//       setCurrentResolution: actions.setCurrentResolution,\n//       setSupportedResolutions: actions.setSupportedResolutions,\n//       requestUrls: actions.requestUrls,\n//       end: actions.end,\n//       ready: actions.ready,\n//       pause: actions.pause,\n//       play: actions.play,\n//       setClosedCaptioningCueList: actions.setClosedCaptioningCueList,\n//       setFullscreen: actions.setFullscreen,\n//       setOverlay: actions.setOverlay,\n//       setClipProgress: actions.setClipProgress,\n//       setPlaying: actions.setPlaying,\n//       setBufferedTime: actions.setBufferedTime,\n//       setDuration: actions.setDuration,\n//       setTime: actions.setTime,\n//     })\n//   )(Video)\n// )","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/video.js"],"names":["React","Component","connect","updateVideoViews","store","play","pause","setVolume","setDuration","setTime","ready","seekEnd","seekStart","registerPlayer","setBufferedTime","setMediaType","setOverlay","setBuffering","setFullscreen","setLoading","setAutoplay","setPlaying","setCurrentResolution","setPreferredResolutions","setSupportedResolutions","setClipProgress","setCurrentUrl","setCurrentLecture","css","DefaultResolutions","FullscreenState","HLS_SDK_URL","HLS_SDK_URL_SAFARI","MediaTypes","getSDK","throttle","mapHlsError","mapGenericVideoError","Truncate","HLS_EXTENSIONS","initialState","isPlaying","reportedVolume","reportedPlaybackRate","isBuffering","canPlay","Video","constructor","props","newReadyPromise","Promise","resolve","setState","isSafari","navigator","vendor","match","isHlsSource","source","test","destroyHls","hlsPlaying","hls","destroy","startHls","preferredResolutions","currentResolution","time","sdkUrl","Hls","isSupported","MP4","autoStartLoad","loadSource","videoElement","document","getElementById","attachMedia","on","Events","MANIFEST_PARSED","event","data","startLoad","autoLevel","height","index","supportedResolutions","levels","map","r","width","indexOf","concat","preferredResolution","newResolution","find","currentLevel","resolutionShouldChange","ERROR","handleHlsError","bind","MEDIA_ATTACHED","onHlsLevelChange","requestNewUrls","requestUrls","onMediaTypeChange","newMediaType","console","log","HLS","resolution","WEBM","iosEndFullscreen","NORMAL","percent","onReady","state","then","current","player","element","muted","isFinite","volume","setPlaybackRate","rate","playbackRate","onCaptionUpdate","e","currentTarget","activeCues","setClosedCaptioningCueList","toggleCaptions","language","textTracks","forEach","track","mode","code","oncuechange","seekTo","amount","currentTime","onRateChange","onVolumeChange","onPlay","updateProgress","onPause","onCanPlay","buffering","loading","adobeHeartbeat","onLoadedData","onEnded","end","userAutoplaySetting","clipId","currentLecture","views","course","setNextUrl","length","view","lecture","id","dispatch","initiate","complete","progress","lectures","sections","flatMap","sec","currentUrlIndex","findIndex","lec","nextLectureIndex","video_url","updateTracks","onLoadedMetadata","duration","getDuration","getSrc","currentUrl","onSeeking","onSeeked","playing","reportedTime","getPlayedSeconds","throttledSetClipProgress","videoSecondsWatched","progressTimeout","setTimeout","onProgress","bufferedTime","getSecondsLoaded","onWaiting","videoSrc","createRef","componentDidMount","closedCaptioningEnabled","closedCaptioningLanguage","mediaType","src","maybeStartHls","componentWillUnmount","clearTimeout","shouldPlayHls","componentWillReceiveProps","nextProps","newSource","sourceDidChange","captionsDidChange","resolutionDidChange","mediaTypeDidChange","trackComplete","timeDelta","Math","abs","connectIosFullscreenExit","webkitExitFullscreen","addEventListener","promise","catch","onError","bufferedLength","buffered","maxBuffered","currentBuffered","i","renderTrack","render","video","undefined","mapStateToProps","playbackSpeed","overlay","mapDispatchToProps","payload","setC"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateVideoViews } from \"services/courses\";\nimport { store } from 'store';\nimport {\n  play,\n  pause,\n  setVolume,\n  setDuration,\n  setTime,\n  ready,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  setBufferedTime,\n  setMediaType,\n  setOverlay,\n  setBuffering,\n  setFullscreen,\n  setLoading,\n  setAutoplay,\n  setPlaying,\n  setCurrentResolution,\n  setPreferredResolutions,\n  setSupportedResolutions,\n  setClipProgress,\n  setCurrentUrl,\n  setCurrentLecture\n} from \"state/player/playerSlice\";\nimport css from \"./video.module.css\";\n\nimport { DefaultResolutions } from \"../constants\";\n\n// import withAdobeHeartbeat from './with-adobe-heartbeat'\n\nimport {\n  FullscreenState,\n  HLS_SDK_URL,\n  HLS_SDK_URL_SAFARI,\n  MediaTypes,\n} from \"../constants\";\nimport { getSDK } from \"../utilities/get-sdk\";\nimport { throttle } from \"../utilities/throttle\";\n// import { sendPlaySuccessEvent } from '../../analytics/player-events'\nimport { mapHlsError, mapGenericVideoError } from \"../utilities/video-error\";\nimport { Truncate } from \"@codecademy/gamut\";\n\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst initialState = {\n  isPlaying: false,\n  reportedVolume: null,\n  reportedPlaybackRate: 1,\n  isBuffering: false,\n  canPlay: false,\n  ready: true,\n};\n\nexport class Video extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...initialState,\n      clipId: props.clipId,\n      onReady: this.newReadyPromise(),\n      hlsPlaying: false,\n      videoSrc: null,\n    };\n\n    this.element = React.createRef();\n  }\n\n  newReadyPromise = () => {\n    return new Promise((resolve) => {\n      this.ready = () => {\n        this.setState({ ready: true }, () => {\n          resolve();\n        });\n      };\n    });\n  };\n\n  isSafari = () => navigator.vendor.match(/apple/i);\n\n  componentDidMount() {\n    const {\n      playing,\n      volume,\n      muted,\n      playbackRate,\n      time,\n      closedCaptioningEnabled,\n      closedCaptioningLanguage,\n      mediaType,\n      currentResolution,\n      userAutoplaySetting,\n      setClipProgress,\n    } = this.props;\n    this.throttledSetClipProgress = throttle(setClipProgress, 1000);\n    const src = this.getSrc(this.props);\n\n    if (muted || volume !== null) {\n      volume && this.setVolume(muted ? 0 : volume);\n    }\n\n    if (playbackRate) {\n      this.setPlaybackRate(playbackRate);\n    }\n\n    if (time) {\n      this.seekTo(time);\n    }\n\n    if (closedCaptioningEnabled) {\n      this.toggleCaptions(closedCaptioningLanguage);\n    }\n\n    if (src) {\n      this.maybeStartHls(src, mediaType);\n    }\n    this.onMediaTypeChange(mediaType);\n  }\n\n  componentWillUnmount() {\n    this.destroyHls();\n    clearTimeout(this.progressTimeout);\n  }\n\n  maybeStartHls(source, mediaType) {\n    const { setMediaType } = this.props;\n    const { hlsPlaying } = this.state;\n    const isHlsSource = this.isHlsSource(source);\n    const shouldPlayHls = mediaType === MediaTypes.HLS && isHlsSource;\n\n    if (hlsPlaying) this.destroyHls();\n\n    if (shouldPlayHls) {\n      this.startHls(source);\n    }\n\n    if (mediaType === MediaTypes.HLS && !shouldPlayHls) {\n      setMediaType && setMediaType(MediaTypes.MP4);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      adobeHeartbeat,\n      clipId,\n      closedCaptioningEnabled,\n      closedCaptioningLanguage,\n      currentUrlIndex,\n      mediaType,\n      currentResolution,\n      setClosedCaptioningCueList,\n    } = this.props;\n    const {\n      reportedPlaybackRate,\n      reportedVolume,\n      ready,\n      isPlaying,\n      hlsPlaying,\n    } = this.state;\n\n    const newSource = this.getSrc(nextProps);\n\n    // Handle URL change\n    const sourceDidChange =\n      currentUrlIndex !== nextProps.currentUrlIndex ||\n      clipId !== nextProps.clipId ||\n      mediaType !== nextProps.mediaType ||\n      this.getSrc(this.props) !== newSource;\n\n    const captionsDidChange =\n      nextProps.closedCaptioningEnabled !== closedCaptioningEnabled ||\n      nextProps.closedCaptioningLanguage !== closedCaptioningLanguage;\n\n    const resolutionDidChange =\n      nextProps.currentResolution !== currentResolution;\n\n    const mediaTypeDidChange = mediaType && mediaType !== nextProps.mediaType;\n\n    if (mediaTypeDidChange) this.onMediaTypeChange(nextProps.mediaType);\n\n    if (sourceDidChange && newSource) {\n      setClosedCaptioningCueList && setClosedCaptioningCueList(null);\n      this.maybeStartHls(newSource, mediaType);\n    }\n\n    if (sourceDidChange && ready) {\n      this.setState(\n        {\n          onReady: this.newReadyPromise(),\n          ready: false,\n          reportedVolume: null,\n          reportedPlaybackRate: null,\n          isPlaying: null,\n        },\n        () => {\n          adobeHeartbeat && adobeHeartbeat.trackComplete();\n        }\n      );\n    }\n\n    if (!ready) {\n      return;\n    }\n\n    // Handle playing change\n    if (nextProps.playing && !isPlaying) {\n      this.play(true);\n    }\n    if (!nextProps.playing && isPlaying) {\n      this.pause(true);\n    }\n\n    // Handle volume change\n    if (nextProps.volume !== null || nextProps.muted) {\n      if (!nextProps.muted) {\n        if (nextProps.volume !== reportedVolume) {\n          this.setVolume(nextProps.volume);\n        }\n      }\n\n      if (nextProps.muted && reportedVolume !== 0) {\n        this.setVolume(0);\n      }\n    }\n\n    if (nextProps.playbackRate !== reportedPlaybackRate) {\n      this.setPlaybackRate(nextProps.playbackRate);\n    }\n\n    // Handle time change\n    const timeDelta = Math.abs(nextProps.time - this.getPlayedSeconds());\n\n    if (timeDelta >= 1) {\n      this.seekTo(nextProps.time);\n    }\n\n    if (captionsDidChange) {\n      this.toggleCaptions(nextProps.closedCaptioningLanguage);\n    }\n\n    if (resolutionDidChange && hlsPlaying)\n      this.onHlsLevelChange(nextProps.currentResolution);\n  }\n\n  isHlsSource = (source) => HLS_EXTENSIONS.test(source);\n\n  destroyHls = () => {\n    this.setState({ hlsPlaying: false });\n    this.hls && this.hls.destroy();\n  };\n\n  startHls = async (source) => {\n    const {\n      setSupportedResolutions,\n      setMediaType,\n      setCurrentResolution,\n      preferredResolutions,\n      currentResolution,\n      time,\n    } = this.props;\n    const sdkUrl = this.isSafari() ? HLS_SDK_URL_SAFARI : HLS_SDK_URL; //https://github.com/video-dev/hls.js/issues/1543\n    const Hls = await getSDK(sdkUrl, \"Hls\");\n    if (!Hls.isSupported()) return setMediaType && setMediaType(MediaTypes.MP4);\n    this.Hls = Hls;\n\n    this.hls = new Hls({ autoStartLoad: false });\n    this.hls.loadSource(source);\n\n    const videoElement = document.getElementById(\"video-element\");\n    this.hls.attachMedia(videoElement);\n\n    this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {\n      this.hls.startLoad(time || 0);\n      const autoLevel = { height: \"Auto\", index: -1 };\n      const supportedResolutions = data.levels.map((r) => ({\n        width: r.width,\n        height: r.height,\n        index: data.levels.indexOf(r),\n      }));\n      setSupportedResolutions &&\n        setSupportedResolutions(supportedResolutions.concat(autoLevel));\n\n      const preferredResolution = preferredResolutions.hls\n        ? preferredResolutions.hls\n        : null;\n      const newResolution =\n        preferredResolution &&\n        supportedResolutions.find(\n          (r) =>\n            preferredResolution.width === r.width &&\n            preferredResolution.height === r.height\n        );\n\n      if (!newResolution) {\n        setCurrentResolution && setCurrentResolution(autoLevel);\n        return;\n      }\n\n      this.hls && (this.hls.currentLevel = newResolution.index);\n      const resolutionShouldChange = newResolution !== currentResolution;\n      resolutionShouldChange &&\n        setCurrentResolution &&\n        setCurrentResolution(newResolution);\n    });\n    this.hls.on(Hls.Events.ERROR, this.handleHlsError.bind(this));\n    this.hls.on(Hls.Events.MEDIA_ATTACHED, (event, data) => {\n      this.setState({ hlsPlaying: true });\n    });\n  };\n\n  onHlsLevelChange = ({ height, index }) => {\n    const { currentResolution, setCurrentResolution } = this.props;\n\n    if (height === currentResolution.height) {\n      return;\n    }\n    this.hls && (this.hls.currentLevel = index);\n    setCurrentResolution && setCurrentResolution({ height, index });\n  };\n\n  requestNewUrls = () => {\n    const { setLoading, requestUrls } = this.props;\n    requestUrls && requestUrls(true);\n    setLoading && setLoading(true);\n  };\n\n  onMediaTypeChange = (newMediaType) => {\n    const {\n      setSupportedResolutions,\n      setCurrentResolution,\n      preferredResolutions,\n    } = this.props;\n    console.log(\"Mediatype: \", newMediaType);\n    if (newMediaType !== MediaTypes.HLS) {\n      setSupportedResolutions &&\n        setSupportedResolutions(DefaultResolutions[newMediaType]);\n\n      const resolution =\n        preferredResolutions && preferredResolutions[newMediaType];\n      setCurrentResolution && setCurrentResolution(resolution);\n    }\n\n    if (newMediaType === MediaTypes.WEBM || newMediaType === MediaTypes.MP4) {\n      this.requestNewUrls();\n    }\n  };\n\n  iosEndFullscreen = () => {\n    this.props.setFullscreen(FullscreenState.NORMAL);\n  };\n\n  connectIosFullscreenExit() {\n    const { onReady } = this.state;\n    onReady.then(() => {\n      const { current: player } = this.element;\n      if (player.webkitExitFullscreen) {\n        player.addEventListener(\n          \"webkitendfullscreen\",\n          this.iosEndFullscreen,\n          false\n        );\n      }\n    });\n  }\n\n  //#region Player API\n  play() {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      //   const { adobeHeartbeat, clipId, title } = this.props\n      const { current: player } = this.element;\n\n      if (player) {\n        const promise = player.play();\n\n        // adobeHeartbeat && adobeHeartbeat.trackPlay()\n\n        if (promise) {\n          promise.catch((e) => {\n            const { onError, pause } = this.props;\n            pause && pause(false);\n\n            onError && onError(e);\n          });\n        }\n      }\n    });\n  }\n\n  pause() {\n    const { onReady } = this.state;\n    const { adobeHeartbeat, onPause } = this.props;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && player.pause();\n\n      //   adobeHeartbeat && adobeHeartbeat.trackPause()\n\n      onPause && onPause();\n    });\n  }\n\n  setVolume = (percent) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n      player && percent === 0 ? (player.muted = true) : (player.muted = false); // player.volume is read only on mobile iOS\n      player && isFinite(percent) && (player.volume = percent);\n    });\n  };\n\n  setPlaybackRate = (rate) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && (player.playbackRate = rate);\n    });\n  };\n\n  onCaptionUpdate = (e) => {\n    e.currentTarget.activeCues &&\n      this.props.setClosedCaptioningCueList(e.currentTarget.activeCues);\n  };\n\n  toggleCaptions = (language) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player &&\n        [...player.textTracks].forEach((track) => {\n          if (track.mode === \"showing\" && track.language !== language.code)\n            track.mode = \"disabled\";\n\n          if (track.language === language.code) {\n            track.oncuechange = this.onCaptionUpdate;\n            track.mode = \"hidden\";\n          } else {\n            track.oncuechange = null;\n          }\n        });\n    });\n  };\n\n  seekTo = (amount) => {\n    const { onReady } = this.state;\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n\n      player && (player.currentTime = amount);\n    });\n  };\n\n  getDuration() {\n    const { current: player } = this.element;\n\n    return player ? player.duration : 0;\n  }\n\n  getPlayedSeconds() {\n    const { current: player } = this.element;\n\n    return player ? player.currentTime : 0;\n  }\n\n  getSecondsLoaded() {\n    const { current: player } = this.element;\n\n    if (!player) {\n      return 0;\n    }\n\n    const bufferedLength = player.buffered.length;\n\n    if (bufferedLength === 0) return 0;\n\n    let maxBuffered = 0,\n      currentBuffered;\n    for (let i = 0; i < bufferedLength; i++) {\n      currentBuffered = player.buffered.end(i);\n      maxBuffered =\n        currentBuffered > maxBuffered ? currentBuffered : maxBuffered;\n    }\n\n    return maxBuffered;\n  }\n  //#endregion\n\n  onRateChange = (rate) => {\n    const { current: player } = this.element;\n\n    player && this.setState({ reportedPlaybackRate: player.playbackRate });\n  };\n\n  onVolumeChange = (rate) => {\n    const { current: player } = this.element;\n\n    player && this.setState({ reportedVolume: player.volume });\n  };\n\n  onPlay = () => {\n    const { setPlaying } = this.props;\n    // const { isStagingEnv, urls, currentUrlIndex, userId } = this.props\n    this.setState({ isPlaying: true });\n    // const currentUrl = urls[currentUrlIndex || 0]\n    // // sendPlaySuccessEvent(currentUrl, isStagingEnv, userId)\n    setPlaying && setPlaying(true);\n    this.updateProgress();\n  };\n\n  onPause = () => {\n    const { setPlaying } = this.props;\n    this.setState({ isPlaying: false });\n    setPlaying && setPlaying(false);\n  };\n\n  onCanPlay = () => {\n    const { setBuffering, buffering, loading, setLoading, adobeHeartbeat } =\n      this.props;\n\n    this.setState({ canPlay: true });\n    if (loading) setLoading && setLoading(false);\n\n    if (buffering) {\n      setBuffering && setBuffering(false);\n      //adobeHeartbeat && adobeHeartbeat.trackBufferComplete()\n    }\n  };\n\n  onLoadedData = () => {\n    const { setBuffering, buffering, setOverlay, adobeHeartbeat } = this.props;\n    const { onReady } = this.state;\n\n    if (!buffering) {\n      this.setState({ isBuffering: true });\n      setBuffering && setBuffering(true);\n    }\n\n    setOverlay && setOverlay(null);\n\n    onReady.then(() => {\n      const { current: player } = this.element;\n      //adobeHeartbeat && adobeHeartbeat.initHeartbeat(player.duration)\n    });\n  };\n\n  onEnded = (e) => {\n    const {\n      adobeHeartbeat,\n      end,\n      pause,\n      userAutoplaySetting,\n      clipId,\n      time,\n      currentLecture,\n      views,\n      course,\n      setNextUrl\n    } = this.props;\n\n    // end && end()\n\n    pause && pause(false);\n\n    // adobeHeartbeat && adobeHeartbeat.trackComplete()\n    if (views && views.length) {\n      const view = views.find((view) => view.lecture == currentLecture.id);\n      store.dispatch(updateVideoViews.initiate({\n        id: view.id,\n        lecture: currentLecture.id,\n        complete: true,\n        progress: time,\n      }));\n      const lectures = course && course.sections?.flatMap(sec => sec.lectures)\n      console.log(\"Lec: \", lectures)\n      if (lectures && lectures.length) {\n        const currentUrlIndex = lectures.findIndex(lec => lec.id == currentLecture.id)\n        if(currentUrlIndex < (lectures.length - 1)) {\n          const nextLectureIndex = currentUrlIndex + 1\n          const lecture = lectures[nextLectureIndex]\n          lecture && setNextUrl(lecture.video_url)\n        } else {\n          const lecture = lectures[0]\n          lecture && setNextUrl(lecture.video_url)\n        }\n        \n      }\n    }\n\n    // userAutoplaySetting && nextCallback && nextCallback(e)\n  };\n\n  renderTrack(language) {\n    // const { clipId, versionId } = this.props\n    // return (\n    //   <track\n    //     key={language.code}\n    //     label={language.name}\n    //     kind=\"captions\"\n    //     srcLang={language.code}\n    //     src={\"\"}\n    //   />\n    // )\n  }\n\n  updateTracks = (videoElement) => {\n    // const { closedCaptioningLanguage, closedCaptioningEnabled, setClosedCaptioningCueList } = this.props\n    // const tracks = videoElement && videoElement.textTracks\n    // tracks &&\n    //   Object.values(tracks).forEach((track) => {\n    //     const isActive = closedCaptioningEnabled && track.language === closedCaptioningLanguage.code\n    //     if (isActive) {\n    //       track.mode = 'hidden'\n    //       videoElement.textTracks[0].mode = 'hidden' // Firefox\n    //       track.oncuechange = (e) => {\n    //         e.currentTarget.activeCues && setClosedCaptioningCueList(e.currentTarget.activeCues)\n    //       }\n    //     } else {\n    //       track.mode = 'disabled'\n    //     }\n    //   })\n  };\n\n  onLoadedMetadata = () => {\n    const { ready, registerPlayer } = this.props;\n    this.ready();\n\n    const duration = this.getDuration();\n    ready && ready(duration);\n\n    const videoElement = document.getElementById(\"video-element\");\n    registerPlayer && registerPlayer(videoElement);\n    // this.updateTracks(videoElement)\n  };\n\n  getSrc = ({ currentUrlIndex, currentUrl }) => {\n    // return currentUrlIndex !== null && urls && urls.length > 0 ? urls[currentUrlIndex].url : null\n    let source = currentUrl;\n    return source;\n  };\n\n  onSeeking = () => {\n    // const { adobeHeartbeat } = this.props\n    // adobeHeartbeat && adobeHeartbeat.trackSeekStart()\n  };\n\n  onSeeked = () => {\n    // const { adobeHeartbeat } = this.props\n    // adobeHeartbeat && adobeHeartbeat.trackSeekComplete()\n  };\n\n  updateProgress = () => {\n    const { clipId, setTime, playing } = this.props;\n\n    if (!playing) return;\n\n    const reportedTime = this.getPlayedSeconds();\n    setTime && setTime(reportedTime);\n    reportedTime > 0 &&\n      this.throttledSetClipProgress({\n        clipId,\n        videoSecondsWatched: reportedTime,\n      });\n\n    this.progressTimeout = setTimeout(this.updateProgress, 50);\n  };\n\n  onProgress = () => {\n    const { setBufferedTime } = this.props;\n    const bufferedTime = this.getSecondsLoaded();\n\n    setBufferedTime && setBufferedTime(bufferedTime);\n  };\n\n  handleHlsError(event, data) {\n    // const { onVideoError } = this.props\n    // if (data.fatal) {\n    //   switch (data.type) {\n    //     case this.Hls.ErrorTypes.MEDIA_ERROR:\n    //       this.hls.recoverMediaError()\n    //       break\n    //     default:\n    //       this.destroyHls()\n    //       onVideoError && onVideoError(mapHlsError(data), 'handleHlsError')\n    //       break\n    //   }\n    // }\n  }\n\n  onWaiting = () => {\n    const { adobeHeartbeat, setBuffering } = this.props;\n    //adobeHeartbeat && adobeHeartbeat.trackBufferStart()\n    setBuffering && setBuffering(true);\n  };\n\n  render() {\n    // const { onVideoError, versionId, closedCaptioningLanguage, mediaType } = this.props\n    const {\n      playbackRate,\n      mediaType,\n      supportedResolutions,\n      buffering,\n      loading,\n    } = this.props;\n\n    let source = this.getSrc(this.props);\n    //let source = \"https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4\";\n\n    if (!source) {\n      return <div className={css.video} />;\n    }\n\n    if (mediaType === MediaTypes.HLS) source = undefined;\n\n    return (\n      <video\n        id=\"video-element\"\n        key={source}\n        className={css.video}\n        ref={this.element}\n        src={source}\n        preload=\"auto\"\n        playsInline\n        autoPlay\n        controls={false}\n        loop={false}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onLoadedData={this.onLoadedData}\n        onCanPlay={this.onCanPlay}\n        onPlay={this.onPlay}\n        onSeeking={this.onSeeking}\n        onSeeked={this.onSeeked}\n        onPause={this.onPause}\n        onEnded={this.onEnded}\n        onVolumeChange={this.onVolumeChange}\n        onRateChange={this.onRateChange}\n        onWaiting={this.onWaiting}\n        onProgress={this.onProgress}\n        // onError={(e) => {\n        //   const { current: player } = this.element\n        //   onVideoError && onVideoError(mapGenericVideoError(player.error), 'videoElement.onError')\n        // }}\n      >\n        {/* {closedCaptioningLanguage && versionId && this.renderTrack(closedCaptioningLanguage)} */}\n      </video>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playing: state.player.playing,\n  playbackRate: state.player.playbackSpeed,\n  volume: state.player.volume,\n  buffering: state.player.buffering,\n  views: state.player.views,\n  currentLecture: state.player.currentLecture,\n  loading: state.player.loading,\n  course: state.player.course,\n  clipId: state.player.clipId,\n  muted: state.player.muted,\n  time: state.player.time,\n  currentUrl: state.player.currentUrl,\n  mediaType: state.player.mediaType,\n  overlay: state.player.overlay,\n  currentResolution: state.player.currentResolution,\n  supportedResolutions: state.player.supportedResolutions,\n  preferredResolutions: state.player.preferredResolutions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setVolume: (payload) => dispatch(setVolume(payload)),\n  setDuration: (payload) => dispatch(setVolume(payload)),\n  setTime: (payload) => dispatch(setTime(payload)),\n  setBufferedTime: (payload) => dispatch(setBufferedTime(payload)),\n  ready: (payload) => dispatch(ready(payload)),\n  seekEnd: (payload) => dispatch(seekEnd()),\n  setNextUrl: (payload) => dispatch(setCurrentUrl(payload)),\n  seekStart: (payload) => dispatch(seekStart()),\n  play: (payload) => dispatch(play(payload)),\n  pause: (payload) => dispatch(pause(payload)),\n  setCurrentLecture: (payload) => dispatch(setC(payload)),\n  setBuffering: (payload) => dispatch(setBuffering(payload)),\n  setOverlay: (payload) => dispatch(setOverlay(payload)),\n  setFullscreen: (payload) => dispatch(setFullscreen(payload)),\n  setLoading: (payload) => dispatch(setLoading(payload)),\n  setPlaying: (payload) => dispatch(setPlaying(payload)),\n  setClipProgress: (payload) => dispatch(setClipProgress(payload)),\n  setAutoplay: (payload) => dispatch(setAutoplay(payload)),\n  setMediaType: (payload) => dispatch(setMediaType(payload)),\n  setCurrentResolution: (payload) => dispatch(setCurrentResolution(payload)),\n  setPreferredResolutions: (payload) =>\n    dispatch(setPreferredResolutions(payload)),\n  setSupportedResolutions: (payload) =>\n    dispatch(setSupportedResolutions(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n\n// export default withAdobeHeartbeat(\n//   connect(\n//     (state) => ({\n//       userAutoplaySetting: state.userAutoplaySetting,\n//       buffering: state.buffering,\n//       clipCompletedCallback: state.clipCompletedCallback,\n//       clipId: state.clipId,\n//       versionId: state.versionId,\n//       closedCaptioningEnabled: state.closedCaptioningEnabled,\n//       closedCaptioningLanguage: state.closedCaptioningLanguage,\n//       currentResolution: state.currentResolution,\n//       currentUrlIndex: state.currentUrlIndex,\n//       loading: state.loading,\n//       muted: state.muted,\n//       nextCallback: state.nextCallback,\n//       resolution: state.resolutionValue,\n//       playbackRate: state.playbackSpeed,\n//       playing: state.playing,\n//       poster: state.poster,\n//       time: state.time,\n//       title: state.title,\n//       urls: state.urls,\n//       userId: state.userId,\n//       version: state.versions ? state.versions.VERSION : '0.0.0',\n//       volume: state.volume,\n//       mediaType: state.mediaType,\n//       preferredResolutions: state.preferredResolutions,\n//       overlay: state.overlay,\n//       isStagingEnv: state.isStagingEnv,\n//       autoPlay: state.autoPlay,\n//     }),\n//     (store) => ({\n//       registerPlayer: actions.registerPlayer,\n//       seekStart: actions.seekStart,\n//       onVideoError: actions.onVideoError,\n//       setBuffering: actions.setBuffering,\n//       setLoading: actions.setLoading,\n//       setMediaType: actions.setMediaType,\n//       setLoading: actions.setLoading,\n//       setCurrentResolution: actions.setCurrentResolution,\n//       setSupportedResolutions: actions.setSupportedResolutions,\n//       requestUrls: actions.requestUrls,\n//       end: actions.end,\n//       ready: actions.ready,\n//       pause: actions.pause,\n//       play: actions.play,\n//       setClosedCaptioningCueList: actions.setClosedCaptioningCueList,\n//       setFullscreen: actions.setFullscreen,\n//       setOverlay: actions.setOverlay,\n//       setClipProgress: actions.setClipProgress,\n//       setPlaying: actions.setPlaying,\n//       setBufferedTime: actions.setBufferedTime,\n//       setDuration: actions.setDuration,\n//       setTime: actions.setTime,\n//     })\n//   )(Video)\n// )\n"]},"metadata":{},"sourceType":"module"}