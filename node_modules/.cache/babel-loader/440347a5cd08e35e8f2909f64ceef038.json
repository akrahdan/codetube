{"ast":null,"code":"import _defineProperty from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{Fragment}from'react';import{FormProvider,useForm}from'react-hook-form';import{Form}from'../Form';import{LayoutGrid}from'../Layout';import{GridFormButtons}from'./GridFormButtons';import{GridFormContent,GridFormSection,GridFormSectionBreak,GridFormSectionTitle}from'./GridFormSections';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export*from'./types';var defaultColumnGap={_:8,sm:32};var isGridFormSection=function isGridFormSection(field){return field.title!==undefined;};export function GridForm(_ref){var cancel=_ref.cancel,children=_ref.children,className=_ref.className,_ref$columnGap=_ref.columnGap,columnGap=_ref$columnGap===void 0?defaultColumnGap:_ref$columnGap,_ref$fields=_ref.fields,fields=_ref$fields===void 0?[]:_ref$fields,onSubmit=_ref.onSubmit,_ref$rowGap=_ref.rowGap,rowGap=_ref$rowGap===void 0?16:_ref$rowGap,submit=_ref.submit,_ref$validation=_ref.validation,validation=_ref$validation===void 0?'onSubmit':_ref$validation,_ref$showRequired=_ref.showRequired,showRequired=_ref$showRequired===void 0?false:_ref$showRequired;var flatFields=fields.flatMap(function(field){return isGridFormSection(field)?field.fields:field;});var _useForm=useForm({defaultValues:flatFields.reduce(function(defaultValues,field){return _objectSpread(_objectSpread({},defaultValues),{},_defineProperty({},field.name,field.defaultValue));},{}),mode:validation}),handleSubmit=_useForm.handleSubmit,formState=_useForm.formState,methods=_objectWithoutProperties(_useForm,[\"handleSubmit\",\"formState\"]);return/*#__PURE__*/_jsx(FormProvider,_objectSpread(_objectSpread({handleSubmit:handleSubmit,formState:formState},methods),{},{children:/*#__PURE__*/_jsx(Form,{className:className,onSubmit:handleSubmit(onSubmit),noValidate:true,children:/*#__PURE__*/_jsxs(LayoutGrid,{columnGap:columnGap,rowGap:rowGap,children:[/*#__PURE__*/_jsx(_Fragment,{children:fields.map(function(field){if(isGridFormSection(field)){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(GridFormSectionTitle,{title:field.title,as:field.as,layout:field.layout,numberOfFields:field.fields.length}),/*#__PURE__*/_jsx(GridFormSection,{fields:field.fields,showRequired:showRequired}),/*#__PURE__*/_jsx(GridFormSectionBreak,{})]},field.title);}return/*#__PURE__*/_jsx(GridFormContent,{field:field,showRequired:showRequired},field.name);})}),/*#__PURE__*/_jsx(GridFormButtons,_objectSpread(_objectSpread({cancel:cancel},submit),{},{disabled:validation==='onChange'&&!formState.isValid||submit.disabled})),children]})})}));}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/index.tsx"],"names":["React","Fragment","FormProvider","useForm","Form","LayoutGrid","GridFormButtons","GridFormContent","GridFormSection","GridFormSectionBreak","GridFormSectionTitle","defaultColumnGap","_","sm","isGridFormSection","field","title","undefined","GridForm","cancel","children","className","columnGap","fields","onSubmit","rowGap","submit","validation","showRequired","flatFields","flatMap","defaultValues","reduce","name","defaultValue","mode","handleSubmit","formState","methods","map","as","layout","length","isValid","disabled"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { FormProvider, Mode, SubmitHandler, useForm } from 'react-hook-form';\n\nimport { ButtonProps } from '../Button/shared';\nimport { Form } from '../Form';\nimport { LayoutGrid, LayoutGridProps } from '../Layout';\nimport { GridFormButtons, GridFormSubmitProps } from './GridFormButtons';\nimport {\n  GridFormContent,\n  GridFormSection,\n  GridFormSectionBreak,\n  GridFormSectionTitle,\n} from './GridFormSections';\nimport {\n  GridFormField,\n  GridFormFieldsProps,\n  GridFormSectionProps,\n} from './types';\n\nexport * from './types';\n\nconst defaultColumnGap = {\n  _: 8,\n  sm: 32,\n} as const;\n\nconst isGridFormSection = (\n  field: GridFormField | GridFormSectionProps\n): field is GridFormSectionProps => {\n  return (field as GridFormSectionProps).title !== undefined;\n};\n\nexport type GridFormProps<Values extends {}> = {\n  children?: React.ReactNode;\n  className?: string;\n\n  /**\n   * Layout grid column gap override.\n   */\n  columnGap?: LayoutGridProps['columnGap'];\n\n  /**\n   * Descriptions of any fields or sections comprising the form.\n   */\n  fields?: GridFormFieldsProps[];\n\n  /**\n   * Renders a cancel button with the provided child text and onClick function.\n   */\n  cancel?: ButtonProps;\n\n  /**\n   * Function called with field values on submit, if all validations have passed.\n   */\n  onSubmit: SubmitHandler<Values>;\n\n  /**\n   * Show asterisks next to required fields.\n   */\n  showRequired?: boolean;\n\n  /**\n   * Layout grid row gap override between fields.\n   */\n  rowGap?: LayoutGridProps['rowGap'];\n\n  /**\n   * Description of the submit button at the end of the form.\n   */\n  submit: GridFormSubmitProps & {\n    /**\n     * Manually overrides the submit button to be disabled regardless of validation, if true.\n     */\n    disabled?: boolean;\n  };\n\n  /**\n   * Which react hook form mode we are going to use for validation.\n   * If you use the onChange mode the submit button will be disabled until all\n   * required fields are completed.\n   */\n  validation?: Exclude<Mode, 'onBlur'>;\n};\n\nexport function GridForm<\n  Values extends Record<string, boolean | string | undefined | FileList>\n>({\n  cancel,\n  children,\n  className,\n  columnGap = defaultColumnGap,\n  fields = [],\n  onSubmit,\n  rowGap = 16,\n  submit,\n  validation = 'onSubmit',\n  showRequired = false,\n}: GridFormProps<Values>) {\n  const flatFields = fields.flatMap((field) =>\n    isGridFormSection(field) ? field.fields : field\n  );\n\n  const { handleSubmit, formState, ...methods } = useForm({\n    defaultValues: flatFields.reduce<any>(\n      (defaultValues, field) => ({\n        ...defaultValues,\n        [field.name]: field.defaultValue,\n      }),\n      {}\n    ),\n    mode: validation,\n  });\n\n  return (\n    <FormProvider\n      handleSubmit={handleSubmit}\n      formState={formState}\n      {...methods}\n    >\n      <Form className={className} onSubmit={handleSubmit(onSubmit)} noValidate>\n        <LayoutGrid columnGap={columnGap} rowGap={rowGap}>\n          <>\n            {fields.map((field) => {\n              if (isGridFormSection(field)) {\n                return (\n                  <Fragment key={field.title}>\n                    <GridFormSectionTitle\n                      title={field.title}\n                      as={field.as}\n                      layout={field.layout}\n                      numberOfFields={field.fields.length}\n                    />\n                    <GridFormSection\n                      fields={field.fields}\n                      showRequired={showRequired}\n                    />\n                    <GridFormSectionBreak />\n                  </Fragment>\n                );\n              }\n              return (\n                <GridFormContent\n                  field={field}\n                  showRequired={showRequired}\n                  key={field.name}\n                />\n              );\n            })}\n          </>\n\n          <GridFormButtons\n            cancel={cancel}\n            {...submit}\n            disabled={\n              (validation === 'onChange' && !formState.isValid) ||\n              submit.disabled\n            }\n          />\n          {children}\n        </LayoutGrid>\n      </Form>\n    </FormProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}