{"ast":null,"code":"import React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { GridFormInputGroup } from '../GridFormInputGroup';\nexport var GridFormContent = function GridFormContent(_ref) {\n  var _errors$field$name, _field$validation;\n\n  var field = _ref.field,\n      showRequired = _ref.showRequired;\n\n  var _useFormContext = useFormContext(),\n      register = _useFormContext.register,\n      errors = _useFormContext.errors,\n      setValue = _useFormContext.setValue;\n  /**\n   * Keep track of the first error in this form.\n   * This is so we only add the correct aria-live props on the first error.\n   */\n\n\n  var isFirstError = Object.keys(errors)[0] === field.name;\n  var errorMessage = (_errors$field$name = errors[field.name]) === null || _errors$field$name === void 0 ? void 0 : _errors$field$name.message;\n  var requiredBoolean = !!(field.type !== 'hidden' && field.type !== 'sweet-container' && (_field$validation = field.validation) !== null && _field$validation !== void 0 && _field$validation.required);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GridFormInputGroup, {\n    error: errorMessage,\n    isFirstError: isFirstError,\n    field: field,\n    key: field.name,\n    register: register,\n    setValue: setValue,\n    required: requiredBoolean,\n    showRequired: showRequired\n  }));\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut/dist/GridForm/GridFormSections/GridFormContent.js"],"names":["React","useFormContext","GridFormInputGroup","GridFormContent","_ref","_errors$field$name","_field$validation","field","showRequired","_useFormContext","register","errors","setValue","isFirstError","Object","keys","name","errorMessage","message","requiredBoolean","type","validation","required","createElement","Fragment","error","key"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC1D,MAAIC,kBAAJ,EAAwBC,iBAAxB;;AAEA,MAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;AAAA,MACIC,YAAY,GAAGJ,IAAI,CAACI,YADxB;;AAGA,MAAIC,eAAe,GAAGR,cAAc,EAApC;AAAA,MACIS,QAAQ,GAAGD,eAAe,CAACC,QAD/B;AAAA,MAEIC,MAAM,GAAGF,eAAe,CAACE,MAF7B;AAAA,MAGIC,QAAQ,GAAGH,eAAe,CAACG,QAH/B;AAIA;AACF;AACA;AACA;;;AAGE,MAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoB,CAApB,MAA2BJ,KAAK,CAACS,IAApD;AACA,MAAIC,YAAY,GAAG,CAACZ,kBAAkB,GAAGM,MAAM,CAACJ,KAAK,CAACS,IAAP,CAA5B,MAA8C,IAA9C,IAAsDX,kBAAkB,KAAK,KAAK,CAAlF,GAAsF,KAAK,CAA3F,GAA+FA,kBAAkB,CAACa,OAArI;AACA,MAAIC,eAAe,GAAG,CAAC,EAAEZ,KAAK,CAACa,IAAN,KAAe,QAAf,IAA2Bb,KAAK,CAACa,IAAN,KAAe,iBAA1C,IAA+D,CAACd,iBAAiB,GAAGC,KAAK,CAACc,UAA3B,MAA2C,IAA1G,IAAkHf,iBAAiB,KAAK,KAAK,CAA7I,IAAkJA,iBAAiB,CAACgB,QAAtK,CAAvB;AACA,SAAO,aAAatB,KAAK,CAACuB,aAAN,CAAoBvB,KAAK,CAACwB,QAA1B,EAAoC,IAApC,EAA0C,aAAaxB,KAAK,CAACuB,aAAN,CAAoBrB,kBAApB,EAAwC;AACjHuB,IAAAA,KAAK,EAAER,YAD0G;AAEjHJ,IAAAA,YAAY,EAAEA,YAFmG;AAGjHN,IAAAA,KAAK,EAAEA,KAH0G;AAIjHmB,IAAAA,GAAG,EAAEnB,KAAK,CAACS,IAJsG;AAKjHN,IAAAA,QAAQ,EAAEA,QALuG;AAMjHE,IAAAA,QAAQ,EAAEA,QANuG;AAOjHU,IAAAA,QAAQ,EAAEH,eAPuG;AAQjHX,IAAAA,YAAY,EAAEA;AARmG,GAAxC,CAAvD,CAApB;AAUD,CA7BM","sourcesContent":["import React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { GridFormInputGroup } from '../GridFormInputGroup';\nexport var GridFormContent = function GridFormContent(_ref) {\n  var _errors$field$name, _field$validation;\n\n  var field = _ref.field,\n      showRequired = _ref.showRequired;\n\n  var _useFormContext = useFormContext(),\n      register = _useFormContext.register,\n      errors = _useFormContext.errors,\n      setValue = _useFormContext.setValue;\n  /**\n   * Keep track of the first error in this form.\n   * This is so we only add the correct aria-live props on the first error.\n   */\n\n\n  var isFirstError = Object.keys(errors)[0] === field.name;\n  var errorMessage = (_errors$field$name = errors[field.name]) === null || _errors$field$name === void 0 ? void 0 : _errors$field$name.message;\n  var requiredBoolean = !!(field.type !== 'hidden' && field.type !== 'sweet-container' && (_field$validation = field.validation) !== null && _field$validation !== void 0 && _field$validation.required);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GridFormInputGroup, {\n    error: errorMessage,\n    isFirstError: isFirstError,\n    field: field,\n    key: field.name,\n    register: register,\n    setValue: setValue,\n    required: requiredBoolean,\n    showRequired: showRequired\n  }));\n};"]},"metadata":{},"sourceType":"module"}