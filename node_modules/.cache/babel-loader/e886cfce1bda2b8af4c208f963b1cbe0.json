{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/Forms/RegistrationForm/SigninForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport { v4 as uuid } from 'uuid';\nimport { passwordTips } from 'libs/passwordTips';\nimport { showModal } from 'state/modals/modalSlice';\nimport { useAppDispatch } from 'store/hooks';\nimport { useLoginMutation } from 'services/auth';\nimport { redirectAfterLogin, serializeRegistrationValues } from './helpers';\nimport styles from './styles/index.module.scss';\nimport { UserSubmitKey } from './types';\nimport { VALIDATORS } from './validators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SigninForm = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch(); // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [serializedForm, setSerializedForm] = useState();\n  const [recaptchaError, setRecaptchaError] = useState();\n  const captcha = useRef(null);\n  const {\n    emailValidation,\n    passwordValidation\n  } = useMemo(() => ({\n    emailValidation: VALIDATORS.email(),\n    passwordValidation: VALIDATORS.password()\n  }), []);\n  const [login, {\n    isLoading\n  }] = useLoginMutation();\n\n  const onSubmitInitialize = values => {\n    // trackUserClick({ target: 'create_account' });\n    setDisabled(true);\n    const serializedValues = serializeRegistrationValues(values);\n    setSerializedForm(serializedValues);\n\n    if (captcha.current === null) {\n      // logger.error({ message: 'captcha on checkoutpage has a null ref' });\n      return;\n    }\n\n    captcha.current.execute(); // validate the full form to see if we can submit\n\n    setDisabled(false);\n  };\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n\n\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const submitForm = values => {\n    console.log(values);\n    l;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.registrationContainer,\n    children: [/*#__PURE__*/_jsxDEV(GridForm, {\n      className: styles.loginForm,\n      fields: [{\n        name: UserSubmitKey.LOGIN,\n        label: 'Email/username',\n        type: 'email',\n        defaultValue: '',\n        size: 12,\n        onUpdate\n      }, {\n        name: UserSubmitKey.PASSWORD,\n        label: 'Password',\n        type: 'password',\n        tooltip: {\n          children: /*#__PURE__*/_jsxDEV(Markdown, {\n            text: passwordTips\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this),\n          id: 'password-tooltip',\n          alignment: 'bottom-left',\n          className: styles.tooltipContainer\n        },\n        size: 12,\n        onUpdate,\n        defaultValue: ''\n      }],\n      submit: {\n        contents: 'Log In',\n        position: 'stretch',\n        theme: 'brand-red',\n        size: 12,\n        disabled: isDisabled || submitLocked\n      },\n      validation: \"all\",\n      onSubmit: submitForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 16,\n      children: recaptchaError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.recaptchaError,\n        children: recaptchaError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      className: styles.textDisplay,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.textCenter,\n        children: [\"Need an account?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: styles.textLink,\n          onClick: () => dispatch(showModal('signup')),\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SigninForm, \"cuNU+yIAbaZWNCcpHCHORL2bK9U=\", false, function () {\n  return [useAppDispatch, useMountedState, useLoginMutation];\n});\n\n_c = SigninForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SigninForm\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/Forms/RegistrationForm/SigninForm.tsx"],"names":["Box","GridForm","Markdown","Text","delay","React","useMemo","useRef","useState","useMountedState","v4","uuid","passwordTips","showModal","useAppDispatch","useLoginMutation","redirectAfterLogin","serializeRegistrationValues","styles","UserSubmitKey","VALIDATORS","SigninForm","onSuccess","props","dispatch","isMounted","isDisabled","setDisabled","submitLocked","setSubmitLocked","recaptchaInstanceId","setRecaptchaInstanceId","serializedForm","setSerializedForm","recaptchaError","setRecaptchaError","captcha","emailValidation","passwordValidation","email","password","login","isLoading","onSubmitInitialize","values","serializedValues","current","execute","onUpdate","submitForm","console","log","l","registrationContainer","loginForm","name","LOGIN","label","type","defaultValue","size","PASSWORD","tooltip","children","id","alignment","className","tooltipContainer","contents","position","theme","disabled","textDisplay","textCenter","textLink"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCC,IAAlC,QAA8C,mBAA9C;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAMA,SAASC,YAAT,QAA6B,mBAA7B;AAGA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,cAAT,QAA+C,aAA/C;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,kBAAT,EAA6BC,2BAA7B,QAAgE,WAAhE;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAIEC,aAJF,QAKO,SALP;AAMA,SAAkCC,UAAlC,QAAoD,cAApD;;AAEA,OAAO,MAAMC,UAA2C,GAAG,CAAC;AAC1DC,EAAAA,SAAS,GAAGN,kBAD8C;AAE1D,KAAGO;AAFuD,CAAD,KAGrD;AAAA;;AACJ,QAAMC,QAAQ,GAAGV,cAAc,EAA/B,CADI,CAEJ;;AACA,QAAMW,SAAS,GAAGhB,eAAe,EAAjC;AACA,QAAM,CAACiB,UAAD,EAAaC,WAAb,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACsB,mBAAD,EAAsBC,sBAAtB,IAAgDvB,QAAQ,CAACG,IAAI,EAAL,CAA9D;AACA,QAAM,CACJqB,cADI,EAEJC,iBAFI,IAGFzB,QAAQ,EAHZ;AAIA,QAAM,CAAC0B,cAAD,EAAiBC,iBAAjB,IAAsC3B,QAAQ,EAApD;AAEA,QAAM4B,OAAO,GAAG7B,MAAM,CAA0B,IAA1B,CAAtB;AAEA,QAAM;AAAE8B,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA0ChC,OAAO,CACrD,OAAO;AACL+B,IAAAA,eAAe,EAAEjB,UAAU,CAACmB,KAAX,EADZ;AAELD,IAAAA,kBAAkB,EAAElB,UAAU,CAACoB,QAAX;AAFf,GAAP,CADqD,EAKrD,EALqD,CAAvD;AAUA,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAwB3B,gBAAgB,EAA9C;;AACA,QAAM4B,kBAAkB,GAAIC,MAAD,IAA0B;AACnD;AAEAjB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,UAAMkB,gBAAgB,GAAG5B,2BAA2B,CAAC2B,MAAD,CAApD;AACAX,IAAAA,iBAAiB,CAACY,gBAAD,CAAjB;;AAEA,QAAIT,OAAO,CAACU,OAAR,KAAoB,IAAxB,EAA8B;AAC5B;AACA;AACD;;AACDV,IAAAA,OAAO,CAACU,OAAR,CAAgBC,OAAhB,GAXmD,CAYnD;;AACApB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAdD;AAgBA;AACF;AACA;AACA;;;AACE,QAAMqB,QAAQ,GAAG,MAAM;AACrB5C,IAAAA,KAAK,CAAC,MAAMqB,SAAS,MAAMG,YAAf,IAA+BC,eAAe,CAAC,KAAD,CAArD,EAA8D,GAA9D,CAAL;AACD,GAFD;;AAIA,QAAMoB,UAAU,GAAIL,MAAD,IAAY;AAC7BM,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACAQ,IAAAA,CAAC;AACF,GAHD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAElC,MAAM,CAACmC,qBAAvB;AAAA,4BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAEnC,MAAM,CAACoC,SADpB;AAEE,MAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAEpC,aAAa,CAACqC,KADtB;AAEEC,QAAAA,KAAK,EAAE,gBAFT;AAGEC,QAAAA,IAAI,EAAE,OAHR;AAIEC,QAAAA,YAAY,EAAE,EAJhB;AAKEC,QAAAA,IAAI,EAAE,EALR;AAMEZ,QAAAA;AANF,OADM,EAUN;AACEO,QAAAA,IAAI,EAAEpC,aAAa,CAAC0C,QADtB;AAEEJ,QAAAA,KAAK,EAAE,UAFT;AAGEC,QAAAA,IAAI,EAAE,UAHR;AAIEI,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,eAAE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEnD;AAAhB;AAAA;AAAA;AAAA;AAAA,kBADH;AAEPoD,UAAAA,EAAE,EAAE,kBAFG;AAGPC,UAAAA,SAAS,EAAE,aAHJ;AAIPC,UAAAA,SAAS,EAAEhD,MAAM,CAACiD;AAJX,SAJX;AAUEP,QAAAA,IAAI,EAAE,EAVR;AAWEZ,QAAAA,QAXF;AAYEW,QAAAA,YAAY,EAAE;AAZhB,OAVM,CAFV;AA8BE,MAAA,MAAM,EAAE;AACNS,QAAAA,QAAQ,EAAE,QADJ;AAENC,QAAAA,QAAQ,EAAE,SAFJ;AAGNC,QAAAA,KAAK,EAAE,WAHD;AAINV,QAAAA,IAAI,EAAE,EAJA;AAKNW,QAAAA,QAAQ,EAAE7C,UAAU,IAAIE;AALlB,OA9BV;AAqCE,MAAA,UAAU,EAAC,KArCb;AAsCE,MAAA,QAAQ,EAAEqB;AAtCZ;AAAA;AAAA;AAAA;AAAA,YADF,eAyCE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA,gBACGf,cAAc,iBACb;AAAK,QAAA,SAAS,EAAEhB,MAAM,CAACgB,cAAvB;AAAA,kBACGA;AADH;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAzCF,eAwDE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEhB,MAAM,CAACsD,WAAxB;AAAA,6BACE;AAAG,QAAA,SAAS,EAAEtD,MAAM,CAACuD,UAArB;AAAA,uCACmB,GADnB,eAEE;AAAG,UAAA,SAAS,EAAEvD,MAAM,CAACwD,QAArB;AAA+B,UAAA,OAAO,EAAE,MAAMlD,QAAQ,CAACX,SAAS,CAAC,QAAD,CAAV,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqED,CAjIM;;GAAMQ,U;UAIMP,c,EAECL,e,EAsBYM,gB;;;KA5BnBM,U","sourcesContent":["import { Box, GridForm, Markdown, Text } from '@codecademy/gamut';\nimport { delay } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\n\nimport { v4 as uuid } from 'uuid';\n\n\nimport { RecaptchaWrapper } from 'components/Forms/RecaptchaWrapper';\n\n\nimport { passwordTips } from 'libs/passwordTips';\n\n\nimport { showModal } from 'state/modals/modalSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useLoginMutation } from 'services/auth';\nimport { redirectAfterLogin, serializeRegistrationValues } from './helpers';\n\nimport styles from './styles/index.module.scss';\nimport {\n  RegistrationFormProps,\n  SerializedValues,\n  SubmitValues,\n  UserSubmitKey,\n} from './types';\nimport { extractValidationErrors, VALIDATORS } from './validators';\n\nexport const SigninForm: React.FC<RegistrationFormProps> = ({\n  onSuccess = redirectAfterLogin,\n  ...props\n}) => {\n  const dispatch = useAppDispatch()\n  // const ssoFeatureFlag = useFeatureFlag('enterprise_sso_form');\n  const isMounted = useMountedState();\n  const [isDisabled, setDisabled] = useState(false);\n  const [submitLocked, setSubmitLocked] = useState(true);\n  const [recaptchaInstanceId, setRecaptchaInstanceId] = useState(uuid());\n  const [\n    serializedForm,\n    setSerializedForm,\n  ] = useState<SerializedValues | null>();\n  const [recaptchaError, setRecaptchaError] = useState<string | undefined>();\n\n  const captcha = useRef<RecaptchaWrapper | null>(null);\n\n  const { emailValidation, passwordValidation } = useMemo(\n    () => ({\n      emailValidation: VALIDATORS.email(),\n      passwordValidation: VALIDATORS.password(),\n    }),\n    []\n  );\n\n \n  \n  const [login, { isLoading}] = useLoginMutation()\n  const onSubmitInitialize = (values: SubmitValues) => {\n    // trackUserClick({ target: 'create_account' });\n\n    setDisabled(true);\n    const serializedValues = serializeRegistrationValues(values);\n    setSerializedForm(serializedValues);\n\n    if (captcha.current === null) {\n      // logger.error({ message: 'captcha on checkoutpage has a null ref' });\n      return;\n    }\n    captcha.current.execute();\n    // validate the full form to see if we can submit\n    setDisabled(false);\n  };\n\n  /**\n   * @description\n   * This unlocks submit a half second after the first input to prevent against bots - subsequent calls have no effect\n   * */\n  const onUpdate = () => {\n    delay(() => isMounted() && submitLocked && setSubmitLocked(false), 500);\n  };\n\n  const submitForm = (values) => {\n    console.log(values)\n    l\n  }\n\n  \n\n  return (\n    <div className={styles.registrationContainer}>\n      <GridForm\n        className={styles.loginForm}\n        fields={[\n          {\n            name: UserSubmitKey.LOGIN,\n            label: 'Email/username',\n            type: 'email',\n            defaultValue: '',\n            size: 12,\n            onUpdate,\n          \n          },\n          {\n            name: UserSubmitKey.PASSWORD,\n            label: 'Password',\n            type: 'password',\n            tooltip: {\n              children: <Markdown text={passwordTips} />,\n              id: 'password-tooltip',\n              alignment: 'bottom-left',\n              className: styles.tooltipContainer,\n            },\n            size: 12,\n            onUpdate,\n            defaultValue: '',\n            \n          },\n          \n         \n        ]}\n        submit={{\n          contents: 'Log In',\n          position: 'stretch',\n          theme: 'brand-red',\n          size: 12,\n          disabled: isDisabled || submitLocked,\n        }}\n        validation=\"all\"\n        onSubmit={submitForm}\n      />\n      <Box pt={16}>\n        {recaptchaError && (\n          <div className={styles.recaptchaError} >\n            {recaptchaError}\n          </div>\n        )}\n        {/* <RecaptchaWrapper\n          key={recaptchaInstanceId}\n          publicKey={''}\n          size=\"invisible\"\n          ref={captcha}\n          onChange={submitForm}\n          onExpired={resetRecaptcha}\n        /> */}\n      </Box>\n      <Text className={styles.textDisplay} >\n        <p className={styles.textCenter}>\n          Need an account?{\" \"}\n          <a className={styles.textLink} onClick={() => dispatch(showModal('signup'))}>\n            Sign up\n          </a>\n          .\n        </p>\n      </Text>\n\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}