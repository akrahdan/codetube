{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Toggle/index.tsx\";\nimport { screenReaderOnly } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { Box } from '../Box';\nimport { HiddenText } from '../HiddenText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizes = {\n  medium: {\n    height: '30px',\n    width: '60px'\n  },\n  small: {\n    height: '18px',\n    width: '36px'\n  }\n};\nconst colors = ['blue', 'hyper'];\nconst ToggleTrack = styled(Box)`\n  transition: background-color 0.2s ease;\n\n  &:after {\n    content: '';\n    transition: opacity 0.2s ease;\n    opacity: 0;\n    border-radius: inherit;\n    position: absolute;\n    width: calc(100% + 8px);\n    height: calc(100% + 8px);\n    top: -4px;\n    left: -4px;\n    border-color: inherit;\n    border-style: solid;\n    border-width: 2px;\n  }\n\n  ${Box} {\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);\n  }\n`;\n_c = ToggleTrack;\nconst ToggleInput = styled.input(screenReaderOnly);\n_c2 = ToggleInput;\nconst ToggleLabel = styled.label`\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  padding: 0;\n\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.75;\n  }\n\n  ${ToggleInput}:focus-visible + ${ToggleTrack} {\n    &:after {\n      opacity: 1;\n    }\n  }\n`;\n_c3 = ToggleLabel;\nexport const Toggle = ({\n  checked,\n  className,\n  onChange,\n  label,\n  disabled,\n  variant = 'blue',\n  size = 'medium'\n}) => {\n  const activeColor = variant;\n  const checkedColor = checked ? variant : 'gray-600';\n  const sizeStyles = sizes[size];\n  return /*#__PURE__*/_jsxDEV(ToggleLabel, {\n    className: className,\n    htmlFor: label,\n    variant: variant,\n    disabled: disabled,\n    children: [/*#__PURE__*/_jsxDEV(HiddenText, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleInput, {\n      type: \"checkbox\",\n      checked: checked,\n      id: label,\n      disabled: disabled,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleTrack, { ...sizeStyles,\n      borderColor: activeColor,\n      bg: checkedColor,\n      borderRadius: \"99rem\",\n      position: \"relative\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        width: \"40%\",\n        borderRadius: \"50%\",\n        bg: \"white\",\n        position: \"absolute\",\n        top: \"10%\",\n        bottom: \"10%\",\n        left: checked ? '55%' : '5%'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_c4 = Toggle;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ToggleTrack\");\n$RefreshReg$(_c2, \"ToggleInput\");\n$RefreshReg$(_c3, \"ToggleLabel\");\n$RefreshReg$(_c4, \"Toggle\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Toggle/index.tsx"],"names":["screenReaderOnly","styled","React","Box","HiddenText","sizes","medium","height","width","small","colors","ToggleTrack","ToggleInput","input","ToggleLabel","label","Toggle","checked","className","onChange","disabled","variant","size","activeColor","checkedColor","sizeStyles"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,UAAT,QAA2B,eAA3B;;AAyBA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,KAAK,EAAE;AAFD,GADI;AAKZC,EAAAA,KAAK,EAAE;AACLF,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,KAAK,EAAE;AAFF;AALK,CAAd;AAWA,MAAME,MAAM,GAAG,CAAC,MAAD,EAAS,OAAT,CAAf;AAEA,MAAMC,WAAW,GAAGV,MAAM,CAACE,GAAD,CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,GAAI;AACR;AACA;AACA,CArBA;KAAMQ,W;AAuBN,MAAMC,WAAW,GAAGX,MAAM,CAACY,KAAP,CAAab,gBAAb,CAApB;MAAMY,W;AAEN,MAAME,WAAW,GAAGb,MAAM,CAACc,KAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIH,WAAY,oBAAmBD,WAAY;AAC/C;AACA;AACA;AACA;AACA,CAhBA;MAAMG,W;AAkBN,OAAO,MAAME,MAA6B,GAAG,CAAC;AAC5CC,EAAAA,OAD4C;AAE5CC,EAAAA,SAF4C;AAG5CC,EAAAA,QAH4C;AAI5CJ,EAAAA,KAJ4C;AAK5CK,EAAAA,QAL4C;AAM5CC,EAAAA,OAAO,GAAG,MANkC;AAO5CC,EAAAA,IAAI,GAAG;AAPqC,CAAD,KAQvC;AACJ,QAAMC,WAAW,GAAGF,OAApB;AACA,QAAMG,YAAY,GAAGP,OAAO,GAAGI,OAAH,GAAa,UAAzC;AACA,QAAMI,UAAU,GAAGpB,KAAK,CAACiB,IAAD,CAAxB;AAEA,sBACE,QAAC,WAAD;AACE,IAAA,SAAS,EAAEJ,SADb;AAEE,IAAA,OAAO,EAAEH,KAFX;AAGE,IAAA,OAAO,EAAEM,OAHX;AAIE,IAAA,QAAQ,EAAED,QAJZ;AAAA,4BAME,QAAC,UAAD;AAAA,gBAAaL;AAAb;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,WAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAEE,OAFX;AAGE,MAAA,EAAE,EAAEF,KAHN;AAIE,MAAA,QAAQ,EAAEK,QAJZ;AAKE,MAAA,QAAQ,EAAED;AALZ;AAAA;AAAA;AAAA;AAAA,YAPF,eAcE,QAAC,WAAD,OACMM,UADN;AAEE,MAAA,WAAW,EAAEF,WAFf;AAGE,MAAA,EAAE,EAAEC,YAHN;AAIE,MAAA,YAAY,EAAC,OAJf;AAKE,MAAA,QAAQ,EAAC,UALX;AAAA,6BAOE,QAAC,GAAD;AACE,QAAA,KAAK,EAAC,KADR;AAEE,QAAA,YAAY,EAAC,KAFf;AAGE,QAAA,EAAE,EAAC,OAHL;AAIE,QAAA,QAAQ,EAAC,UAJX;AAKE,QAAA,GAAG,EAAC,KALN;AAME,QAAA,MAAM,EAAC,KANT;AAOE,QAAA,IAAI,EAAEP,OAAO,GAAG,KAAH,GAAW;AAP1B;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA/CM;MAAMD,M","sourcesContent":["import { screenReaderOnly } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { Box } from '../Box';\nimport { HiddenText } from '../HiddenText';\n\nexport type ToggleSizes = keyof typeof sizes;\nexport type ToggleVariants = typeof colors[number];\n\nexport type LabelProps = {\n  disabled?: boolean;\n  variant?: ToggleVariants;\n};\n\nexport type ToggleProps = {\n  /** The state of the checkbox input (this can be out of sync with the input's value if not passed) */\n  checked: boolean;\n  /** Called when the input value has changed */\n  onChange: (event?: React.FormEvent<HTMLInputElement>) => void;\n  /** A hidden label used for accessibility and control, unique to the page */\n  label?: string;\n  /** Color variations for background styles */\n  variant?: ToggleVariants;\n  /** Changes the dimensions of the element for using the component outside of a form context */\n  size?: ToggleSizes;\n  disabled?: boolean;\n  className?: string;\n};\n\nconst sizes = {\n  medium: {\n    height: '30px',\n    width: '60px',\n  },\n  small: {\n    height: '18px',\n    width: '36px',\n  },\n};\n\nconst colors = ['blue', 'hyper'] as const;\n\nconst ToggleTrack = styled(Box)`\n  transition: background-color 0.2s ease;\n\n  &:after {\n    content: '';\n    transition: opacity 0.2s ease;\n    opacity: 0;\n    border-radius: inherit;\n    position: absolute;\n    width: calc(100% + 8px);\n    height: calc(100% + 8px);\n    top: -4px;\n    left: -4px;\n    border-color: inherit;\n    border-style: solid;\n    border-width: 2px;\n  }\n\n  ${Box} {\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);\n  }\n`;\n\nconst ToggleInput = styled.input(screenReaderOnly);\n\nconst ToggleLabel = styled.label<LabelProps>`\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  padding: 0;\n\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.75;\n  }\n\n  ${ToggleInput}:focus-visible + ${ToggleTrack} {\n    &:after {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  checked,\n  className,\n  onChange,\n  label,\n  disabled,\n  variant = 'blue',\n  size = 'medium',\n}) => {\n  const activeColor = variant;\n  const checkedColor = checked ? variant : 'gray-600';\n  const sizeStyles = sizes[size];\n\n  return (\n    <ToggleLabel\n      className={className}\n      htmlFor={label}\n      variant={variant}\n      disabled={disabled}\n    >\n      <HiddenText>{label}</HiddenText>\n      <ToggleInput\n        type=\"checkbox\"\n        checked={checked}\n        id={label}\n        disabled={disabled}\n        onChange={onChange}\n      />\n      <ToggleTrack\n        {...sizeStyles}\n        borderColor={activeColor}\n        bg={checkedColor}\n        borderRadius=\"99rem\"\n        position=\"relative\"\n      >\n        <Box\n          width=\"40%\"\n          borderRadius=\"50%\"\n          bg=\"white\"\n          position=\"absolute\"\n          top=\"10%\"\n          bottom=\"10%\"\n          left={checked ? '55%' : '5%'}\n        />\n      </ToggleTrack>\n    </ToggleLabel>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}