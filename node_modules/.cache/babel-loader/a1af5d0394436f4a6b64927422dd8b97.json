{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/GridForm/GridFormInputGroup/GridFormSelectInput/index.tsx\";\nimport React from 'react';\nimport { Select } from '../../../Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GridFormSelectInput = ({\n  className,\n  error,\n  field,\n  register,\n  showRequired\n}) => {\n  return /*#__PURE__*/_jsxDEV(Select, {\n    defaultValue: field.defaultValue,\n    disabled: field.disabled,\n    className: className,\n    error: error,\n    htmlFor: field.name,\n    name: field.name,\n    onChange: event => {\n      var _field$onUpdate;\n\n      return (_field$onUpdate = field.onUpdate) === null || _field$onUpdate === void 0 ? void 0 : _field$onUpdate.call(field, event.target.value);\n    },\n    ref: register(field.validation),\n    options: field.options,\n    id: field.id,\n    \"aria-invalid\": error,\n    \"aria-required\": showRequired\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = GridFormSelectInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridFormSelectInput\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/GridForm/GridFormInputGroup/GridFormSelectInput/index.tsx"],"names":["React","Select","GridFormSelectInput","className","error","field","register","showRequired","defaultValue","disabled","name","event","onUpdate","target","value","validation","options","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,MAAT,QAAuB,eAAvB;;AAWA,OAAO,MAAMC,mBAAuD,GAAG,CAAC;AACtEC,EAAAA,SADsE;AAEtEC,EAAAA,KAFsE;AAGtEC,EAAAA,KAHsE;AAItEC,EAAAA,QAJsE;AAKtEC,EAAAA;AALsE,CAAD,KAMjE;AACJ,sBACE,QAAC,MAAD;AACE,IAAA,YAAY,EAAEF,KAAK,CAACG,YADtB;AAEE,IAAA,QAAQ,EAAEH,KAAK,CAACI,QAFlB;AAGE,IAAA,SAAS,EAAEN,SAHb;AAIE,IAAA,KAAK,EAAEC,KAJT;AAKE,IAAA,OAAO,EAAEC,KAAK,CAACK,IALjB;AAME,IAAA,IAAI,EAAEL,KAAK,CAACK,IANd;AAOE,IAAA,QAAQ,EAAGC,KAAD;AAAA;;AAAA,gCAAWN,KAAK,CAACO,QAAjB,oDAAW,qBAAAP,KAAK,EAAYM,KAAK,CAACE,MAAN,CAAaC,KAAzB,CAAhB;AAAA,KAPZ;AAQE,IAAA,GAAG,EAAER,QAAQ,CAACD,KAAK,CAACU,UAAP,CARf;AASE,IAAA,OAAO,EAAEV,KAAK,CAACW,OATjB;AAUE,IAAA,EAAE,EAAEX,KAAK,CAACY,EAVZ;AAWE,oBAAcb,KAXhB;AAYE,qBAAeG;AAZjB;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAvBM;KAAML,mB","sourcesContent":["import React from 'react';\nimport { UseFormMethods } from 'react-hook-form';\n\nimport { Select } from '../../../Form';\nimport { GridFormSelectField } from '../../types';\n\nexport type GridFormSelectInputProps = {\n  className?: string;\n  error?: boolean;\n  showRequired?: boolean;\n  field: Omit<GridFormSelectField, 'label'>;\n  register: UseFormMethods['register'];\n};\n\nexport const GridFormSelectInput: React.FC<GridFormSelectInputProps> = ({\n  className,\n  error,\n  field,\n  register,\n  showRequired,\n}) => {\n  return (\n    <Select\n      defaultValue={field.defaultValue}\n      disabled={field.disabled}\n      className={className}\n      error={error}\n      htmlFor={field.name}\n      name={field.name}\n      onChange={(event) => field.onUpdate?.(event.target.value)}\n      ref={register(field.validation)}\n      options={field.options}\n      id={field.id}\n      aria-invalid={error}\n      aria-required={showRequired}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}