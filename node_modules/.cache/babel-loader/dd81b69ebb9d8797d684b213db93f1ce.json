{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport function transparentize(amount, hex) {\n  return rgba(__assign(__assign({}, parseToRgb(hex)), {\n    a: (100 - amount * 100) / 100\n  }));\n}\n\nfunction rgba(color) {\n  return \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \",\" + color.a + \")\";\n}\n\nfunction parseToRgb(hex) {\n  return {\n    r: parseInt(\"\" + hex[1] + hex[2], 16),\n    g: parseInt(\"\" + hex[3] + hex[4], 16),\n    b: parseInt(\"\" + hex[5] + hex[6], 16)\n  };\n}","map":{"version":3,"sources":["../../src/color.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAyC,GAAzC,EAAoD;AACxD,SAAO,IAAI,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,UAAU,CAAC,GAAD,CADJ,CAAA,EACS;AAClB,IAAA,CAAC,EAAE,CAAC,MAAM,MAAM,GAAG,GAAhB,IAAuB;AADR,GADT,CAAA,CAAX;AAID;;AAED,SAAS,IAAT,CAAc,KAAd,EAAmE;AACjE,SAAO,UAAQ,KAAK,CAAC,CAAd,GAAe,GAAf,GAAmB,KAAK,CAAC,CAAzB,GAA0B,GAA1B,GAA8B,KAAK,CAAC,CAApC,GAAqC,GAArC,GAAyC,KAAK,CAAC,CAA/C,GAAgD,GAAvD;AACD;;AAED,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC7B,SAAO;AACL,IAAA,CAAC,EAAE,QAAQ,CAAC,KAAG,GAAG,CAAC,CAAD,CAAN,GAAY,GAAG,CAAC,CAAD,CAAhB,EAAuB,EAAvB,CADN;AAEL,IAAA,CAAC,EAAE,QAAQ,CAAC,KAAG,GAAG,CAAC,CAAD,CAAN,GAAY,GAAG,CAAC,CAAD,CAAhB,EAAuB,EAAvB,CAFN;AAGL,IAAA,CAAC,EAAE,QAAQ,CAAC,KAAG,GAAG,CAAC,CAAD,CAAN,GAAY,GAAG,CAAC,CAAD,CAAhB,EAAuB,EAAvB;AAHN,GAAP;AAKD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport function transparentize(amount, hex) {\n    return rgba(__assign(__assign({}, parseToRgb(hex)), { a: (100 - amount * 100) / 100 }));\n}\nfunction rgba(color) {\n    return \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \",\" + color.a + \")\";\n}\nfunction parseToRgb(hex) {\n    return {\n        r: parseInt(\"\" + hex[1] + hex[2], 16),\n        g: parseInt(\"\" + hex[3] + hex[4], 16),\n        b: parseInt(\"\" + hex[5] + hex[6], 16)\n    };\n}\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}