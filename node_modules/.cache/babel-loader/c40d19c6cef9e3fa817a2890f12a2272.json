{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Paths/PathMarketingPage/Recommendations/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport CMSContext from 'portal/scenes/Paths/ContentfulContext'; // import { selectUserJWT } from '~/state/currentUser/selectors';\n\nimport { Paths } from './sample';\nimport RecommendationsPresenter from './Recommendations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Recommendations = ({\n  pathId\n}) => {\n  _s();\n\n  const cms = useContext(CMSContext);\n  const {\n    other_path_ids: pathIds\n  } = cms;\n  const [paths, setPaths] = useState([]); // const jwt = useSelector(selectUserJWT);\n  // useEffect(() => {\n  //   (async () => {\n  //     if (pathIds) {\n  //       const { data: paths } = await contentServiceRequest({\n  //         endpoint: 'paths/search',\n  //         version: 1,\n  //         data: {\n  //           id: pathIds,\n  //           minimal: false,\n  //         },\n  //         method: 'POST',\n  //         jwt,\n  //       });\n  //       setPaths(\n  //         pathIds.map((id: string) =>\n  //           paths.find((path: Path) => path.id === id)\n  //         )\n  //       );\n  //     }\n  //   })();\n  // }, [pathIds, jwt]);\n  // if (paths.length === 0) return null;\n\n  return /*#__PURE__*/_jsxDEV(RecommendationsPresenter, {\n    pathId: pathId,\n    paths: Paths,\n    cms: cms\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Recommendations, \"tg6cH5J34JR8uOxVAoiuyGZ9pws=\");\n\n_c = Recommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Paths/PathMarketingPage/Recommendations/index.tsx"],"names":["React","useContext","useState","CMSContext","Paths","RecommendationsPresenter","Recommendations","pathId","cms","other_path_ids","pathIds","paths","setPaths"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAAuCC,QAAvC,QAAuD,OAAvD;AAIA,OAAOC,UAAP,MAAuB,uCAAvB,C,CACA;;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,wBAAP,MAAqC,mBAArC;;AAOA,OAAO,MAAMC,eAA+C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAC7E,QAAMC,GAAG,GAAGP,UAAU,CAACE,UAAD,CAAtB;AACA,QAAM;AAAEM,IAAAA,cAAc,EAAEC;AAAlB,MAA8BF,GAApC;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAS,EAAT,CAAlC,CAJ6E,CAK7E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBAAO,QAAC,wBAAD;AAA0B,IAAA,MAAM,EAAEK,MAAlC;AAA0C,IAAA,KAAK,EAAEH,KAAjD;AAAwD,IAAA,GAAG,EAAEI;AAA7D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjCM;;GAAMF,e;;KAAAA,e","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { contentServiceRequest } from 'libs/contentServiceRequest';\nimport CMSContext from 'portal/scenes/Paths/ContentfulContext';\n// import { selectUserJWT } from '~/state/currentUser/selectors';\nimport { Path } from 'typings/path';\nimport { Paths } from './sample';\nimport RecommendationsPresenter from './Recommendations';\n\nexport type RecommendationsProps = {\n  pathId: string;\n  \n};\n\nexport const Recommendations: React.FC<RecommendationsProps> = ({ pathId }) => {\n  const cms = useContext(CMSContext);\n  const { other_path_ids: pathIds } = cms;\n\n  const [paths, setPaths] = useState<Path[]>([]);\n  // const jwt = useSelector(selectUserJWT);\n\n  // useEffect(() => {\n  //   (async () => {\n  //     if (pathIds) {\n  //       const { data: paths } = await contentServiceRequest({\n  //         endpoint: 'paths/search',\n  //         version: 1,\n  //         data: {\n  //           id: pathIds,\n  //           minimal: false,\n  //         },\n  //         method: 'POST',\n  //         jwt,\n  //       });\n\n  //       setPaths(\n  //         pathIds.map((id: string) =>\n  //           paths.find((path: Path) => path.id === id)\n  //         )\n  //       );\n  //     }\n  //   })();\n  // }, [pathIds, jwt]);\n\n  // if (paths.length === 0) return null;\n\n  return <RecommendationsPresenter pathId={pathId} paths={Paths} cms={cms} />;\n};\n"]},"metadata":{},"sourceType":"module"}