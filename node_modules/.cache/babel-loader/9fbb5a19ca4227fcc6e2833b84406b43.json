{"ast":null,"code":"import _classCallCheck from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,Fragment}from'react';// import { connect } from 'unistore/react'\n// import * as actions from '../../actions'\nimport ControlBarButton from'./control-bar-button/control-bar-button';import css from'./control-bar.module.scss';import buttonCss from'./playback-speed-button.module.scss';import icons from'../icons';import Tooltip from'../tooltip/tooltip';import{jsx as _jsx}from\"react/jsx-runtime\";export var ClosedCaptioningButton=/*#__PURE__*/function(_Component){_inherits(ClosedCaptioningButton,_Component);var _super=_createSuper(ClosedCaptioningButton);function ClosedCaptioningButton(){_classCallCheck(this,ClosedCaptioningButton);return _super.apply(this,arguments);}_createClass(ClosedCaptioningButton,[{key:\"render\",value:function render(){var _this$props=this.props,activeClassName=_this$props.activeClassName,closedCaptioningEnabled=_this$props.closedCaptioningEnabled,versionId=_this$props.versionId,activeMenu=_this$props.activeMenu,boundedContext=_this$props.boundedContext,menuType=_this$props.menuType,toggleClosedCaptioning=_this$props.toggleClosedCaptioning;var ClosedCaptioningIcon=icons.ClosedCaptioningIcon,ClosedCaptioningOnIcon=icons.ClosedCaptioningOnIcon;var isActive=activeMenu===menuType;if(!versionId||boundedContext!=='course')return null;//webvtt service requires versionId\nreturn/*#__PURE__*/_jsx(Tooltip,{text:\"Closed captions (c)\",children:/*#__PURE__*/_jsx(ControlBarButton,{active:isActive,activeClassName:activeClassName,className:buttonCss,onAction:toggleClosedCaptioning,tooltip:\"Closed captioning\",ariaLabel:\"closed captions\",ariaPressed:closedCaptioningEnabled,children:closedCaptioningEnabled?/*#__PURE__*/_jsx(ClosedCaptioningOnIcon,{}):/*#__PURE__*/_jsx(ClosedCaptioningIcon,{})})});}}]);return ClosedCaptioningButton;}(Component);export default ClosedCaptioningButton;// export default connect(\n//   (state) => ({\n//     layout: state.layout,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     activeMenu: state.activeMenu,\n//     versionId: state.versionId,\n//     boundedContext: state.boundedContext,\n//   }),\n//   (store) => ({\n//     toggleClosedCaptioning: actions.toggleClosedCaptioning,\n//   })\n// )(ClosedCaptioningButton)","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/control-bar/closed-captioning-button.js"],"names":["React","Component","Fragment","ControlBarButton","css","buttonCss","icons","Tooltip","ClosedCaptioningButton","props","activeClassName","closedCaptioningEnabled","versionId","activeMenu","boundedContext","menuType","toggleClosedCaptioning","ClosedCaptioningIcon","ClosedCaptioningOnIcon","isActive"],"mappings":"4oBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA;AACA;AAEA,MAAOC,CAAAA,gBAAP,KAA6B,yCAA7B,CACA,MAAOC,CAAAA,GAAP,KAAgB,2BAAhB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qCAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,C,2CAEA,UAAaC,CAAAA,sBAAb,6SACE,iBAAS,iBASH,KAAKC,KATF,CAELC,eAFK,aAELA,eAFK,CAGLC,uBAHK,aAGLA,uBAHK,CAILC,SAJK,aAILA,SAJK,CAKLC,UALK,aAKLA,UALK,CAMLC,cANK,aAMLA,cANK,CAOLC,QAPK,aAOLA,QAPK,CAQLC,sBARK,aAQLA,sBARK,IAWCC,CAAAA,oBAXD,CAWkDX,KAXlD,CAWCW,oBAXD,CAWuBC,sBAXvB,CAWkDZ,KAXlD,CAWuBY,sBAXvB,CAaP,GAAMC,CAAAA,QAAQ,CAAGN,UAAU,GAAKE,QAAhC,CACA,GAAI,CAACH,SAAD,EAAcE,cAAc,GAAK,QAArC,CAA+C,MAAO,KAAP,CAAY;AAE3D,mBACE,KAAC,OAAD,EAAS,IAAI,CAAC,qBAAd,uBACE,KAAC,gBAAD,EACE,MAAM,CAAEK,QADV,CAEE,eAAe,CAAET,eAFnB,CAGE,SAAS,CAAEL,SAHb,CAIE,QAAQ,CAAEW,sBAJZ,CAKE,OAAO,CAAC,mBALV,CAME,SAAS,CAAC,iBANZ,CAOE,WAAW,CAAEL,uBAPf,UASGA,uBAAuB,cAAG,KAAC,sBAAD,IAAH,cAAgC,KAAC,oBAAD,IAT1D,EADF,EADF,CAeD,CAhCH,oCAA4CV,SAA5C,EAkCA,cAAeO,CAAAA,sBAAf,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from 'react'\n// import { connect } from 'unistore/react'\n// import * as actions from '../../actions'\n\nimport ControlBarButton from './control-bar-button/control-bar-button'\nimport css from './control-bar.module.scss'\nimport buttonCss from './playback-speed-button.module.scss'\nimport icons from '../icons'\nimport Tooltip from '../tooltip/tooltip'\n\nexport class ClosedCaptioningButton extends Component {\n  render() {\n    const {\n      activeClassName,\n      closedCaptioningEnabled,\n      versionId,\n      activeMenu,\n      boundedContext,\n      menuType,\n      toggleClosedCaptioning,\n    } = this.props\n\n    const { ClosedCaptioningIcon, ClosedCaptioningOnIcon } = icons\n\n    const isActive = activeMenu === menuType\n    if (!versionId || boundedContext !== 'course') return null //webvtt service requires versionId\n\n    return (\n      <Tooltip text=\"Closed captions (c)\">\n        <ControlBarButton\n          active={isActive}\n          activeClassName={activeClassName}\n          className={buttonCss}\n          onAction={toggleClosedCaptioning}\n          tooltip=\"Closed captioning\"\n          ariaLabel=\"closed captions\"\n          ariaPressed={closedCaptioningEnabled}\n        >\n          {closedCaptioningEnabled ? <ClosedCaptioningOnIcon /> : <ClosedCaptioningIcon />}\n        </ControlBarButton>\n      </Tooltip>\n    )\n  }\n}\nexport default ClosedCaptioningButton;\n// export default connect(\n//   (state) => ({\n//     layout: state.layout,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     activeMenu: state.activeMenu,\n//     versionId: state.versionId,\n//     boundedContext: state.boundedContext,\n//   }),\n//   (store) => ({\n//     toggleClosedCaptioning: actions.toggleClosedCaptioning,\n//   })\n// )(ClosedCaptioningButton)\n"]},"metadata":{},"sourceType":"module"}