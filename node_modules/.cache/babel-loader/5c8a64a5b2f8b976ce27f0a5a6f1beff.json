{"ast":null,"code":"import { CacheProvider, ThemeProvider } from '@emotion/react';\nimport React, { useContext, useRef } from 'react';\nimport { createEmotionCache } from './cache';\nimport { Reboot, Typography } from './globals';\nimport { Variables } from './globals/Variables';\nimport { coreTheme } from './themes/core';\nexport var GamutContext = /*#__PURE__*/React.createContext({\n  hasGlobals: false,\n  hasCache: false\n});\nGamutContext.displayName = 'GamutContext';\nexport var GamutProvider = function GamutProvider(_ref) {\n  var children = _ref.children,\n      cache = _ref.cache,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? coreTheme : _ref$theme,\n      variables = _ref.variables,\n      _ref$useGlobals = _ref.useGlobals,\n      useGlobals = _ref$useGlobals === void 0 ? true : _ref$useGlobals,\n      _ref$useCache = _ref.useCache,\n      useCache = _ref$useCache === void 0 ? true : _ref$useCache;\n\n  var _useContext = useContext(GamutContext),\n      hasGlobals = _useContext.hasGlobals,\n      hasCache = _useContext.hasCache;\n\n  var shouldCreateCache = useCache && !hasCache;\n  var shouldInsertGlobals = useGlobals && !hasGlobals; // Do not initialize a new cache if one has been provided as props\n\n  var activeCache = useRef(shouldCreateCache && (cache !== null && cache !== void 0 ? cache : createEmotionCache()));\n  var contextValue = {\n    hasGlobals: shouldInsertGlobals,\n    hasCache: shouldCreateCache\n  };\n  var globals = shouldInsertGlobals && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, null), /*#__PURE__*/React.createElement(Reboot, null), /*#__PURE__*/React.createElement(Variables, {\n    variables: theme._variables\n  }), variables && /*#__PURE__*/React.createElement(Variables, {\n    variables: variables\n  }));\n\n  if (activeCache.current) {\n    return /*#__PURE__*/React.createElement(GamutContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(CacheProvider, {\n      value: activeCache.current\n    }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, children)));\n  }\n\n  return /*#__PURE__*/React.createElement(GamutContext.Provider, {\n    value: contextValue\n  }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, children));\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/gamut-styles/dist/GamutProvider.js"],"names":["CacheProvider","ThemeProvider","React","useContext","useRef","createEmotionCache","Reboot","Typography","Variables","coreTheme","GamutContext","createContext","hasGlobals","hasCache","displayName","GamutProvider","_ref","children","cache","_ref$theme","theme","variables","_ref$useGlobals","useGlobals","_ref$useCache","useCache","_useContext","shouldCreateCache","shouldInsertGlobals","activeCache","contextValue","globals","createElement","Fragment","_variables","current","Provider","value"],"mappings":"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","sourcesContent":["import { CacheProvider, ThemeProvider } from '@emotion/react';\nimport React, { useContext, useRef } from 'react';\nimport { createEmotionCache } from './cache';\nimport { Reboot, Typography } from './globals';\nimport { Variables } from './globals/Variables';\nimport { coreTheme } from './themes/core';\nexport var GamutContext = /*#__PURE__*/React.createContext({\n  hasGlobals: false,\n  hasCache: false\n});\nGamutContext.displayName = 'GamutContext';\nexport var GamutProvider = function GamutProvider(_ref) {\n  var children = _ref.children,\n      cache = _ref.cache,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? coreTheme : _ref$theme,\n      variables = _ref.variables,\n      _ref$useGlobals = _ref.useGlobals,\n      useGlobals = _ref$useGlobals === void 0 ? true : _ref$useGlobals,\n      _ref$useCache = _ref.useCache,\n      useCache = _ref$useCache === void 0 ? true : _ref$useCache;\n\n  var _useContext = useContext(GamutContext),\n      hasGlobals = _useContext.hasGlobals,\n      hasCache = _useContext.hasCache;\n\n  var shouldCreateCache = useCache && !hasCache;\n  var shouldInsertGlobals = useGlobals && !hasGlobals; // Do not initialize a new cache if one has been provided as props\n\n  var activeCache = useRef(shouldCreateCache && (cache !== null && cache !== void 0 ? cache : createEmotionCache()));\n  var contextValue = {\n    hasGlobals: shouldInsertGlobals,\n    hasCache: shouldCreateCache\n  };\n  var globals = shouldInsertGlobals && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, null), /*#__PURE__*/React.createElement(Reboot, null), /*#__PURE__*/React.createElement(Variables, {\n    variables: theme._variables\n  }), variables && /*#__PURE__*/React.createElement(Variables, {\n    variables: variables\n  }));\n\n  if (activeCache.current) {\n    return /*#__PURE__*/React.createElement(GamutContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(CacheProvider, {\n      value: activeCache.current\n    }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, children)));\n  }\n\n  return /*#__PURE__*/React.createElement(GamutContext.Provider, {\n    value: contextValue\n  }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, children));\n};"]},"metadata":{},"sourceType":"module"}