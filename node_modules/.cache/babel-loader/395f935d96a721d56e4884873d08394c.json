{"ast":null,"code":"import{createApi,fetchBaseQuery}from\"@reduxjs/toolkit/query/react\";import cookie from\"react-cookies\";export var authApi=createApi({reducerPath:\"authApi\",baseQuery:fetchBaseQuery({baseUrl:\"/\",prepareHeaders:function prepareHeaders(headers,_ref){var getState=_ref.getState;var csrfToken=cookie.load(\"csrftoken\");if(csrfToken){headers.set(\"X-CSRFToken\",csrfToken);}var token=getState().auth.token||localStorage.getItem(\"token\");if(token){headers.set(\"Authorization\",\"Token \".concat(token));}headers.set(\"Content-Type\",\"application/json\");return headers;}}),tagTypes:[\"LoginRequest\",\"SignupRequest\",\"Logout\",\"User\",\"UserResponse\"],endpoints:function endpoints(build){return{login:build.mutation({query:function query(body){return{url:\"auth/login/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),signup:build.mutation({query:function query(body){return{url:\"auth/signup/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),logout:build.mutation({query:function query(body){return{url:\"auth/logout/\",method:\"POST\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),facebookLogin:build.mutation({query:function query(){return{url:\"auth/facebook/\",method:\"POST\",responseHandler:function responseHandler(response){return response.json();}};}}),googleLogin:build.mutation({query:function query(){return{url:\"auth/google/\",method:\"POST\",responseHandler:function responseHandler(response){return response.json();}};}}),googleLoginUrl:build.mutation({query:function query(){return{url:\"auth/google/url\",method:\"POST\",responseHandler:function responseHandler(response){return response.json();}};}}),facebookLoginUrl:build.mutation({query:function query(){return{url:\"auth/facebook/url\",method:\"POST\",responseHandler:function responseHandler(response){return response.json();}};}}),getCurrentUser:build.query({query:function query(){return{url:\"rest-auth/user/\",method:\"GET\",responseHandler:function responseHandler(response){return response.json();}};}}),updateProfile:build.mutation({query:function query(body){return{url:\"auth/update_profile/\",method:\"PUT\",body:body,responseHandler:function responseHandler(response){return response.json();}};}}),getProfile:build.query({query:function query(){return{url:\"auth/profile/\",method:\"GET\",responseHandler:function responseHandler(response){return response.json();}};}}),updateAvatar:build.mutation({query:function query(body){return{url:\"auth/update_avatar/\",method:\"PUT\",body:body,responseHandler:function responseHandler(response){return response.json();}};}})};}});var _authApi$endpoints=authApi.endpoints,getCurrentUser=_authApi$endpoints.getCurrentUser,getProfile=_authApi$endpoints.getProfile;export{getCurrentUser,getProfile};var useLoginMutation=authApi.useLoginMutation,useSignupMutation=authApi.useSignupMutation,useLogoutMutation=authApi.useLogoutMutation,useGetCurrentUserQuery=authApi.useGetCurrentUserQuery,useFacebookLoginMutation=authApi.useFacebookLoginMutation,useGoogleLoginMutation=authApi.useGoogleLoginMutation,useFacebookLoginUrlMutation=authApi.useFacebookLoginUrlMutation,useGoogleLoginUrlMutation=authApi.useGoogleLoginUrlMutation,useUpdateAvatarMutation=authApi.useUpdateAvatarMutation,useUpdateProfileMutation=authApi.useUpdateProfileMutation,useGetProfileQuery=authApi.useGetProfileQuery;export{useLoginMutation,useSignupMutation,useLogoutMutation,useGetCurrentUserQuery,useFacebookLoginMutation,useGoogleLoginMutation,useFacebookLoginUrlMutation,useGoogleLoginUrlMutation,useUpdateAvatarMutation,useUpdateProfileMutation,useGetProfileQuery};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/auth.ts"],"names":["createApi","fetchBaseQuery","cookie","authApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","login","mutation","query","body","url","method","responseHandler","response","json","signup","logout","facebookLogin","googleLogin","googleLoginUrl","facebookLoginUrl","getCurrentUser","updateProfile","getProfile","updateAvatar","useLoginMutation","useSignupMutation","useLogoutMutation","useGetCurrentUserQuery","useFacebookLoginMutation","useGoogleLoginMutation","useFacebookLoginUrlMutation","useGoogleLoginUrlMutation","useUpdateAvatarMutation","useUpdateProfileMutation","useGetProfileQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\nimport internal from \"stream\";\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n  csrfmiddlewaretoken: string;\n}\n\nexport interface UserRequest {\n  email: string;\n  first_name: string;\n  last_name: string;\n  csrfmiddlewaretoken: string;\n}\n\nexport interface Avatar {\n  avatar: string;\n}\n\nexport interface SignupRequest {\n  email: string;\n  username: string;\n  password1: string;\n  password2: string;\n  csrfmiddlewaretoken: string;\n}\n\nexport interface Token {\n  key: string;\n}\n\nexport interface User {\n  pk: number;\n  email: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface UserResponse {\n  user: User;\n  token: string;\n  avatar: string;\n}\n\nexport interface Logout {\n  csrfmiddlewaretoken: string;\n}\n\nexport interface LogoutResponse {\n  detail: string;\n}\n\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"LoginRequest\", \"SignupRequest\", \"Logout\", \"User\", \"UserResponse\"],\n  endpoints: (build) => ({\n    login: build.mutation<UserResponse, Partial<LoginRequest>>({\n      query: (body) => ({\n        url: \"auth/login/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    signup: build.mutation<UserResponse, Partial<SignupRequest>>({\n      query: (body) => ({\n        url: \"auth/signup/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    logout: build.mutation<LogoutResponse, void>({\n      query: (body) => ({\n        url: \"auth/logout/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    facebookLogin: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/facebook/\",\n        method: \"POST\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    googleLogin: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/google/\",\n        method: \"POST\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    googleLoginUrl: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/google/url\",\n        method: \"POST\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    facebookLoginUrl: build.mutation<User, void>({\n      query: () => ({\n        url: \"auth/facebook/url\",\n        method: \"POST\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    getCurrentUser: build.query<User, void>({\n      query: () => ({\n        url: \"rest-auth/user/\",\n        method: \"GET\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    updateProfile: build.mutation<User, Partial<UserRequest>>({\n      query: (body) => ({\n        url: \"auth/update_profile/\",\n        method: \"PUT\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    getProfile: build.query<UserResponse, void>({\n      query: () => ({\n        url: \"auth/profile/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    updateAvatar: build.mutation<UserResponse, Partial<Avatar>>({\n      query: (body) => ({\n        url: \"auth/update_avatar/\",\n        method: \"PUT\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n  }),\n});\n\nexport const { getCurrentUser, getProfile } = authApi.endpoints;\n\nexport const {\n  useLoginMutation,\n  useSignupMutation,\n  useLogoutMutation,\n  useGetCurrentUserQuery,\n  useFacebookLoginMutation,\n  useGoogleLoginMutation,\n  useFacebookLoginUrlMutation,\n  useGoogleLoginUrlMutation,\n  useUpdateAvatarMutation,\n  useUpdateProfileMutation,\n  useGetProfileQuery\n} = authApi;\n"]},"metadata":{},"sourceType":"module"}