{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults, FullscreenState } from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      const icon = \"PLAY\";\n\n      if (action.payload) {\n        state.overlay = {\n          icon,\n          key: Math.random(),\n          fade: true\n        };\n      }\n\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    showUI: (state, action) => {\n      state.visible = true;\n    },\n    toggleFullscreen: (state, action) => {\n      state.fullscreenState = state.fullscreenState === FullscreenState.FULLSCREEN ? FullscreenState.NORMAL : FullscreenState.FULLSCREEN;\n    },\n    hideUI: (state, action) => {\n      state.visible = false;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setContainerSize: (state, action) => {\n      var containerSize = action.payload;\n\n      if (containerSize.width === 0 && containerSize.height === 0 && state.containerSize) {\n        containerSize = state.containerSize;\n      }\n\n      state.breakpoint = findBreakpoint(containerSize);\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${state.breakpoint.height}p`;\n    },\n    setBufferedTime: (state, action) => {\n      state.bufferedTime = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n    seekStart: (state, action) => {\n      const {\n        seekingEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n    seekEnd: (state, action) => {\n      const {\n        seekedEvent,\n        videoPlayer\n      } = state;\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n    seek: (state, action) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n    setOverlay: (state, action) => {\n      state.overlay = action.payload;\n    },\n    setBuffering: (state, action) => {\n      state.buffering = action.payload;\n    },\n    setClipProgress: (state, action) => {\n      state.clipProgress = buildClipProgress(state.clipProgress, action.payload, state.duration);\n    },\n    setFullscreen: (state, action) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validFullscreenStates.join()}`);\n      }\n\n      state.fullscreenState = action.payload;\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize\n} = playerSlice.actions;\nexport const togglePlayPause = () => (dispatch, getState) => {\n  const state = getState().player;\n\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","FullscreenState","buildClipProgress","calculateAspectRatio","findBreakpoint","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","bufferedTime","playheadStart","overlay","videoPlayer","seekedEvent","seekingEvent","visible","fullscreenState","NORMAL","clipProgress","buffering","containerSize","breakpoint","playerSize","layout","playerSlice","name","reducers","play","state","action","icon","payload","key","Math","random","fade","pause","setPlaybackSpeed","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","showUI","toggleFullscreen","FULLSCREEN","hideUI","setDuration","setTime","setContainerSize","width","height","setBufferedTime","ready","registerPlayer","Event","seekStart","dispatchEvent","seekEnd","seek","setOverlay","setBuffering","setClipProgress","setFullscreen","validFullscreenStates","fastForward","forwardTime","newTime","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","player","actions","togglePlayPause","dispatch","getState","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n  FullscreenState,\n} from \"portal/scenes/CoursePlayer/constants\";\nimport { buildClipProgress } from \"portal/scenes/CoursePlayer/utilities/sync-clip-progress\";\nimport { calculateAspectRatio } from \"portal/scenes/CoursePlayer/utilities/aspect-ratio\";\nimport { findBreakpoint } from \"portal/scenes/CoursePlayer/utilities/find-breakpoint\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  bufferedTime: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: any;\n  seekedEvent: Event;\n  seekingEvent: Event;\n  visible: boolean;\n  fullscreenState: string;\n  clipProgress: number;\n  buffering: boolean;\n  containerSize: ContainerSize;\n  breakpoint: ContainerSize;\n  playerSize: ContainerSize;\n  layout: string;\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  bufferedTime: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekedEvent: null,\n  seekingEvent: null,\n  visible: false,\n  fullscreenState: FullscreenState.NORMAL,\n  clipProgress: 0,\n  buffering: false,\n  containerSize: null,\n  breakpoint: null,\n  playerSize: null,\n  layout: null,\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<boolean>) => {\n      const icon = \"PLAY\";\n     \n\n      if (action.payload) {\n        state.overlay = { icon, key: Math.random(), fade: true };\n      }\n      state.playing = true;\n      state.playheadStart = state.time;\n    },\n\n    pause: (state, action: PayloadAction<void>) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    showUI: (state, action: PayloadAction<void>) => {\n      state.visible = true;\n    },\n\n    toggleFullscreen: (state, action: PayloadAction<void>) => {\n      state.fullscreenState =\n        state.fullscreenState === FullscreenState.FULLSCREEN\n          ? FullscreenState.NORMAL\n          : FullscreenState.FULLSCREEN;\n    },\n\n    hideUI: (state, action: PayloadAction<void>) => {\n      state.visible = false;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    setContainerSize: (state, action: PayloadAction<ContainerSize>) => {\n      var containerSize = action.payload;\n      if (\n        containerSize.width === 0 &&\n        containerSize.height === 0 &&\n        state.containerSize\n      ) {\n        containerSize = state.containerSize;\n      }\n\n      state.breakpoint = findBreakpoint(containerSize);\n      state.playerSize = calculateAspectRatio(containerSize);\n      state.containerSize = containerSize;\n      state.layout = `${state.breakpoint.height}p`;\n    },\n\n    setBufferedTime: (state, action: PayloadAction<number>) => {\n      state.bufferedTime = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekedEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      state.videoPlayer = action.payload;\n    },\n\n    seekStart: (state, action: PayloadAction<void>) => {\n      const { seekingEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekingEvent);\n    },\n\n    seekEnd: (state, action: PayloadAction<void>) => {\n      const { seekedEvent, videoPlayer } = state;\n\n      videoPlayer && videoPlayer.dispatchEvent(seekedEvent);\n    },\n\n    seek: (state, action: PayloadAction<number>) => {\n      state.playheadStart = action.payload * state.duration;\n    },\n\n    setOverlay: (state, action: PayloadAction<Overlay>) => {\n      state.overlay = action.payload;\n    },\n\n    setBuffering: (state, action: PayloadAction<boolean>) => {\n      state.buffering = action.payload;\n    },\n\n    setClipProgress: (state, action: PayloadAction<number>) => {\n      state.clipProgress = buildClipProgress(\n        state.clipProgress,\n        action.payload,\n        state.duration\n      );\n    },\n\n    setFullscreen: (state, action: PayloadAction<string>) => {\n      const validFullscreenStates = Object.values(FullscreenState);\n\n      if (!includes(validFullscreenStates, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validFullscreenStates.join()}`\n        );\n      }\n      state.fullscreenState = action.payload;\n    },\n\n    fastForward: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<void>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        const clamped = state.previousVolume || Defaults.volume;\n        const muted = clamped === 0;\n        state.volume = clamped;\n        state.muted = muted;\n      } else {\n        state.muted = true;\n        state.previousVolume = state.volume;\n        state.volume = 0;\n      }\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n  seekEnd,\n  seekStart,\n  registerPlayer,\n  showUI,\n  hideUI,\n  setInteractionMode,\n  toggleFullscreen,\n  setFullscreen,\n  seek,\n  setBufferedTime,\n  setBuffering,\n  setClipProgress,\n  setOverlay,\n  setContainerSize,\n} = playerSlice.actions;\n\nexport const togglePlayPause = (): AppThunk => (dispatch, getState) => {\n  const state = getState().player;\n  if (state.playing) {\n    dispatch(pause());\n  } else {\n    dispatch(play());\n  }\n};\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}