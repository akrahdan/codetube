{"ast":null,"code":"import loadScript from'load-script';// Util function to load an external SDK\n// or return the SDK if it is already loaded\nvar resolves={};export function getSDK(url,sdkGlobal){var sdkReady=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var isLoaded=arguments.length>3&&arguments[3]!==undefined?arguments[3]:function(){return true;};var fetchScript=arguments.length>4&&arguments[4]!==undefined?arguments[4]:loadScript;if(window[sdkGlobal]&&isLoaded(window[sdkGlobal])){return Promise.resolve(window[sdkGlobal]);}return new Promise(function(resolve,reject){// If we are already loading the SDK, add the resolve\n// function to the existing array of resolve functions\nif(resolves[url]){resolves[url].push(resolve);return;}resolves[url]=[resolve];var onLoaded=function onLoaded(sdk){// When loaded, resolve all pending promises\nresolves[url].forEach(function(resolve){return resolve(sdk);});};if(sdkReady){var previousOnReady=window[sdkReady];window[sdkReady]=function(){if(previousOnReady)previousOnReady();onLoaded(window[sdkGlobal]);};}fetchScript(url,function(err){if(err)reject(err);if(!sdkReady){onLoaded(window[sdkGlobal]);}});});}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/utilities/get-sdk.js"],"names":["loadScript","resolves","getSDK","url","sdkGlobal","sdkReady","isLoaded","fetchScript","window","Promise","resolve","reject","push","onLoaded","sdk","forEach","previousOnReady","err"],"mappings":"AAAA,MAAOA,CAAAA,UAAP,KAAuB,aAAvB,CAEA;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACA,MAAO,SAASC,CAAAA,MAAT,CAAiBC,GAAjB,CAAsBC,SAAtB,CAAmG,IAAlEC,CAAAA,QAAkE,2DAAvD,IAAuD,IAAjDC,CAAAA,QAAiD,2DAAtC,iBAAM,KAAN,EAAsC,IAA1BC,CAAAA,WAA0B,2DAAZP,UAAY,CACxG,GAAIQ,MAAM,CAACJ,SAAD,CAAN,EAAqBE,QAAQ,CAACE,MAAM,CAACJ,SAAD,CAAP,CAAjC,CAAsD,CACpD,MAAOK,CAAAA,OAAO,CAACC,OAAR,CAAgBF,MAAM,CAACJ,SAAD,CAAtB,CAAP,CACD,CACD,MAAO,IAAIK,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC;AACA;AACA,GAAIV,QAAQ,CAACE,GAAD,CAAZ,CAAmB,CACjBF,QAAQ,CAACE,GAAD,CAAR,CAAcS,IAAd,CAAmBF,OAAnB,EACA,OACD,CACDT,QAAQ,CAACE,GAAD,CAAR,CAAgB,CAACO,OAAD,CAAhB,CACA,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,GAAG,CAAI,CACtB;AACAb,QAAQ,CAACE,GAAD,CAAR,CAAcY,OAAd,CAAsB,SAAAL,OAAO,QAAIA,CAAAA,OAAO,CAACI,GAAD,CAAX,EAA7B,EACD,CAHD,CAIA,GAAIT,QAAJ,CAAc,CACZ,GAAMW,CAAAA,eAAe,CAAGR,MAAM,CAACH,QAAD,CAA9B,CACAG,MAAM,CAACH,QAAD,CAAN,CAAmB,UAAY,CAC7B,GAAIW,eAAJ,CAAqBA,eAAe,GACpCH,QAAQ,CAACL,MAAM,CAACJ,SAAD,CAAP,CAAR,CACD,CAHD,CAID,CACDG,WAAW,CAACJ,GAAD,CAAM,SAAAc,GAAG,CAAI,CACtB,GAAIA,GAAJ,CAASN,MAAM,CAACM,GAAD,CAAN,CACT,GAAI,CAACZ,QAAL,CAAe,CACbQ,QAAQ,CAACL,MAAM,CAACJ,SAAD,CAAP,CAAR,CACD,CACF,CALU,CAAX,CAMD,CAzBM,CAAP,CA0BD","sourcesContent":["import loadScript from 'load-script'\n\n// Util function to load an external SDK\n// or return the SDK if it is already loaded\nconst resolves = {}\nexport function getSDK (url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = loadScript) {\n  if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {\n    return Promise.resolve(window[sdkGlobal])\n  }\n  return new Promise((resolve, reject) => {\n    // If we are already loading the SDK, add the resolve\n    // function to the existing array of resolve functions\n    if (resolves[url]) {\n      resolves[url].push(resolve)\n      return\n    }\n    resolves[url] = [resolve]\n    const onLoaded = sdk => {\n      // When loaded, resolve all pending promises\n      resolves[url].forEach(resolve => resolve(sdk))\n    }\n    if (sdkReady) {\n      const previousOnReady = window[sdkReady]\n      window[sdkReady] = function () {\n        if (previousOnReady) previousOnReady()\n        onLoaded(window[sdkGlobal])\n      }\n    }\n    fetchScript(url, err => {\n      if (err) reject(err)\n      if (!sdkReady) {\n        onLoaded(window[sdkGlobal])\n      }\n    })\n  })\n}"]},"metadata":{},"sourceType":"module"}