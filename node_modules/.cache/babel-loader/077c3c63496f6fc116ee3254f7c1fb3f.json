{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { theme } from \"@codecademy/gamut-styles\";\nimport React from 'react';\nimport { routesMeta } from \"portal/routes\";\nimport { createRootComponent } from \"components/createRootComponent\";\nimport { getRouteMetaForLocation } from \"libs/location/routing\";\nimport { selectLocationType } from \"state/location/selectors\";\nimport { setCredentials } from 'state/auth/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useGetCurrentUserQuery } from 'services/auth';\nimport { useGetProfileQuery } from \"services/auth\";\nimport { selectModal } from 'state/modals/modalSlice';\nimport { useFetchInstructorInfoQuery } from \"services/courses\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PortalRouter = ({\n  portalData,\n  statusCode\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    data\n  } = useGetCurrentUserQuery();\n  const {\n    data: profileQuery\n  } = useGetProfileQuery();\n  const {\n    data: instructor\n  } = useFetchInstructorInfoQuery();\n\n  if (data) {\n    const token = localStorage.getItem('token');\n    const userResponse = {\n      user: data,\n      token\n    };\n    dispatch(setCredentials(userResponse));\n  }\n\n  const modal = useAppSelector(selectModal);\n  const locationType = useAppSelector(selectLocationType);\n  const {\n    scene: Scene,\n    pageName\n  } = getRouteMetaForLocation(routesMeta, locationType, statusCode);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Scene, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(PortalRouter, \"3SN395P+0hvBYV5lsFPEAYA2ZoA=\", false, function () {\n  return [useAppDispatch, useGetCurrentUserQuery, useGetProfileQuery, useFetchInstructorInfoQuery, useAppSelector, useAppSelector];\n});\n\n_c = PortalRouter;\nexport default _c2 = createRootComponent(PortalRouter, {\n  theme\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PortalRouter\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/index.tsx"],"names":["theme","React","routesMeta","createRootComponent","getRouteMetaForLocation","selectLocationType","setCredentials","useAppDispatch","useAppSelector","useGetCurrentUserQuery","useGetProfileQuery","selectModal","useFetchInstructorInfoQuery","PortalRouter","portalData","statusCode","dispatch","data","profileQuery","instructor","token","localStorage","getItem","userResponse","user","modal","locationType","scene","Scene","pageName"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,uBAAT,QAAwC,uBAAxC;AAEA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,aAA/C;AACA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAMA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,2BAAT,QAA4C,kBAA5C;;;AAQA,OAAO,MAAMC,YAAmC,GAAG,CAAC;AAChDC,EAAAA,UADgD;AAEhDC,EAAAA;AAFgD,CAAD,KAI7C;AAAA;;AACF,QAAMC,QAAQ,GAAGT,cAAc,EAA/B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAWR,sBAAsB,EAAvC;AACA,QAAM;AAAEQ,IAAAA,IAAI,EAAEC;AAAR,MAAyBR,kBAAkB,EAAjD;AACA,QAAM;AAAEO,IAAAA,IAAI,EAAEE;AAAR,MAAuBP,2BAA2B,EAAxD;;AACA,MAAIK,IAAJ,EAAU;AACN,UAAMG,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,YAAY,GAAG;AACjBC,MAAAA,IAAI,EAAEP,IADW;AAEjBG,MAAAA;AAFiB,KAArB;AAIAJ,IAAAA,QAAQ,CAACV,cAAc,CAACiB,YAAD,CAAf,CAAR;AACH;;AACD,QAAME,KAAK,GAAGjB,cAAc,CAACG,WAAD,CAA5B;AAEA,QAAMe,YAAY,GAAGlB,cAAc,CAACH,kBAAD,CAAnC;AACA,QAAM;AAAEsB,IAAAA,KAAK,EAAEC,KAAT;AAAgBC,IAAAA;AAAhB,MAA6BzB,uBAAuB,CACtDF,UADsD,EAEtDwB,YAFsD,EAGtDX,UAHsD,CAA1D;AAMA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAYH,CAtCM;;GAAMF,Y;UAKQN,c,EACAE,sB,EACcC,kB,EACFE,2B,EASfJ,c,EAEOA,c;;;KAnBZK,Y;AA0Cb,qBAAeV,mBAAmB,CAACU,YAAD,EAAe;AAAEb,EAAAA;AAAF,CAAf,CAAlC","sourcesContent":["import { theme } from \"@codecademy/gamut-styles\"\nimport React, { useEffect } from 'react'\nimport { routesMeta } from \"portal/routes\";\nimport { createRootComponent } from \"components/createRootComponent\";\nimport { getRouteMetaForLocation } from \"libs/location/routing\";\nimport { createReduxBinder } from \"libs/reduxBinder\";\nimport { selectLocationType } from \"state/location/selectors\";\nimport { setCredentials } from 'state/auth/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useGetCurrentUserQuery } from 'services/auth';\nimport { useGetProfileQuery } from \"services/auth\";\nimport { SignupSection } from 'portal/scenes/SignupSection';\nimport { SiginSection } from 'portal/scenes/SignupSection/SigninSection';\nimport { SignupModal } from 'portal/scenes/Modal/SignupModal';\nimport { Payment } from 'portal/scenes/Payments'\nimport { Modal } from 'portal/scenes/Modal';\nimport { selectModal } from 'state/modals/modalSlice';\nimport { useFetchInstructorInfoQuery } from \"services/courses\";\n\n\nexport type PortalProps = {\n    portalData: unknown,\n    statusCode: number\n}\n\nexport const PortalRouter: React.FC<PortalProps> = ({\n    portalData,\n    statusCode\n\n}) => {\n    const dispatch = useAppDispatch();\n    const { data } = useGetCurrentUserQuery()\n    const { data: profileQuery } = useGetProfileQuery()\n    const { data: instructor } = useFetchInstructorInfoQuery()\n    if (data) {\n        const token = localStorage.getItem('token');\n        const userResponse = {\n            user: data,\n            token\n        }\n        dispatch(setCredentials(userResponse))\n    }\n    const modal = useAppSelector(selectModal)\n\n    const locationType = useAppSelector(selectLocationType);\n    const { scene: Scene, pageName } = getRouteMetaForLocation(\n        routesMeta,\n        locationType,\n        statusCode\n    )\n\n    return (\n        <>\n            <Scene />\n            {/* {modal == 'signup' && <SignupModal onClose>\n                <SignupSection />\n            </SignupModal>}\n\n            {modal == 'login' && <SignupModal >\n                <SiginSection />\n            </SignupModal>} */}\n        </>\n    )\n}\n\n\n\nexport default createRootComponent(PortalRouter, { theme });\n\n"]},"metadata":{},"sourceType":"module"}