{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import styled from'@emotion/styled';import React,{forwardRef,useState}from'react';import{conditionalStyles,conditionalStyleState,formFieldStyles}from'./styles/shared-system-props';import{jsx as _jsx}from\"react/jsx-runtime\";var StyledTextArea=styled.textarea(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  \",\"\\n  \",\"\\n  position: initial;\\n\"])),formFieldStyles,conditionalStyles);export var TextArea=/*#__PURE__*/forwardRef(function(_ref,ref){var error=_ref.error,className=_ref.className,id=_ref.id,rest=_objectWithoutProperties(_ref,[\"error\",\"className\",\"id\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),activated=_useState2[0],setActivated=_useState2[1];var changeHandler=function changeHandler(event){var _rest$onChange;rest===null||rest===void 0?void 0:(_rest$onChange=rest.onChange)===null||_rest$onChange===void 0?void 0:_rest$onChange.call(rest,event);setActivated(true);};return/*#__PURE__*/_jsx(StyledTextArea,_objectSpread(_objectSpread({},rest),{},{id:id||rest.htmlFor,className:className,ref:ref,variant:conditionalStyleState(Boolean(error),activated),onChange:function onChange(event){return changeHandler(event);}}));});","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/TextArea.tsx"],"names":["styled","React","forwardRef","useState","conditionalStyles","conditionalStyleState","formFieldStyles","StyledTextArea","textarea","TextArea","ref","error","className","id","rest","activated","setActivated","changeHandler","event","onChange","htmlFor","Boolean"],"mappings":"mtBACA,MAAOA,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,KAAP,EAEEC,UAFF,CAIEC,QAJF,KAKO,OALP,CAOA,OACEC,iBADF,CAEEC,qBAFF,CAGEC,eAHF,KAIO,8BAJP,C,2CAmBA,GAAMC,CAAAA,cAAc,CAAGP,MAAM,CAACQ,QAAV,uGAChBF,eADgB,CAEhBF,iBAFgB,CAApB,CAMA,MAAO,IAAMK,CAAAA,QAAQ,cAAGP,UAAU,CAChC,cAAoCQ,GAApC,CAA4C,IAAzCC,CAAAA,KAAyC,MAAzCA,KAAyC,CAAlCC,SAAkC,MAAlCA,SAAkC,CAAvBC,EAAuB,MAAvBA,EAAuB,CAAhBC,IAAgB,yEACRX,QAAQ,CAAC,KAAD,CADA,wCACnCY,SADmC,eACxBC,YADwB,eAG1C,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAA6C,oBACjEJ,IAAI,OAAJ,EAAAA,IAAI,SAAJ,wBAAAA,IAAI,CAAEK,QAAN,6DAAAL,IAAI,CAAaI,KAAb,CAAJ,CACAF,YAAY,CAAC,IAAD,CAAZ,CACD,CAHD,CAKA,mBACE,KAAC,cAAD,gCACMF,IADN,MAEE,EAAE,CAAED,EAAE,EAAIC,IAAI,CAACM,OAFjB,CAGE,SAAS,CAAER,SAHb,CAIE,GAAG,CAAEF,GAJP,CAKE,OAAO,CAAEL,qBAAqB,CAACgB,OAAO,CAACV,KAAD,CAAR,CAAiBI,SAAjB,CALhC,CAME,QAAQ,CAAE,kBAACG,KAAD,QAAWD,CAAAA,aAAa,CAACC,KAAD,CAAxB,EANZ,GADF,CAUD,CAnB+B,CAA3B","sourcesContent":["import { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  TextareaHTMLAttributes,\n  useState,\n} from 'react';\n\nimport {\n  conditionalStyles,\n  conditionalStyleState,\n  formFieldStyles,\n} from './styles/shared-system-props';\n\nexport type TextWrapperProps = TextareaHTMLAttributes<HTMLTextAreaElement> & {\n  className?: string;\n  error?: boolean;\n  htmlFor?: string;\n  name?: string;\n  required?: boolean;\n  value?: string;\n};\n\nexport interface TextAreaProps\n  extends TextWrapperProps,\n    StyleProps<typeof conditionalStyles> {}\n\nconst StyledTextArea = styled.textarea<TextAreaProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  position: initial;\n`;\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextWrapperProps>(\n  ({ error, className, id, ...rest }, ref) => {\n    const [activated, setActivated] = useState(false);\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n      rest?.onChange?.(event);\n      setActivated(true);\n    };\n\n    return (\n      <StyledTextArea\n        {...rest}\n        id={id || rest.htmlFor}\n        className={className}\n        ref={ref}\n        variant={conditionalStyleState(Boolean(error), activated)}\n        onChange={(event) => changeHandler(event)}\n      />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}