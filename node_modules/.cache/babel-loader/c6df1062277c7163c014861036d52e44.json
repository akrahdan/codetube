{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _taggedTemplateLiteral from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import{AlertIcon,CheckCircledIcon}from'@codecademy/gamut-icons';import{system}from'@codecademy/gamut-styles';import styled from'@emotion/styled';import React,{forwardRef,useState}from'react';import{Box,FlexBox}from'../Box';import{conditionalStyles,conditionalStyleState,formBaseFieldStyles,formFieldFocusStyles,formFieldPaddingStyles,formFieldStyles}from'./styles/shared-system-props';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/**  We greatly prefer NOT to do this but ReactRecurly has some specific needs around focus-styles + padding that force us to export them seperately. If we ever stop using React-Recurly, this code will be ðŸ”ª.\n *tldr: Do not do this unless you have already talked to Web-Plat and have failed to find any alternate (and better) solutions. */export var reactRecurlyFormFieldFocusStyles=system.css(formFieldFocusStyles);export var reactRecurlyFormFieldPaddingStyles=system.css(formFieldPaddingStyles);export var iFrameWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  \",\"\\n  \",\"\\n  text-indent: 0;\\n\"])),formBaseFieldStyles,conditionalStyles);var InputElement=styled.input(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  \",\"\\n  \",\"\\n  text-indent: 0;\\n  padding-right: \",\";\\n\"])),formFieldStyles,conditionalStyles,function(props){return props.icon?\"2.3rem\":\"initial\";});var inputStates={error:{color:'red',icon:AlertIcon},valid:{color:'green',icon:CheckCircledIcon},clean:{color:'gray-600',icon:undefined}};var getInputState=function getInputState(error,valid){if(error)return'error';if(valid)return'valid';return'clean';};export var Input=/*#__PURE__*/forwardRef(function(_ref,ref){var error=_ref.error,className=_ref.className,id=_ref.id,valid=_ref.valid,activated=_ref.activated,As=_ref.as,Icon=_ref.icon,rest=_objectWithoutProperties(_ref,[\"error\",\"className\",\"id\",\"valid\",\"activated\",\"as\",\"icon\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),activatedStyle=_useState2[0],setActivatedStyle=_useState2[1];var _inputStates$getInput=inputStates[getInputState(Boolean(error),Boolean(valid))],color=_inputStates$getInput.color,icon=_inputStates$getInput.icon;/*\n     * @remarks We would love to properly type this with generics, but, alas, we cannot yet. See comments on lines 45-47 for more detail.\n     */var changeHandler=function changeHandler(event){var _rest$onChange;rest===null||rest===void 0?void 0:(_rest$onChange=rest.onChange)===null||_rest$onChange===void 0?void 0:_rest$onChange.call(rest,event);setActivatedStyle(true);};var AsComponent=As||InputElement;var ShownIcon=Icon||icon;return/*#__PURE__*/_jsxs(Box,{display:rest.type==='hidden'?'none':undefined,position:\"relative\",textColor:color,children:[/*#__PURE__*/_jsx(AsComponent,_objectSpread(_objectSpread({},rest),{},{id:id||rest.htmlFor,ref:ref,variant:conditionalStyleState(Boolean(error),activatedStyle),icon:error||valid||!!Icon,className:className,onChange:changeHandler})),!!ShownIcon&&/*#__PURE__*/_jsx(FlexBox,{pr:Icon?12:16,position:\"absolute\",alignItems:\"center\",right:\"0\",top:\"0\",bottom:\"0\",children:/*#__PURE__*/_jsx(ShownIcon,{size:Icon?24:16,\"aria-hidden\":true})})]});});Input.defaultProps={type:'text'};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Input.tsx"],"names":["AlertIcon","CheckCircledIcon","system","styled","React","forwardRef","useState","Box","FlexBox","conditionalStyles","conditionalStyleState","formBaseFieldStyles","formFieldFocusStyles","formFieldPaddingStyles","formFieldStyles","reactRecurlyFormFieldFocusStyles","css","reactRecurlyFormFieldPaddingStyles","iFrameWrapper","div","InputElement","input","props","icon","inputStates","error","color","valid","clean","undefined","getInputState","Input","ref","className","id","activated","As","as","Icon","rest","activatedStyle","setActivatedStyle","Boolean","changeHandler","event","onChange","AsComponent","ShownIcon","type","htmlFor","defaultProps"],"mappings":"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","sourcesContent":["import { AlertIcon, CheckCircledIcon } from '@codecademy/gamut-icons';\nimport { system } from '@codecademy/gamut-styles';\nimport styled, { StyledComponent } from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  useState,\n} from 'react';\n\nimport { Box, FlexBox } from '../Box';\nimport {\n  conditionalStyleProps,\n  conditionalStyles,\n  conditionalStyleState,\n  formBaseFieldStyles,\n  formFieldFocusStyles,\n  formFieldPaddingStyles,\n  formFieldStyles,\n} from './styles/shared-system-props';\n\nexport type InputProps = InputHTMLAttributes<HTMLInputElement> & {\n  id?: string;\n  className?: string;\n  error?: boolean;\n  /**\n   * [The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.\n   */\n  htmlFor?: string;\n  label?: string;\n  name?: string;\n  placeholder?: string;\n  required?: boolean;\n  type?: string;\n  valid?: boolean;\n  /**\n   * Allows Inputs to manage their own activated style state to account for some edge-cases.\n   */\n  activated?: boolean;\n};\nexport interface StyledInputProps extends InputProps {\n  icon?: boolean;\n}\n\n/*\n * @remarks We would love to properly type this with generics, but, alas, we cannot yet.\n * @see https://github.com/Codecademy/client-modules/pull/270#discussion_r270917147\n * @see https://github.com/Microsoft/TypeScript/issues/21048\n */\nexport interface InputWrapperProps extends InputProps {\n  as?: StyledComponent<StyledInputProps, React.PropsWithChildren<any>>;\n  /**\n   * A custom icon svg from gamut-icons.\n   */\n  icon?: typeof AlertIcon;\n}\n\n/**  We greatly prefer NOT to do this but ReactRecurly has some specific needs around focus-styles + padding that force us to export them seperately. If we ever stop using React-Recurly, this code will be ðŸ”ª.\n *tldr: Do not do this unless you have already talked to Web-Plat and have failed to find any alternate (and better) solutions. */\n\nexport const reactRecurlyFormFieldFocusStyles = system.css(\n  formFieldFocusStyles\n);\n\nexport const reactRecurlyFormFieldPaddingStyles = system.css(\n  formFieldPaddingStyles\n);\n\nexport const iFrameWrapper = styled.div<conditionalStyleProps>`\n  ${formBaseFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n`;\n\nconst InputElement = styled.input<StyledInputProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n  padding-right: ${(props) => (props.icon ? `2.3rem` : `initial`)};\n`;\n\nconst inputStates = {\n  error: {\n    color: 'red',\n    icon: AlertIcon,\n  },\n  valid: {\n    color: 'green',\n    icon: CheckCircledIcon,\n  },\n  clean: {\n    color: 'gray-600',\n    icon: undefined,\n  },\n} as const;\n\nconst getInputState = (error: boolean, valid: boolean) => {\n  if (error) return 'error';\n  if (valid) return 'valid';\n  return 'clean';\n};\n\nexport const Input = forwardRef<HTMLInputElement, InputWrapperProps>(\n  (\n    { error, className, id, valid, activated, as: As, icon: Icon, ...rest },\n    ref\n  ) => {\n    const [activatedStyle, setActivatedStyle] = useState(false);\n\n    const { color, icon } = inputStates[\n      getInputState(Boolean(error), Boolean(valid))\n    ];\n\n    /*\n     * @remarks We would love to properly type this with generics, but, alas, we cannot yet. See comments on lines 45-47 for more detail.\n     */\n\n    const changeHandler = (event: ChangeEvent<any>) => {\n      rest?.onChange?.(event);\n      setActivatedStyle(true);\n    };\n\n    const AsComponent = As || InputElement;\n    const ShownIcon = Icon || icon;\n\n    return (\n      <Box\n        display={rest.type === 'hidden' ? 'none' : undefined}\n        position=\"relative\"\n        textColor={color}\n      >\n        <AsComponent\n          {...rest}\n          id={id || rest.htmlFor}\n          ref={ref}\n          variant={conditionalStyleState(Boolean(error), activatedStyle)}\n          icon={error || valid || !!Icon}\n          className={className}\n          onChange={changeHandler}\n        />\n        {!!ShownIcon && (\n          <FlexBox\n            pr={Icon ? 12 : 16}\n            position=\"absolute\"\n            alignItems=\"center\"\n            right=\"0\"\n            top=\"0\"\n            bottom=\"0\"\n          >\n            <ShownIcon size={Icon ? 24 : 16} aria-hidden />\n          </FlexBox>\n        )}\n      </Box>\n    );\n  }\n);\n\nInput.defaultProps = {\n  type: 'text',\n};\n"]},"metadata":{},"sourceType":"module"}