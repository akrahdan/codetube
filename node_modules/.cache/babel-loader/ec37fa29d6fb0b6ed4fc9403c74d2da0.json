{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport cookie from \"react-cookies\";\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\nexport const autoSearch = query => {\n  searchClient.initIndex(\"tags_index\").search(query).then(({\n    hits\n  }) => console.log(\"Hits: \", hits)).catch(err => console.log(\"Error: \", err));\n};\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [\"Review\"],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchICourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPlayerCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseDetail: build.query({\n      query: slug => ({\n        url: `/course/${slug}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    trackViews: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/courses/lecture/${id}/views/`,\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchViews: build.query({\n      query: () => ({\n        url: `/courses/lecture/views/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchVideoViews: build.query({\n      query: id => ({\n        url: `/analytics/${id}/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    updateVideoViews: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/analytics/${id}/edit/`,\n        method: \"PUT\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseViews: build.query({\n      query: () => ({\n        url: `/analytics/views/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchInstructorCourses: build.query({\n      query: id => ({\n        url: `/instructors/courses/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editInstructorInfo: build.mutation({\n      query: body => ({\n        url: `/instructors/edit-info/`,\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchInstructorInfo: build.query({\n      query: () => ({\n        url: `/instructors/profile/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseLevel: build.query({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingTier: build.query({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingCurrency: build.query({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricing: build.query({\n      query: id => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSections: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    searchTags: build.query({\n      query: q => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateCourse: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    uploadLectureVideo: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createGoal: build.mutation({\n      query: body => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createPricing: build.mutation({\n      query: body => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    updatePricing: build.mutation({\n      query: body => {\n        const {\n          course,\n          ...rest\n        } = body;\n        return {\n          url: `/courses/${course}/pricing/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    createExperience: build.mutation({\n      query: body => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createRequirement: build.mutation({\n      query: body => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editRequirement: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editExperience: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editGoal: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    submitReview: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchGoals: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchRequirements: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    deleteExperience: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteGoal: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteRequirement: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    editSection: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteSection: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchLectures: build.query({\n      query: pk => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchResources: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createResource: build.mutation({\n      query: data => {\n        const {\n          course,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editLecture: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteLecture: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation,\n  useFetchInstructorCoursesQuery,\n  useEditInstructorInfoMutation,\n  useFetchInstructorInfoQuery,\n  useFetchPlayerCourseQuery,\n  useTrackViewsMutation,\n  useFetchViewsQuery,\n  useFetchVideoViewsQuery,\n  useUpdateVideoViewsMutation,\n  useFetchCourseViewsQuery,\n  useFetchCourseDetailQuery,\n  useUpdatePricingMutation\n} = coursesApi;\nexport const {\n  updateVideoViews\n} = coursesApi.endpoints;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","algoliasearch","cookie","searchClient","process","env","REACT_APP_ALGOLIA_APP_ID","REACT_APP_ALGOLIA_SEARCH_KEY","autoSearch","query","initIndex","search","then","hits","console","log","catch","err","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","id","url","method","responseHandler","response","json","fetchICourse","fetchPlayerCourse","fetchCourseDetail","slug","trackViews","mutation","body","fetchViews","fetchVideoViews","updateVideoViews","fetchCourseViews","fetchInstructorCourses","editInstructorInfo","fetchInstructorInfo","fetchCategories","fetchCourseLevel","fetchPricingTier","fetchPricingCurrency","fetchPricing","fetchSections","pk","searchTags","q","createCourse","updateCourse","data","uploadLectureVideo","createSection","createGoal","createPricing","updatePricing","course","rest","createExperience","createRequirement","editRequirement","editExperience","editGoal","submitReview","fetchExperience","fetchGoals","fetchRequirements","deleteExperience","deleteGoal","deleteRequirement","editSection","deleteSection","createLecture","fetchLectures","fetchResources","createResource","editLecture","deleteLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery","useFetchCourseLevelQuery","useSearchTagsQuery","useUploadLectureVideoMutation","useFetchSectionsQuery","useDeleteSectionMutation","useEditSectionMutation","useDeleteLectureMutation","useEditLectureMutation","useFetchLecturesQuery","useFetchResourcesQuery","useCreateResourceMutation","useUpdateCourseMutation","useCreateExperienceMutation","useCreateGoalMutation","useCreateRequirementMutation","useEditExperienceMutation","useEditGoalMutation","useEditRequirementMutation","useFetchExperienceQuery","useFetchGoalsQuery","useFetchRequirementsQuery","useDeleteExperienceMutation","useDeleteGoalMutation","useDeleteRequirementMutation","useFetchPricingCurrencyQuery","useFetchPricingTierQuery","useCreatePricingMutation","useFetchPricingQuery","useSubmitReviewMutation","useFetchInstructorCoursesQuery","useEditInstructorInfoMutation","useFetchInstructorInfoQuery","useFetchPlayerCourseQuery","useTrackViewsMutation","useFetchViewsQuery","useFetchVideoViewsQuery","useUpdateVideoViewsMutation","useFetchCourseViewsQuery","useFetchCourseDetailQuery","useUpdatePricingMutation"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\n\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\nimport { DateTime } from \"schema-dts\";\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID,\n  process.env.REACT_APP_ALGOLIA_SEARCH_KEY\n);\n\nexport interface CourseResponse {\n  title: string;\n  id: number;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  tags: string[];\n\n  subcategory: number;\n  price: number;\n  state: string;\n}\n\nexport interface CoursePlayerResponse {\n  title: string;\n  id: number;\n  category: CategoryResponse;\n  description: string;\n  cover_image: string;\n  slug: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  sections: Section[];\n  tags: string[];\n  url: string;\n  instructor: InstructorResponse;\n  subcategory: number;\n  goals: Goal[];\n  experiences: Experience[];\n  requirements: Requirement[];\n  price: number;\n  state: string;\n}\n\nexport interface Instructor {\n  id: string;\n  headline: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  description: string;\n  avatar: string;\n}\n\nexport interface InstructorResponse {\n  id: string;\n  headline: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  courses: CourseResponse[];\n  avatar: string;\n  user: User;\n  description: string;\n}\n\nexport interface User {\n  email: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface MediaRequest {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  size: number;\n}\n\nexport interface MediaResponse {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  id: number;\n  url?: string;\n  size: number;\n  timestamp: string;\n}\n\nexport interface SearchResponse {\n  title: string;\n  tags: string[];\n}\n\nexport interface CourseRequest {\n  id: number;\n  title: string;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  level: string;\n  tags: string[];\n  headline: string;\n  subcategory: number;\n  price: number;\n}\n\nexport interface Section {\n  title: string;\n  id: number;\n  course: number;\n  duration: number;\n  instructor: number;\n  description: string;\n  order: number;\n  resources: number[];\n  lectures?: Lecture[];\n}\n\nexport interface Experience {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Goal {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Requirement {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface LectureRequest {\n  title: string;\n  id: number;\n  video: number;\n  video_url: string;\n  section: number;\n  resources: number[];\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface Options {\n  name: string;\n  display: string;\n}\n\nexport interface Pricing {\n  amount: string;\n  currency: string;\n  course: number;\n}\n\nexport interface Lecture {\n  title: string;\n  id: number;\n  position: string;\n  neighbor: number;\n  duration: number;\n  description: string;\n  video: MediaResponse;\n  resources: number[];\n  instructor: number;\n  section: number;\n  video_url: string;\n  order: number;\n}\n\nexport interface Review {\n  id: number;\n  state: string;\n}\n\nexport interface Views {\n  id: number;\n}\n\nexport interface ViewsResponse {\n  object_id: number;\n}\n\nexport interface VideoAnalytics {\n  id: number;\n  thumbnail: string;\n  lecture: number;\n  progress: number;\n  updated: string;\n  complete: boolean;\n}\n\nexport interface CategoryResponse {\n  title: string;\n  parent: CategoryResponse;\n  id: number;\n  children: CategoryResponse[];\n}\n\nexport const autoSearch = (query: string) => {\n  searchClient\n    .initIndex(\"tags_index\")\n    .search(query)\n    .then(({ hits }) => console.log(\"Hits: \", hits))\n    .catch((err) => console.log(\"Error: \", err));\n};\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [\"Review\"],\n  endpoints: (build) => ({\n    fetchCourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchICourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPlayerCourse: build.query<CoursePlayerResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchCourseDetail: build.query<CoursePlayerResponse, string>({\n      query: (slug) => ({\n        url: `/course/${slug}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    trackViews: build.mutation<ViewsResponse[], Views>({\n      query: ({ id, ...body }) => ({\n        url: `/courses/lecture/${id}/views/`,\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchViews: build.query<ViewsResponse[], void>({\n      query: () => ({\n        url: `/courses/lecture/views/`,\n        method: \"GET\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchVideoViews: build.query<VideoAnalytics[], Partial<number>>({\n      query: (id) => ({\n        url: `/analytics/${id}/`,\n        method: \"GET\",\n\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateVideoViews: build.mutation<VideoAnalytics, Partial<VideoAnalytics>>({\n      query: ({ id, ...body }) => ({\n        url: `/analytics/${id}/edit/`,\n        method: \"PUT\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCourseViews: build.query<VideoAnalytics[], void>({\n      query: () => ({\n        url: `/analytics/views/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchInstructorCourses: build.query<CoursePlayerResponse[], void>({\n      query: (id) => ({\n        url: `/instructors/courses/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editInstructorInfo: build.mutation<InstructorResponse, Partial<Instructor>>(\n      {\n        query: (body) => ({\n          url: `/instructors/edit-info/`,\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        }),\n      }\n    ),\n\n    fetchInstructorInfo: build.query<InstructorResponse, void>({\n      query: () => ({\n        url: `/instructors/profile/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCategories: build.query<CategoryResponse[], void>({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCourseLevel: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingTier: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingCurrency: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricing: build.query<Pricing, number>({\n      query: (id) => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchSections: build.query<Section[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    searchTags: build.query<SearchResponse[], string>({\n      query: (q) => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (body) => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    uploadLectureVideo: build.mutation<MediaResponse, Partial<MediaRequest>>({\n      query: (body) => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createSection: build.mutation<Section[], Partial<SectionRequest>>({\n      query: (body) => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createGoal: build.mutation<Goal[], Partial<Goal>>({\n      query: (body) => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createPricing: build.mutation<Pricing, Partial<Pricing>>({\n      query: (body) => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updatePricing: build.mutation<Pricing, Partial<Pricing>>({\n      query: (body) => {\n        const {course, ...rest } = body\n        return {\n          url: `/courses/${course}/pricing/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      }\n    }),\n\n    createExperience: build.mutation<Experience[], Partial<Experience>>({\n      query: (body) => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createRequirement: build.mutation<Requirement[], Partial<Requirement>>({\n      query: (body) => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editRequirement: build.mutation<Requirement, Partial<Requirement>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editExperience: build.mutation<Experience, Partial<Experience>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editGoal: build.mutation<Goal, Partial<Goal>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    submitReview: build.mutation<Review, Partial<Review>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    fetchExperience: build.query<Experience[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchGoals: build.query<Goal[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchRequirements: build.query<Requirement[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    deleteExperience: build.mutation<Experience, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteGoal: build.mutation<Goal, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteRequirement: build.mutation<Requirement, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    editSection: build.mutation<Section, Partial<SectionRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteSection: build.mutation<Section, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    createLecture: build.mutation<Lecture[], Partial<Lecture>>({\n      query: (body) => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchLectures: build.query<Lecture[], number>({\n      query: (pk) => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchResources: build.query<MediaResponse[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createResource: build.mutation<MediaResponse[], MediaRequest>({\n      query: (data) => {\n        const { course, ...body } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editLecture: build.mutation<Lecture, Partial<LectureRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteLecture: build.mutation<Lecture, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation,\n  useFetchInstructorCoursesQuery,\n  useEditInstructorInfoMutation,\n  useFetchInstructorInfoQuery,\n  useFetchPlayerCourseQuery,\n  useTrackViewsMutation,\n  useFetchViewsQuery,\n  useFetchVideoViewsQuery,\n  useUpdateVideoViewsMutation,\n  useFetchCourseViewsQuery,\n  useFetchCourseDetailQuery,\n  useUpdatePricingMutation,\n} = coursesApi;\n\nexport const { updateVideoViews } = coursesApi.endpoints;\n"]},"metadata":{},"sourceType":"module"}