{"ast":null,"code":"import { pxRem, styledOptions, system, theme } from '@codecademy/gamut-styles';\nimport { variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport { pick } from 'lodash';\nconst columns = 12;\nconst gutters = pick(theme.spacing, [8, 16, 24, 32, 48]);\n/** This prevents grid blowout by ensuring that column gaps never exceed the size of their container */\n\nconst gutterGuard = (gap, property) => {\n  if (property === 'columnGap') {\n    return {\n      gridColumnGap: gap,\n      columnGap: `min(calc(100% / ${columns - 1}), ${gap})`\n    };\n  }\n\n  return gap;\n};\n\nconst grid = variance.create({\n  gap: {\n    property: 'gap',\n    properties: ['rowGap', 'columnGap'],\n    scale: gutters,\n    transform: gutterGuard\n  },\n  rowGap: {\n    property: 'rowGap',\n    scale: gutters\n  },\n  columnGap: {\n    property: 'columnGap',\n    scale: gutters,\n    transform: gutterGuard\n  },\n  rowHeight: {\n    property: 'gridAutoRows',\n    transform: height => `minmax(${pxRem(height)}, 1fr)`\n  }\n});\nconst gridProps = variance.compose(system.space, grid);\nexport const LayoutGrid = styled('div', styledOptions(grid.propNames))(system.css({\n  display: 'grid',\n  width: '100%',\n  gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))`\n}), gridProps);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Layout/LayoutGrid.tsx"],"names":["pxRem","styledOptions","system","theme","variance","styled","pick","columns","gutters","spacing","gutterGuard","gap","property","gridColumnGap","columnGap","grid","create","properties","scale","transform","rowGap","rowHeight","height","gridProps","compose","space","LayoutGrid","propNames","css","display","width","gridTemplateColumns"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,aAAhB,EAA+BC,MAA/B,EAAuCC,KAAvC,QAAoD,0BAApD;AACA,SAAqBC,QAArB,QAAqC,sBAArC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,MAAMC,OAAO,GAAG,EAAhB;AAEA,MAAMC,OAAO,GAAGF,IAAI,CAACH,KAAK,CAACM,OAAP,EAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAAhB,CAApB;AAEA;;AACA,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAcC,QAAd,KAAmC;AACrD,MAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,WAAO;AACLC,MAAAA,aAAa,EAAEF,GADV;AAELG,MAAAA,SAAS,EAAG,mBAAkBP,OAAO,GAAG,CAAE,MAAKI,GAAI;AAF9C,KAAP;AAID;;AACD,SAAOA,GAAP;AACD,CARD;;AAUA,MAAMI,IAAI,GAAGX,QAAQ,CAACY,MAAT,CAAgB;AAC3BL,EAAAA,GAAG,EAAE;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHK,IAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,WAAX,CAFT;AAGHC,IAAAA,KAAK,EAAEV,OAHJ;AAIHW,IAAAA,SAAS,EAAET;AAJR,GADsB;AAO3BU,EAAAA,MAAM,EAAE;AAAER,IAAAA,QAAQ,EAAE,QAAZ;AAAsBM,IAAAA,KAAK,EAAEV;AAA7B,GAPmB;AAQ3BM,EAAAA,SAAS,EAAE;AACTF,IAAAA,QAAQ,EAAE,WADD;AAETM,IAAAA,KAAK,EAAEV,OAFE;AAGTW,IAAAA,SAAS,EAAET;AAHF,GARgB;AAa3BW,EAAAA,SAAS,EAAE;AACTT,IAAAA,QAAQ,EAAE,cADD;AAETO,IAAAA,SAAS,EAAGG,MAAD,IAAqB,UAAStB,KAAK,CAACsB,MAAD,CAAS;AAF9C;AAbgB,CAAhB,CAAb;AAmBA,MAAMC,SAAS,GAAGnB,QAAQ,CAACoB,OAAT,CAAiBtB,MAAM,CAACuB,KAAxB,EAA+BV,IAA/B,CAAlB;AAIA,OAAO,MAAMW,UAAU,GAAGrB,MAAM,CAC9B,KAD8B,EAE9BJ,aAAa,CAACc,IAAI,CAACY,SAAN,CAFiB,CAAN,CAIxBzB,MAAM,CAAC0B,GAAP,CAAW;AACTC,EAAAA,OAAO,EAAE,MADA;AAETC,EAAAA,KAAK,EAAE,MAFE;AAGTC,EAAAA,mBAAmB,EAAG,UAASxB,OAAQ;AAH9B,CAAX,CAJwB,EASxBgB,SATwB,CAAnB","sourcesContent":["import { pxRem, styledOptions, system, theme } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport { pick } from 'lodash';\n\nconst columns = 12;\n\nconst gutters = pick(theme.spacing, [8, 16, 24, 32, 48]);\n\n/** This prevents grid blowout by ensuring that column gaps never exceed the size of their container */\nconst gutterGuard = (gap: string, property: string) => {\n  if (property === 'columnGap') {\n    return {\n      gridColumnGap: gap,\n      columnGap: `min(calc(100% / ${columns - 1}), ${gap})`,\n    };\n  }\n  return gap;\n};\n\nconst grid = variance.create({\n  gap: {\n    property: 'gap',\n    properties: ['rowGap', 'columnGap'],\n    scale: gutters,\n    transform: gutterGuard,\n  },\n  rowGap: { property: 'rowGap', scale: gutters },\n  columnGap: {\n    property: 'columnGap',\n    scale: gutters,\n    transform: gutterGuard,\n  },\n  rowHeight: {\n    property: 'gridAutoRows',\n    transform: (height: string) => `minmax(${pxRem(height)}, 1fr)`,\n  },\n});\n\nconst gridProps = variance.compose(system.space, grid);\n\nexport interface LayoutGridProps extends StyleProps<typeof gridProps> {}\n\nexport const LayoutGrid = styled(\n  'div',\n  styledOptions(grid.propNames)\n)<LayoutGridProps>(\n  system.css({\n    display: 'grid',\n    width: '100%',\n    gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))`,\n  }),\n  gridProps\n);\n"]},"metadata":{},"sourceType":"module"}