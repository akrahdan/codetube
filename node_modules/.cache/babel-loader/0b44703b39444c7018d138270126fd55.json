{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/PageSection/index.tsx\";\nimport { Box, FlexBox, Text, TextButton } from '@codecademy/gamut';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction isSectionButtonATextButton(button) {\n  return button.text !== undefined;\n}\n\nexport const PageSection = ({\n  title,\n  headerButton,\n  headerSecondaryButton,\n  footerButton,\n  children\n}) => {\n  const renderSectionButton = sectionButton => {\n    if (!isSectionButtonATextButton(sectionButton)) return sectionButton;\n    const {\n      text,\n      ...buttonProps\n    } = sectionButton;\n    return /*#__PURE__*/_jsxDEV(TextButton, { ...buttonProps,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  };\n\n  const maybeRenderHeaderButton = () => {\n    if (!headerButton) return null;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      ml: 4,\n      display: \"inline\",\n      children: renderSectionButton(headerButton)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  };\n\n  const maybeRenderHeaderSecondaryButton = () => {\n    if (!headerSecondaryButton) return null;\n    return renderSectionButton(headerSecondaryButton);\n  };\n\n  const renderSectionHeader = () =>\n  /*#__PURE__*/\n  // Setting height directly to height of the buttons so if they are omitted\n  // the header remains the same height.\n  _jsxDEV(FlexBox, {\n    height: \"2.5rem\",\n    mb: 8,\n    justifyContent: \"space-between\",\n    children: [/*#__PURE__*/_jsxDEV(FlexBox, {\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"h2\",\n        fontSize: 22,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), maybeRenderHeaderButton()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), maybeRenderHeaderSecondaryButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n\n  const maybeRenderSectionFooter = () => {\n    if (!footerButton) return null;\n    return /*#__PURE__*/_jsxDEV(FlexBox, {\n      justifyContent: \"flex-end\",\n      mt: 16,\n      children: renderSectionButton(footerButton)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FlexBox, {\n    flexDirection: \"column\",\n    mb: 48,\n    children: [renderSectionHeader(), children, maybeRenderSectionFooter()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = PageSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageSection\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/PageSection/index.tsx"],"names":["Box","FlexBox","Text","TextButton","React","isSectionButtonATextButton","button","text","undefined","PageSection","title","headerButton","headerSecondaryButton","footerButton","children","renderSectionButton","sectionButton","buttonProps","maybeRenderHeaderButton","maybeRenderHeaderSecondaryButton","renderSectionHeader","maybeRenderSectionFooter"],"mappings":";AAAA,SAASA,GAAT,EAAcC,OAAd,EAAuBC,IAAvB,EAA6BC,UAA7B,QAA+C,mBAA/C;AACA,OAAOC,KAAP,MAAiD,OAAjD;;;AAUA,SAASC,0BAAT,CACEC,MADF,EAEoC;AAClC,SAAQA,MAAD,CAAmCC,IAAnC,KAA4CC,SAAnD;AACD;;AASD,OAAO,MAAMC,WAAuC,GAAG,CAAC;AACtDC,EAAAA,KADsD;AAEtDC,EAAAA,YAFsD;AAGtDC,EAAAA,qBAHsD;AAItDC,EAAAA,YAJsD;AAKtDC,EAAAA;AALsD,CAAD,KAMjD;AACJ,QAAMC,mBAAmB,GAAIC,aAAD,IAAkC;AAC5D,QAAI,CAACX,0BAA0B,CAACW,aAAD,CAA/B,EAAgD,OAAOA,aAAP;AAEhD,UAAM;AAAET,MAAAA,IAAF;AAAQ,SAAGU;AAAX,QAA2BD,aAAjC;AACA,wBAAO,QAAC,UAAD,OAAgBC,WAAhB;AAAA,gBAA8BV;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GALD;;AAOA,QAAMW,uBAAuB,GAAG,MAAM;AACpC,QAAI,CAACP,YAAL,EAAmB,OAAO,IAAP;AACnB,wBACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,OAAO,EAAC,QAApB;AAAA,gBACGI,mBAAmB,CAACJ,YAAD;AADtB;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAPD;;AASA,QAAMQ,gCAAgC,GAAG,MAAM;AAC7C,QAAI,CAACP,qBAAL,EAA4B,OAAO,IAAP;AAC5B,WAAOG,mBAAmB,CAACH,qBAAD,CAA1B;AACD,GAHD;;AAKA,QAAMQ,mBAAmB,GAAG;AAAA;AAC1B;AACA;AACA,UAAC,OAAD;AAAS,IAAA,MAAM,EAAC,QAAhB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAgC,IAAA,cAAc,EAAC,eAA/C;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,UAAU,EAAC,QAApB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,IAAT;AAAc,QAAA,QAAQ,EAAE,EAAxB;AAAA,kBACGV;AADH;AAAA;AAAA;AAAA;AAAA,cADF,EAIGQ,uBAAuB,EAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOGC,gCAAgC,EAPnC;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;;AAcA,QAAME,wBAAwB,GAAG,MAAM;AACrC,QAAI,CAACR,YAAL,EAAmB,OAAO,IAAP;AACnB,wBACE,QAAC,OAAD;AAAS,MAAA,cAAc,EAAC,UAAxB;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,gBACGE,mBAAmB,CAACF,YAAD;AADtB;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAPD;;AASA,sBACE,QAAC,OAAD;AAAS,IAAA,aAAa,EAAC,QAAvB;AAAgC,IAAA,EAAE,EAAE,EAApC;AAAA,eACGO,mBAAmB,EADtB,EAEGN,QAFH,EAGGO,wBAAwB,EAH3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1DM;KAAMZ,W","sourcesContent":["import { Box, FlexBox, Text, TextButton } from '@codecademy/gamut';\nimport React, { AriaAttributes, ReactNode } from 'react';\n\ntype TextButtonMinimumProps = AriaAttributes & {\n  text: string;\n  href?: string;\n  onClick?: () => void;\n};\n\nexport type SectionButton = TextButtonMinimumProps | ReactNode;\n\nfunction isSectionButtonATextButton(\n  button: SectionButton\n): button is TextButtonMinimumProps {\n  return (button as TextButtonMinimumProps).text !== undefined;\n}\n\nexport type PageSectionProps = {\n  title: string;\n  headerButton?: SectionButton;\n  headerSecondaryButton?: SectionButton;\n  footerButton?: SectionButton;\n};\n\nexport const PageSection: React.FC<PageSectionProps> = ({\n  title,\n  headerButton,\n  headerSecondaryButton,\n  footerButton,\n  children,\n}) => {\n  const renderSectionButton = (sectionButton: SectionButton) => {\n    if (!isSectionButtonATextButton(sectionButton)) return sectionButton;\n\n    const { text, ...buttonProps } = sectionButton;\n    return <TextButton {...buttonProps}>{text}</TextButton>;\n  };\n\n  const maybeRenderHeaderButton = () => {\n    if (!headerButton) return null;\n    return (\n      <Box ml={4} display=\"inline\">\n        {renderSectionButton(headerButton)}\n      </Box>\n    );\n  };\n\n  const maybeRenderHeaderSecondaryButton = () => {\n    if (!headerSecondaryButton) return null;\n    return renderSectionButton(headerSecondaryButton);\n  };\n\n  const renderSectionHeader = () => (\n    // Setting height directly to height of the buttons so if they are omitted\n    // the header remains the same height.\n    <FlexBox height=\"2.5rem\" mb={8} justifyContent=\"space-between\">\n      <FlexBox alignItems=\"center\">\n        <Text as=\"h2\" fontSize={22}>\n          {title}\n        </Text>\n        {maybeRenderHeaderButton()}\n      </FlexBox>\n      {maybeRenderHeaderSecondaryButton()}\n    </FlexBox>\n  );\n\n  const maybeRenderSectionFooter = () => {\n    if (!footerButton) return null;\n    return (\n      <FlexBox justifyContent=\"flex-end\" mt={16}>\n        {renderSectionButton(footerButton)}\n      </FlexBox>\n    );\n  };\n\n  return (\n    <FlexBox flexDirection=\"column\" mb={48}>\n      {renderSectionHeader()}\n      {children}\n      {maybeRenderSectionFooter()}\n    </FlexBox>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}