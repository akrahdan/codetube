{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/ProgressBar/index.tsx\";\nimport { variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { Pattern } from '../Pattern';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst progressBarSizeVariants = variant({\n  defaultVariant: 'small',\n  prop: 'size',\n  variants: {\n    small: {\n      height: '6px',\n      borderRadius: '3px'\n    },\n    medium: {\n      height: '8px',\n      borderRadius: '80px'\n    },\n    large: {\n      height: '36px',\n      borderRadius: '18px'\n    }\n  }\n});\nconst progressBarBackgroundVariants = variant({\n  defaultVariant: 'blue',\n  variants: {\n    blue: {\n      bg: 'navy'\n    },\n    yellow: {\n      bg: `gray-100`\n    },\n    dark: {\n      textColor: 'white'\n    },\n    light: {\n      textColor: 'navy'\n    }\n  }\n});\nconst progressBarBorderVariants = variant({\n  defaultVariant: 'basic',\n  prop: 'border',\n  variants: {\n    basic: {\n      borderWidth: '0'\n    },\n    bordered: {\n      borderWidth: '1px',\n      borderStyle: 'solid'\n    }\n  }\n});\nconst progressBarForegroundVariants = variant({\n  defaultVariant: 'blue',\n  base: {\n    alignItems: 'center',\n    height: '100%',\n    display: 'flex',\n    transition: 'width 0.5s',\n    position: 'relative',\n    borderRadius: 'inherit'\n  },\n  variants: {\n    blue: {\n      bg: 'blue',\n      textColor: 'white'\n    },\n    yellow: {\n      bg: `yellow`,\n      textColor: `black`\n    },\n    light: {\n      bg: 'navy',\n      textColor: 'navy'\n    },\n    dark: {\n      bg: 'white',\n      textColor: 'white'\n    }\n  }\n});\nconst ProgressBarWrapper = styled.div`\n  overflow: hidden;\n  position: relative;\n  ${progressBarBackgroundVariants};\n  ${progressBarSizeVariants};\n  ${progressBarBorderVariants};\n`;\n_c = ProgressBarWrapper;\nconst Bar = styled.div(progressBarForegroundVariants);\n_c2 = Bar;\nconst DisplayedPercent = styled.span`\n  font-weight: bold;\n  padding: 0.5rem;\n  text-align: right;\n  width: 100%;\n`;\n_c3 = DisplayedPercent;\nexport const ProgressBar = ({\n  minimumPercent = 0,\n  percent,\n  pattern,\n  bordered,\n  size = 'small',\n  variant = 'blue'\n}) => {\n  return /*#__PURE__*/_jsxDEV(ProgressBarWrapper, {\n    \"aria-label\": `Progress: ${percent}%`,\n    \"aria-live\": \"polite\",\n    role: \"figure\",\n    border: bordered ? 'bordered' : 'basic',\n    size: size,\n    variant: variant,\n    children: [pattern && /*#__PURE__*/_jsxDEV(Pattern, {\n      width: \"100%\",\n      position: \"absolute\",\n      zIndex: 0,\n      name: pattern\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      variant: variant,\n      \"data-testid\": \"progress-bar-bar\",\n      style: {\n        width: `${Math.max(minimumPercent, percent)}%`\n      },\n      children: size === 'large' && /*#__PURE__*/_jsxDEV(DisplayedPercent, {\n        children: [percent, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_c4 = ProgressBar;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ProgressBarWrapper\");\n$RefreshReg$(_c2, \"Bar\");\n$RefreshReg$(_c3, \"DisplayedPercent\");\n$RefreshReg$(_c4, \"ProgressBar\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/ProgressBar/index.tsx"],"names":["variant","styled","React","Pattern","progressBarSizeVariants","defaultVariant","prop","variants","small","height","borderRadius","medium","large","progressBarBackgroundVariants","blue","bg","yellow","dark","textColor","light","progressBarBorderVariants","basic","borderWidth","bordered","borderStyle","progressBarForegroundVariants","base","alignItems","display","transition","position","ProgressBarWrapper","div","Bar","DisplayedPercent","span","ProgressBar","minimumPercent","percent","pattern","size","width","Math","max"],"mappings":"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","sourcesContent":["import { variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { Pattern, PatternName } from '../Pattern';\n\nexport type ProgressBarProps = {\n  className?: string;\n\n  /**\n   * Whether to increase size and display the percentage as text.\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * Minimum amount of the bar to fill in visually.\n   */\n  minimumPercent?: number;\n\n  /**\n   * How much of the bar to fill in, as a number in [0, 100].\n   */\n  percent: number;\n\n  /**\n   * Base variant display themes.\n   */\n  variant: 'blue' | 'yellow' | 'dark' | 'light';\n\n  /**\n   * Base variant display themes.\n   */\n  bordered?: boolean;\n\n  /**\n   * Whether to use a pattern background\n   */\n  pattern?: PatternName;\n};\n\nconst progressBarSizeVariants = variant({\n  defaultVariant: 'small',\n  prop: 'size',\n  variants: {\n    small: {\n      height: '6px',\n      borderRadius: '3px',\n    },\n    medium: {\n      height: '8px',\n      borderRadius: '80px',\n    },\n    large: {\n      height: '36px',\n      borderRadius: '18px',\n    },\n  },\n});\n\nconst progressBarBackgroundVariants = variant({\n  defaultVariant: 'blue',\n  variants: {\n    blue: {\n      bg: 'navy',\n    },\n    yellow: {\n      bg: `gray-100`,\n    },\n    dark: {\n      textColor: 'white',\n    },\n    light: {\n      textColor: 'navy',\n    },\n  },\n});\n\nconst progressBarBorderVariants = variant({\n  defaultVariant: 'basic',\n  prop: 'border',\n  variants: {\n    basic: {\n      borderWidth: '0',\n    },\n    bordered: {\n      borderWidth: '1px',\n      borderStyle: 'solid',\n    },\n  },\n});\n\nconst progressBarForegroundVariants = variant({\n  defaultVariant: 'blue',\n  base: {\n    alignItems: 'center',\n    height: '100%',\n    display: 'flex',\n    transition: 'width 0.5s',\n    position: 'relative',\n    borderRadius: 'inherit',\n  },\n  variants: {\n    blue: {\n      bg: 'blue',\n      textColor: 'white',\n    },\n    yellow: {\n      bg: `yellow`,\n      textColor: `black`,\n    },\n    light: {\n      bg: 'navy',\n      textColor: 'navy',\n    },\n    dark: {\n      bg: 'white',\n      textColor: 'white',\n    },\n  },\n});\n\ntype ProgressBarElementProps = Pick<ProgressBarProps, 'variant' | 'size'>;\n\ntype ProgressBarElementWrapperProps = ProgressBarElementProps & {\n  border: 'basic' | 'bordered';\n};\n\nconst ProgressBarWrapper = styled.div<ProgressBarElementWrapperProps>`\n  overflow: hidden;\n  position: relative;\n  ${progressBarBackgroundVariants};\n  ${progressBarSizeVariants};\n  ${progressBarBorderVariants};\n`;\n\nconst Bar = styled.div(progressBarForegroundVariants);\n\nconst DisplayedPercent = styled.span`\n  font-weight: bold;\n  padding: 0.5rem;\n  text-align: right;\n  width: 100%;\n`;\n\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n  minimumPercent = 0,\n  percent,\n  pattern,\n  bordered,\n  size = 'small',\n  variant = 'blue',\n}) => {\n  return (\n    <ProgressBarWrapper\n      aria-label={`Progress: ${percent}%`}\n      aria-live=\"polite\"\n      role=\"figure\"\n      border={bordered ? 'bordered' : 'basic'}\n      size={size}\n      variant={variant}\n    >\n      {pattern && (\n        <Pattern width=\"100%\" position=\"absolute\" zIndex={0} name={pattern} />\n      )}\n      <Bar\n        variant={variant}\n        data-testid=\"progress-bar-bar\"\n        style={{\n          width: `${Math.max(minimumPercent, percent)}%`,\n        }}\n      >\n        {size === 'large' && <DisplayedPercent>{percent}%</DisplayedPercent>}\n      </Bar>\n    </ProgressBarWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}