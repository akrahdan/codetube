{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport cookie from \"react-cookies\";\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\nexport const autoSearch = query => {\n  searchClient.initIndex(\"tags_index\").search(query).then(({\n    hits\n  }) => console.log(\"Hits: \", hits)).catch(err => console.log(\"Error: \", err));\n};\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseLevel: build.query({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingTier: build.query({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingCurrency: build.query({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricing: build.query({\n      query: id => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSections: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    searchTags: build.query({\n      query: q => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateCourse: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    uploadLectureVideo: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createGoal: build.mutation({\n      query: body => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createPricing: build.mutation({\n      query: body => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createExperience: build.mutation({\n      query: body => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createRequirement: build.mutation({\n      query: body => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editRequirement: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editExperience: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editGoal: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    submitReview: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      },\n      transformResponse: response => response.data\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchGoals: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchRequirements: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    deleteExperience: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteGoal: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteRequirement: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    editSection: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteSection: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchLectures: build.query({\n      query: pk => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchResources: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createResource: build.mutation({\n      query: data => {\n        const {\n          course,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editLecture: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteLecture: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation\n} = coursesApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","algoliasearch","cookie","searchClient","process","env","REACT_APP_ALGOLIA_APP_ID","REACT_APP_ALGOLIA_SEARCH_KEY","autoSearch","query","initIndex","search","then","hits","console","log","catch","err","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","id","url","method","responseHandler","response","json","fetchCategories","fetchCourseLevel","fetchPricingTier","fetchPricingCurrency","fetchPricing","fetchSections","pk","searchTags","q","createCourse","mutation","body","updateCourse","data","uploadLectureVideo","createSection","createGoal","createPricing","createExperience","createRequirement","editRequirement","editExperience","editGoal","submitReview","transformResponse","fetchExperience","fetchGoals","fetchRequirements","deleteExperience","deleteGoal","deleteRequirement","editSection","deleteSection","createLecture","fetchLectures","fetchResources","createResource","course","editLecture","deleteLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery","useFetchCourseLevelQuery","useSearchTagsQuery","useUploadLectureVideoMutation","useFetchSectionsQuery","useDeleteSectionMutation","useEditSectionMutation","useDeleteLectureMutation","useEditLectureMutation","useFetchLecturesQuery","useFetchResourcesQuery","useCreateResourceMutation","useUpdateCourseMutation","useCreateExperienceMutation","useCreateGoalMutation","useCreateRequirementMutation","useEditExperienceMutation","useEditGoalMutation","useEditRequirementMutation","useFetchExperienceQuery","useFetchGoalsQuery","useFetchRequirementsQuery","useDeleteExperienceMutation","useDeleteGoalMutation","useDeleteRequirementMutation","useFetchPricingCurrencyQuery","useFetchPricingTierQuery","useCreatePricingMutation","useFetchPricingQuery","useSubmitReviewMutation"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\n\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID,\n  process.env.REACT_APP_ALGOLIA_SEARCH_KEY\n);\n\nexport interface CourseResponse {\n  title: string;\n  id: number;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  tags: string[];\n  subcategory: number;\n  price: number;\n}\n\nexport interface MediaRequest {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  size: number;\n}\n\nexport interface MediaResponse {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  id: number;\n  url?: string;\n  size: number;\n  timestamp: string;\n}\n\nexport interface SearchResponse {\n  title: string;\n  tags: string[];\n}\n\nexport interface CourseRequest {\n  id: number;\n  title: string;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  level: string;\n  tags: string[];\n  headline: string;\n  subcategory: number;\n  price: number;\n}\n\nexport interface Section {\n  title: string;\n  id: number;\n  course: number;\n  instructor: number;\n  description: string;\n  order: number;\n  resources: number[];\n  lectures?: Lecture[];\n}\n\n\nexport interface Experience {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Goal {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Requirement {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface LectureRequest {\n  title: string;\n  id: number;\n  video: number;\n  video_url: string;\n  section: number;\n  resources: number[];\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface Options {\n  name: string;\n  display: string;\n}\n\nexport interface Pricing {\n  amount: string;\n  currency: string;\n  course: number;\n}\n\nexport interface Lecture {\n  title: string;\n  id: number;\n  position: string;\n  neighbor: number;\n  description: string;\n  video: MediaResponse;\n  resources: number[];\n  instructor: number;\n  section: number;\n  video_url: string;\n  order: number;\n}\n\nexport interface Review {\n  id: number;\n  state: string\n}\n\n\n\nexport interface CategoryResponse {\n  title: string;\n  id: number;\n  children: CategoryResponse[];\n}\n\nexport const autoSearch = (query: string) => {\n  searchClient\n    .initIndex(\"tags_index\")\n    .search(query)\n    .then(({ hits }) => console.log(\"Hits: \", hits))\n    .catch((err) => console.log(\"Error: \", err));\n};\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [],\n  endpoints: (build) => ({\n    fetchCourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCategories: build.query<CategoryResponse[], void>({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCourseLevel: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingTier: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingCurrency: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricing: build.query<Pricing, number>({\n      query: (id) => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchSections: build.query<Section[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n\n\n    searchTags: build.query<SearchResponse[], string>({\n      query: (q) => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (body) => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (data) => {\n        const { id, ...body} = data\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    uploadLectureVideo: build.mutation<MediaResponse, Partial<MediaRequest>>({\n      query: (body) => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createSection: build.mutation<Section[], Partial<SectionRequest>>({\n      query: (body) => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createGoal: build.mutation<Goal[], Partial<Goal>>({\n      query: (body) => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createPricing: build.mutation<Pricing[], Partial<Pricing>>({\n      query: (body) => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createExperience: build.mutation<Experience[], Partial<Experience>>({\n      query: (body) => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createRequirement: build.mutation<Requirement[], Partial<Requirement>>({\n      query: (body) => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editRequirement: build.mutation<Requirement, Partial<Requirement>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/requirements/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editExperience: build.mutation<Experience, Partial<Experience>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/experience/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editGoal: build.mutation<Goal, Partial<Goal>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/goals/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    submitReview: build.mutation<Review, Partial<Review>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/${id}/review/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n      transformResponse: (response: { data: Review }) => response.data,\n    }),\n\n    fetchExperience: build.query<Experience[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchGoals: build.query<Goal[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchRequirements: build.query<Requirement[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    deleteExperience: build.mutation<Experience, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteGoal: build.mutation<Goal, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteRequirement: build.mutation<Requirement, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n\n\n    editSection: build.mutation<Section, Partial<SectionRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteSection: build.mutation<Section, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    createLecture: build.mutation<Lecture[], Partial<Lecture>>({\n      query: (body) => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchLectures: build.query<Lecture[], number>({\n      query: (pk) => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchResources: build.query<MediaResponse[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createResource: build.mutation<MediaResponse[], MediaRequest>({\n      query: (data) => {\n        const { course, ...body } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editLecture: build.mutation<Lecture, Partial<LectureRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteLecture: build.mutation<Lecture, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation\n} = coursesApi;\n"]},"metadata":{},"sourceType":"module"}