{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/ButtonDeprecatedBase/index.tsx\";\nimport cx from 'classnames';\nimport React from 'react';\nimport { omitProps } from '../utils/omitProps';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propKeys = ['children', 'className', 'href', 'link', 'onClick', 'target', 'rel'];\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality\n *\n * @example\n * import { Anchor } from '@codecademy/gamut';\n *\n * <Anchor variant=\"interface\">Button</Anchor>\n *\n */\nexport const ButtonDeprecatedBase = props => {\n  const {\n    href,\n    className,\n    link,\n    onClick,\n    target,\n    rel\n  } = props;\n  const {\n    as: As,\n    asProps = {},\n    ...restOfProps\n  } = props;\n  const propsToTransfer = omitProps(propKeys, restOfProps);\n  const classes = cx(styles.basicBtn, className, {\n    [styles.basicLink]: link\n  });\n  const defaultProps = { ...propsToTransfer,\n    className: classes,\n    onClick,\n    'data-btn': true\n  };\n\n  if (As) {\n    return /*#__PURE__*/_jsxDEV(As, { ...defaultProps,\n      ...asProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (href) {\n    // Check if this is a popup and and appropriate rel props if they don't exist (see https://web.dev/external-anchors-use-rel-noopener/)\n    const anchorProps = {\n      target,\n      rel: target === '_blank' && !rel ? 'noopener noreferrer' : rel\n    }; // Anchor tag receives children content from propsToTransfer\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n\n    return /*#__PURE__*/_jsxDEV(\"a\", { ...defaultProps,\n      ...anchorProps,\n      href: href\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  } // eslint-disable-next-line react/button-has-type\n\n\n  return /*#__PURE__*/_jsxDEV(\"button\", { ...defaultProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_c = ButtonDeprecatedBase;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonDeprecatedBase\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/ButtonDeprecatedBase/index.tsx"],"names":["cx","React","omitProps","styles","propKeys","ButtonDeprecatedBase","props","href","className","link","onClick","target","rel","as","As","asProps","restOfProps","propsToTransfer","classes","basicBtn","basicLink","defaultProps","anchorProps"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAA4C,OAA5C;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,QAAQ,GAAG,CACf,UADe,EAEf,WAFe,EAGf,MAHe,EAIf,MAJe,EAKf,SALe,EAMf,QANe,EAOf,KAPe,CAAjB;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,oBAAyD,GACpEC,KADuE,IAEpE;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,MAAlC;AAA0CC,IAAAA;AAA1C,MAAkDN,KAAxD;AACA,QAAM;AAAEO,IAAAA,EAAE,EAAEC,EAAN;AAAUC,IAAAA,OAAO,GAAG,EAApB;AAAwB,OAAGC;AAA3B,MAA2CV,KAAjD;AACA,QAAMW,eAAe,GAAGf,SAAS,CAACE,QAAD,EAAWY,WAAX,CAAjC;AAEA,QAAME,OAAO,GAAGlB,EAAE,CAACG,MAAM,CAACgB,QAAR,EAAkBX,SAAlB,EAA6B;AAC7C,KAACL,MAAM,CAACiB,SAAR,GAAoBX;AADyB,GAA7B,CAAlB;AAIA,QAAMY,YAAY,GAAG,EACnB,GAAGJ,eADgB;AAEnBT,IAAAA,SAAS,EAAEU,OAFQ;AAGnBR,IAAAA,OAHmB;AAInB,gBAAY;AAJO,GAArB;;AAOA,MAAII,EAAJ,EAAQ;AACN,wBAAO,QAAC,EAAD,OAAQO,YAAR;AAAA,SAA0BN;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIR,IAAJ,EAAU;AACR;AACA,UAAMe,WAAW,GAAG;AAClBX,MAAAA,MADkB;AAElBC,MAAAA,GAAG,EAAED,MAAM,KAAK,QAAX,IAAuB,CAACC,GAAxB,GAA8B,qBAA9B,GAAsDA;AAFzC,KAApB,CAFQ,CAOR;AACA;;AACA,wBAAO,kBAAOS,YAAP;AAAA,SAAyBC,WAAzB;AAAsC,MAAA,IAAI,EAAEf;AAA5C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GA9BE,CAgCH;;;AACA,sBAAO,uBAAYc;AAAZ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApCM;KAAMhB,oB","sourcesContent":["import cx from 'classnames';\nimport React, { HTMLProps, ReactNode } from 'react';\n\nimport { ChildComponentDescriptor } from '../typings/react';\nimport { omitProps } from '../utils/omitProps';\nimport styles from './styles.module.scss';\n\nconst propKeys = [\n  'children',\n  'className',\n  'href',\n  'link',\n  'onClick',\n  'target',\n  'rel',\n];\n\nexport type ButtonDeprecatedBaseProps = Omit<\n  HTMLProps<HTMLAnchorElement> & HTMLProps<HTMLButtonElement>,\n  'as' | 'size'\n> & {\n  /**\n   * Component type to wrap children with.\n   */\n  as?: ChildComponentDescriptor;\n  /**\n   * @remarks We would love to properly type this with generics, but cannot yet.\n   * @see https://github.com/Codecademy/client-modules/pull/270#discussion_r270917147\n   * @see https://github.com/Microsoft/TypeScript/issues/21048\n   */\n  asProps?: any;\n  children?: ReactNode;\n  className?: string;\n  href?: string;\n  target?: string;\n  rel?: string;\n  /**\n   * Variant that displays the button as an inline link element, but maintains its semantic meaning as a button.\n   */\n  link?: boolean;\n  /**\n   * @remarks\n   * Technically, this is only ever a button event *or* a link event.\n   * We '&' them together for ease of usage.\n   */\n  onClick?: (\n    event: React.MouseEvent<HTMLAnchorElement> &\n      React.MouseEvent<HTMLButtonElement>\n  ) => void;\n};\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality\n *\n * @example\n * import { Anchor } from '@codecademy/gamut';\n *\n * <Anchor variant=\"interface\">Button</Anchor>\n *\n */\n\nexport const ButtonDeprecatedBase: React.FC<ButtonDeprecatedBaseProps> = (\n  props\n) => {\n  const { href, className, link, onClick, target, rel } = props;\n  const { as: As, asProps = {}, ...restOfProps } = props;\n  const propsToTransfer = omitProps(propKeys, restOfProps);\n\n  const classes = cx(styles.basicBtn, className, {\n    [styles.basicLink]: link,\n  });\n\n  const defaultProps = {\n    ...propsToTransfer,\n    className: classes,\n    onClick,\n    'data-btn': true,\n  };\n\n  if (As) {\n    return <As {...defaultProps} {...asProps} />;\n  }\n\n  if (href) {\n    // Check if this is a popup and and appropriate rel props if they don't exist (see https://web.dev/external-anchors-use-rel-noopener/)\n    const anchorProps = {\n      target,\n      rel: target === '_blank' && !rel ? 'noopener noreferrer' : rel,\n    };\n\n    // Anchor tag receives children content from propsToTransfer\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    return <a {...defaultProps} {...anchorProps} href={href} />;\n  }\n\n  // eslint-disable-next-line react/button-has-type\n  return <button {...defaultProps} />;\n};\n"]},"metadata":{},"sourceType":"module"}