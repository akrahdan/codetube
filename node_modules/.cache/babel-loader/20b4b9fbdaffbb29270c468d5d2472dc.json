{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Animator = void 0;\n/**\r\n * Runs the regular gameplay loop of telling actors to animate.\r\n *\r\n * Each game \"tick\" is scheduled using `requestAnimationFrame`.\r\n * During each tick, each actor is told to `act` with the time elapsed.\r\n * If it indicates that it's out of bounds, it's removed from the actors array.\r\n */\n\nclass Animator {\n  constructor() {\n    /**\r\n     * Actors that have been added and not yet marked themselves as out of bounds.\r\n     */\n    this.actors = [];\n    /**\r\n     * Runs game logic for one tick.\r\n     *\r\n     * @param currentTime   Current time, in milliseconds since page load.\r\n     */\n\n    this.tick = currentTime => {\n      const timeElapsed = currentTime - this.previousTime;\n\n      for (let i = 0; i < this.actors.length; i += 1) {\n        const actor = this.actors[i];\n\n        if (actor.act(timeElapsed)) {\n          actor.dispose();\n          this.actors.splice(i, 1);\n          i -= 1;\n          continue;\n        }\n      }\n\n      if (this.actors.length === 0) {\n        return;\n      }\n\n      this.previousTime = currentTime;\n      requestAnimationFrame(this.tick);\n    };\n  }\n  /**\r\n   * Adds a new actor to act on each tick.\r\n   *\r\n   * @param actor   Newly created actor to add.\r\n   */\n\n\n  add(actor) {\n    this.actors.push(actor);\n  }\n  /**\r\n   * Starts gameplay and requests the first tick.\r\n   */\n\n\n  start() {\n    this.previousTime = performance.now();\n    requestAnimationFrame(this.tick);\n    return this;\n  }\n\n}\n\nexports.Animator = Animator;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/emojisplosion/src/animator.js"],"names":["Object","defineProperty","exports","value","Animator","constructor","actors","tick","currentTime","timeElapsed","previousTime","i","length","actor","act","dispose","splice","requestAnimationFrame","add","push","start","performance","now"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AACV;AACR;AACA;AACQ,SAAKC,MAAL,GAAc,EAAd;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,IAAL,GAAaC,WAAD,IAAiB;AACzB,YAAMC,WAAW,GAAGD,WAAW,GAAG,KAAKE,YAAvC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,MAAL,CAAYM,MAAhC,EAAwCD,CAAC,IAAI,CAA7C,EAAgD;AAC5C,cAAME,KAAK,GAAG,KAAKP,MAAL,CAAYK,CAAZ,CAAd;;AACA,YAAIE,KAAK,CAACC,GAAN,CAAUL,WAAV,CAAJ,EAA4B;AACxBI,UAAAA,KAAK,CAACE,OAAN;AACA,eAAKT,MAAL,CAAYU,MAAZ,CAAmBL,CAAnB,EAAsB,CAAtB;AACAA,UAAAA,CAAC,IAAI,CAAL;AACA;AACH;AACJ;;AACD,UAAI,KAAKL,MAAL,CAAYM,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B;AACH;;AACD,WAAKF,YAAL,GAAoBF,WAApB;AACAS,MAAAA,qBAAqB,CAAC,KAAKV,IAAN,CAArB;AACH,KAhBD;AAiBH;AACD;AACJ;AACA;AACA;AACA;;;AACIW,EAAAA,GAAG,CAACL,KAAD,EAAQ;AACP,SAAKP,MAAL,CAAYa,IAAZ,CAAiBN,KAAjB;AACH;AACD;AACJ;AACA;;;AACIO,EAAAA,KAAK,GAAG;AACJ,SAAKV,YAAL,GAAoBW,WAAW,CAACC,GAAZ,EAApB;AACAL,IAAAA,qBAAqB,CAAC,KAAKV,IAAN,CAArB;AACA,WAAO,IAAP;AACH;;AA5CU;;AA8CfL,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Animator = void 0;\r\n/**\r\n * Runs the regular gameplay loop of telling actors to animate.\r\n *\r\n * Each game \"tick\" is scheduled using `requestAnimationFrame`.\r\n * During each tick, each actor is told to `act` with the time elapsed.\r\n * If it indicates that it's out of bounds, it's removed from the actors array.\r\n */\r\nclass Animator {\r\n    constructor() {\r\n        /**\r\n         * Actors that have been added and not yet marked themselves as out of bounds.\r\n         */\r\n        this.actors = [];\r\n        /**\r\n         * Runs game logic for one tick.\r\n         *\r\n         * @param currentTime   Current time, in milliseconds since page load.\r\n         */\r\n        this.tick = (currentTime) => {\r\n            const timeElapsed = currentTime - this.previousTime;\r\n            for (let i = 0; i < this.actors.length; i += 1) {\r\n                const actor = this.actors[i];\r\n                if (actor.act(timeElapsed)) {\r\n                    actor.dispose();\r\n                    this.actors.splice(i, 1);\r\n                    i -= 1;\r\n                    continue;\r\n                }\r\n            }\r\n            if (this.actors.length === 0) {\r\n                return;\r\n            }\r\n            this.previousTime = currentTime;\r\n            requestAnimationFrame(this.tick);\r\n        };\r\n    }\r\n    /**\r\n     * Adds a new actor to act on each tick.\r\n     *\r\n     * @param actor   Newly created actor to add.\r\n     */\r\n    add(actor) {\r\n        this.actors.push(actor);\r\n    }\r\n    /**\r\n     * Starts gameplay and requests the first tick.\r\n     */\r\n    start() {\r\n        this.previousTime = performance.now();\r\n        requestAnimationFrame(this.tick);\r\n        return this;\r\n    }\r\n}\r\nexports.Animator = Animator;\r\n"]},"metadata":{},"sourceType":"script"}