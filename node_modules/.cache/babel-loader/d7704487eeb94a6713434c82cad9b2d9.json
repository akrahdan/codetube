{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Input.tsx\",\n    _s = $RefreshSig$();\n\nimport { AlertIcon, CheckCircledIcon } from '@codecademy/gamut-icons';\nimport { system } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, useState } from 'react';\nimport { Box, FlexBox } from '../Box';\nimport { conditionalStyles, conditionalStyleState, formBaseFieldStyles, formFieldFocusStyles, formFieldPaddingStyles, formFieldStyles } from './styles/shared-system-props';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**  We greatly prefer NOT to do this but ReactRecurly has some specific needs around focus-styles + padding that force us to export them seperately. If we ever stop using React-Recurly, this code will be ðŸ”ª.\n *tldr: Do not do this unless you have already talked to Web-Plat and have failed to find any alternate (and better) solutions. */\nexport const reactRecurlyFormFieldFocusStyles = system.css(formFieldFocusStyles);\nexport const reactRecurlyFormFieldPaddingStyles = system.css(formFieldPaddingStyles);\nexport const iFrameWrapper = styled.div`\n  ${formBaseFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n`;\nconst InputElement = styled.input`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n  padding-right: ${props => props.icon ? `2.3rem` : `initial`};\n`;\nconst inputStates = {\n  error: {\n    color: 'red',\n    icon: AlertIcon\n  },\n  valid: {\n    color: 'green',\n    icon: CheckCircledIcon\n  },\n  clean: {\n    color: 'gray-600',\n    icon: undefined\n  }\n};\n\nconst getInputState = (error, valid) => {\n  if (error) return 'error';\n  if (valid) return 'valid';\n  return 'clean';\n};\n\nexport const Input = /*#__PURE__*/forwardRef(_c = _s(({\n  error,\n  className,\n  id,\n  valid,\n  activated,\n  as: As,\n  icon: Icon,\n  ...rest\n}, ref) => {\n  _s();\n\n  const [activatedStyle, setActivatedStyle] = useState(false);\n  const {\n    color,\n    icon\n  } = inputStates[getInputState(Boolean(error), Boolean(valid))];\n  /*\n   * @remarks We would love to properly type this with generics, but, alas, we cannot yet. See comments on lines 45-47 for more detail.\n   */\n\n  const changeHandler = event => {\n    var _rest$onChange;\n\n    rest === null || rest === void 0 ? void 0 : (_rest$onChange = rest.onChange) === null || _rest$onChange === void 0 ? void 0 : _rest$onChange.call(rest, event);\n    setActivatedStyle(true);\n  };\n\n  const AsComponent = As || InputElement;\n  const ShownIcon = Icon || icon;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: rest.type === 'hidden' ? 'none' : undefined,\n    position: \"relative\",\n    textColor: color,\n    children: [/*#__PURE__*/_jsxDEV(AsComponent, { ...rest,\n      id: id || rest.htmlFor,\n      ref: ref,\n      variant: conditionalStyleState(Boolean(error), activatedStyle),\n      icon: error || valid || !!Icon,\n      className: className,\n      onChange: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), !!ShownIcon && /*#__PURE__*/_jsxDEV(FlexBox, {\n      pr: Icon ? 12 : 16,\n      position: \"absolute\",\n      alignItems: \"center\",\n      right: \"0\",\n      top: \"0\",\n      bottom: \"0\",\n      children: /*#__PURE__*/_jsxDEV(ShownIcon, {\n        size: Icon ? 24 : 16,\n        \"aria-hidden\": true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 7\n  }, this);\n}, \"aQGPdlrPEsLL0CeuByTZhdpRM3c=\"));\n_c2 = Input;\nInput.defaultProps = {\n  type: 'text'\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$forwardRef\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Form/Input.tsx"],"names":["AlertIcon","CheckCircledIcon","system","styled","React","forwardRef","useState","Box","FlexBox","conditionalStyles","conditionalStyleState","formBaseFieldStyles","formFieldFocusStyles","formFieldPaddingStyles","formFieldStyles","reactRecurlyFormFieldFocusStyles","css","reactRecurlyFormFieldPaddingStyles","iFrameWrapper","div","InputElement","input","props","icon","inputStates","error","color","valid","clean","undefined","getInputState","Input","className","id","activated","as","As","Icon","rest","ref","activatedStyle","setActivatedStyle","Boolean","changeHandler","event","onChange","AsComponent","ShownIcon","type","htmlFor","defaultProps"],"mappings":"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","sourcesContent":["import { AlertIcon, CheckCircledIcon } from '@codecademy/gamut-icons';\nimport { system } from '@codecademy/gamut-styles';\nimport styled, { StyledComponent } from '@emotion/styled';\nimport React, {\n  ChangeEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  useState,\n} from 'react';\n\nimport { Box, FlexBox } from '../Box';\nimport {\n  conditionalStyleProps,\n  conditionalStyles,\n  conditionalStyleState,\n  formBaseFieldStyles,\n  formFieldFocusStyles,\n  formFieldPaddingStyles,\n  formFieldStyles,\n} from './styles/shared-system-props';\n\nexport type InputProps = InputHTMLAttributes<HTMLInputElement> & {\n  id?: string;\n  className?: string;\n  error?: boolean;\n  /**\n   * [The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.\n   */\n  htmlFor?: string;\n  label?: string;\n  name?: string;\n  placeholder?: string;\n  required?: boolean;\n  type?: string;\n  valid?: boolean;\n  /**\n   * Allows Inputs to manage their own activated style state to account for some edge-cases.\n   */\n  activated?: boolean;\n};\nexport interface StyledInputProps extends InputProps {\n  icon?: boolean;\n}\n\n/*\n * @remarks We would love to properly type this with generics, but, alas, we cannot yet.\n * @see https://github.com/Codecademy/client-modules/pull/270#discussion_r270917147\n * @see https://github.com/Microsoft/TypeScript/issues/21048\n */\nexport interface InputWrapperProps extends InputProps {\n  as?: StyledComponent<StyledInputProps, React.PropsWithChildren<any>>;\n  /**\n   * A custom icon svg from gamut-icons.\n   */\n  icon?: typeof AlertIcon;\n}\n\n/**  We greatly prefer NOT to do this but ReactRecurly has some specific needs around focus-styles + padding that force us to export them seperately. If we ever stop using React-Recurly, this code will be ðŸ”ª.\n *tldr: Do not do this unless you have already talked to Web-Plat and have failed to find any alternate (and better) solutions. */\n\nexport const reactRecurlyFormFieldFocusStyles = system.css(\n  formFieldFocusStyles\n);\n\nexport const reactRecurlyFormFieldPaddingStyles = system.css(\n  formFieldPaddingStyles\n);\n\nexport const iFrameWrapper = styled.div<conditionalStyleProps>`\n  ${formBaseFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n`;\n\nconst InputElement = styled.input<StyledInputProps>`\n  ${formFieldStyles}\n  ${conditionalStyles}\n  text-indent: 0;\n  padding-right: ${(props) => (props.icon ? `2.3rem` : `initial`)};\n`;\n\nconst inputStates = {\n  error: {\n    color: 'red',\n    icon: AlertIcon,\n  },\n  valid: {\n    color: 'green',\n    icon: CheckCircledIcon,\n  },\n  clean: {\n    color: 'gray-600',\n    icon: undefined,\n  },\n} as const;\n\nconst getInputState = (error: boolean, valid: boolean) => {\n  if (error) return 'error';\n  if (valid) return 'valid';\n  return 'clean';\n};\n\nexport const Input = forwardRef<HTMLInputElement, InputWrapperProps>(\n  (\n    { error, className, id, valid, activated, as: As, icon: Icon, ...rest },\n    ref\n  ) => {\n    const [activatedStyle, setActivatedStyle] = useState(false);\n\n    const { color, icon } = inputStates[\n      getInputState(Boolean(error), Boolean(valid))\n    ];\n\n    /*\n     * @remarks We would love to properly type this with generics, but, alas, we cannot yet. See comments on lines 45-47 for more detail.\n     */\n\n    const changeHandler = (event: ChangeEvent<any>) => {\n      rest?.onChange?.(event);\n      setActivatedStyle(true);\n    };\n\n    const AsComponent = As || InputElement;\n    const ShownIcon = Icon || icon;\n\n    return (\n      <Box\n        display={rest.type === 'hidden' ? 'none' : undefined}\n        position=\"relative\"\n        textColor={color}\n      >\n        <AsComponent\n          {...rest}\n          id={id || rest.htmlFor}\n          ref={ref}\n          variant={conditionalStyleState(Boolean(error), activatedStyle)}\n          icon={error || valid || !!Icon}\n          className={className}\n          onChange={changeHandler}\n        />\n        {!!ShownIcon && (\n          <FlexBox\n            pr={Icon ? 12 : 16}\n            position=\"absolute\"\n            alignItems=\"center\"\n            right=\"0\"\n            top=\"0\"\n            bottom=\"0\"\n          >\n            <ShownIcon size={Icon ? 24 : 16} aria-hidden />\n          </FlexBox>\n        )}\n      </Box>\n    );\n  }\n);\n\nInput.defaultProps = {\n  type: 'text',\n};\n"]},"metadata":{},"sourceType":"module"}