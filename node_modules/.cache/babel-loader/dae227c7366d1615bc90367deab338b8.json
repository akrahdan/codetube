{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { coursesApi } from \"services/courses\";\nexport const initialState = {\n  experiences: null,\n  goals: null,\n  requirements: null\n};\nexport const targetSplice = createSlice({\n  name: \"target\",\n  initialState,\n  reducers: {// addSection: (state, action: PayloadAction<Section>) => {\n    //   state.sections.push(action.payload);\n    // },\n    // addLecture: (state, action: PayloadAction<Lecture>) => {\n    //   state.lectures = action.payload;\n    // },\n  },\n  extraReducers: builder => {\n    builder.addMatcher(coursesApi.endpoints.createExperience.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.experiences = payload;\n    }).addMatcher(coursesApi.endpoints.fetchExperience.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.experiences = payload;\n    }).addMatcher(coursesApi.endpoints.createGoal.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.goals = payload;\n    }).addMatcher(coursesApi.endpoints.fetchGoals.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.goals = payload;\n    }).addMatcher(coursesApi.endpoints.createRequirement.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.requirements = payload;\n    }).addMatcher(coursesApi.endpoints.fetchRequirements.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.requirements = payload;\n    }).addMatcher(coursesApi.endpoints.editExperience.matchFulfilled, (state, {\n      payload\n    }) => {\n      const experiences = state.experiences.map(experience => {\n        if (experience.id == payload.id) {\n          return payload;\n        }\n\n        return experience;\n      });\n      state.experiences = experiences;\n    }).addMatcher(coursesApi.endpoints.editGoal.matchFulfilled, (state, {\n      payload\n    }) => {\n      const goals = state.goals.map(goal => {\n        if (goal.id == payload.id) {\n          return payload;\n        }\n\n        return goal;\n      });\n      state.goals = goals;\n    }).addMatcher(coursesApi.endpoints.editRequirement.matchFulfilled, (state, {\n      payload\n    }) => {\n      const requirements = state.requirements.map(req => {\n        if (req.id == payload.id) {\n          return payload;\n        }\n\n        return req;\n      });\n      state.requirements = requirements;\n    }).addMatcher(coursesApi.endpoints.deleteExperience.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.experiences = state.experiences.filter(experience => experience.id != payload.id);\n    }).addMatcher(coursesApi.endpoints.deleteGoal.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.goals = state.goals.filter(goal => goal.id != payload.id);\n    }).addMatcher(coursesApi.endpoints.deleteRequirement.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.requirements = state.requirements.filter(req => req.id != payload.id);\n    });\n  }\n}); // export const { addSection, addLecture } = curriculumSplice.actions;\n\nexport default targetSplice.reducer;\nexport const selectExperience = state => state.target.experiences;\nexport const selectLectures = state => state.curriculum.lectures;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/target/targetSplice.ts"],"names":["createSlice","coursesApi","initialState","experiences","goals","requirements","targetSplice","name","reducers","extraReducers","builder","addMatcher","endpoints","createExperience","matchFulfilled","state","payload","fetchExperience","createGoal","fetchGoals","createRequirement","fetchRequirements","editExperience","map","experience","id","editGoal","goal","editRequirement","req","deleteExperience","filter","deleteGoal","deleteRequirement","reducer","selectExperience","target","selectLectures","curriculum","lectures"],"mappings":"AAAA,SAA2BA,WAA3B,QAA6D,kBAA7D;AACA,SAASC,UAAT,QAAoC,kBAApC;AAUA,OAAO,MAAMC,YAAyB,GAAG;AACvCC,EAAAA,WAAW,EAAE,IAD0B;AAEvCC,EAAAA,KAAK,EAAE,IAFgC;AAGvCC,EAAAA,YAAY,EAAE;AAHyB,CAAlC;AAMP,OAAO,MAAMC,YAAY,GAAGN,WAAW,CAAC;AACtCO,EAAAA,IAAI,EAAE,QADgC;AAEtCL,EAAAA,YAFsC;AAGtCM,EAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACA;AACA;AACA;AANQ,GAH4B;AAWtCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,UADH,CAEIV,UAAU,CAACW,SAAX,CAAqBC,gBAArB,CAAsCC,cAF1C,EAGI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACZ,WAAN,GAAoBa,OAApB;AACD,KALL,EAOGL,UAPH,CAQIV,UAAU,CAACW,SAAX,CAAqBK,eAArB,CAAqCH,cARzC,EASI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACZ,WAAN,GAAoBa,OAApB;AACD,KAXL,EAaGL,UAbH,CAcIV,UAAU,CAACW,SAAX,CAAqBM,UAArB,CAAgCJ,cAdpC,EAeI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACX,KAAN,GAAcY,OAAd;AACD,KAjBL,EAmBGL,UAnBH,CAoBIV,UAAU,CAACW,SAAX,CAAqBO,UAArB,CAAgCL,cApBpC,EAqBI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACX,KAAN,GAAcY,OAAd;AACD,KAvBL,EAyBGL,UAzBH,CA0BIV,UAAU,CAACW,SAAX,CAAqBQ,iBAArB,CAAuCN,cA1B3C,EA2BI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACV,YAAN,GAAqBW,OAArB;AACD,KA7BL,EA+BGL,UA/BH,CAgCIV,UAAU,CAACW,SAAX,CAAqBS,iBAArB,CAAuCP,cAhC3C,EAiCI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACV,YAAN,GAAqBW,OAArB;AACD,KAnCL,EAqCGL,UArCH,CAsCIV,UAAU,CAACW,SAAX,CAAqBU,cAArB,CAAoCR,cAtCxC,EAuCI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtB,YAAMb,WAAW,GAAGY,KAAK,CAACZ,WAAN,CAAkBoB,GAAlB,CAAuBC,UAAD,IAAgB;AACxD,YAAIA,UAAU,CAACC,EAAX,IAAiBT,OAAO,CAACS,EAA7B,EAAiC;AAC/B,iBAAOT,OAAP;AACD;;AACD,eAAOQ,UAAP;AACD,OALmB,CAApB;AAMAT,MAAAA,KAAK,CAACZ,WAAN,GAAoBA,WAApB;AACD,KA/CL,EAiDGQ,UAjDH,CAkDIV,UAAU,CAACW,SAAX,CAAqBc,QAArB,CAA8BZ,cAlDlC,EAmDI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtB,YAAMZ,KAAK,GAAGW,KAAK,CAACX,KAAN,CAAYmB,GAAZ,CAAiBI,IAAD,IAAU;AACtC,YAAIA,IAAI,CAACF,EAAL,IAAWT,OAAO,CAACS,EAAvB,EAA2B;AACzB,iBAAOT,OAAP;AACD;;AACD,eAAOW,IAAP;AACD,OALa,CAAd;AAMAZ,MAAAA,KAAK,CAACX,KAAN,GAAcA,KAAd;AACD,KA3DL,EA6DGO,UA7DH,CA8DIV,UAAU,CAACW,SAAX,CAAqBgB,eAArB,CAAqCd,cA9DzC,EA+DI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtB,YAAMX,YAAY,GAAGU,KAAK,CAACV,YAAN,CAAmBkB,GAAnB,CAAwBM,GAAD,IAAS;AACnD,YAAIA,GAAG,CAACJ,EAAJ,IAAUT,OAAO,CAACS,EAAtB,EAA0B;AACxB,iBAAOT,OAAP;AACD;;AACD,eAAOa,GAAP;AACD,OALoB,CAArB;AAMAd,MAAAA,KAAK,CAACV,YAAN,GAAqBA,YAArB;AACD,KAvEL,EAyEGM,UAzEH,CA0EIV,UAAU,CAACW,SAAX,CAAqBkB,gBAArB,CAAsChB,cA1E1C,EA2EI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACZ,WAAN,GAAoBY,KAAK,CAACZ,WAAN,CAAkB4B,MAAlB,CACjBP,UAAD,IAAgBA,UAAU,CAACC,EAAX,IAAiBT,OAAO,CAACS,EADvB,CAApB;AAGD,KA/EL,EAiFGd,UAjFH,CAkFIV,UAAU,CAACW,SAAX,CAAqBoB,UAArB,CAAgClB,cAlFpC,EAmFI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACX,KAAN,GAAcW,KAAK,CAACX,KAAN,CAAY2B,MAAZ,CAAoBJ,IAAD,IAAUA,IAAI,CAACF,EAAL,IAAWT,OAAO,CAACS,EAAhD,CAAd;AACD,KArFL,EAuFGd,UAvFH,CAwFIV,UAAU,CAACW,SAAX,CAAqBqB,iBAArB,CAAuCnB,cAxF3C,EAyFI,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtBD,MAAAA,KAAK,CAACV,YAAN,GAAqBU,KAAK,CAACV,YAAN,CAAmB0B,MAAnB,CAClBF,GAAD,IAASA,GAAG,CAACJ,EAAJ,IAAUT,OAAO,CAACS,EADR,CAArB;AAGD,KA7FL;AA+FD;AA3GqC,CAAD,CAAhC,C,CA8GP;;AAEA,eAAenB,YAAY,CAAC4B,OAA5B;AACA,OAAO,MAAMC,gBAAgB,GAAIpB,KAAD,IAAsBA,KAAK,CAACqB,MAAN,CAAajC,WAA5D;AACP,OAAO,MAAMkC,cAAc,GAAItB,KAAD,IAAsBA,KAAK,CAACuB,UAAN,CAAiBC,QAA9D","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { coursesApi, Lecture } from \"services/courses\";\nimport { AppThunk, RootState } from \"store\";\nimport type { Experience, Goal, Requirement } from \"services/courses\";\n\nexport interface TargetState {\n  experiences: Experience[];\n  goals: Goal[];\n  requirements: Requirement[];\n}\n\nexport const initialState: TargetState = {\n  experiences: null,\n  goals: null,\n  requirements: null,\n};\n\nexport const targetSplice = createSlice({\n  name: \"target\",\n  initialState,\n  reducers: {\n    // addSection: (state, action: PayloadAction<Section>) => {\n    //   state.sections.push(action.payload);\n    // },\n    // addLecture: (state, action: PayloadAction<Lecture>) => {\n    //   state.lectures = action.payload;\n    // },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addMatcher(\n        coursesApi.endpoints.createExperience.matchFulfilled,\n        (state, { payload }) => {\n          state.experiences = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.fetchExperience.matchFulfilled,\n        (state, { payload }) => {\n          state.experiences = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.createGoal.matchFulfilled,\n        (state, { payload }) => {\n          state.goals = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.fetchGoals.matchFulfilled,\n        (state, { payload }) => {\n          state.goals = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.createRequirement.matchFulfilled,\n        (state, { payload }) => {\n          state.requirements = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.fetchRequirements.matchFulfilled,\n        (state, { payload }) => {\n          state.requirements = payload;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.editExperience.matchFulfilled,\n        (state, { payload }) => {\n          const experiences = state.experiences.map((experience) => {\n            if (experience.id == payload.id) {\n              return payload;\n            }\n            return experience;\n          });\n          state.experiences = experiences;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.editGoal.matchFulfilled,\n        (state, { payload }) => {\n          const goals = state.goals.map((goal) => {\n            if (goal.id == payload.id) {\n              return payload;\n            }\n            return goal;\n          });\n          state.goals = goals;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.editRequirement.matchFulfilled,\n        (state, { payload }) => {\n          const requirements = state.requirements.map((req) => {\n            if (req.id == payload.id) {\n              return payload;\n            }\n            return req;\n          });\n          state.requirements = requirements;\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.deleteExperience.matchFulfilled,\n        (state, { payload }) => {\n          state.experiences = state.experiences.filter(\n            (experience) => experience.id != payload.id\n          );\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.deleteGoal.matchFulfilled,\n        (state, { payload }) => {\n          state.goals = state.goals.filter((goal) => goal.id != payload.id);\n        }\n      )\n      .addMatcher(\n        coursesApi.endpoints.deleteRequirement.matchFulfilled,\n        (state, { payload }) => {\n          state.requirements = state.requirements.filter(\n            (req) => req.id != payload.id\n          );\n        }\n      );\n  },\n});\n\n// export const { addSection, addLecture } = curriculumSplice.actions;\n\nexport default targetSplice.reducer;\nexport const selectExperience = (state: RootState) => state.target.experiences;\nexport const selectLectures = (state: RootState) => state.curriculum.lectures;\n"]},"metadata":{},"sourceType":"module"}