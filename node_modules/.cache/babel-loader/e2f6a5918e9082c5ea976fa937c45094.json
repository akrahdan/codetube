{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport { coursesApi } from \"services/courses\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nimport playerReducer from 'state/player/playerSlice';\nimport curriculumSplice from \"state/curriculum/currriculumSplice\";\nconst {\n  middleware: routerMiddleWare,\n  enhancer: routerEnhancer,\n  initialDispatch,\n  reducer: location\n} = connectRoutes(routesMap, {\n  querySerializer: queryString,\n  initialDispatch: false,\n  scrollTop: true\n});\nexport const store = configureStore({\n  reducer: {\n    location: location,\n    auth: authReducer,\n    modal: modalReducer,\n    player: playerReducer,\n    curriculum: curriculumSplice,\n    [authApi.reducerPath]: authApi.reducer,\n    [coursesApi.reducerPath]: coursesApi.reducer,\n    [projectApi.reducerPath]: projectApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  }).concat(authApi.middleware, routerMiddleWare),\n  enhancers: defaultEnhancers => defaultEnhancers.concat(routerEnhancer)\n});\ninitialDispatch();","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/store/index.ts"],"names":["configureStore","connectRoutes","queryString","routesMap","authApi","projectApi","coursesApi","modalReducer","authReducer","playerReducer","curriculumSplice","middleware","routerMiddleWare","enhancer","routerEnhancer","initialDispatch","reducer","location","querySerializer","scrollTop","store","auth","modal","player","curriculum","reducerPath","getDefaultMiddleware","serializableCheck","concat","enhancers","defaultEnhancers"],"mappings":"AAAA,SAASA,cAAT,QAA0E,kBAA1E;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,eAA1B;AAGA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAQC,gBAAR,MAA+B,oCAA/B;AAgBA,MAAM;AAAEC,EAAAA,UAAU,EAAEC,gBAAd;AAAgCC,EAAAA,QAAQ,EAAEC,cAA1C;AAA0DC,EAAAA,eAA1D;AAA2EC,EAAAA,OAAO,EAAEC;AAApF,IAAgGhB,aAAa,CAACE,SAAD,EAAY;AAC3He,EAAAA,eAAe,EAAEhB,WAD0G;AAE3Ha,EAAAA,eAAe,EAAE,KAF0G;AAG3HI,EAAAA,SAAS,EAAE;AAHgH,CAAZ,CAAnH;AAMA,OAAO,MAAMC,KAAK,GAAGpB,cAAc,CAAC;AAChCgB,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAEA,QADL;AAELI,IAAAA,IAAI,EAAEb,WAFD;AAGLc,IAAAA,KAAK,EAAEf,YAHF;AAILgB,IAAAA,MAAM,EAAEd,aAJH;AAKLe,IAAAA,UAAU,EAAEd,gBALP;AAML,KAACN,OAAO,CAACqB,WAAT,GAAuBrB,OAAO,CAACY,OAN1B;AAOL,KAACV,UAAU,CAACmB,WAAZ,GAA0BnB,UAAU,CAACU,OAPhC;AAQL,KAACX,UAAU,CAACoB,WAAZ,GAA0BpB,UAAU,CAACW;AARhC,GADuB;AAWhCL,EAAAA,UAAU,EAAGe,oBAAD,IACZA,oBAAoB,CAAC;AACjBC,IAAAA,iBAAiB,EAAE;AADF,GAAD,CAApB,CAEGC,MAFH,CAEUxB,OAAO,CAACO,UAFlB,EAE8BC,gBAF9B,CAZgC;AAehCiB,EAAAA,SAAS,EAAGC,gBAAD,IAAsBA,gBAAgB,CAACF,MAAjB,CAAwBd,cAAxB;AAfD,CAAD,CAA5B;AAiBPC,eAAe","sourcesContent":["import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { connectRoutes } from 'redux-first-router';\nimport queryString from 'query-string';\nimport { routesMap } from 'portal/routes'\nimport rootReducer, { reduceInitialState } from 'portal/state/reducers';\nimport { SiteState } from 'state/types';\nimport { authApi } from \"services/auth\";\nimport { projectApi } from \"services/projects\";\nimport { coursesApi } from \"services/courses\";\nimport modalReducer from 'state/modals/modalSlice';\nimport authReducer from 'state/auth/authSlice';\nimport playerReducer from 'state/player/playerSlice';\nimport  curriculumSplice  from \"state/curriculum/currriculumSplice\";\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nconst { middleware: routerMiddleWare, enhancer: routerEnhancer, initialDispatch, reducer: location} = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialDispatch: false,\n    scrollTop: true,\n});\n\nexport const store = configureStore({\n    reducer: {\n        location: location,\n        auth: authReducer,\n        modal: modalReducer,\n        player: playerReducer,\n        curriculum: curriculumSplice,\n        [authApi.reducerPath]: authApi.reducer,\n        [coursesApi.reducerPath]: coursesApi.reducer,\n        [projectApi.reducerPath]: projectApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware({\n        serializableCheck: false\n    }).concat(authApi.middleware, routerMiddleWare),\n    enhancers: (defaultEnhancers) => defaultEnhancers.concat(routerEnhancer)\n})\ninitialDispatch()\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n ReturnType, \n RootState,\n unknown,\n Action<string>\n >;"]},"metadata":{},"sourceType":"module"}