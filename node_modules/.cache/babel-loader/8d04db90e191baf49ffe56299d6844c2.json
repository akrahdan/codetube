{"ast":null,"code":"import options from \"../options.js\";\nimport strings from \"../assets/strings.js\";\nexport default function createGameScene({\n  on,\n  phaser: Phaser\n}) {\n  return class GameScene extends Phaser.Scene {\n    constructor() {\n      super({\n        key: \"GameScene\"\n      });\n      this.isPaused = false;\n    }\n\n    preload() {\n      this.load.image(\"platform\", \"https://static-assets.codecademy.com/assets/40phaser/platform-test.png\");\n      this.load.spritesheet(\"codey\", \"https://static-assets.codecademy.com/assets/40phaser/codey_sprite.png\", {\n        frameWidth: 72,\n        frameHeight: 72\n      });\n    }\n\n    create() {\n      this.scores = {\n        currScore: 0,\n        highscore: parseInt(localStorage.getItem(\"highscore\"), 10) || 0\n      };\n      this.keys = {\n        spacebar: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE),\n        pKey: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P)\n      }; // Running animation\n\n      this.anims.create({\n        key: \"run\",\n        frames: this.anims.generateFrameNumbers(\"codey\", {\n          start: 0,\n          end: 3\n        }),\n        frameRate: 10,\n        repeat: -1\n      }); // jumping animation\n\n      this.anims.create({\n        key: \"jump\",\n        frames: this.anims.generateFrameNumbers(\"codey\", {\n          start: 3,\n          end: 5\n        }),\n        frameRate: 10,\n        repeat: -1\n      });\n      this.platforms = this.physics.add.group({\n        allowGravity: false,\n        immovable: true\n      });\n\n      for (let i = 0; i < 5; i += 1) {\n        this.addPlatform(110 * i);\n      }\n\n      this.addPlatform(125 * 5);\n      this.addPlatform(135 * 6);\n      this.addPlatform(140 * 7);\n      this.player = this.physics.add.sprite(100, this.game.config.height - 100, \"codey\");\n      this.player.body.checkCollision.up = false;\n      this.player.body.checkCollision.left = false;\n      this.player.body.checkCollision.right = false;\n      this.physics.add.collider(this.player, this.platforms);\n      this.physics.add.collider(this.platforms, this.platforms, (s1, s2) => {\n        const b1 = s1.body;\n        const b2 = s2.body;\n\n        if (b1.x > b2.x) {\n          b1.y -= 60;\n        } else {\n          b2.y -= 60;\n        }\n      }); // add the tap/click input\n\n      this.input.on(\"pointerdown\", this.jump, this);\n      this.scoreText = this.add.text(16, 16, strings.score(0), {\n        fontFamily: options.fontFamily,\n        fontSize: options.mediumFontSize,\n        fill: options.blackText\n      }); // add pause button with text\n\n      this.pauseButton = this.add.rectangle(this.game.config.width - 70, 25, 100, 30, options.purpleBox);\n      this.pauseButton.setInteractive();\n      this.pauseButton.text = this.add.text(this.game.config.width - 100, 14, strings.pause, {\n        fontFamily: options.fontFamily,\n        fontSize: options.smallFontSize,\n        fill: options.whiteText\n      });\n      this.pauseButton.on(\"pointerup\", () => {\n        this.togglePause();\n      });\n    }\n\n    addPlatform(platformX = this.game.config.width) {\n      const platformY = this.game.config.height - 50;\n      const platform = this.physics.add.sprite(platformX, platformY, \"platform\");\n      this.platforms.add(platform);\n    }\n\n    jump() {\n      if (this.player.body.touching.down) {\n        this.player.body.setAccelerationY(1000);\n        this.player.setVelocityY(-options.jumpForce);\n      }\n\n      on.game(\"jump\");\n    }\n\n    update() {\n      const newScore = Math.floor(this.scores.currScore);\n\n      if (!this.isPaused) {\n        this.scores.currScore += 0.2;\n        this.scoreText.setText(strings.score(newScore));\n\n        if (Phaser.Input.Keyboard.JustDown(this.keys.spacebar)) {\n          this.jump();\n        }\n\n        if (!this.player.body.touching.down) {\n          this.player.anims.play(\"jump\", true);\n        } else {\n          this.player.anims.play(\"run\", true);\n        }\n\n        if (this.player.y > this.game.config.height) {\n          this.scene.stop(\"GameScene\");\n          this.scores.highscore = Math.max(this.scores.highscore, this.scores.currScore);\n          localStorage.setItem(\"highscore\", Math.floor(this.scores.highscore));\n          on.game(\"death\");\n          this.scene.start(\"EndScene\", {\n            score: Math.floor(this.scores.currScore),\n            highscore: Math.floor(this.scores.highscore)\n          });\n        }\n\n        this.platforms.children.iterate(this.updatePlatforms, this);\n      }\n\n      if (Phaser.Input.Keyboard.JustDown(this.keys.pKey)) {\n        this.togglePause();\n      }\n\n      const ariaLabel = [strings.score(newScore), this.isPaused ? strings.pressPToUnpause : strings.pressPToPause, strings.pressSpaceOrTap].join(\". \");\n\n      if (ariaLabel !== this.ariaLabel) {\n        this.ariaLabel = ariaLabel;\n        this.game.canvas.setAttribute(\"aria-label\", ariaLabel);\n      }\n    }\n\n    togglePause() {\n      if (this.isPaused) {\n        on.game(\"unpause\");\n        this.pauseButton.text.setText(strings.pause);\n        this.pauseButton.text.x += 6;\n        this.physics.resume();\n        this.anims.resumeAll();\n      } else {\n        on.game(\"pause\");\n        this.pauseButton.text.setText(strings.unpause);\n        this.pauseButton.text.x -= 6;\n        this.physics.pause();\n        this.anims.pauseAll();\n      }\n\n      this.isPaused = !this.isPaused;\n    }\n\n    updatePlatforms(platform) {\n      if (platform.x < -platform.width) {\n        const randDiff = Math.floor(Math.random() * 250);\n        platform.x = this.game.config.width + randDiff;\n      } else {\n        options.platformSpeedIncrement = this.scores.currScore / 500;\n        platform.x -= options.platformSpeed * (1 + options.platformSpeedIncrement);\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/40phaser/src/scenes/game.js"],"names":["options","strings","createGameScene","on","phaser","Phaser","GameScene","Scene","constructor","key","isPaused","preload","load","image","spritesheet","frameWidth","frameHeight","create","scores","currScore","highscore","parseInt","localStorage","getItem","keys","spacebar","input","keyboard","addKey","Input","Keyboard","KeyCodes","SPACE","pKey","P","anims","frames","generateFrameNumbers","start","end","frameRate","repeat","platforms","physics","add","group","allowGravity","immovable","i","addPlatform","player","sprite","game","config","height","body","checkCollision","up","left","right","collider","s1","s2","b1","b2","x","y","jump","scoreText","text","score","fontFamily","fontSize","mediumFontSize","fill","blackText","pauseButton","rectangle","width","purpleBox","setInteractive","pause","smallFontSize","whiteText","togglePause","platformX","platformY","platform","touching","down","setAccelerationY","setVelocityY","jumpForce","update","newScore","Math","floor","setText","JustDown","play","scene","stop","max","setItem","children","iterate","updatePlatforms","ariaLabel","pressPToUnpause","pressPToPause","pressSpaceOrTap","join","canvas","setAttribute","resume","resumeAll","unpause","pauseAll","randDiff","random","platformSpeedIncrement","platformSpeed"],"mappings":"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","sourcesContent":["import options from \"../options.js\";\nimport strings from \"../assets/strings.js\";\n\nexport default function createGameScene({ on, phaser: Phaser }) {\n    return class GameScene extends Phaser.Scene {\n        constructor() {\n            super({ key: \"GameScene\" });\n            this.isPaused = false;\n        }\n\n        preload() {\n            this.load.image(\n                \"platform\",\n                \"https://static-assets.codecademy.com/assets/40phaser/platform-test.png\",\n            );\n            this.load.spritesheet(\n                \"codey\",\n                \"https://static-assets.codecademy.com/assets/40phaser/codey_sprite.png\",\n                {\n                    frameWidth: 72,\n                    frameHeight: 72,\n                },\n            );\n        }\n\n        create() {\n            this.scores = {\n                currScore: 0,\n                highscore: parseInt(localStorage.getItem(\"highscore\"), 10) || 0,\n            };\n\n            this.keys = {\n                spacebar: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE),\n                pKey: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P),\n            };\n\n            // Running animation\n            this.anims.create({\n                key: \"run\",\n                frames: this.anims.generateFrameNumbers(\"codey\", { start: 0, end: 3 }),\n                frameRate: 10,\n                repeat: -1,\n            });\n\n            // jumping animation\n            this.anims.create({\n                key: \"jump\",\n                frames: this.anims.generateFrameNumbers(\"codey\", { start: 3, end: 5 }),\n                frameRate: 10,\n                repeat: -1,\n            });\n\n            this.platforms = this.physics.add.group({\n                allowGravity: false,\n                immovable: true,\n            });\n\n            for (let i = 0; i < 5; i += 1) {\n                this.addPlatform(110 * i);\n            }\n\n            this.addPlatform(125 * 5);\n            this.addPlatform(135 * 6);\n            this.addPlatform(140 * 7);\n\n            this.player = this.physics.add.sprite(100, this.game.config.height - 100, \"codey\");\n\n            this.player.body.checkCollision.up = false;\n            this.player.body.checkCollision.left = false;\n            this.player.body.checkCollision.right = false;\n            this.physics.add.collider(this.player, this.platforms);\n            this.physics.add.collider(this.platforms, this.platforms, (s1, s2) => {\n                const b1 = s1.body;\n                const b2 = s2.body;\n\n                if (b1.x > b2.x) {\n                    b1.y -= 60;\n                } else {\n                    b2.y -= 60;\n                }\n            });\n\n            // add the tap/click input\n            this.input.on(\"pointerdown\", this.jump, this);\n\n            this.scoreText = this.add.text(16, 16, strings.score(0), {\n                fontFamily: options.fontFamily,\n                fontSize: options.mediumFontSize,\n                fill: options.blackText,\n            });\n\n            // add pause button with text\n            this.pauseButton = this.add.rectangle(\n                this.game.config.width - 70,\n                25,\n                100,\n                30,\n                options.purpleBox,\n            );\n            this.pauseButton.setInteractive();\n\n            this.pauseButton.text = this.add.text(this.game.config.width - 100, 14, strings.pause, {\n                fontFamily: options.fontFamily,\n                fontSize: options.smallFontSize,\n                fill: options.whiteText,\n            });\n\n            this.pauseButton.on(\"pointerup\", () => {\n                this.togglePause();\n            });\n        }\n\n        addPlatform(platformX = this.game.config.width) {\n            const platformY = this.game.config.height - 50;\n            const platform = this.physics.add.sprite(platformX, platformY, \"platform\");\n\n            this.platforms.add(platform);\n        }\n\n        jump() {\n            if (this.player.body.touching.down) {\n                this.player.body.setAccelerationY(1000);\n                this.player.setVelocityY(-options.jumpForce);\n            }\n            on.game(\"jump\");\n        }\n\n        update() {\n            const newScore = Math.floor(this.scores.currScore);\n\n            if (!this.isPaused) {\n                this.scores.currScore += 0.2;\n                this.scoreText.setText(strings.score(newScore));\n\n                if (Phaser.Input.Keyboard.JustDown(this.keys.spacebar)) {\n                    this.jump();\n                }\n                if (!this.player.body.touching.down) {\n                    this.player.anims.play(\"jump\", true);\n                } else {\n                    this.player.anims.play(\"run\", true);\n                }\n                if (this.player.y > this.game.config.height) {\n                    this.scene.stop(\"GameScene\");\n\n                    this.scores.highscore = Math.max(this.scores.highscore, this.scores.currScore);\n                    localStorage.setItem(\"highscore\", Math.floor(this.scores.highscore));\n\n                    on.game(\"death\");\n                    this.scene.start(\"EndScene\", {\n                        score: Math.floor(this.scores.currScore),\n                        highscore: Math.floor(this.scores.highscore),\n                    });\n                }\n                this.platforms.children.iterate(this.updatePlatforms, this);\n            }\n            if (Phaser.Input.Keyboard.JustDown(this.keys.pKey)) {\n                this.togglePause();\n            }\n\n            const ariaLabel = [\n                strings.score(newScore),\n                this.isPaused ? strings.pressPToUnpause : strings.pressPToPause,\n                strings.pressSpaceOrTap,\n            ].join(\". \");\n\n            if (ariaLabel !== this.ariaLabel) {\n                this.ariaLabel = ariaLabel;\n                this.game.canvas.setAttribute(\"aria-label\", ariaLabel);\n            }\n        }\n\n        togglePause() {\n            if (this.isPaused) {\n                on.game(\"unpause\");\n                this.pauseButton.text.setText(strings.pause);\n                this.pauseButton.text.x += 6;\n                this.physics.resume();\n                this.anims.resumeAll();\n            } else {\n                on.game(\"pause\");\n                this.pauseButton.text.setText(strings.unpause);\n                this.pauseButton.text.x -= 6;\n                this.physics.pause();\n                this.anims.pauseAll();\n            }\n            this.isPaused = !this.isPaused;\n        }\n\n        updatePlatforms(platform) {\n            if (platform.x < -platform.width) {\n                const randDiff = Math.floor(Math.random() * 250);\n                platform.x = this.game.config.width + randDiff;\n            } else {\n                options.platformSpeedIncrement = this.scores.currScore / 500;\n                platform.x -= options.platformSpeed * (1 + options.platformSpeedIncrement);\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}