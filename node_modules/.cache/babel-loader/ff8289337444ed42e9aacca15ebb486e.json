{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n\n  return receiver;\n}\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\nimport { mapValues, merge } from 'lodash';\nimport { flattenScale } from '../utils/flattenScale';\nimport { serializeTokens } from '../utils/serializeTokens';\n\nvar _theme = _classPrivateFieldLooseKey(\"theme\");\n\nvar ThemeBuilder = /*#__PURE__*/function () {\n  function ThemeBuilder(baseTheme) {\n    _classCallCheck(this, ThemeBuilder);\n\n    Object.defineProperty(this, _theme, {\n      writable: true,\n      value: {}\n    });\n    _classPrivateFieldLooseBase(this, _theme)[_theme] = baseTheme;\n  }\n  /**\n   *\n   * @param key A key of the current theme to transform into CSS Variables and Variable References\n   * @example .createScaleVariables('fontSize')\n   */\n\n\n  _createClass(ThemeBuilder, [{\n    key: \"createScaleVariables\",\n    value: function createScaleVariables(key) {\n      var _merge;\n\n      var _serializeTokens = serializeTokens(_classPrivateFieldLooseBase(this, _theme)[_theme][key], key, _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          variables = _serializeTokens.variables,\n          tokens = _serializeTokens.tokens;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], (_merge = {}, _defineProperty(_merge, key, tokens), _defineProperty(_merge, \"_variables\", {\n        root: variables\n      }), _defineProperty(_merge, \"_tokens\", _defineProperty({}, key, _classPrivateFieldLooseBase(this, _theme)[_theme][key])), _merge));\n      return this;\n    }\n    /**\n     *\n     * @param colors A map of color tokens to add to the theme. These tokens are immediately converted to CSS Variables `--color-${key}`.\n     * @example .addColors({ navy: 'navy', hyper: 'purple' })\n     */\n\n  }, {\n    key: \"addColors\",\n    value: function addColors(colors) {\n      var flatColors = flattenScale(colors);\n\n      var _serializeTokens2 = serializeTokens(flatColors, 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          variables = _serializeTokens2.variables,\n          tokens = _serializeTokens2.tokens;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        colors: tokens,\n        _variables: {\n          root: variables\n        },\n        _tokens: {\n          colors: flatColors\n        }\n      });\n      return this;\n    }\n    /**\n     *\n     * @param initialMode A key of the object passed for modes.  This sets the default state for the theme and transforms the correct variables.\n     * @param modes A map of color modes with keys of each possible mode with a value of alias to color keys.  This must be called after `addColors`\n     * @example .addColorModes('light', { light: { primary: 'hyper' }, { dark: { primary: 'navy' } } })\n     */\n\n  }, {\n    key: \"addColorModes\",\n    value: function addColorModes(initialMode, modes) {\n      var _classPrivateFieldLoo,\n          _this = this; // This guarantees that the final merged color modes are used when setting the default variables\n\n\n      var merged = merge({}, (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _theme)[_theme]) === null || _classPrivateFieldLoo === void 0 ? void 0 : _classPrivateFieldLoo.modes, modes);\n\n      var _serializeTokens3 = serializeTokens(mapValues(flattenScale(merged[initialMode]), function (color) {\n        return _classPrivateFieldLooseBase(_this, _theme)[_theme].colors[color];\n      }), 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          tokens = _serializeTokens3.tokens,\n          variables = _serializeTokens3.variables;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        colors: tokens,\n        modes: mapValues(modes, function (mode) {\n          return flattenScale(mode);\n        }),\n        mode: initialMode,\n        _getColorValue: function _getColorValue(color) {\n          var _classPrivateFieldLoo2, _classPrivateFieldLoo3;\n\n          return (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens) === null || _classPrivateFieldLoo2 === void 0 ? void 0 : (_classPrivateFieldLoo3 = _classPrivateFieldLoo2.colors) === null || _classPrivateFieldLoo3 === void 0 ? void 0 : _classPrivateFieldLoo3[color];\n        },\n        _variables: {\n          mode: variables\n        },\n        _tokens: {\n          modes: mapValues(modes, function (mode) {\n            var modeColors = flattenScale(mode);\n            return mapValues(modeColors, function (color) {\n              return _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens.colors[color];\n            });\n          })\n        }\n      });\n      return this;\n    }\n    /**\n     *\n     * @param key A new key of theme\n     * @param createScale A function that accepts the current theme and returns a new object of scale values.\n     * @example .addScale('fonts', () => ({ basic: 'Gotham', cool: 'Wingdings' }))\n     */\n\n  }, {\n    key: \"addScale\",\n    value: function addScale(key, createScale) {\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, flattenScale(createScale(_classPrivateFieldLooseBase(this, _theme)[_theme]))));\n      return this;\n    }\n    /**\n     *\n     * @param key A current key of theme to be updated with new or computed values\n     * @param updateFn A function that accepts an argument of the current values at the specified keys an returns a map of new values to merge.\n     * @example .updateScale('fonts', ({ basic }) => ({ basicFallback: `{basic}, Montserrat` }))\n     */\n\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(key, updateFn) {\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, updateFn(_classPrivateFieldLooseBase(this, _theme)[_theme][key])));\n      return this;\n    }\n    /**\n     * This finalizes the theme build and returns the final theme and variables to be provided.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      return merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        _variables: {},\n        _tokens: {}\n      });\n    }\n  }]);\n\n  return ThemeBuilder;\n}();\n\nexport function createTheme(base) {\n  return new ThemeBuilder(base);\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/node_modules/@codecademy/variance/dist/createTheme/createTheme.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","_createClass","protoProps","staticProps","prototype","_classPrivateFieldLooseBase","receiver","privateKey","hasOwnProperty","call","id","_classPrivateFieldLooseKey","name","mapValues","merge","flattenScale","serializeTokens","_theme","ThemeBuilder","baseTheme","createScaleVariables","_merge","_serializeTokens","variables","tokens","root","addColors","colors","flatColors","_serializeTokens2","_variables","_tokens","addColorModes","initialMode","modes","_classPrivateFieldLoo","_this","merged","_serializeTokens3","color","mode","_getColorValue","_classPrivateFieldLoo2","_classPrivateFieldLoo3","modeColors","addScale","createScale","updateScale","updateFn","build","createTheme","base"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nimport { mapValues, merge } from 'lodash';\nimport { flattenScale } from '../utils/flattenScale';\nimport { serializeTokens } from '../utils/serializeTokens';\n\nvar _theme = _classPrivateFieldLooseKey(\"theme\");\n\nvar ThemeBuilder = /*#__PURE__*/function () {\n  function ThemeBuilder(baseTheme) {\n    _classCallCheck(this, ThemeBuilder);\n\n    Object.defineProperty(this, _theme, {\n      writable: true,\n      value: {}\n    });\n    _classPrivateFieldLooseBase(this, _theme)[_theme] = baseTheme;\n  }\n  /**\n   *\n   * @param key A key of the current theme to transform into CSS Variables and Variable References\n   * @example .createScaleVariables('fontSize')\n   */\n\n\n  _createClass(ThemeBuilder, [{\n    key: \"createScaleVariables\",\n    value: function createScaleVariables(key) {\n      var _merge;\n\n      var _serializeTokens = serializeTokens(_classPrivateFieldLooseBase(this, _theme)[_theme][key], key, _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          variables = _serializeTokens.variables,\n          tokens = _serializeTokens.tokens;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], (_merge = {}, _defineProperty(_merge, key, tokens), _defineProperty(_merge, \"_variables\", {\n        root: variables\n      }), _defineProperty(_merge, \"_tokens\", _defineProperty({}, key, _classPrivateFieldLooseBase(this, _theme)[_theme][key])), _merge));\n      return this;\n    }\n    /**\n     *\n     * @param colors A map of color tokens to add to the theme. These tokens are immediately converted to CSS Variables `--color-${key}`.\n     * @example .addColors({ navy: 'navy', hyper: 'purple' })\n     */\n\n  }, {\n    key: \"addColors\",\n    value: function addColors(colors) {\n      var flatColors = flattenScale(colors);\n\n      var _serializeTokens2 = serializeTokens(flatColors, 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          variables = _serializeTokens2.variables,\n          tokens = _serializeTokens2.tokens;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        colors: tokens,\n        _variables: {\n          root: variables\n        },\n        _tokens: {\n          colors: flatColors\n        }\n      });\n      return this;\n    }\n    /**\n     *\n     * @param initialMode A key of the object passed for modes.  This sets the default state for the theme and transforms the correct variables.\n     * @param modes A map of color modes with keys of each possible mode with a value of alias to color keys.  This must be called after `addColors`\n     * @example .addColorModes('light', { light: { primary: 'hyper' }, { dark: { primary: 'navy' } } })\n     */\n\n  }, {\n    key: \"addColorModes\",\n    value: function addColorModes(initialMode, modes) {\n      var _classPrivateFieldLoo,\n          _this = this;\n\n      // This guarantees that the final merged color modes are used when setting the default variables\n      var merged = merge({}, (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _theme)[_theme]) === null || _classPrivateFieldLoo === void 0 ? void 0 : _classPrivateFieldLoo.modes, modes);\n\n      var _serializeTokens3 = serializeTokens(mapValues(flattenScale(merged[initialMode]), function (color) {\n        return _classPrivateFieldLooseBase(_this, _theme)[_theme].colors[color];\n      }), 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),\n          tokens = _serializeTokens3.tokens,\n          variables = _serializeTokens3.variables;\n\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        colors: tokens,\n        modes: mapValues(modes, function (mode) {\n          return flattenScale(mode);\n        }),\n        mode: initialMode,\n        _getColorValue: function _getColorValue(color) {\n          var _classPrivateFieldLoo2, _classPrivateFieldLoo3;\n\n          return (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens) === null || _classPrivateFieldLoo2 === void 0 ? void 0 : (_classPrivateFieldLoo3 = _classPrivateFieldLoo2.colors) === null || _classPrivateFieldLoo3 === void 0 ? void 0 : _classPrivateFieldLoo3[color];\n        },\n        _variables: {\n          mode: variables\n        },\n        _tokens: {\n          modes: mapValues(modes, function (mode) {\n            var modeColors = flattenScale(mode);\n            return mapValues(modeColors, function (color) {\n              return _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens.colors[color];\n            });\n          })\n        }\n      });\n      return this;\n    }\n    /**\n     *\n     * @param key A new key of theme\n     * @param createScale A function that accepts the current theme and returns a new object of scale values.\n     * @example .addScale('fonts', () => ({ basic: 'Gotham', cool: 'Wingdings' }))\n     */\n\n  }, {\n    key: \"addScale\",\n    value: function addScale(key, createScale) {\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, flattenScale(createScale(_classPrivateFieldLooseBase(this, _theme)[_theme]))));\n      return this;\n    }\n    /**\n     *\n     * @param key A current key of theme to be updated with new or computed values\n     * @param updateFn A function that accepts an argument of the current values at the specified keys an returns a map of new values to merge.\n     * @example .updateScale('fonts', ({ basic }) => ({ basicFallback: `{basic}, Montserrat` }))\n     */\n\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(key, updateFn) {\n      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, updateFn(_classPrivateFieldLooseBase(this, _theme)[_theme][key])));\n      return this;\n    }\n    /**\n     * This finalizes the theme build and returns the final theme and variables to be provided.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      return merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {\n        _variables: {},\n        _tokens: {}\n      });\n    }\n  }]);\n\n  return ThemeBuilder;\n}();\n\nexport function createTheme(base) {\n  return new ThemeBuilder(base);\n}"]},"metadata":{},"sourceType":"module"}