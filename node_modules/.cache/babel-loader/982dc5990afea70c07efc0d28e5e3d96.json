{"ast":null,"code":"import Uri from 'jsuri';\nimport { cfdata } from 'libs/cfdata';\nimport { userAttributes } from 'libs/userAttributes';\n/**\n * superagent csrf plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {csrf} from '~/libs/superagent-auth';\n *\n * request\n *      .use(csrf)\n *\n */\n\nexport function csrf(request) {\n  const authToken = cfdata.get('authenticity_token');\n\n  if (authToken) {\n    request.set('X-CSRF-Token', authToken);\n  }\n}\n/**\n * superagent userAuth plugin\n *\n * sets the user auth token param\n *\n * general usage:\n * import {userAuth} from '~/libs/superagent-auth';\n *\n * request\n *   .use(userAuth)\n *\n */\n\nexport function userAuth(request) {\n  const userAuthToken = userAttributes.authenticationToken();\n\n  if (userAuthToken) {\n    const uri = new Uri(request.url).addQueryParam('authentication_token', userAuthToken);\n    request.url = uri.toString();\n  }\n\n  if (window.CFDATA.current_user) {\n    request.set('X-Auth-Token', window.CFDATA.current_user.authentication_token);\n  }\n}\n/**\n * superagent API auth plugin\n *\n * sets the auth needed for API requests\n *\n * general usage:\n * import {apiAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(apiAuth)\n *\n */\n\nexport function apiAuth(request) {\n  const userAuthToken = userAttributes.authenticationToken();\n\n  if (userAuthToken) {\n    request.set('X-Auth-Token', userAuthToken); // request.set('X-User-Id', userAttributes.id());\n  }\n}\n/**\n * superagent jwt plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {jwtAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(jwtAuth)\n *\n */\n\nexport function jwtAuth(request) {// const token = userAttributes.get('jwt');\n  // if (token) {\n  //   request.set('Authorization', `Bearer ${token}`);\n  // }\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/libs/superagent-auth.ts"],"names":["Uri","cfdata","userAttributes","csrf","request","authToken","get","set","userAuth","userAuthToken","authenticationToken","uri","url","addQueryParam","toString","window","CFDATA","current_user","authentication_token","apiAuth","jwtAuth"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAGA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,OAAd,EAA0C;AAC/C,QAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAP,CAAW,oBAAX,CAAlB;;AACA,MAAID,SAAJ,EAAe;AACbD,IAAAA,OAAO,CAACG,GAAR,CAAY,cAAZ,EAA4BF,SAA5B;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,QAAT,CAAkBJ,OAAlB,EAA8C;AACnD,QAAMK,aAAa,GAAGP,cAAc,CAACQ,mBAAf,EAAtB;;AACA,MAAID,aAAJ,EAAmB;AACjB,UAAME,GAAG,GAAG,IAAIX,GAAJ,CAAQI,OAAO,CAACQ,GAAhB,EAAqBC,aAArB,CACV,sBADU,EAEVJ,aAFU,CAAZ;AAIAL,IAAAA,OAAO,CAACQ,GAAR,GAAcD,GAAG,CAACG,QAAJ,EAAd;AACD;;AACD,MAAIC,MAAM,CAACC,MAAP,CAAeC,YAAnB,EAAiC;AAC/Bb,IAAAA,OAAO,CAACG,GAAR,CACE,cADF,EAEEQ,MAAM,CAACC,MAAP,CAAeC,YAAf,CAA4BC,oBAF9B;AAID;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBf,OAAjB,EAA6C;AAClD,QAAMK,aAAa,GAAGP,cAAc,CAACQ,mBAAf,EAAtB;;AACA,MAAID,aAAJ,EAAmB;AACjBL,IAAAA,OAAO,CAACG,GAAR,CAAY,cAAZ,EAA4BE,aAA5B,EADiB,CAEjB;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,OAAT,CAAiBhB,OAAjB,EAA6C,CAClD;AACA;AACA;AACA;AACD","sourcesContent":["import Uri from 'jsuri';\nimport { SuperAgentRequest } from 'superagent';\n\nimport { cfdata } from 'libs/cfdata';\nimport { userAttributes } from 'libs/userAttributes';\n\n/**\n * superagent csrf plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {csrf} from '~/libs/superagent-auth';\n *\n * request\n *      .use(csrf)\n *\n */\nexport function csrf(request: SuperAgentRequest) {\n  const authToken = cfdata.get('authenticity_token');\n  if (authToken) {\n    request.set('X-CSRF-Token', authToken);\n  }\n}\n\n/**\n * superagent userAuth plugin\n *\n * sets the user auth token param\n *\n * general usage:\n * import {userAuth} from '~/libs/superagent-auth';\n *\n * request\n *   .use(userAuth)\n *\n */\nexport function userAuth(request: SuperAgentRequest) {\n  const userAuthToken = userAttributes.authenticationToken();\n  if (userAuthToken) {\n    const uri = new Uri(request.url).addQueryParam(\n      'authentication_token',\n      userAuthToken\n    );\n    request.url = uri.toString();\n  }\n  if (window.CFDATA!.current_user) {\n    request.set(\n      'X-Auth-Token',\n      window.CFDATA!.current_user.authentication_token\n    );\n  }\n}\n\n/**\n * superagent API auth plugin\n *\n * sets the auth needed for API requests\n *\n * general usage:\n * import {apiAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(apiAuth)\n *\n */\nexport function apiAuth(request: SuperAgentRequest) {\n  const userAuthToken = userAttributes.authenticationToken();\n  if (userAuthToken) {\n    request.set('X-Auth-Token', userAuthToken);\n    // request.set('X-User-Id', userAttributes.id());\n  }\n}\n\n/**\n * superagent jwt plugin\n *\n * sets the csrf header token\n *\n * general usage:\n * import {jwtAuth} from '~/libs/superagent-auth';\n *\n * request\n *      .use(jwtAuth)\n *\n */\nexport function jwtAuth(request: SuperAgentRequest) {\n  // const token = userAttributes.get('jwt');\n  // if (token) {\n  //   request.set('Authorization', `Bearer ${token}`);\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}