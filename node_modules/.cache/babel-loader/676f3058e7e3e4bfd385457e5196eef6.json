{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from 'algoliasearch/lite';\nimport cookie from \"react-cookies\";\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\nexport const autoSearch = query => {\n  searchClient.initIndex('tags_index').search(query).then(({\n    hits\n  }) => console.log(\"Hits: \", hits)).catch(err => console.log('Error: ', err));\n};\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseLevel: build.query({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSections: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    searchTags: build.query({\n      query: q => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    uploadLectureVideo: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editSection: build.mutation({\n      query: data => {\n        return {\n          url: \"/courses/section/create/\",\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery\n} = coursesApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","algoliasearch","cookie","searchClient","process","env","REACT_APP_ALGOLIA_APP_ID","REACT_APP_ALGOLIA_SEARCH_KEY","autoSearch","query","initIndex","search","then","hits","console","log","catch","err","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","id","url","method","responseHandler","response","json","fetchCategories","fetchCourseLevel","fetchSections","pk","searchTags","q","createCourse","mutation","body","uploadLectureVideo","createSection","editSection","data","createLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery","useFetchCourseLevelQuery","useSearchTagsQuery","useUploadLectureVideoMutation","useFetchSectionsQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from 'algoliasearch/lite';\n\n\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\n\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID,\n  process.env.REACT_APP_ALGOLIA_SEARCH_KEY\n);\n\nexport interface CourseResponse {\n  title: string;\n  id: number;\n  category: string;\n  description: string;\n}\n\nexport interface MediaRequest {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  size: number;\n}\n\nexport interface SearchResponse {\n  title:string;\n  tags: string[];\n}\n\nexport interface CourseRequest {\n  title: string;\n  category: string;\n  description: string;\n  cover_image: string;\n  level: string;\n  tags: string[];\n  summary: string;\n}\n\nexport interface Section {\n  title: string;\n  id: number;\n  course: number;\n  instructor: number\n  description: string;\n  order: number,\n  lectures? : Lecture[]\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number\n \n}\n\nexport interface Options {\n  name: string;\n  display: string\n}\n\nexport interface Lecture {\n  title: string;\n  id: number\n  description: string;\n  video: number;\n  resources: number[];\n  instructor: number;\n  section: number;\n  video_url: string;\n  order: number;\n}\n\nexport interface CategoryResponse {\n  title: string;\n  id: number;\n  children: CategoryResponse[]\n}\n\nexport const autoSearch = (query: string) => {\n  searchClient.initIndex('tags_index').search(query)\n  .then(({ hits}) => console.log(\"Hits: \", hits))\n  .catch(err => console.log('Error: ', err))\n}\n\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: [],\n  endpoints: (build) => ({\n    fetchCourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchCategories: build.query<CategoryResponse[], void>({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCourseLevel: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchSections: build.query<Section[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    searchTags: build.query<SearchResponse[], string>({\n      query: (q) => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (body) => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    uploadLectureVideo: build.mutation<MediaRequest, Partial<MediaRequest>>({\n      query: (body) => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createSection: build.mutation<Section[], Partial<SectionRequest>>({\n      query: (body) => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editSection: build.mutation<Section, Partial<SectionRequest>>({\n      query: (data) => {\n        \n      return { url: \"/courses/section/create/\",\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json()\n      }\n      },\n    }),\n\n    createLecture: build.mutation<Lecture, Partial<Lecture>>({\n      query: (body) => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  \n} = coursesApi;\n"]},"metadata":{},"sourceType":"module"}