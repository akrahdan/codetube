{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/control-bar/control-bar.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport css from './control-bar.module.scss';\nimport { InteractionModes, Menus } from '../constants';\nimport { Layout240p } from './layout-240p';\nimport { Layout360p } from './layout-360p';\nimport { Layout480p } from './layout-480p';\nimport { Layout720p } from './layout-720p';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ControlBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAction = () => {\n      if (this.isMenuOpen) {\n        this.closeMenu();\n      }\n    };\n\n    this.handleFocus = e => {\n      const isControlBarButton = this.isControlBarButton(e.target);\n\n      if (isControlBarButton && this.isMenuOpen && this.isKeyboardMode) {\n        this.closeMenu();\n      }\n    };\n\n    this.handleClick = e => {\n      if (this.controlBar && this.controlBar.current.contains(e.target)) {\n        return;\n      }\n\n      this.closeMenu();\n    };\n\n    this.controlBar = /*#__PURE__*/React.createRef();\n  }\n\n  get isMenuOpen() {\n    return this.props.activeMenu !== Menus.NONE;\n  }\n\n  get isKeyboardMode() {\n    return this.props.interactionMode === InteractionModes.KEYBOARD;\n  }\n\n  isControlBarButton(el) {\n    return el.getAttribute('is-control-bar-button');\n  }\n\n  closeMenu() {// this.props.setActiveMenu(Menus.NONE)\n  }\n\n  renderLayout(layout) {\n    switch (layout) {\n      case '120p':\n      case '240p':\n        return /*#__PURE__*/_jsxDEV(Layout240p, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }, this);\n\n      case '360p':\n        return /*#__PURE__*/_jsxDEV(Layout360p, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 16\n        }, this);\n\n      case '480p':\n        return /*#__PURE__*/_jsxDEV(Layout480p, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 16\n        }, this);\n\n      case '720p':\n      case '1080p':\n        return /*#__PURE__*/_jsxDEV(Layout720p, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }, this);\n\n      default:\n        //return null\n        return /*#__PURE__*/_jsxDEV(Layout720p, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this);\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClick);\n  }\n\n  render() {\n    const {\n      activeMenu,\n      visible,\n      volumeSliderActive\n    } = this.props;\n    const layout = '720p';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(css.controlBar, {\n        [css.hidden]: !visible,\n        [css.volumeSliderActive]: volumeSliderActive\n      }),\n      onTouchStart: this.handleAction,\n      onClick: this.handleAction,\n      onFocus: this.handleFocus,\n      layout: layout,\n      ref: this.controlBar,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.layout,\n        children: this.renderLayout(layout)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default ControlBar; // export default connect(\n//   state => ({\n//     activeMenu: state.activeMenu,\n//     interactionMode: state.interactionMode,\n//     layout: state.layout,\n//     visible: state.visible,\n//     volumeSliderActive: state.volumeSliderActive,\n//   }),\n//   store => ({\n//     setActiveMenu: actions.setActiveMenu,\n//   })\n// )(ControlBar)","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/control-bar/control-bar.js"],"names":["React","Component","classNames","css","InteractionModes","Menus","Layout240p","Layout360p","Layout480p","Layout720p","ControlBar","constructor","props","handleAction","isMenuOpen","closeMenu","handleFocus","e","isControlBarButton","target","isKeyboardMode","handleClick","controlBar","current","contains","createRef","activeMenu","NONE","interactionMode","KEYBOARD","el","getAttribute","renderLayout","layout","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","visible","volumeSliderActive","hidden"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport classNames from 'classnames'\n\nimport css from './control-bar.module.scss'\n\n\nimport { InteractionModes, Menus } from '../constants'\n\nimport { Layout240p } from './layout-240p'\nimport { Layout360p } from './layout-360p'\nimport { Layout480p } from './layout-480p'\nimport { Layout720p } from './layout-720p'\n\nexport class ControlBar extends Component {\n  constructor(props) {\n    super(props)\n    this.controlBar = React.createRef()\n  }\n\n  get isMenuOpen() {\n    return this.props.activeMenu !== Menus.NONE\n  }\n\n  get isKeyboardMode() {\n    return this.props.interactionMode === InteractionModes.KEYBOARD\n  }\n\n  handleAction = () => {\n    if (this.isMenuOpen) {\n      this.closeMenu()\n    }\n  }\n\n  handleFocus = e => {\n    const isControlBarButton = this.isControlBarButton(e.target)\n\n    if (isControlBarButton && this.isMenuOpen && this.isKeyboardMode) {\n      this.closeMenu()\n    }\n  }\n\n  isControlBarButton(el) {\n    return el.getAttribute('is-control-bar-button')\n  }\n\n  closeMenu() {\n    // this.props.setActiveMenu(Menus.NONE)\n  }\n\n  renderLayout(layout) {\n    switch (layout) {\n      case '120p':\n      case '240p':\n        return <Layout240p />\n      case '360p':\n        return <Layout360p />\n      case '480p':\n        return <Layout480p />\n      case '720p':\n      case '1080p':\n        return <Layout720p />\n      default:\n        //return null\n        return <Layout720p />\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClick)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClick)\n  }\n\n  handleClick = e => {\n    if (this.controlBar && this.controlBar.current.contains(e.target)) {\n      return\n    }\n    this.closeMenu()\n  }\n\n  render() {\n    const { activeMenu, visible, volumeSliderActive } = this.props\n    const layout = '720p';\n    return (\n      <div\n        className={classNames(css.controlBar, {\n          [css.hidden]: !visible,\n          [css.volumeSliderActive]: volumeSliderActive,\n        })}\n        onTouchStart={this.handleAction}\n        onClick={this.handleAction}\n        onFocus={this.handleFocus}\n        layout={layout}\n        ref={this.controlBar}\n      >\n        <div className={css.layout}>{this.renderLayout(layout)}</div>\n      </div>\n    )\n  }\n}\n\nexport default ControlBar;\n\n// export default connect(\n//   state => ({\n//     activeMenu: state.activeMenu,\n//     interactionMode: state.interactionMode,\n//     layout: state.layout,\n//     visible: state.visible,\n//     volumeSliderActive: state.volumeSliderActive,\n//   }),\n//   store => ({\n//     setActiveMenu: actions.setActiveMenu,\n//   })\n// )(ControlBar)\n"]},"metadata":{},"sourceType":"module"}