{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/RadioGroup.tsx\";\nimport React, { cloneElement } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RadioGroup = ({\n  children,\n  onChange,\n  htmlForPrefix,\n  name,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(\"div\", { ...rest,\n  children: React.Children.map(children, (child, index) => /*#__PURE__*/cloneElement(child, {\n    onChange,\n    htmlFor: `${htmlForPrefix}-${index}`,\n    name\n  }))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 3\n}, this);\n_c = RadioGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioGroup\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Form/RadioGroup.tsx"],"names":["React","cloneElement","RadioGroup","children","onChange","htmlForPrefix","name","rest","Children","map","child","index","htmlFor"],"mappings":";AAAA,OAAOA,KAAP,IACEC,YADF,QAIO,OAJP;;AAiBA,OAAO,MAAMC,UAAqC,GAAG,CAAC;AACpDC,EAAAA,QADoD;AAEpDC,EAAAA,QAFoD;AAGpDC,EAAAA,aAHoD;AAIpDC,EAAAA,IAJoD;AAKpD,KAAGC;AALiD,CAAD,kBAOnD,oBAASA,IAAT;AAAA,YACGP,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA6B,CAACO,KAAD,EAAQC,KAAR,kBAC5BV,YAAY,CAACS,KAAD,EAAQ;AAClBN,IAAAA,QADkB;AAElBQ,IAAAA,OAAO,EAAG,GAAEP,aAAc,IAAGM,KAAM,EAFjB;AAGlBL,IAAAA;AAHkB,GAAR,CADb;AADH;AAAA;AAAA;AAAA;AAAA,QAPK;KAAMJ,U","sourcesContent":["import React, {\n  cloneElement,\n  HTMLAttributes,\n  InputHTMLAttributes,\n} from 'react';\n\nexport type RadioGroupProps = Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> &\n  Pick<InputHTMLAttributes<HTMLInputElement>, 'onChange'> & {\n    /**\n     * @remarks This is meant to be `Radio`s.\n     */\n    children: any[];\n    htmlForPrefix?: string;\n    name?: string;\n    selected?: string;\n  };\n\nexport const RadioGroup: React.FC<RadioGroupProps> = ({\n  children,\n  onChange,\n  htmlForPrefix,\n  name,\n  ...rest\n}) => (\n  <div {...rest}>\n    {React.Children.map(children, (child, index) =>\n      cloneElement(child, {\n        onChange,\n        htmlFor: `${htmlForPrefix}-${index}`,\n        name,\n      })\n    )}\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}