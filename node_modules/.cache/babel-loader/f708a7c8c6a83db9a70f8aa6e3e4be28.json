{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/Overlay/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { BodyPortal } from '../BodyPortal';\nimport { FlexBox } from '../Box';\nimport { FocusTrap } from '../FocusTrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Overlay = ({\n  className,\n  children,\n  inline = false,\n  clickOutsideCloses = true,\n  escapeCloses = true,\n  onRequestClose,\n  isOpen\n}) => {\n  _s();\n\n  const handleOutsideClick = useCallback(() => {\n    clickOutsideCloses && onRequestClose();\n  }, [clickOutsideCloses, onRequestClose]);\n  const handleEscapeKey = useCallback(() => {\n    escapeCloses && onRequestClose();\n  }, [escapeCloses, onRequestClose]);\n  if (!isOpen) return null;\n\n  const content = /*#__PURE__*/_jsxDEV(FlexBox, {\n    \"data-testid\": \"overlay-content-container\",\n    position: inline ? 'absolute' : 'fixed',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    inset: 0,\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(FocusTrap, {\n      active: !inline,\n      onClickOutside: handleOutsideClick,\n      onEscapeKey: handleEscapeKey,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n\n  if (inline) return content;\n  return /*#__PURE__*/_jsxDEV(BodyPortal, {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Overlay, \"v2hY8DKDlCOv7MHQh/cBbVNiJQM=\");\n\n_c = Overlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Overlay\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Overlay/index.tsx"],"names":["React","useCallback","BodyPortal","FlexBox","FocusTrap","Overlay","className","children","inline","clickOutsideCloses","escapeCloses","onRequestClose","isOpen","handleOutsideClick","handleEscapeKey","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,SAAT,QAA0B,cAA1B;;AA0BA,OAAO,MAAMC,OAA+B,GAAG,CAAC;AAC9CC,EAAAA,SAD8C;AAE9CC,EAAAA,QAF8C;AAG9CC,EAAAA,MAAM,GAAG,KAHqC;AAI9CC,EAAAA,kBAAkB,GAAG,IAJyB;AAK9CC,EAAAA,YAAY,GAAG,IAL+B;AAM9CC,EAAAA,cAN8C;AAO9CC,EAAAA;AAP8C,CAAD,KAQzC;AAAA;;AACJ,QAAMC,kBAAkB,GAAGZ,WAAW,CAAC,MAAM;AAC3CQ,IAAAA,kBAAkB,IAAIE,cAAc,EAApC;AACD,GAFqC,EAEnC,CAACF,kBAAD,EAAqBE,cAArB,CAFmC,CAAtC;AAIA,QAAMG,eAAe,GAAGb,WAAW,CAAC,MAAM;AACxCS,IAAAA,YAAY,IAAIC,cAAc,EAA9B;AACD,GAFkC,EAEhC,CAACD,YAAD,EAAeC,cAAf,CAFgC,CAAnC;AAIA,MAAI,CAACC,MAAL,EAAa,OAAO,IAAP;;AAEb,QAAMG,OAAO,gBACX,QAAC,OAAD;AACE,mBAAY,2BADd;AAEE,IAAA,QAAQ,EAAEP,MAAM,GAAG,UAAH,GAAgB,OAFlC;AAGE,IAAA,cAAc,EAAC,QAHjB;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,KAAK,EAAE,CALT;AAME,IAAA,SAAS,EAAEF,SANb;AAAA,2BAQE,QAAC,SAAD;AACE,MAAA,MAAM,EAAE,CAACE,MADX;AAEE,MAAA,cAAc,EAAEK,kBAFlB;AAGE,MAAA,WAAW,EAAEC,eAHf;AAAA,gBAKGP;AALH;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,UADF;;AAmBA,MAAIC,MAAJ,EAAY,OAAOO,OAAP;AAEZ,sBAAO,QAAC,UAAD;AAAA,cAAaA;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzCM;;GAAMV,O;;KAAAA,O","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { BodyPortal } from '../BodyPortal';\nimport { FlexBox } from '../Box';\nimport { FocusTrap } from '../FocusTrap';\n\nexport type OverlayProps = {\n  children: React.ReactElement<any>;\n  className?: string;\n  /**\n   * Whether clicking on the screen outside of the container should close the Overlay.\n   */\n  clickOutsideCloses?: boolean;\n  /**\n   * Whether clicking the escape key should close the Overlay.\n   */\n  escapeCloses?: boolean;\n  /**\n   * Called when the Overlay requests to be closed,\n   * this could be due to clicking outside of the overlay, or by clicking the escape key.\n   */\n  onRequestClose: () => void;\n  /**\n   * Whether the overlay is rendered.\n   */\n  isOpen?: boolean;\n  /** Whether the overlay renders inline to its container or creates a portal to the end of the body */\n  inline?: boolean;\n};\n\nexport const Overlay: React.FC<OverlayProps> = ({\n  className,\n  children,\n  inline = false,\n  clickOutsideCloses = true,\n  escapeCloses = true,\n  onRequestClose,\n  isOpen,\n}) => {\n  const handleOutsideClick = useCallback(() => {\n    clickOutsideCloses && onRequestClose();\n  }, [clickOutsideCloses, onRequestClose]);\n\n  const handleEscapeKey = useCallback(() => {\n    escapeCloses && onRequestClose();\n  }, [escapeCloses, onRequestClose]);\n\n  if (!isOpen) return null;\n\n  const content = (\n    <FlexBox\n      data-testid=\"overlay-content-container\"\n      position={inline ? 'absolute' : 'fixed'}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      inset={0}\n      className={className}\n    >\n      <FocusTrap\n        active={!inline}\n        onClickOutside={handleOutsideClick}\n        onEscapeKey={handleEscapeKey}\n      >\n        {children}\n      </FocusTrap>\n    </FlexBox>\n  );\n\n  if (inline) return content;\n\n  return <BodyPortal>{content}</BodyPortal>;\n};\n"]},"metadata":{},"sourceType":"module"}