{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Interstitial/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { colors } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InterstitialWrapper = styled.div`\n  align-items: center;\n  background: ${colors.navy};\n  color: ${colors.white};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  min-height: 30rem;\n  text-align: center;\n  width: 100%;\n`;\n_c = InterstitialWrapper;\nconst Content = styled.div`\n  max-width: 40rem;\n`;\n_c2 = Content;\nconst Decoration = styled.div`\n  font-size: 4rem;\n  margin-bottom: 1rem;\n`;\n_c3 = Decoration;\nconst Header = styled.h1`\n  color: ${colors.white};\n  font-size: 2.25rem;\n  &:focus {\n    outline: none;\n  }\n  &:focus-visible {\n    box-shadow: 0 0 0 3px ${colors.white};\n  }\n`;\n_c4 = Header;\nconst Children = styled.div`\n  margin: 3rem 0;\n`;\n_c5 = Children;\nconst Buttons = styled.div`\n  display: grid;\n  flex-direction: column;\n  grid-template-columns: 1;\n  row-gap: 1rem;\n  width: 12.5rem;\n`;\n_c6 = Buttons;\nexport const Interstitial = ({\n  buttons,\n  children,\n  className,\n  decoration,\n  focus,\n  title\n}) => {\n  _s();\n\n  const headerRef = useRef(null);\n  const [focusable, setFocusable] = useState(focus);\n  useEffect(() => {\n    var _headerRef$current;\n\n    focus && ((_headerRef$current = headerRef.current) === null || _headerRef$current === void 0 ? void 0 : _headerRef$current.focus());\n  }, [headerRef, focus]);\n  return /*#__PURE__*/_jsxDEV(InterstitialWrapper, {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        ref: headerRef,\n        tabIndex: focusable ? 0 : -1,\n        onBlur: () => setFocusable(false),\n        children: [decoration && /*#__PURE__*/_jsxDEV(Decoration, {\n          children: decoration\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 26\n        }, this), title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Children, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), buttons && /*#__PURE__*/_jsxDEV(Buttons, {\n      children: buttons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Interstitial, \"zcx67Xga0HjulaHtKTgbMzYgKNY=\");\n\n_c7 = Interstitial;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"InterstitialWrapper\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Decoration\");\n$RefreshReg$(_c4, \"Header\");\n$RefreshReg$(_c5, \"Children\");\n$RefreshReg$(_c6, \"Buttons\");\n$RefreshReg$(_c7, \"Interstitial\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Interstitial/index.tsx"],"names":["colors","styled","React","useEffect","useRef","useState","InterstitialWrapper","div","navy","white","Content","Decoration","Header","h1","Children","Buttons","Interstitial","buttons","children","className","decoration","focus","title","headerRef","focusable","setFocusable","current"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;AAcA,MAAMC,mBAAmB,GAAGL,MAAM,CAACM,GAAI;AACvC;AACA,gBAAgBP,MAAM,CAACQ,IAAK;AAC5B,WAAWR,MAAM,CAACS,KAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;KAAMH,mB;AAaN,MAAMI,OAAO,GAAGT,MAAM,CAACM,GAAI;AAC3B;AACA,CAFA;MAAMG,O;AAIN,MAAMC,UAAU,GAAGV,MAAM,CAACM,GAAI;AAC9B;AACA;AACA,CAHA;MAAMI,U;AAKN,MAAMC,MAAM,GAAGX,MAAM,CAACY,EAAG;AACzB,WAAWb,MAAM,CAACS,KAAM;AACxB;AACA;AACA;AACA;AACA;AACA,4BAA4BT,MAAM,CAACS,KAAM;AACzC;AACA,CATA;MAAMG,M;AAWN,MAAME,QAAQ,GAAGb,MAAM,CAACM,GAAI;AAC5B;AACA,CAFA;MAAMO,Q;AAIN,MAAMC,OAAO,GAAGd,MAAM,CAACM,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,CANA;MAAMQ,O;AAQN,OAAO,MAAMC,YAAyC,GAAG,CAAC;AACxDC,EAAAA,OADwD;AAExDC,EAAAA,QAFwD;AAGxDC,EAAAA,SAHwD;AAIxDC,EAAAA,UAJwD;AAKxDC,EAAAA,KALwD;AAMxDC,EAAAA;AANwD,CAAD,KAOnD;AAAA;;AACJ,QAAMC,SAAS,GAAGnB,MAAM,CAAqB,IAArB,CAAxB;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAACgB,KAAD,CAA1C;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACdkB,IAAAA,KAAK,2BAAIE,SAAS,CAACG,OAAd,uDAAI,mBAAmBL,KAAnB,EAAJ,CAAL;AACD,GAFQ,EAEN,CAACE,SAAD,EAAYF,KAAZ,CAFM,CAAT;AAIA,sBACE,QAAC,mBAAD;AAAqB,IAAA,SAAS,EAAEF,SAAhC;AAAA,4BACE,QAAC,OAAD;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,GAAG,EAAEI,SADP;AAEE,QAAA,QAAQ,EAAEC,SAAS,GAAG,CAAH,GAAO,CAAC,CAF7B;AAGE,QAAA,MAAM,EAAE,MAAMC,YAAY,CAAC,KAAD,CAH5B;AAAA,mBAKGL,UAAU,iBAAI,QAAC,UAAD;AAAA,oBAAaA;AAAb;AAAA;AAAA;AAAA;AAAA,gBALjB,EAMGE,KANH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,QAAD;AAAA,kBAAWJ;AAAX;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAYGD,OAAO,iBAAI,QAAC,OAAD;AAAA,gBAAUA;AAAV;AAAA;AAAA;AAAA;AAAA,YAZd;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA/BM;;GAAMD,Y;;MAAAA,Y","sourcesContent":["import { colors } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\n\nexport type InterstitialProps = {\n  /** If provided, these buttons will render below the title and children in a column. */\n  buttons?: React.ReactNode[];\n  className?: string;\n  /** An optional image, emoji, or component that will render above the title. */\n  decoration?: React.ReactNode;\n  /** If enabled, focus will be pulled onto the title of the component upon render. Should be enabled if Interstitial is not the child of a component with focus managment, such as ModalDeprecated. */\n  focus?: boolean;\n  /** h1 title for the interstitial */\n  title: string;\n};\n\nconst InterstitialWrapper = styled.div`\n  align-items: center;\n  background: ${colors.navy};\n  color: ${colors.white};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  min-height: 30rem;\n  text-align: center;\n  width: 100%;\n`;\n\nconst Content = styled.div`\n  max-width: 40rem;\n`;\n\nconst Decoration = styled.div`\n  font-size: 4rem;\n  margin-bottom: 1rem;\n`;\n\nconst Header = styled.h1`\n  color: ${colors.white};\n  font-size: 2.25rem;\n  &:focus {\n    outline: none;\n  }\n  &:focus-visible {\n    box-shadow: 0 0 0 3px ${colors.white};\n  }\n`;\n\nconst Children = styled.div`\n  margin: 3rem 0;\n`;\n\nconst Buttons = styled.div`\n  display: grid;\n  flex-direction: column;\n  grid-template-columns: 1;\n  row-gap: 1rem;\n  width: 12.5rem;\n`;\n\nexport const Interstitial: React.FC<InterstitialProps> = ({\n  buttons,\n  children,\n  className,\n  decoration,\n  focus,\n  title,\n}) => {\n  const headerRef = useRef<HTMLHeadingElement>(null);\n  const [focusable, setFocusable] = useState(focus);\n\n  useEffect(() => {\n    focus && headerRef.current?.focus();\n  }, [headerRef, focus]);\n\n  return (\n    <InterstitialWrapper className={className}>\n      <Content>\n        <Header\n          ref={headerRef}\n          tabIndex={focusable ? 0 : -1}\n          onBlur={() => setFocusable(false)}\n        >\n          {decoration && <Decoration>{decoration}</Decoration>}\n          {title}\n        </Header>\n        <Children>{children}</Children>\n      </Content>\n      {buttons && <Buttons>{buttons}</Buttons>}\n    </InterstitialWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}