{"ast":null,"code":"export var getRouteMetaForLocation=function getRouteMetaForLocation(routesMeta,locationType){var route=function(){// switch (statusCode) {\n//   case 404:\n//     return routesMeta[`${sharedRouteActions.error404}`];\n//   case 500:\n//     return routesMeta[`${sharedRouteActions.error500}`];\n// }\nreturn routesMeta[locationType];}();if(!route){throw new Error(\"Could not find equivalent route for '\".concat(locationType,\"'.\"));}return route;};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/location/routing.tsx"],"names":["getRouteMetaForLocation","routesMeta","locationType","route","Error"],"mappings":"AAkBA,MAAO,IAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CACrCC,UADqC,CAErCC,YAFqC,CAIlC,CACH,GAAMC,CAAAA,KAAK,CAAI,UAAM,CACnB;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAOF,CAAAA,UAAU,CAACC,YAAD,CAAjB,CACD,CAVa,EAAd,CAYA,GAAI,CAACC,KAAL,CAAY,CACV,KAAM,IAAIC,CAAAA,KAAJ,gDAAkDF,YAAlD,OAAN,CACD,CAED,MAAOC,CAAAA,KAAP,CACD,CAtBM","sourcesContent":["import React from 'react';\n\nimport * as sharedRouteActions from './sharedRouteActions';\n\nexport type MetaScene = {\n  portalData: unknown;\n};\n\nexport type RouteMeta = {\n  scene: React.ComponentType<MetaScene & any>;\n\n  /**\n   * The page_name to use for visit tracking events\n   * Specify undefined if the scene will handle visit tracking\n   */\n  pageName: string | undefined;\n};\n\nexport const getRouteMetaForLocation = (\n  routesMeta: Record<string, RouteMeta>,\n  locationType: string,\n \n) => {\n  const route = (() => {\n    // switch (statusCode) {\n    //   case 404:\n    //     return routesMeta[`${sharedRouteActions.error404}`];\n\n    //   case 500:\n    //     return routesMeta[`${sharedRouteActions.error500}`];\n    // }\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};\n"]},"metadata":{},"sourceType":"module"}