{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/InputStepper/index.tsx\",\n    _s = $RefreshSig$();\n\nimport cx from 'classnames';\nimport React, { useEffect } from 'react';\nimport { StepButton } from './StepButton';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */\nexport const InputStepper = ({\n  label,\n  value,\n  max = 999,\n  min = 0,\n  onChange,\n  ariaLabel,\n  onStepperButtonClick,\n  className\n}) => {\n  _s();\n\n  const normalize = value => {\n    if (max && value > max) {\n      return max;\n    }\n\n    if (value < min) {\n      return min;\n    }\n\n    return value;\n  };\n\n  const calculateWidthFromMax = () => {\n    if (max < 10) {\n      return styles.mini;\n    }\n\n    if (max > 99) {\n      return styles.long;\n    }\n\n    return styles.standardWidth;\n  };\n\n  const increment = incrementAmount => {\n    const incrementedValue = normalize(value + incrementAmount);\n\n    if (onStepperButtonClick) {\n      onStepperButtonClick(incrementAmount > 0 ? 'increase_selection' : 'decrease_selection');\n    }\n\n    onChange(incrementedValue);\n  };\n\n  const onChangeEvent = event => {\n    const rawValue = event.target.value || `${min}`;\n    const normalizedValue = normalize(parseInt(rawValue, 10));\n\n    if (normalizedValue === value) {\n      return;\n    }\n\n    onChange(normalizedValue);\n  }; // ensure that the value comes in normalized & update the state\n  // to reflect the normalized value. Taking a timeout approach so as\n  // to avoid kicking off re-render while already mid-render\n\n\n  const normalizedValue = normalize(value);\n  useEffect(() => {\n    if (normalizedValue !== value) {\n      window.setTimeout(() => onChange(normalizedValue), 0);\n    }\n  });\n  const inputId = 'inputStepper';\n  const labelId = 'inputStepperLabel';\n  const inputWidthClass = calculateWidthFromMax();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx(styles.stepper, className),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.column,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: cx(styles.input, inputWidthClass),\n        type: \"number\",\n        max: max,\n        min: min,\n        value: normalizedValue,\n        name: inputId,\n        id: inputId,\n        \"aria-live\": \"polite\",\n        \"aria-labelledby\": `${labelId} ${inputId}`,\n        \"aria-label\": `current value of ${value}`,\n        onChange: onChangeEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        id: labelId,\n        className: styles.label,\n        \"aria-label\": ariaLabel,\n        htmlFor: inputId,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.column,\n      children: [/*#__PURE__*/_jsxDEV(StepButton, {\n        onClick: () => increment(1),\n        type: \"up\",\n        labelledBy: `${labelId} ${inputId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StepButton, {\n        onClick: () => increment(-1),\n        type: \"down\",\n        labelledBy: `${labelId} ${inputId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InputStepper, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = InputStepper;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputStepper\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/InputStepper/index.tsx"],"names":["cx","React","useEffect","StepButton","styles","InputStepper","label","value","max","min","onChange","ariaLabel","onStepperButtonClick","className","normalize","calculateWidthFromMax","mini","long","standardWidth","increment","incrementAmount","incrementedValue","onChangeEvent","event","rawValue","target","normalizedValue","parseInt","window","setTimeout","inputId","labelId","inputWidthClass","stepper","column","input"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport React, { useEffect } from 'react';\n\nimport { StepButton } from './StepButton';\nimport styles from './styles.module.scss';\n\nexport type InputStepperButtonTargets =\n  | 'increase_selection'\n  | 'decrease_selection';\n\nexport type InputStepperProps = {\n  /** Label to show beneath the numeric value */\n  label: string;\n\n  /** Value to assign the numeric field */\n  value: number;\n\n  /** Maximum value allowed */\n  max?: number;\n\n  /** Minimum value allowed */\n  min?: number;\n\n  /** Action to perform when the value of this field has changed */\n  onChange: (val: number) => void;\n\n  /**\n   * Label to use for accessibility purposes; will be read on the label, the\n   * input field itself, and the stepper buttons via aria-labelledby\n   */\n  ariaLabel: string;\n\n  /** Tracking callback to run when the step buttons are clicked */\n  onStepperButtonClick?: (target: InputStepperButtonTargets) => void;\n\n  /** Any additional styling that should be applied to the stepper */\n  className?: string;\n};\n\n/**\n * Renders a numeric step input with an embedded label and a custom set of step buttons\n */\nexport const InputStepper: React.FC<InputStepperProps> = ({\n  label,\n  value,\n  max = 999,\n  min = 0,\n  onChange,\n  ariaLabel,\n  onStepperButtonClick,\n  className,\n}) => {\n  const normalize = (value: number) => {\n    if (max && value > max) {\n      return max;\n    }\n    if (value < min) {\n      return min;\n    }\n    return value;\n  };\n\n  const calculateWidthFromMax = () => {\n    if (max < 10) {\n      return styles.mini;\n    }\n    if (max > 99) {\n      return styles.long;\n    }\n    return styles.standardWidth;\n  };\n\n  const increment = (incrementAmount: 1 | -1) => {\n    const incrementedValue = normalize(value + incrementAmount);\n    if (onStepperButtonClick) {\n      onStepperButtonClick(\n        incrementAmount > 0 ? 'increase_selection' : 'decrease_selection'\n      );\n    }\n    onChange(incrementedValue);\n  };\n\n  const onChangeEvent = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const rawValue = event.target.value || `${min}`;\n    const normalizedValue = normalize(parseInt(rawValue, 10));\n    if (normalizedValue === value) {\n      return;\n    }\n    onChange(normalizedValue);\n  };\n\n  // ensure that the value comes in normalized & update the state\n  // to reflect the normalized value. Taking a timeout approach so as\n  // to avoid kicking off re-render while already mid-render\n  const normalizedValue = normalize(value);\n  useEffect(() => {\n    if (normalizedValue !== value) {\n      window.setTimeout(() => onChange(normalizedValue), 0);\n    }\n  });\n\n  const inputId = 'inputStepper';\n  const labelId = 'inputStepperLabel';\n  const inputWidthClass = calculateWidthFromMax();\n\n  return (\n    <div className={cx(styles.stepper, className)}>\n      <div className={styles.column}>\n        {/** render the actual input field */}\n        <input\n          className={cx(styles.input, inputWidthClass)}\n          type=\"number\"\n          max={max}\n          min={min}\n          value={normalizedValue}\n          name={inputId}\n          id={inputId}\n          aria-live=\"polite\"\n          aria-labelledby={`${labelId} ${inputId}`}\n          aria-label={`current value of ${value}`}\n          onChange={onChangeEvent}\n        />\n\n        {/* render the label for the input field */}\n        <label\n          id={labelId}\n          className={styles.label}\n          aria-label={ariaLabel}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n      </div>\n\n      {/** step up and step down buttons */}\n      <div className={styles.column}>\n        <StepButton\n          onClick={() => increment(1)}\n          type=\"up\"\n          labelledBy={`${labelId} ${inputId}`}\n        />\n        <StepButton\n          onClick={() => increment(-1)}\n          type=\"down\"\n          labelledBy={`${labelId} ${inputId}`}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}