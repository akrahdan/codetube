{"ast":null,"code":"import React from 'react'; // import { connect } from 'unistore/react'\n// import * as actions from '../../actions'\n\nexport class SyncSettings extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleStorage = e => {\n      if (e.key == SyncSettings.storageKey) {\n        this.syncStorageToLocal();\n      }\n    };\n  }\n\n  static get storageKey() {\n    return 'ps-embeddable-player-settings';\n  }\n\n  static get version() {\n    return versions;\n  }\n\n  static get settingsKeys() {\n    return ['userAutoplaySetting', 'closedCaptioningEnabled', 'closedCaptioningLanguage', 'muted', 'playbackSpeed', 'preferredResolutions', 'previousVolume', 'versions', 'volume'];\n  }\n\n  get localSettings() {\n    return SyncSettings.settingsKeys.reduce((settings, key) => {\n      settings[key] = this.props[key];\n      return settings;\n    }, {});\n  }\n\n  set localSettings(settings) {\n    this.props.syncSettings(settings);\n  }\n\n  get storageSettings() {\n    const settings = localStorage.getItem(SyncSettings.storageKey);\n\n    try {\n      return JSON.parse(settings || '');\n    } catch (e) {\n      return null;\n    }\n  }\n\n  set storageSettings(settings) {\n    return localStorage.setItem(SyncSettings.storageKey, JSON.stringify(settings));\n  }\n\n  componentDidMount() {\n    const isVersioned = this.isVersioned(this.localSettings, this.storageSettings);\n\n    if (isVersioned) {\n      this.storageSettings = null;\n    }\n\n    this.syncStorageToLocal();\n\n    if (this.props.liveSync) {\n      window.addEventListener('storage', this.handleStorage);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.liveSync) {\n      window.removeEventListener('storage', this.handleStorage);\n    }\n  }\n\n  componentDidUpdate() {\n    this.syncLocalToStorage();\n  }\n\n  syncLocalToStorage() {\n    const isChanged = this.isChanged(this.localSettings, this.storageSettings);\n\n    if (isChanged) {\n      this.storageSettings = this.localSettings;\n    }\n  }\n\n  syncStorageToLocal() {\n    const isChanged = this.isChanged(this.localSettings, this.storageSettings);\n\n    if (isChanged) {\n      this.localSettings = this.storageSettings;\n    }\n  }\n\n  isChanged(a, b) {\n    const aKeys = Object.keys(a || {});\n    const bKeys = Object.keys(b || {});\n    const keys = SyncSettings.settingsKeys;\n    let i = keys.length;\n    let isChanged = !a || !b;\n\n    while (!isChanged && i--) {\n      const key = keys[i];\n      let aValue = a[key];\n      let bValue = b[key];\n\n      if (typeof aValue === 'object') {\n        aValue = JSON.stringify(aValue);\n      }\n\n      if (typeof bValue === 'object') {\n        bValue = JSON.stringify(bValue);\n      }\n\n      isChanged = aValue != bValue;\n    }\n\n    return isChanged;\n  }\n\n  isVersioned(a, b) {\n    try {\n      return !a || !b || a.versions.VERSION != b.versions.VERSION;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\nexport default SyncSettings; // export default connect(\n//   state => ({\n//     userAutoplaySetting: state.userAutoplaySetting,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\n//     muted: state.muted,\n//     playbackSpeed: state.playbackSpeed,\n//     previousVolume: state.previousVolume,\n//     resolution: state.resolution,\n//     versions: state.versions,\n//     volume: state.volume,\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\n//     preferredResolutions: state.preferredResolutions,\n//   }),\n//   store => ({\n//     syncSettings: actions.syncSettings,\n//   })\n// )(SyncSettings)","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/sync-settings/sync-settings.js"],"names":["React","SyncSettings","Component","handleStorage","e","key","storageKey","syncStorageToLocal","version","versions","settingsKeys","localSettings","reduce","settings","props","syncSettings","storageSettings","localStorage","getItem","JSON","parse","setItem","stringify","componentDidMount","isVersioned","liveSync","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","syncLocalToStorage","isChanged","a","b","aKeys","Object","keys","bKeys","i","length","aValue","bValue","VERSION","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AAEA,OAAO,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAuEhDC,aAvEgD,GAuEhCC,CAAC,IAAI;AACnB,UAAIA,CAAC,CAACC,GAAF,IAASJ,YAAY,CAACK,UAA1B,EAAsC;AACpC,aAAKC,kBAAL;AACD;AACF,KA3E+C;AAAA;;AAC3B,aAAVD,UAAU,GAAG;AACtB,WAAO,+BAAP;AACD;;AAEiB,aAAPE,OAAO,GAAG;AACnB,WAAOC,QAAP;AACD;;AAEsB,aAAZC,YAAY,GAAG;AACxB,WAAO,CACL,qBADK,EAEL,yBAFK,EAGL,0BAHK,EAIL,OAJK,EAKL,eALK,EAML,sBANK,EAOL,gBAPK,EAQL,UARK,EASL,QATK,CAAP;AAWD;;AAEgB,MAAbC,aAAa,GAAG;AAClB,WAAOV,YAAY,CAACS,YAAb,CAA0BE,MAA1B,CAAiC,CAACC,QAAD,EAAWR,GAAX,KAAmB;AACzDQ,MAAAA,QAAQ,CAACR,GAAD,CAAR,GAAgB,KAAKS,KAAL,CAAWT,GAAX,CAAhB;AACA,aAAOQ,QAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAEgB,MAAbF,aAAa,CAACE,QAAD,EAAW;AAC1B,SAAKC,KAAL,CAAWC,YAAX,CAAwBF,QAAxB;AACD;;AAEkB,MAAfG,eAAe,GAAG;AACpB,UAAMH,QAAQ,GAAGI,YAAY,CAACC,OAAb,CAAqBjB,YAAY,CAACK,UAAlC,CAAjB;;AAEA,QAAI;AACF,aAAOa,IAAI,CAACC,KAAL,CAAWP,QAAQ,IAAI,EAAvB,CAAP;AACD,KAFD,CAEE,OAAOT,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF;;AAEkB,MAAfY,eAAe,CAACH,QAAD,EAAW;AAC5B,WAAOI,YAAY,CAACI,OAAb,CAAqBpB,YAAY,CAACK,UAAlC,EAA8Ca,IAAI,CAACG,SAAL,CAAeT,QAAf,CAA9C,CAAP;AACD;;AAEDU,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,WAAW,GAAG,KAAKA,WAAL,CAAiB,KAAKb,aAAtB,EAAqC,KAAKK,eAA1C,CAApB;;AAEA,QAAIQ,WAAJ,EAAiB;AACf,WAAKR,eAAL,GAAuB,IAAvB;AACD;;AAED,SAAKT,kBAAL;;AACA,QAAI,KAAKO,KAAL,CAAWW,QAAf,EAAyB;AACvBC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKxB,aAAxC;AACD;AACF;;AAEDyB,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKd,KAAL,CAAWW,QAAf,EAAyB;AACvBC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC,KAAK1B,aAA3C;AACD;AACF;;AAED2B,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,kBAAL;AACD;;AAQDA,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,SAAS,GAAG,KAAKA,SAAL,CAAe,KAAKrB,aAApB,EAAmC,KAAKK,eAAxC,CAAlB;;AAEA,QAAIgB,SAAJ,EAAe;AACb,WAAKhB,eAAL,GAAuB,KAAKL,aAA5B;AACD;AACF;;AAEDJ,EAAAA,kBAAkB,GAAG;AACnB,UAAMyB,SAAS,GAAG,KAAKA,SAAL,CAAe,KAAKrB,aAApB,EAAmC,KAAKK,eAAxC,CAAlB;;AAEA,QAAIgB,SAAJ,EAAe;AACb,WAAKrB,aAAL,GAAqB,KAAKK,eAA1B;AACD;AACF;;AAEDgB,EAAAA,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACd,UAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,CAAC,IAAI,EAAjB,CAAd;AACA,UAAMK,KAAK,GAAGF,MAAM,CAACC,IAAP,CAAYH,CAAC,IAAI,EAAjB,CAAd;AACA,UAAMG,IAAI,GAAGpC,YAAY,CAACS,YAA1B;AACA,QAAI6B,CAAC,GAAGF,IAAI,CAACG,MAAb;AACA,QAAIR,SAAS,GAAG,CAACC,CAAD,IAAM,CAACC,CAAvB;;AAEA,WAAO,CAACF,SAAD,IAAcO,CAAC,EAAtB,EAA0B;AACxB,YAAMlC,GAAG,GAAGgC,IAAI,CAACE,CAAD,CAAhB;AACA,UAAIE,MAAM,GAAGR,CAAC,CAAC5B,GAAD,CAAd;AACA,UAAIqC,MAAM,GAAGR,CAAC,CAAC7B,GAAD,CAAd;;AAEA,UAAI,OAAOoC,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,QAAAA,MAAM,GAAGtB,IAAI,CAACG,SAAL,CAAemB,MAAf,CAAT;AACD;;AAED,UAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,QAAAA,MAAM,GAAGvB,IAAI,CAACG,SAAL,CAAeoB,MAAf,CAAT;AACD;;AAEDV,MAAAA,SAAS,GAAGS,MAAM,IAAIC,MAAtB;AACD;;AAED,WAAOV,SAAP;AACD;;AAEDR,EAAAA,WAAW,CAACS,CAAD,EAAIC,CAAJ,EAAO;AAChB,QAAI;AACF,aAAO,CAACD,CAAD,IAAM,CAACC,CAAP,IAAYD,CAAC,CAACxB,QAAF,CAAWkC,OAAX,IAAsBT,CAAC,CAACzB,QAAF,CAAWkC,OAApD;AACD,KAFD,CAEE,OAAOvC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF;;AAEDwC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAjI+C;AAmIlD,eAAe3C,YAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\r\n// import { connect } from 'unistore/react'\r\n\r\n// import * as actions from '../../actions'\r\n\r\nexport class SyncSettings extends React.Component {\r\n  static get storageKey() {\r\n    return 'ps-embeddable-player-settings'\r\n  }\r\n\r\n  static get version() {\r\n    return versions\r\n  }\r\n\r\n  static get settingsKeys() {\r\n    return [\r\n      'userAutoplaySetting',\r\n      'closedCaptioningEnabled',\r\n      'closedCaptioningLanguage',\r\n      'muted',\r\n      'playbackSpeed',\r\n      'preferredResolutions',\r\n      'previousVolume',\r\n      'versions',\r\n      'volume',\r\n    ]\r\n  }\r\n\r\n  get localSettings() {\r\n    return SyncSettings.settingsKeys.reduce((settings, key) => {\r\n      settings[key] = this.props[key]\r\n      return settings\r\n    }, {})\r\n  }\r\n\r\n  set localSettings(settings) {\r\n    this.props.syncSettings(settings)\r\n  }\r\n\r\n  get storageSettings() {\r\n    const settings = localStorage.getItem(SyncSettings.storageKey)\r\n\r\n    try {\r\n      return JSON.parse(settings || '')\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  set storageSettings(settings) {\r\n    return localStorage.setItem(SyncSettings.storageKey, JSON.stringify(settings))\r\n  }\r\n\r\n  componentDidMount() {\r\n    const isVersioned = this.isVersioned(this.localSettings, this.storageSettings)\r\n\r\n    if (isVersioned) {\r\n      this.storageSettings = null\r\n    }\r\n\r\n    this.syncStorageToLocal()\r\n    if (this.props.liveSync) {\r\n      window.addEventListener('storage', this.handleStorage)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.liveSync) {\r\n      window.removeEventListener('storage', this.handleStorage)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.syncLocalToStorage()\r\n  }\r\n\r\n  handleStorage = e => {\r\n    if (e.key == SyncSettings.storageKey) {\r\n      this.syncStorageToLocal()\r\n    }\r\n  }\r\n\r\n  syncLocalToStorage() {\r\n    const isChanged = this.isChanged(this.localSettings, this.storageSettings)\r\n\r\n    if (isChanged) {\r\n      this.storageSettings = this.localSettings\r\n    }\r\n  }\r\n\r\n  syncStorageToLocal() {\r\n    const isChanged = this.isChanged(this.localSettings, this.storageSettings)\r\n\r\n    if (isChanged) {\r\n      this.localSettings = this.storageSettings\r\n    }\r\n  }\r\n\r\n  isChanged(a, b) {\r\n    const aKeys = Object.keys(a || {})\r\n    const bKeys = Object.keys(b || {})\r\n    const keys = SyncSettings.settingsKeys\r\n    let i = keys.length\r\n    let isChanged = !a || !b\r\n\r\n    while (!isChanged && i--) {\r\n      const key = keys[i]\r\n      let aValue = a[key]\r\n      let bValue = b[key]\r\n\r\n      if (typeof aValue === 'object') {\r\n        aValue = JSON.stringify(aValue)\r\n      }\r\n\r\n      if (typeof bValue === 'object') {\r\n        bValue = JSON.stringify(bValue)\r\n      }\r\n\r\n      isChanged = aValue != bValue\r\n    }\r\n\r\n    return isChanged\r\n  }\r\n\r\n  isVersioned(a, b) {\r\n    try {\r\n      return !a || !b || a.versions.VERSION != b.versions.VERSION\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null\r\n  }\r\n}\r\nexport default SyncSettings\r\n// export default connect(\r\n//   state => ({\r\n//     userAutoplaySetting: state.userAutoplaySetting,\r\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\r\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\r\n//     muted: state.muted,\r\n//     playbackSpeed: state.playbackSpeed,\r\n//     previousVolume: state.previousVolume,\r\n//     resolution: state.resolution,\r\n//     versions: state.versions,\r\n//     volume: state.volume,\r\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\r\n//     preferredResolutions: state.preferredResolutions,\r\n//   }),\r\n//   store => ({\r\n//     syncSettings: actions.syncSettings,\r\n//   })\r\n// )(SyncSettings)\r\n"]},"metadata":{},"sourceType":"module"}