{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _taggedTemplateLiteral from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import{screenReaderOnly}from'@codecademy/gamut-styles';import styled from'@emotion/styled';import React from'react';import{Box}from'../Box';import{HiddenText}from'../HiddenText';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var sizes={medium:{height:'30px',width:'60px'},small:{height:'18px',width:'36px'}};var colors=['blue','hyper'];var ToggleTrack=styled(Box)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  transition: background-color 0.2s ease;\\n\\n  &:after {\\n    content: '';\\n    transition: opacity 0.2s ease;\\n    opacity: 0;\\n    border-radius: inherit;\\n    position: absolute;\\n    width: calc(100% + 8px);\\n    height: calc(100% + 8px);\\n    top: -4px;\\n    left: -4px;\\n    border-color: inherit;\\n    border-style: solid;\\n    border-width: 2px;\\n  }\\n\\n  \",\" {\\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);\\n  }\\n\"])),Box);var ToggleInput=styled.input(screenReaderOnly);var ToggleLabel=styled.label(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: inline-block;\\n  cursor: pointer;\\n  border: 0;\\n  padding: 0;\\n\\n  &[disabled] {\\n    cursor: not-allowed;\\n    opacity: 0.75;\\n  }\\n\\n  \",\":focus-visible + \",\" {\\n    &:after {\\n      opacity: 1;\\n    }\\n  }\\n\"])),ToggleInput,ToggleTrack);export var Toggle=function Toggle(_ref){var checked=_ref.checked,className=_ref.className,onChange=_ref.onChange,label=_ref.label,disabled=_ref.disabled,_ref$variant=_ref.variant,variant=_ref$variant===void 0?'blue':_ref$variant,_ref$size=_ref.size,size=_ref$size===void 0?'medium':_ref$size;var activeColor=variant;var checkedColor=checked?variant:'gray-600';var sizeStyles=sizes[size];return/*#__PURE__*/_jsxs(ToggleLabel,{className:className,htmlFor:label,variant:variant,disabled:disabled,children:[/*#__PURE__*/_jsx(HiddenText,{children:label}),/*#__PURE__*/_jsx(ToggleInput,{type:\"checkbox\",checked:checked,id:label,disabled:disabled,onChange:onChange}),/*#__PURE__*/_jsx(ToggleTrack,_objectSpread(_objectSpread({},sizeStyles),{},{borderColor:activeColor,bg:checkedColor,borderRadius:\"99rem\",position:\"relative\",children:/*#__PURE__*/_jsx(Box,{width:\"40%\",borderRadius:\"50%\",bg:\"white\",position:\"absolute\",top:\"10%\",bottom:\"10%\",left:checked?'55%':'5%'})}))]});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Toggle/index.tsx"],"names":["screenReaderOnly","styled","React","Box","HiddenText","sizes","medium","height","width","small","colors","ToggleTrack","ToggleInput","input","ToggleLabel","label","Toggle","checked","className","onChange","disabled","variant","size","activeColor","checkedColor","sizeStyles"],"mappings":"kYAAA,OAASA,gBAAT,KAAiC,0BAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,GAAT,KAAoB,QAApB,CACA,OAASC,UAAT,KAA2B,eAA3B,C,wFAyBA,GAAMC,CAAAA,KAAK,CAAG,CACZC,MAAM,CAAE,CACNC,MAAM,CAAE,MADF,CAENC,KAAK,CAAE,MAFD,CADI,CAKZC,KAAK,CAAE,CACLF,MAAM,CAAE,MADH,CAELC,KAAK,CAAE,MAFF,CALK,CAAd,CAWA,GAAME,CAAAA,MAAM,CAAG,CAAC,MAAD,CAAS,OAAT,CAAf,CAEA,GAAMC,CAAAA,WAAW,CAAGV,MAAM,CAACE,GAAD,CAAT,qfAkBbA,GAlBa,CAAjB,CAuBA,GAAMS,CAAAA,WAAW,CAAGX,MAAM,CAACY,KAAP,CAAab,gBAAb,CAApB,CAEA,GAAMc,CAAAA,WAAW,CAAGb,MAAM,CAACc,KAAV,mSAWbH,WAXa,CAWkBD,WAXlB,CAAjB,CAkBA,MAAO,IAAMK,CAAAA,MAA6B,CAAG,QAAhCA,CAAAA,MAAgC,MAQvC,IAPJC,CAAAA,OAOI,MAPJA,OAOI,CANJC,SAMI,MANJA,SAMI,CALJC,QAKI,MALJA,QAKI,CAJJJ,KAII,MAJJA,KAII,CAHJK,QAGI,MAHJA,QAGI,mBAFJC,OAEI,CAFJA,OAEI,uBAFM,MAEN,6BADJC,IACI,CADJA,IACI,oBADG,QACH,WACJ,GAAMC,CAAAA,WAAW,CAAGF,OAApB,CACA,GAAMG,CAAAA,YAAY,CAAGP,OAAO,CAAGI,OAAH,CAAa,UAAzC,CACA,GAAMI,CAAAA,UAAU,CAAGpB,KAAK,CAACiB,IAAD,CAAxB,CAEA,mBACE,MAAC,WAAD,EACE,SAAS,CAAEJ,SADb,CAEE,OAAO,CAAEH,KAFX,CAGE,OAAO,CAAEM,OAHX,CAIE,QAAQ,CAAED,QAJZ,wBAME,KAAC,UAAD,WAAaL,KAAb,EANF,cAOE,KAAC,WAAD,EACE,IAAI,CAAC,UADP,CAEE,OAAO,CAAEE,OAFX,CAGE,EAAE,CAAEF,KAHN,CAIE,QAAQ,CAAEK,QAJZ,CAKE,QAAQ,CAAED,QALZ,EAPF,cAcE,KAAC,WAAD,gCACMM,UADN,MAEE,WAAW,CAAEF,WAFf,CAGE,EAAE,CAAEC,YAHN,CAIE,YAAY,CAAC,OAJf,CAKE,QAAQ,CAAC,UALX,uBAOE,KAAC,GAAD,EACE,KAAK,CAAC,KADR,CAEE,YAAY,CAAC,KAFf,CAGE,EAAE,CAAC,OAHL,CAIE,QAAQ,CAAC,UAJX,CAKE,GAAG,CAAC,KALN,CAME,MAAM,CAAC,KANT,CAOE,IAAI,CAAEP,OAAO,CAAG,KAAH,CAAW,IAP1B,EAPF,GAdF,GADF,CAkCD,CA/CM","sourcesContent":["import { screenReaderOnly } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { Box } from '../Box';\nimport { HiddenText } from '../HiddenText';\n\nexport type ToggleSizes = keyof typeof sizes;\nexport type ToggleVariants = typeof colors[number];\n\nexport type LabelProps = {\n  disabled?: boolean;\n  variant?: ToggleVariants;\n};\n\nexport type ToggleProps = {\n  /** The state of the checkbox input (this can be out of sync with the input's value if not passed) */\n  checked: boolean;\n  /** Called when the input value has changed */\n  onChange: (event?: React.FormEvent<HTMLInputElement>) => void;\n  /** A hidden label used for accessibility and control, unique to the page */\n  label?: string;\n  /** Color variations for background styles */\n  variant?: ToggleVariants;\n  /** Changes the dimensions of the element for using the component outside of a form context */\n  size?: ToggleSizes;\n  disabled?: boolean;\n  className?: string;\n};\n\nconst sizes = {\n  medium: {\n    height: '30px',\n    width: '60px',\n  },\n  small: {\n    height: '18px',\n    width: '36px',\n  },\n};\n\nconst colors = ['blue', 'hyper'] as const;\n\nconst ToggleTrack = styled(Box)`\n  transition: background-color 0.2s ease;\n\n  &:after {\n    content: '';\n    transition: opacity 0.2s ease;\n    opacity: 0;\n    border-radius: inherit;\n    position: absolute;\n    width: calc(100% + 8px);\n    height: calc(100% + 8px);\n    top: -4px;\n    left: -4px;\n    border-color: inherit;\n    border-style: solid;\n    border-width: 2px;\n  }\n\n  ${Box} {\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);\n  }\n`;\n\nconst ToggleInput = styled.input(screenReaderOnly);\n\nconst ToggleLabel = styled.label<LabelProps>`\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  padding: 0;\n\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.75;\n  }\n\n  ${ToggleInput}:focus-visible + ${ToggleTrack} {\n    &:after {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  checked,\n  className,\n  onChange,\n  label,\n  disabled,\n  variant = 'blue',\n  size = 'medium',\n}) => {\n  const activeColor = variant;\n  const checkedColor = checked ? variant : 'gray-600';\n  const sizeStyles = sizes[size];\n\n  return (\n    <ToggleLabel\n      className={className}\n      htmlFor={label}\n      variant={variant}\n      disabled={disabled}\n    >\n      <HiddenText>{label}</HiddenText>\n      <ToggleInput\n        type=\"checkbox\"\n        checked={checked}\n        id={label}\n        disabled={disabled}\n        onChange={onChange}\n      />\n      <ToggleTrack\n        {...sizeStyles}\n        borderColor={activeColor}\n        bg={checkedColor}\n        borderRadius=\"99rem\"\n        position=\"relative\"\n      >\n        <Box\n          width=\"40%\"\n          borderRadius=\"50%\"\n          bg=\"white\"\n          position=\"absolute\"\n          top=\"10%\"\n          bottom=\"10%\"\n          left={checked ? '55%' : '5%'}\n        />\n      </ToggleTrack>\n    </ToggleLabel>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}