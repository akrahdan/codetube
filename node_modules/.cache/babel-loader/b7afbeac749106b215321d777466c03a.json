{"ast":null,"code":"import React from'react';import{FormError,FormGroup,FormGroupLabel}from'../../Form';import{HiddenText}from'../../HiddenText';import{Column}from'../../Layout';import{GridFormCheckboxInput}from'./GridFormCheckboxInput';import{GridFormCustomInput}from'./GridFormCustomInput';import{GridFormFileInput}from'./GridFormFileInput';import{GridFormHiddenInput}from'./GridFormHiddenInput';import{GridFormRadioGroupInput}from'./GridFormRadioGroupInput';import{GridFormSelectInput}from'./GridFormSelectInput';import{GridFormSweetContainerInput}from'./GridFormSweetContainerInput';import{GridFormTextArea}from'./GridFormTextArea';import{GridFormTextInput}from'./GridFormTextInput';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var GridFormInputGroup=function GridFormInputGroup(_ref){var _field$rowspan2;var error=_ref.error,isFirstError=_ref.isFirstError,field=_ref.field,register=_ref.register,setValue=_ref.setValue,showRequired=_ref.showRequired,required=_ref.required;var errorMessage=error||field.customError;var isRequired=showRequired&&required;var getInput=function getInput(){switch(field.type){case'checkbox':return/*#__PURE__*/_jsx(GridFormCheckboxInput,{field:field,register:register,showRequired:isRequired});case'custom':case'custom-group':return/*#__PURE__*/_jsx(GridFormCustomInput,{field:field,register:register,setValue:setValue,error:errorMessage});case'radio-group':return/*#__PURE__*/_jsx(GridFormRadioGroupInput,{field:field,register:register,showRequired:isRequired,setValue:setValue});case'select':return/*#__PURE__*/_jsx(GridFormSelectInput,{error:!!errorMessage,field:field,register:register,showRequired:isRequired});case'file':return/*#__PURE__*/_jsx(GridFormFileInput,{error:!!errorMessage,field:field,register:register,showRequired:isRequired});case'textarea':return/*#__PURE__*/_jsx(GridFormTextArea,{error:!!errorMessage,field:field,register:register,showRequired:isRequired});case'hidden':return/*#__PURE__*/_jsx(GridFormHiddenInput,{register:register,field:field});case'sweet-container':return/*#__PURE__*/_jsx(GridFormSweetContainerInput,{register:register,field:field,label:field.label});default:return/*#__PURE__*/_jsx(GridFormTextInput,{error:!!errorMessage,field:field,register:register,showRequired:isRequired});}};var unwrappedInput=function unwrappedInput(field){return['hidden','sweet-container'].includes(field.type);};if(unwrappedInput(field)){return getInput();}if(field.type==='custom-group'){var _field$rowspan;return/*#__PURE__*/_jsx(Column,{size:field===null||field===void 0?void 0:field.size,rowspan:(_field$rowspan=field===null||field===void 0?void 0:field.rowspan)!==null&&_field$rowspan!==void 0?_field$rowspan:1,children:getInput()});}var label=/*#__PURE__*/_jsx(FormGroupLabel,{disabled:field.disabled,htmlFor:field.id||field.name,tooltip:field.tooltip,showRequired:isRequired,children:field.label});return/*#__PURE__*/_jsx(Column,{size:field===null||field===void 0?void 0:field.size,rowspan:(_field$rowspan2=field===null||field===void 0?void 0:field.rowspan)!==null&&_field$rowspan2!==void 0?_field$rowspan2:1,children:/*#__PURE__*/_jsxs(FormGroup,{mb:0,children:[field.hideLabel?/*#__PURE__*/_jsx(HiddenText,{children:label}):label,getInput(),errorMessage&&/*#__PURE__*/_jsx(FormError,{role:isFirstError?'alert':'status',\"aria-live\":isFirstError?'assertive':'off',children:errorMessage})]})});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/GridFormInputGroup/index.tsx"],"names":["React","FormError","FormGroup","FormGroupLabel","HiddenText","Column","GridFormCheckboxInput","GridFormCustomInput","GridFormFileInput","GridFormHiddenInput","GridFormRadioGroupInput","GridFormSelectInput","GridFormSweetContainerInput","GridFormTextArea","GridFormTextInput","GridFormInputGroup","error","isFirstError","field","register","setValue","showRequired","required","errorMessage","customError","isRequired","getInput","type","label","unwrappedInput","includes","size","rowspan","disabled","id","name","tooltip","hideLabel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UseFormMethods } from 'react-hook-form';\n\nimport { FormError, FormGroup, FormGroupLabel } from '../../Form';\nimport { HiddenText } from '../../HiddenText';\nimport { Column } from '../../Layout';\nimport {\n  GridFormField,\n  GridFormHiddenField,\n  GridFormSweetContainerField,\n} from '../types';\nimport { GridFormCheckboxInput } from './GridFormCheckboxInput';\nimport { GridFormCustomInput } from './GridFormCustomInput';\nimport { GridFormFileInput } from './GridFormFileInput';\nimport { GridFormHiddenInput } from './GridFormHiddenInput';\nimport { GridFormRadioGroupInput } from './GridFormRadioGroupInput';\nimport { GridFormSelectInput } from './GridFormSelectInput';\nimport { GridFormSweetContainerInput } from './GridFormSweetContainerInput';\nimport { GridFormTextArea } from './GridFormTextArea';\nimport { GridFormTextInput } from './GridFormTextInput';\n\nexport type GridFormInputGroupProps = {\n  error?: string;\n  isFirstError?: boolean;\n  field: GridFormField;\n  register: UseFormMethods['register'];\n  setValue: UseFormMethods['setValue'];\n  required?: boolean;\n  showRequired?: boolean;\n};\n\nexport const GridFormInputGroup: React.FC<GridFormInputGroupProps> = ({\n  error,\n  isFirstError,\n  field,\n  register,\n  setValue,\n  showRequired,\n  required,\n}) => {\n  const errorMessage = error || field.customError;\n  const isRequired = showRequired && required;\n\n  const getInput = () => {\n    switch (field.type) {\n      case 'checkbox':\n        return (\n          <GridFormCheckboxInput\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'custom':\n      case 'custom-group':\n        return (\n          <GridFormCustomInput\n            field={field}\n            register={register}\n            setValue={setValue}\n            error={errorMessage}\n          />\n        );\n\n      case 'radio-group':\n        return (\n          <GridFormRadioGroupInput\n            field={field}\n            register={register}\n            showRequired={isRequired}\n            setValue={setValue}\n          />\n        );\n\n      case 'select':\n        return (\n          <GridFormSelectInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'file':\n        return (\n          <GridFormFileInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n\n      case 'textarea':\n        return (\n          <GridFormTextArea\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n      case 'hidden':\n        return <GridFormHiddenInput register={register} field={field} />;\n\n      case 'sweet-container':\n        return (\n          <GridFormSweetContainerInput\n            register={register}\n            field={field}\n            label={field.label}\n          />\n        );\n\n      default:\n        return (\n          <GridFormTextInput\n            error={!!errorMessage}\n            field={field}\n            register={register}\n            showRequired={isRequired}\n          />\n        );\n    }\n  };\n\n  const unwrappedInput = (\n    field: GridFormField\n  ): field is GridFormHiddenField | GridFormSweetContainerField =>\n    ['hidden', 'sweet-container'].includes(field.type);\n\n  if (unwrappedInput(field)) {\n    return getInput();\n  }\n\n  if (field.type === 'custom-group') {\n    return (\n      <Column size={field?.size} rowspan={field?.rowspan ?? 1}>\n        {getInput()}\n      </Column>\n    );\n  }\n\n  const label = (\n    <FormGroupLabel\n      disabled={field.disabled}\n      htmlFor={field.id || field.name}\n      tooltip={field.tooltip}\n      showRequired={isRequired}\n    >\n      {field.label}\n    </FormGroupLabel>\n  );\n\n  return (\n    <Column size={field?.size} rowspan={field?.rowspan ?? 1}>\n      <FormGroup mb={0}>\n        {field.hideLabel ? <HiddenText>{label}</HiddenText> : label}\n        {getInput()}\n        {errorMessage && (\n          <FormError\n            role={isFirstError ? 'alert' : 'status'}\n            aria-live={isFirstError ? 'assertive' : 'off'}\n          >\n            {errorMessage}\n          </FormError>\n        )}\n      </FormGroup>\n    </Column>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}