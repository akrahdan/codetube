{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults } from \"portal/scenes/CoursePlayer/constants\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekEvent: null,\n  seekingEvent: null\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      state.playing = true;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    ready: (state, action) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action) => {\n      state.seekEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      video;\n      return {\n        seekedEvent,\n        seekingEvent,\n        player\n      };\n    },\n    fastForward: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const forwardTime = time + 10;\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    fastRewind: (state, action) => {\n      const {\n        time,\n        duration\n      } = state;\n      const startTime = 0;\n      const rewindTime = time - 10;\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true\n      };\n    },\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n\n      state.muted = true;\n      state.previousVolume = state.volume;\n      state.volume = 0;\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind\n} = playerSlice.actions;\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","playheadStart","overlay","videoPlayer","seekEvent","seekingEvent","playerSlice","name","reducers","play","state","action","pause","setPlaybackSpeed","payload","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","setDuration","setTime","ready","registerPlayer","Event","video","seekedEvent","player","fastForward","forwardTime","newTime","icon","key","Math","random","fade","fastRewind","startTime","rewindTime","toggleMute","selectPlayer","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n} from \"portal/scenes/CoursePlayer/constants\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number;\n  duration: number;\n  playheadStart: number;\n  overlay: Overlay;\n  videoPlayer: HTMLVideoElement;\n  seekEvent: Event,\n  seekingEvent: Event\n}\n\nexport interface Overlay {\n  icon: string;\n  key: number;\n  fade: boolean;\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0,\n  playheadStart: 0,\n  overlay: null,\n  videoPlayer: null,\n  seekEvent: null,\n  seekingEvent: null,\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<void>) => {\n      state.playing = true;\n    },\n\n    pause: (state, action: PayloadAction<void>) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    setDuration: (state, action: PayloadAction<number>) => {\n      state.duration = action.payload;\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n      state.time = action.payload;\n    },\n\n    ready: (state, action: PayloadAction<number>) => {\n      state.playheadStart = state.time;\n      state.duration = action.payload;\n    },\n    registerPlayer: (state, action: PayloadAction<HTMLVideoElement>) => {\n      state.seekEvent = new Event(\"ps-seeked\");\n      state.seekingEvent = new Event(\"ps-seeking\");\n      video\n      return { seekedEvent, seekingEvent, player };\n    },\n    fastForward: (state, action: PayloadAction<number>) => {\n      const { time, duration } = state;\n\n      const forwardTime = time + 10;\n\n      const newTime = forwardTime > duration ? duration : forwardTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"FWD\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    fastRewind: (state, action: PayloadAction<number>) => {\n      const { time, duration } = state;\n\n      const startTime = 0;\n      const rewindTime = time - 10;\n\n      const newTime = rewindTime < startTime ? startTime : rewindTime;\n      state.playheadStart = newTime;\n      state.time = newTime;\n      state.overlay = {\n        icon: \"BACK\",\n        key: Math.random(),\n        fade: true,\n      };\n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n      state.muted = true;\n      state.previousVolume = state.volume;\n      state.volume = 0;\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n  setDuration,\n  setTime,\n  ready,\n  fastForward,\n  fastRewind,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}