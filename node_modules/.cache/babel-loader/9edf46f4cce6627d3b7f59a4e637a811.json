{"ast":null,"code":"import { cfdata } from 'libs/cfdata';\n\n/**\n * @deprecated Use Redux instead!\n * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n * mostly around storing _never-changing_ global API configurations and authentication keys.\n * But for the most part you should really be using Redux for shared data.\n * Talk to Web Platform if you want to use this. :)\n */\nexport const userAttributes = {\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdmin() {\n    return this._hasRole('admin');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdvisor() {\n    return this._hasRole('advisor') || this._hasRole('advisor_candidate');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isCustomerService() {\n    return this._hasRole('customer_service');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAuthor() {\n    return this._hasRole('author');\n  },\n\n  _hasRole(role) {\n    const roles = this.get('roles') || [];\n    return roles.indexOf(role) >= 0;\n  },\n\n  isPro() {\n    return this.get('pro', false);\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  authenticationToken() {\n    const user = this.isAnon() ? cfdata['anonymous_user'] : cfdata['current_user'];\n    return (user === null || user === void 0 ? void 0 : user.authentication_token) || '';\n  }\n\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/libs/userAttributes.ts"],"names":["cfdata","userAttributes","isAdmin","_hasRole","isAdvisor","isCustomerService","isAuthor","role","roles","get","indexOf","isPro","authenticationToken","user","isAnon","authentication_token"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG;AAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,QAAL,CAAc,OAAd,CAAP;AACD,GAV2B;;AAY5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKD,QAAL,CAAc,SAAd,KAA4B,KAAKA,QAAL,CAAc,mBAAd,CAAnC;AACD,GArB2B;;AAuB5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKF,QAAL,CAAc,kBAAd,CAAP;AACD,GAhC2B;;AAkC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKH,QAAL,CAAc,QAAd,CAAP;AACD,GA3C2B;;AA6C5BA,EAAAA,QAAQ,CAACI,IAAD,EAAe;AACrB,UAAMC,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,KAAqB,EAAnC;AACA,WAAOD,KAAK,CAACE,OAAN,CAAcH,IAAd,KAAuB,CAA9B;AACD,GAhD2B;;AAmD5BI,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKF,GAAL,CAAS,KAAT,EAAgB,KAAhB,CAAP;AACD,GArD2B;;AA0D5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,IAAI,GAAG,KAAKC,MAAL,KACTd,MAAM,CAAC,gBAAD,CADG,GAETA,MAAM,CAAC,cAAD,CAFV;AAGA,WAAO,CAAAa,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,oBAAN,KAA8B,EAArC;AACD;;AAtE2B,CAAvB","sourcesContent":["import { cfdata } from 'libs/cfdata';\nimport { RawCurrentUser } from 'typings/user';\n\n/**\n * @deprecated Use Redux instead!\n * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n * mostly around storing _never-changing_ global API configurations and authentication keys.\n * But for the most part you should really be using Redux for shared data.\n * Talk to Web Platform if you want to use this. :)\n */\nexport const userAttributes = {\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdmin() {\n    return this._hasRole('admin');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAdvisor() {\n    return this._hasRole('advisor') || this._hasRole('advisor_candidate');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isCustomerService() {\n    return this._hasRole('customer_service');\n  },\n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  isAuthor() {\n    return this._hasRole('author');\n  },\n\n  _hasRole(role: string) {\n    const roles = this.get('roles') || [];\n    return roles.indexOf(role) >= 0;\n  },\n\n\n  isPro() {\n    return this.get('pro', false);\n  },\n\n \n \n\n  /**\n   * @deprecated Use Redux instead!\n   * Ok, technically this isn't \"deprecated\": there are some real use cases for userAttributes,\n   * mostly around storing _never-changing_ global API configurations and authentication keys.\n   * But for the most part you should really be using Redux for shared data.\n   * Talk to Web Platform if you want to use this. :)\n   */\n  authenticationToken() {\n    const user = this.isAnon()\n      ? cfdata['anonymous_user']\n      : cfdata['current_user'];\n    return user?.authentication_token || '';\n  }\n}"]},"metadata":{},"sourceType":"module"}