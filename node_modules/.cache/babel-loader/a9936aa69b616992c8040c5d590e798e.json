{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/FloatingCard/FloatingCard.tsx\";\nimport { styledOptions, system } from '@codecademy/gamut-styles';\nimport { variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, { forwardRef } from 'react';\nimport { Pattern } from '../Pattern';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardProps = variance.compose(system.layout, system.padding);\nconst beakVariants = system.variant({\n  prop: 'beak',\n  base: {\n    p: 12,\n    '&:after': {\n      content: '\"\"',\n      width: '1.25rem',\n      height: '1.25rem',\n      bg: 'inherit',\n      transform: 'rotate(45deg)',\n      position: 'absolute',\n      borderRadiusTopLeft: '2px',\n      border: 1,\n      borderStyleRight: 'none',\n      borderStyleBottom: 'none'\n    }\n  },\n  variants: {\n    'bottom-left': {\n      '&:after': {\n        bottom: 'calc(-0.625rem - 1px)',\n        left: '1.5rem',\n        transform: 'rotate(225deg)'\n      }\n    },\n    'bottom-right': {\n      '&:after': {\n        bottom: 'calc(-0.625rem - 1px)',\n        right: '1.5rem',\n        transform: 'rotate(225deg)'\n      }\n    },\n    'top-left': {\n      '&:after': {\n        top: 'calc(-0.625rem - 1px)',\n        left: '1.5rem',\n        transform: 'rotate(45deg)'\n      }\n    },\n    'top-right': {\n      '&:after': {\n        top: 'calc(-0.625rem - 1px)',\n        right: '1.5rem',\n        transform: 'rotate(45deg)'\n      }\n    }\n  }\n});\nconst CardWrapper = styled.div(system.css({\n  maxWidth: '100%',\n  position: 'relative',\n  display: 'inline-block',\n  textColor: 'text',\n  zIndex: 1\n}));\n_c = CardWrapper;\nconst CardShadow = styled(Pattern)(system.css({\n  width: 1,\n  height: 1,\n  position: 'absolute',\n  top: '.5rem',\n  left: '-.5rem'\n}));\nconst CardBody = styled('div', styledOptions)(system.css({\n  p: 12,\n  zIndex: 1,\n  position: 'relative',\n  bg: 'background',\n  borderRadius: '2px',\n  border: 1,\n  maxWidth: 1\n}), beakVariants, cardProps);\nexport const FloatingCard = /*#__PURE__*/forwardRef(_c2 = ({\n  children,\n  className,\n  pattern = 'checkerDense',\n  ...rest\n}, ref) => /*#__PURE__*/_jsxDEV(CardWrapper, {\n  children: [/*#__PURE__*/_jsxDEV(CardShadow, {\n    name: pattern\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n    className: className,\n    ...rest,\n    ref: ref,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 102,\n  columnNumber: 5\n}, this));\n_c3 = FloatingCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CardWrapper\");\n$RefreshReg$(_c2, \"FloatingCard$forwardRef\");\n$RefreshReg$(_c3, \"FloatingCard\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/FloatingCard/FloatingCard.tsx"],"names":["styledOptions","system","variance","styled","React","forwardRef","Pattern","cardProps","compose","layout","padding","beakVariants","variant","prop","base","p","content","width","height","bg","transform","position","borderRadiusTopLeft","border","borderStyleRight","borderStyleBottom","variants","bottom","left","right","top","CardWrapper","div","css","maxWidth","display","textColor","zIndex","CardShadow","CardBody","borderRadius","FloatingCard","children","className","pattern","rest","ref"],"mappings":"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","sourcesContent":["import { styledOptions, system } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, { ComponentProps, forwardRef } from 'react';\n\nimport { Pattern } from '../Pattern';\n\nconst cardProps = variance.compose(system.layout, system.padding);\n\nconst beakVariants = system.variant({\n  prop: 'beak',\n  base: {\n    p: 12,\n    '&:after': {\n      content: '\"\"',\n      width: '1.25rem',\n      height: '1.25rem',\n      bg: 'inherit',\n      transform: 'rotate(45deg)',\n      position: 'absolute',\n      borderRadiusTopLeft: '2px',\n      border: 1,\n      borderStyleRight: 'none',\n      borderStyleBottom: 'none',\n    },\n  },\n  variants: {\n    'bottom-left': {\n      '&:after': {\n        bottom: 'calc(-0.625rem - 1px)',\n        left: '1.5rem',\n        transform: 'rotate(225deg)',\n      },\n    },\n    'bottom-right': {\n      '&:after': {\n        bottom: 'calc(-0.625rem - 1px)',\n        right: '1.5rem',\n        transform: 'rotate(225deg)',\n      },\n    },\n    'top-left': {\n      '&:after': {\n        top: 'calc(-0.625rem - 1px)',\n        left: '1.5rem',\n        transform: 'rotate(45deg)',\n      },\n    },\n    'top-right': {\n      '&:after': {\n        top: 'calc(-0.625rem - 1px)',\n        right: '1.5rem',\n        transform: 'rotate(45deg)',\n      },\n    },\n  },\n});\n\nconst CardWrapper = styled.div(\n  system.css({\n    maxWidth: '100%',\n    position: 'relative',\n    display: 'inline-block',\n    textColor: 'text',\n    zIndex: 1,\n  })\n);\n\nconst CardShadow = styled(Pattern)(\n  system.css({\n    width: 1,\n    height: 1,\n    position: 'absolute',\n    top: '.5rem',\n    left: '-.5rem',\n  })\n);\n\nconst CardBody = styled('div', styledOptions)<\n  StyleProps<typeof beakVariants> & StyleProps<typeof cardProps>\n>(\n  system.css({\n    p: 12,\n    zIndex: 1,\n    position: 'relative',\n    bg: 'background',\n    borderRadius: '2px',\n    border: 1,\n    maxWidth: 1,\n  }),\n  beakVariants,\n  cardProps\n);\n\nexport type FloatingCardProps = {\n  className?: string;\n  pattern: ComponentProps<typeof Pattern>['name'];\n} & ComponentProps<typeof CardBody>;\n\nexport const FloatingCard = forwardRef<HTMLDivElement, FloatingCardProps>(\n  ({ children, className, pattern = 'checkerDense', ...rest }, ref) => (\n    <CardWrapper>\n      <CardShadow name={pattern} />\n      <CardBody className={className} {...rest} ref={ref}>\n        {children}\n      </CardBody>\n    </CardWrapper>\n  )\n);\n"]},"metadata":{},"sourceType":"module"}