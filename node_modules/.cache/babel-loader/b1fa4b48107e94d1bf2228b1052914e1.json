{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/AppHeader/AppHeaderElements/AppHeaderDropdown/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@codecademy/gamut';\nimport { ArrowChevronDownFilledIcon } from '@codecademy/gamut-icons';\nimport styled from '@emotion/styled';\nimport cx from 'classnames';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport React, { useRef, useState } from 'react';\nimport { Popover } from '../../../Popover';\nimport { AppHeaderAvatar } from '../AppHeaderAvatar';\nimport { AppHeaderLinkSections } from '../AppHeaderLinkSections';\nimport { focusStyles, hoverStyles, textButtonStyles } from '../SharedStyles';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppHeaderTextTargetButton = styled.button`\n  ${textButtonStyles}\n  ${hoverStyles}\n  ${focusStyles}\n`;\n_c = AppHeaderTextTargetButton;\nconst AppHeaderAvatarTargetButton = styled.button`\n  background-color: transparent;\n  border: transparent;\n  font-weight: normal;\n  padding: 2px 0;\n  ${hoverStyles}\n  ${focusStyles}\n`;\n_c2 = AppHeaderAvatarTargetButton;\nexport const AppHeaderDropdown = ({\n  action,\n  item\n}) => {\n  _s();\n\n  const headerDropdownRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleIsOpen = event => {\n    setIsOpen(!isOpen);\n    !isOpen && action(event, item);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const clickTarget = item.type === 'profile-dropdown' ? /*#__PURE__*/_jsxDEV(AppHeaderAvatarTargetButton, {\n    onClick: event => toggleIsOpen(event),\n    children: /*#__PURE__*/_jsxDEV(AppHeaderAvatar, {\n      imageUrl: item.avatar,\n      avatarSubTitle: item.userDisplayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(AppHeaderTextTargetButton, {\n    className: cx(styles.target, isOpen && styles.open),\n    onClick: event => toggleIsOpen(event),\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      title: item.text,\n      className: styles.copy,\n      children: item.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ArrowChevronDownFilledIcon, {\n      size: 12,\n      className: styles.icon,\n      \"aria-label\": \"dropdown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n  const paddingY = 24;\n  const linkHeight = 56;\n  const separatorHeight = 16;\n\n  const getPopoverHeight = () => {\n    if (item.type === 'dropdown') return item.popover.length * linkHeight + paddingY;\n    const numberOfLinks = item.popover.reduce((sum, linksArray) => sum + linksArray.length, 0);\n    const totalSeparatorHeight = separatorHeight * (item.popover.length - 1);\n    return numberOfLinks * linkHeight + totalSeparatorHeight + paddingY;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: headerDropdownRef,\n      children: clickTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: isOpen && /*#__PURE__*/_jsxDEV(Popover, {\n        align: item.type === 'profile-dropdown' ? 'right' : 'left',\n        verticalOffset: item.type === 'profile-dropdown' ? 0 : -2,\n        outline: true,\n        isOpen: isOpen,\n        onRequestClose: handleClose,\n        targetRef: headerDropdownRef,\n        children: /*#__PURE__*/_jsxDEV(motion.div, {\n          style: {\n            overflow: 'hidden',\n            top: '12px',\n            position: 'relative'\n          },\n          initial: {\n            height: 0\n          },\n          animate: {\n            height: getPopoverHeight()\n          },\n          transition: {\n            duration: 0.175\n          },\n          exit: {\n            height: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            px: 24,\n            children: /*#__PURE__*/_jsxDEV(AppHeaderLinkSections, {\n              action: action,\n              item: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AppHeaderDropdown, \"r2TWaElii1dGC9i9IOssoR/5Uf0=\");\n\n_c3 = AppHeaderDropdown;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppHeaderTextTargetButton\");\n$RefreshReg$(_c2, \"AppHeaderAvatarTargetButton\");\n$RefreshReg$(_c3, \"AppHeaderDropdown\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/AppHeader/AppHeaderElements/AppHeaderDropdown/index.tsx"],"names":["Box","ArrowChevronDownFilledIcon","styled","cx","AnimatePresence","motion","React","useRef","useState","Popover","AppHeaderAvatar","AppHeaderLinkSections","focusStyles","hoverStyles","textButtonStyles","styles","AppHeaderTextTargetButton","button","AppHeaderAvatarTargetButton","AppHeaderDropdown","action","item","headerDropdownRef","isOpen","setIsOpen","toggleIsOpen","event","handleClose","clickTarget","type","avatar","userDisplayName","target","open","text","copy","icon","paddingY","linkHeight","separatorHeight","getPopoverHeight","popover","length","numberOfLinks","reduce","sum","linksArray","totalSeparatorHeight","overflow","top","position","height","duration"],"mappings":"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","sourcesContent":["import { Box } from '@codecademy/gamut';\nimport { ArrowChevronDownFilledIcon } from '@codecademy/gamut-icons';\nimport styled from '@emotion/styled';\nimport cx from 'classnames';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport React, { useRef, useState } from 'react';\n\nimport { Popover } from '../../../Popover';\nimport { AppHeaderAvatar } from '../AppHeaderAvatar';\nimport { AppHeaderLinkSections } from '../AppHeaderLinkSections';\nimport { focusStyles, hoverStyles, textButtonStyles } from '../SharedStyles';\nimport { AppHeaderClickHandler, AppHeaderDropdownItem } from '../types';\nimport styles from './styles.module.scss';\n\nconst AppHeaderTextTargetButton = styled.button`\n  ${textButtonStyles}\n  ${hoverStyles}\n  ${focusStyles}\n`;\n\nconst AppHeaderAvatarTargetButton = styled.button`\n  background-color: transparent;\n  border: transparent;\n  font-weight: normal;\n  padding: 2px 0;\n  ${hoverStyles}\n  ${focusStyles}\n`;\n\nexport type AppHeaderDropdownProps = {\n  action: AppHeaderClickHandler;\n  item: AppHeaderDropdownItem;\n};\n\nexport const AppHeaderDropdown: React.FC<AppHeaderDropdownProps> = ({\n  action,\n  item,\n}) => {\n  const headerDropdownRef = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleIsOpen = (event: React.MouseEvent) => {\n    setIsOpen(!isOpen);\n    !isOpen && action(event, item);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  const clickTarget =\n    item.type === 'profile-dropdown' ? (\n      <AppHeaderAvatarTargetButton onClick={(event) => toggleIsOpen(event)}>\n        <AppHeaderAvatar imageUrl={item.avatar} avatarSubTitle={item.userDisplayName} />\n      </AppHeaderAvatarTargetButton>\n    ) : (\n      <AppHeaderTextTargetButton\n        className={cx(styles.target, isOpen && styles.open)}\n        onClick={(event) => toggleIsOpen(event)}\n      >\n        <span title={item.text} className={styles.copy}>\n          {item.text}\n        </span>\n        <ArrowChevronDownFilledIcon\n          size={12}\n          className={styles.icon}\n          aria-label=\"dropdown\"\n        />\n      </AppHeaderTextTargetButton>\n    );\n\n  const paddingY = 24;\n  const linkHeight = 56;\n  const separatorHeight = 16;\n  const getPopoverHeight = () => {\n    if (item.type === 'dropdown')\n      return item.popover.length * linkHeight + paddingY;\n    const numberOfLinks = item.popover.reduce(\n      (sum, linksArray) => sum + linksArray.length,\n      0\n    );\n    const totalSeparatorHeight = separatorHeight * (item.popover.length - 1);\n    return numberOfLinks * linkHeight + totalSeparatorHeight + paddingY;\n  };\n\n  return (\n    <>\n      <div ref={headerDropdownRef}>{clickTarget}</div>\n      <AnimatePresence>\n        {isOpen && (\n          <Popover\n            align={item.type === 'profile-dropdown' ? 'right' : 'left'}\n            verticalOffset={item.type === 'profile-dropdown' ? 0 : -2}\n            outline\n            isOpen={isOpen}\n            onRequestClose={handleClose}\n            targetRef={headerDropdownRef}\n          >\n            <motion.div\n              style={{ overflow: 'hidden', top: '12px', position: 'relative' }}\n              initial={{ height: 0 }}\n              animate={{ height: getPopoverHeight() }}\n              transition={{ duration: 0.175 }}\n              exit={{ height: 0 }}\n            >\n              <Box px={24}>\n                <AppHeaderLinkSections action={action} item={item} />\n              </Box>\n            </motion.div>\n          </Popover>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}