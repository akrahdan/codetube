{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Truncate/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { isValidElement, useEffect, useState } from 'react';\nimport TruncateMarkup from 'react-truncate-markup';\nimport { Box } from '../Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Truncate = ({\n  className,\n  children,\n  lines,\n  expanded,\n  onTruncate = () => {}\n}) => {\n  _s();\n\n  const [isTruncated, setIsTruncated] = useState(false);\n  useEffect(() => {\n    onTruncate(isTruncated);\n  }, [isTruncated, onTruncate]);\n  /** Truncate markup expects a single child element */\n\n  const truncatedChildren = /*#__PURE__*/_jsxDEV(TruncateMarkup, {\n    tokenize: \"characters\",\n    ellipsis: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this),\n    lines: lines,\n    onTruncate: setIsTruncated,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      as: \"span\",\n      display: \"inline-block\",\n      width: \"100%\",\n      className: className,\n      children: React.Children.map(children, child => /*#__PURE__*/isValidElement(child) || typeof child === 'string' ? child : /*#__PURE__*/_jsxDEV(TruncateMarkup.Atom, {\n        children: child\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n  /** If lines is false do not attempt to truncate */\n\n\n  return expanded ? /*#__PURE__*/_jsxDEV(Box, {\n    as: \"span\",\n    display: \"inline-block\",\n    width: \"100%\",\n    className: className,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this) : truncatedChildren;\n};\n\n_s(Truncate, \"8Bv3j2SsHVboXjDRYlAA37blvyA=\");\n\n_c = Truncate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Truncate\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Truncate/index.tsx"],"names":["React","isValidElement","useEffect","useState","TruncateMarkup","Box","Truncate","className","children","lines","expanded","onTruncate","isTruncated","setIsTruncated","truncatedChildren","Children","map","child"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,cAAhB,EAAgCC,SAAhC,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,SAASC,GAAT,QAAoB,QAApB;;AAaA,OAAO,MAAMC,QAAiC,GAAG,CAAC;AAChDC,EAAAA,SADgD;AAEhDC,EAAAA,QAFgD;AAGhDC,EAAAA,KAHgD;AAIhDC,EAAAA,QAJgD;AAKhDC,EAAAA,UAAU,GAAG,MAAM,CAAE;AAL2B,CAAD,KAM3C;AAAA;;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,CAACC,WAAD,CAAV;AACD,GAFQ,EAEN,CAACA,WAAD,EAAcD,UAAd,CAFM,CAAT;AAIA;;AACA,QAAMG,iBAAiB,gBACrB,QAAC,cAAD;AACE,IAAA,QAAQ,EAAC,YADX;AAEE,IAAA,QAAQ,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFZ;AAGE,IAAA,KAAK,EAAEL,KAHT;AAIE,IAAA,UAAU,EAAEI,cAJd;AAAA,2BAME,QAAC,GAAD;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,OAAO,EAAC,cAAvB;AAAsC,MAAA,KAAK,EAAC,MAA5C;AAAmD,MAAA,SAAS,EAAEN,SAA9D;AAAA,gBACGP,KAAK,CAACe,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA8BS,KAAD,IAC5B,aAAAhB,cAAc,CAACgB,KAAD,CAAd,IAAyB,OAAOA,KAAP,KAAiB,QAA1C,GACEA,KADF,gBAGE,QAAC,cAAD,CAAgB,IAAhB;AAAA,kBAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA,cAJH;AADH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBA;;;AAEA,SAAOP,QAAQ,gBACb,QAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,cAAvB;AAAsC,IAAA,KAAK,EAAC,MAA5C;AAAmD,IAAA,SAAS,EAAEH,SAA9D;AAAA,cACGC;AADH;AAAA;AAAA;AAAA;AAAA,UADa,GAKbM,iBALF;AAOD,CA1CM;;GAAMR,Q;;KAAAA,Q","sourcesContent":["import React, { isValidElement, useEffect, useState } from 'react';\nimport TruncateMarkup from 'react-truncate-markup';\n\nimport { Box } from '../Box';\n\ntype TruncateProps = {\n  /** class name for styling */\n  className?: string;\n  /** number of the maximum lines to display, pass false to disable truncation */\n  lines: number;\n  /** make the truncation toggleable */\n  expanded?: boolean;\n  /** Callback indicating if truncation was necessary */\n  onTruncate?: (truncated: boolean) => void;\n};\n\nexport const Truncate: React.FC<TruncateProps> = ({\n  className,\n  children,\n  lines,\n  expanded,\n  onTruncate = () => {},\n}) => {\n  const [isTruncated, setIsTruncated] = useState(false);\n\n  useEffect(() => {\n    onTruncate(isTruncated);\n  }, [isTruncated, onTruncate]);\n\n  /** Truncate markup expects a single child element */\n  const truncatedChildren = (\n    <TruncateMarkup\n      tokenize=\"characters\"\n      ellipsis={<span>...</span>}\n      lines={lines}\n      onTruncate={setIsTruncated}\n    >\n      <Box as=\"span\" display=\"inline-block\" width=\"100%\" className={className}>\n        {React.Children.map(children, (child) =>\n          isValidElement(child) || typeof child === 'string' ? (\n            child\n          ) : (\n            <TruncateMarkup.Atom>{child}</TruncateMarkup.Atom>\n          )\n        )}\n      </Box>\n    </TruncateMarkup>\n  );\n\n  /** If lines is false do not attempt to truncate */\n\n  return expanded ? (\n    <Box as=\"span\" display=\"inline-block\" width=\"100%\" className={className}>\n      {children}\n    </Box>\n  ) : (\n    truncatedChildren\n  );\n};\n"]},"metadata":{},"sourceType":"module"}