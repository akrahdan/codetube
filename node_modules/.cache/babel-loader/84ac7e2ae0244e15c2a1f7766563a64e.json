{"ast":null,"code":"export var getRouteComponent=function getRouteComponent(routesMeta,locationType){var route=function(){return routesMeta[locationType];}();if(!route){throw new Error(\"Could not find equivalent route for '\".concat(locationType,\"'.\"));}return route;};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Instructor/Projects/getRouteComponent.tsx"],"names":["getRouteComponent","routesMeta","locationType","route","Error"],"mappings":"AAaA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAC/BC,UAD+B,CAE/BC,YAF+B,CAI5B,CACH,GAAMC,CAAAA,KAAK,CAAI,UAAM,CAEnB,MAAOF,CAAAA,UAAU,CAACC,YAAD,CAAjB,CACD,CAHa,EAAd,CAKA,GAAI,CAACC,KAAL,CAAY,CACV,KAAM,IAAIC,CAAAA,KAAJ,gDAAkDF,YAAlD,OAAN,CACD,CAED,MAAOC,CAAAA,KAAP,CACD,CAfM","sourcesContent":["import React from 'react';\n\nexport type MetaScene = {\n  portalData: unknown;\n};\n\nexport type RouteMeta = {\n  scene: React.ComponentType<MetaScene & any>;\n\n\n  pageName: string | undefined;\n};\n\nexport const getRouteComponent = (\n  routesMeta: Record<string, RouteMeta>,\n  locationType: string,\n \n) => {\n  const route = (() => {\n\n    return routesMeta[locationType];\n  })();\n\n  if (!route) {\n    throw new Error(`Could not find equivalent route for '${locationType}'.`);\n  }\n\n  return route;\n};\n"]},"metadata":{},"sourceType":"module"}