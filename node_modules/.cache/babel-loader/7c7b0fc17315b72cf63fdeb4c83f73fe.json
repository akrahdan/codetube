{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { Form } from '../Form';\nimport { LayoutGrid } from '../Layout';\nimport { GridFormButtons } from './GridFormButtons';\nimport { GridFormContent, GridFormSection, GridFormSectionBreak, GridFormSectionTitle } from './GridFormSections';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport * from './types';\nconst defaultColumnGap = {\n  _: 8,\n  sm: 32\n};\n\nconst isGridFormSection = field => {\n  return field.title !== undefined;\n};\n\nexport function GridForm({\n  cancel,\n  children,\n  className,\n  columnGap = defaultColumnGap,\n  fields = [],\n  onSubmit,\n  rowGap = 16,\n  submit,\n  validation = 'onSubmit',\n  showRequired = false\n}) {\n  _s();\n\n  const flatFields = fields.flatMap(field => isGridFormSection(field) ? field.fields : field);\n  const {\n    handleSubmit,\n    formState,\n    ...methods\n  } = useForm({\n    defaultValues: flatFields.reduce((defaultValues, field) => ({ ...defaultValues,\n      [field.name]: field.defaultValue\n    }), {}),\n    mode: validation\n  });\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    handleSubmit: handleSubmit,\n    formState: formState,\n    ...methods,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: className,\n      onSubmit: handleSubmit(onSubmit),\n      noValidate: true,\n      children: /*#__PURE__*/_jsxDEV(LayoutGrid, {\n        columnGap: columnGap,\n        rowGap: rowGap,\n        children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: fields.map(field => {\n            if (isGridFormSection(field)) {\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(GridFormSectionTitle, {\n                  title: field.title,\n                  as: field.as,\n                  layout: field.layout,\n                  numberOfFields: field.fields.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(GridFormSection, {\n                  fields: field.fields,\n                  showRequired: showRequired\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(GridFormSectionBreak, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 21\n                }, this)]\n              }, field.title, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this);\n            }\n\n            return /*#__PURE__*/_jsxDEV(GridFormContent, {\n              field: field,\n              showRequired: showRequired\n            }, field.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false), /*#__PURE__*/_jsxDEV(GridFormButtons, {\n          cancel: cancel,\n          ...submit,\n          disabled: validation === 'onChange' && !formState.isValid || submit.disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GridForm, \"/SZ6lcqZKOy7PJlLjefgBIsi1G8=\", false, function () {\n  return [useForm];\n});\n\n_c = GridForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridForm\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/GridForm/index.tsx"],"names":["React","Fragment","FormProvider","useForm","Form","LayoutGrid","GridFormButtons","GridFormContent","GridFormSection","GridFormSectionBreak","GridFormSectionTitle","defaultColumnGap","_","sm","isGridFormSection","field","title","undefined","GridForm","cancel","children","className","columnGap","fields","onSubmit","rowGap","submit","validation","showRequired","flatFields","flatMap","handleSubmit","formState","methods","defaultValues","reduce","name","defaultValue","mode","map","as","layout","length","isValid","disabled"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { FormProvider, Mode, SubmitHandler, useForm } from 'react-hook-form';\n\nimport { ButtonProps } from '../Button/shared';\nimport { Form } from '../Form';\nimport { LayoutGrid, LayoutGridProps } from '../Layout';\nimport { GridFormButtons, GridFormSubmitProps } from './GridFormButtons';\nimport {\n  GridFormContent,\n  GridFormSection,\n  GridFormSectionBreak,\n  GridFormSectionTitle,\n} from './GridFormSections';\nimport {\n  GridFormField,\n  GridFormFieldsProps,\n  GridFormSectionProps,\n} from './types';\n\nexport * from './types';\n\nconst defaultColumnGap = {\n  _: 8,\n  sm: 32,\n} as const;\n\nconst isGridFormSection = (\n  field: GridFormField | GridFormSectionProps\n): field is GridFormSectionProps => {\n  return (field as GridFormSectionProps).title !== undefined;\n};\n\nexport type GridFormProps<Values extends {}> = {\n  children?: React.ReactNode;\n  className?: string;\n\n  /**\n   * Layout grid column gap override.\n   */\n  columnGap?: LayoutGridProps['columnGap'];\n\n  /**\n   * Descriptions of any fields or sections comprising the form.\n   */\n  fields?: GridFormFieldsProps[];\n\n  /**\n   * Renders a cancel button with the provided child text and onClick function.\n   */\n  cancel?: ButtonProps;\n\n  /**\n   * Function called with field values on submit, if all validations have passed.\n   */\n  onSubmit: SubmitHandler<Values>;\n\n  /**\n   * Show asterisks next to required fields.\n   */\n  showRequired?: boolean;\n\n  /**\n   * Layout grid row gap override between fields.\n   */\n  rowGap?: LayoutGridProps['rowGap'];\n\n  /**\n   * Description of the submit button at the end of the form.\n   */\n  submit: GridFormSubmitProps & {\n    /**\n     * Manually overrides the submit button to be disabled regardless of validation, if true.\n     */\n    disabled?: boolean;\n  };\n\n  /**\n   * Which react hook form mode we are going to use for validation.\n   * If you use the onChange mode the submit button will be disabled until all\n   * required fields are completed.\n   */\n  validation?: Exclude<Mode, 'onBlur'>;\n};\n\nexport function GridForm<\n  Values extends Record<string, boolean | string | undefined | FileList>\n>({\n  cancel,\n  children,\n  className,\n  columnGap = defaultColumnGap,\n  fields = [],\n  onSubmit,\n  rowGap = 16,\n  submit,\n  validation = 'onSubmit',\n  showRequired = false,\n}: GridFormProps<Values>) {\n  const flatFields = fields.flatMap((field) =>\n    isGridFormSection(field) ? field.fields : field\n  );\n\n  const { handleSubmit, formState, ...methods } = useForm({\n    defaultValues: flatFields.reduce<any>(\n      (defaultValues, field) => ({\n        ...defaultValues,\n        [field.name]: field.defaultValue,\n      }),\n      {}\n    ),\n    mode: validation,\n  });\n\n  return (\n    <FormProvider\n      handleSubmit={handleSubmit}\n      formState={formState}\n      {...methods}\n    >\n      <Form className={className} onSubmit={handleSubmit(onSubmit)} noValidate>\n        <LayoutGrid columnGap={columnGap} rowGap={rowGap}>\n          <>\n            {fields.map((field) => {\n              if (isGridFormSection(field)) {\n                return (\n                  <Fragment key={field.title}>\n                    <GridFormSectionTitle\n                      title={field.title}\n                      as={field.as}\n                      layout={field.layout}\n                      numberOfFields={field.fields.length}\n                    />\n                    <GridFormSection\n                      fields={field.fields}\n                      showRequired={showRequired}\n                    />\n                    <GridFormSectionBreak />\n                  </Fragment>\n                );\n              }\n              return (\n                <GridFormContent\n                  field={field}\n                  showRequired={showRequired}\n                  key={field.name}\n                />\n              );\n            })}\n          </>\n\n          <GridFormButtons\n            cancel={cancel}\n            {...submit}\n            disabled={\n              (validation === 'onChange' && !formState.isValid) ||\n              submit.disabled\n            }\n          />\n          {children}\n        </LayoutGrid>\n      </Form>\n    </FormProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}