{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { projectApi } from 'services/projects';\nconst initialState = {\n  pricing: null,\n  project: null,\n  projects: null,\n  saveProps: {\n    submit: false,\n    locationPath: null\n  }\n};\nconst projectSplice = createSlice({\n  name: \"project\",\n  initialState: initialState,\n  reducers: {\n    saveProject: (state, action) => {\n      state.saveProps = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(projectApi.endpoints.createProject.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.project = payload;\n    }).addMatcher(projectApi.endpoints.updateProject.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.project = payload;\n    }).addMatcher(projectApi.endpoints.fetchProjects.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.projects = payload;\n    }).addMatcher(projectApi.endpoints.fetchIncluded.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.included = payload;\n    }).addMatcher(projectApi.endpoints.fetchOutcomes.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.outcomes = payload;\n    }).addMatcher(projectApi.endpoints.fetchSyllabus.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.syllabuses = payload;\n    }).addMatcher(projectApi.endpoints.fetchSyllabus.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.syllabuses = payload;\n    });\n  }\n});\nexport const {\n  saveCourse\n} = projectSplice.actions;\nexport default projectSplice.reducer;\nexport const selectCourse = state => state.course.course;\nexport const selectCourses = state => state.course.courses;\nexport const selectResources = state => state.course.resources;\nexport const selectPricing = state => state.course.pricing;\nexport const selectSave = state => state.course.saveProps;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/project/projectSplice.ts"],"names":["createSlice","projectApi","initialState","pricing","project","projects","saveProps","submit","locationPath","projectSplice","name","reducers","saveProject","state","action","payload","extraReducers","builder","addMatcher","endpoints","createProject","matchFulfilled","updateProject","fetchProjects","fetchIncluded","included","fetchOutcomes","outcomes","fetchSyllabus","syllabuses","saveCourse","actions","reducer","selectCourse","course","selectCourses","courses","selectResources","resources","selectPricing","selectSave"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserSubmitKey } from \"components/Forms/RegistrationForm/dist/types\";\nimport type { User } from \"services/auth\";\nimport type { RootState } from \"store\";\nimport type { TitleDescription, HeaderDescription, ProjectEntityResponse, Pricing } from 'services/projects';\nimport { projectApi } from 'services/projects'\ninterface submitProps {\n  submit: boolean;\n  locationPath: string;\n}\ntype ProjectState = {\n  project: ProjectEntityResponse | null;\n  projects: ProjectEntityResponse[] | null;\n  saveProps: submitProps | null;\n  pricing: Pricing | null;\n  outcomes: TitleDescription[] | null,\n  header: HeaderDescription | null,\n  included: TitleDescription[] | null,\n  syllabuses: TitleDescription[] | null,\n};\nconst initialState = {\n  pricing: null,\n  project: null,\n  projects: null,\n  saveProps: {\n    submit: false,\n    locationPath: null,\n  },\n};\nconst projectSplice = createSlice({\n  name: \"project\",\n  initialState: initialState as ProjectState,\n  reducers: {\n    saveProject: (state, action: PayloadAction<submitProps>) => {\n      state.saveProps = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addMatcher(\n        projectApi.endpoints.createProject.matchFulfilled,\n        (state, { payload }) => {\n          state.project = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.updateProject.matchFulfilled,\n        (state, { payload }) => {\n          state.project = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchProjects.matchFulfilled,\n        (state, { payload }) => {\n          state.projects = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchIncluded.matchFulfilled,\n        (state, { payload }) => {\n          state.included = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchOutcomes.matchFulfilled,\n        (state, { payload }) => {\n          state.outcomes = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.fetchSyllabus.matchFulfilled,\n        (state, { payload }) => {\n          state.syllabuses = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.fetchSyllabus.matchFulfilled,\n        (state, { payload }) => {\n          state.syllabuses = payload;\n        }\n      );\n  },\n});\n\nexport const { saveCourse } = projectSplice.actions;\n\nexport default projectSplice.reducer;\n\nexport const selectCourse = (state: RootState) => state.course.course;\nexport const selectCourses = (state: RootState) => state.course.courses;\nexport const selectResources = (state: RootState) => state.course.resources;\nexport const selectPricing = (state: RootState) => state.course.pricing;\nexport const selectSave = (state: RootState) => state.course.saveProps;\n"]},"metadata":{},"sourceType":"module"}