{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Toast/Toast.tsx\",\n    _s = $RefreshSig$();\n\nimport { MiniDeleteIcon } from '@codecademy/gamut-icons';\nimport { system } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { useMemo } from 'react';\nimport { Box } from '../Box';\nimport { IconButton } from '../Button/IconButton';\nimport { FloatingCard } from '../FloatingCard/FloatingCard';\nimport { Text } from '../Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst layoutVariants = system.variant({\n  prop: 'layout',\n  defaultVariant: 'message',\n  variants: {\n    message: {\n      minHeight: '80px',\n      gridTemplateAreas: `'message message close'`\n    },\n    'icon-message': {\n      gridTemplateAreas: `'icon message close'`,\n      minHeight: '104px'\n    },\n    'title-message': {\n      minHeight: '104px',\n      gridTemplateAreas: `'message message close'`\n    }\n  }\n});\nconst ToastContainer = styled(FloatingCard)(system.css({\n  display: 'grid',\n  width: 360,\n  py: 12,\n  px: 16,\n  pr: 12,\n  columnGap: 12,\n  gridTemplateColumns: '4rem 1fr 2rem'\n}), layoutVariants);\nconst IconContainer = styled(Box)(system.css({\n  bg: 'text',\n  width: 64,\n  height: 64,\n  border: 1,\n  gridArea: 'icon',\n  borderRadius: '50%',\n  backgroundSize: 'contain'\n}));\nexport const Toast = ({\n  title,\n  children,\n  icon,\n  onClose\n}) => {\n  _s();\n\n  const layoutType = useMemo(() => {\n    if (icon) return 'icon-message';\n    if (title) return 'title-message';\n    return 'message';\n  }, [title, icon]);\n  return /*#__PURE__*/_jsxDEV(ToastContainer, {\n    layout: layoutType,\n    pattern: \"checkerDense\",\n    children: [icon && /*#__PURE__*/_jsxDEV(IconContainer, {\n      alignSelf: \"center\",\n      backgroundImage: `url(${icon})`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      gridArea: \"message\",\n      py: 4,\n      children: [title && /*#__PURE__*/_jsxDEV(Text, {\n        variant: \"p-base\",\n        fontWeight: \"title\",\n        mb: 4,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"div\",\n        variant: \"p-small\",\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: onClose,\n      size: \"small\",\n      variant: \"secondary\",\n      icon: MiniDeleteIcon,\n      alignSelf: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Toast, \"HELzBZwccpzgC7Qa2/loYY4g89g=\");\n\n_c = Toast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toast\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Toast/Toast.tsx"],"names":["MiniDeleteIcon","system","styled","React","useMemo","Box","IconButton","FloatingCard","Text","layoutVariants","variant","prop","defaultVariant","variants","message","minHeight","gridTemplateAreas","ToastContainer","css","display","width","py","px","pr","columnGap","gridTemplateColumns","IconContainer","bg","height","border","gridArea","borderRadius","backgroundSize","Toast","title","children","icon","onClose","layoutType"],"mappings":"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","sourcesContent":["import { MiniDeleteIcon } from '@codecademy/gamut-icons';\nimport { system } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React, { ReactNode, useMemo } from 'react';\n\nimport { Box } from '../Box';\nimport { IconButton } from '../Button/IconButton';\nimport { FloatingCard } from '../FloatingCard/FloatingCard';\nimport { Text } from '../Typography';\n\nconst layoutVariants = system.variant({\n  prop: 'layout',\n  defaultVariant: 'message',\n  variants: {\n    message: {\n      minHeight: '80px',\n      gridTemplateAreas: `'message message close'`,\n    },\n    'icon-message': {\n      gridTemplateAreas: `'icon message close'`,\n      minHeight: '104px',\n    },\n    'title-message': {\n      minHeight: '104px',\n      gridTemplateAreas: `'message message close'`,\n    },\n  },\n});\n\nconst ToastContainer = styled(FloatingCard)<StyleProps<typeof layoutVariants>>(\n  system.css({\n    display: 'grid',\n    width: 360,\n    py: 12,\n    px: 16,\n    pr: 12,\n    columnGap: 12,\n    gridTemplateColumns: '4rem 1fr 2rem',\n  }),\n  layoutVariants\n);\n\nconst IconContainer = styled(Box)(\n  system.css({\n    bg: 'text',\n    width: 64,\n    height: 64,\n    border: 1,\n    gridArea: 'icon',\n    borderRadius: '50%',\n    backgroundSize: 'contain',\n  })\n);\n\ntype ToastProps = {\n  title?: ReactNode;\n  icon?: string;\n  onClose: () => void;\n};\n\nexport const Toast: React.FC<ToastProps> = ({\n  title,\n  children,\n  icon,\n  onClose,\n}) => {\n  const layoutType = useMemo(() => {\n    if (icon) return 'icon-message';\n    if (title) return 'title-message';\n    return 'message';\n  }, [title, icon]);\n\n  return (\n    <ToastContainer layout={layoutType} pattern=\"checkerDense\">\n      {icon && (\n        <IconContainer alignSelf=\"center\" backgroundImage={`url(${icon})`} />\n      )}\n      <Box gridArea=\"message\" py={4}>\n        {title && (\n          <Text variant=\"p-base\" fontWeight=\"title\" mb={4}>\n            {title}\n          </Text>\n        )}\n        <Text as=\"div\" variant=\"p-small\">\n          {children}\n        </Text>\n      </Box>\n      <IconButton\n        onClick={onClose}\n        size=\"small\"\n        variant=\"secondary\"\n        icon={MiniDeleteIcon}\n        alignSelf=\"start\"\n      />\n    </ToastContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}