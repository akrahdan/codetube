{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/Forms/OauthButtonGroup/index.tsx\";\nimport { StrokeButton } from '@codecademy/gamut';\nimport styled from '@emotion/styled';\nimport cx from 'classnames';\nimport React from 'react';\nimport { addParamsAsHash } from 'libs/url';\nimport { facebookAuthenticationUrl, githubAuthenticationUrl, googleAuthenticationUrl, linkedinAuthenticationUrl, twitterAuthenticationUrl } from '~/libs/urlHelpers';\nimport loginStrings from '~/localized/login.json';\nimport { SocialLogo } from './logos';\nimport styles from './styles/index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst orgConfigs = {\n  linkedin: {\n    org: 'LinkedIn',\n    url: linkedinAuthenticationUrl(),\n    signInOnly: false\n  },\n  google: {\n    org: 'Google',\n    url: googleAuthenticationUrl(),\n    signInOnly: false\n  },\n  facebook: {\n    org: 'Facebook',\n    url: facebookAuthenticationUrl(),\n    signInOnly: false\n  },\n  github: {\n    org: 'Github',\n    url: githubAuthenticationUrl(),\n    signInOnly: false\n  },\n  twitter: {\n    org: 'Twitter',\n    url: twitterAuthenticationUrl(),\n    signInOnly: true\n  }\n};\nconst defaultOrder = ['linkedin', 'google', 'facebook', 'github', 'twitter'];\nconst OauthButton = styled(StrokeButton)`\n  border-width: 1px;\n  border-radius: 2px;\n  margin-bottom: 0.5rem;\n  width: 65px;\n  height: 53px;\n  background-color: white;\n`;\n_c = OauthButton;\nexport const OauthButtonGroup = ({\n  classNames = {},\n  order,\n  signUp,\n  titlePrefix,\n  urlParams\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"oauth-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: cx(styles.heading, classNames.heading),\n      children: signUp ? loginStrings.oauthRegister : loginStrings.oauthLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(styles.btnContainer, classNames.buttons),\n      children: (order || defaultOrder).map(org => {\n        const orgConfig = orgConfigs[org];\n        if (orgConfig.signInOnly && signUp) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cx(styles.btnContainerItem, classNames.buttonContainer),\n          children: /*#__PURE__*/_jsxDEV(OauthButton, {\n            variant: \"secondary\",\n            href: addParamsAsHash(orgConfig.url, urlParams || {}),\n            children: [/*#__PURE__*/_jsxDEV(SocialLogo, {\n              org: orgConfig.org\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), titlePrefix && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: cx(classNames.buttonTitle),\n              children: `${titlePrefix} ${orgConfig.org}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, orgConfig.url, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_c2 = OauthButtonGroup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OauthButton\");\n$RefreshReg$(_c2, \"OauthButtonGroup\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/Forms/OauthButtonGroup/index.tsx"],"names":["StrokeButton","styled","cx","React","addParamsAsHash","facebookAuthenticationUrl","githubAuthenticationUrl","googleAuthenticationUrl","linkedinAuthenticationUrl","twitterAuthenticationUrl","loginStrings","SocialLogo","styles","orgConfigs","linkedin","org","url","signInOnly","google","facebook","github","twitter","defaultOrder","OauthButton","OauthButtonGroup","classNames","order","signUp","titlePrefix","urlParams","heading","oauthRegister","oauthLogin","btnContainer","buttons","map","orgConfig","btnContainerItem","buttonContainer","buttonTitle"],"mappings":"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","sourcesContent":["import { StrokeButton } from '@codecademy/gamut';\nimport styled from '@emotion/styled';\nimport cx from 'classnames';\nimport React from 'react';\n\nimport { addParamsAsHash } from 'libs/url';\nimport {\n  facebookAuthenticationUrl,\n  githubAuthenticationUrl,\n  googleAuthenticationUrl,\n  linkedinAuthenticationUrl,\n  twitterAuthenticationUrl,\n} from '~/libs/urlHelpers';\nimport loginStrings from '~/localized/login.json';\n\nimport { SocialLogo } from './logos';\nimport styles from './styles/index.scss';\n\nconst orgConfigs = {\n  linkedin: {\n    org: 'LinkedIn',\n    url: linkedinAuthenticationUrl(),\n    signInOnly: false,\n  },\n  google: {\n    org: 'Google',\n    url: googleAuthenticationUrl(),\n    signInOnly: false,\n  },\n  facebook: {\n    org: 'Facebook',\n    url: facebookAuthenticationUrl(),\n    signInOnly: false,\n  },\n  github: {\n    org: 'Github',\n    url: githubAuthenticationUrl(),\n    signInOnly: false,\n  },\n  twitter: {\n    org: 'Twitter',\n    url: twitterAuthenticationUrl(),\n    signInOnly: true,\n  },\n};\n\ntype Org = keyof typeof orgConfigs;\n\nconst defaultOrder: Org[] = [\n  'linkedin',\n  'google',\n  'facebook',\n  'github',\n  'twitter',\n];\n\nconst OauthButton = styled(StrokeButton)`\n  border-width: 1px;\n  border-radius: 2px;\n  margin-bottom: 0.5rem;\n  width: 65px;\n  height: 53px;\n  background-color: white;\n`;\n\nexport type OauthButtonGroupProps = {\n  signUp?: boolean;\n  urlParams?: {};\n  order?: Org[];\n  titlePrefix?: string;\n  classNames?: {\n    heading?: string;\n    buttons?: string;\n    button?: string;\n    buttonTitle?: string;\n    buttonContainer?: string;\n  };\n};\n\nexport const OauthButtonGroup: React.FC<OauthButtonGroupProps> = ({\n  classNames = {},\n  order,\n  signUp,\n  titlePrefix,\n  urlParams,\n}) => {\n  return (\n    <div data-testid=\"oauth-group\">\n      <h2 className={cx(styles.heading, classNames.heading)}>\n        {signUp ? loginStrings.oauthRegister : loginStrings.oauthLogin}\n      </h2>\n      <div className={cx(styles.btnContainer, classNames.buttons)}>\n        {(order || defaultOrder).map((org) => {\n          const orgConfig = orgConfigs[org];\n          if (orgConfig.signInOnly && signUp) return null;\n          return (\n            <div\n              key={orgConfig.url}\n              className={cx(\n                styles.btnContainerItem,\n                classNames.buttonContainer\n              )}\n            >\n              <OauthButton\n                variant=\"secondary\"\n                href={addParamsAsHash(orgConfig.url, urlParams || {})}\n              >\n                <SocialLogo org={orgConfig.org} />\n                {titlePrefix && (\n                  <span className={cx(classNames.buttonTitle)}>\n                    {`${titlePrefix} ${orgConfig.org}`}\n                  </span>\n                )}\n              </OauthButton>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}