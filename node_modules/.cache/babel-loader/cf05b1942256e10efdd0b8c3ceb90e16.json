{"ast":null,"code":"export function calculateAspectRatioWidth(height) {\n  return Math.ceil(16 / 9 * height);\n}\nexport function calculateAspectRatioHeight(width) {\n  return Math.ceil(width / 16 * 9);\n}\nexport function calculateAspectRatio({\n  width,\n  height\n}) {\n  let size = {\n    height,\n    width\n  };\n\n  if (height >= width) {\n    size.height = calculateAspectRatioHeight(width);\n    size.width = width;\n  } else {\n    size.height = height;\n    size.width = calculateAspectRatioWidth(height); // Calculated width will overflow the container, calculate again\n\n    if (size.width > width) {\n      size.width = width;\n      size.height = calculateAspectRatioHeight(size.width);\n    }\n  }\n\n  return size;\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/utilities/aspect-ratio.js"],"names":["calculateAspectRatioWidth","height","Math","ceil","calculateAspectRatioHeight","width","calculateAspectRatio","size"],"mappings":"AAAA,OAAO,SAASA,yBAAT,CAAmCC,MAAnC,EAA2C;AAC9C,SAAOC,IAAI,CAACC,IAAL,CAAU,KAAK,CAAL,GAASF,MAAnB,CAAP;AACD;AAED,OAAO,SAASG,0BAAT,CAAoCC,KAApC,EAA2C;AAChD,SAAOH,IAAI,CAACC,IAAL,CAAUE,KAAK,GAAG,EAAR,GAAa,CAAvB,CAAP;AACD;AAED,OAAO,SAASC,oBAAT,CAA8B;AAAED,EAAAA,KAAF;AAASJ,EAAAA;AAAT,CAA9B,EAAiD;AACtD,MAAIM,IAAI,GAAG;AAAEN,IAAAA,MAAF;AAAUI,IAAAA;AAAV,GAAX;;AAEA,MAAIJ,MAAM,IAAII,KAAd,EAAqB;AACnBE,IAAAA,IAAI,CAACN,MAAL,GAAcG,0BAA0B,CAACC,KAAD,CAAxC;AACAE,IAAAA,IAAI,CAACF,KAAL,GAAaA,KAAb;AACD,GAHD,MAGO;AACLE,IAAAA,IAAI,CAACN,MAAL,GAAcA,MAAd;AACAM,IAAAA,IAAI,CAACF,KAAL,GAAaL,yBAAyB,CAACC,MAAD,CAAtC,CAFK,CAIL;;AACA,QAAIM,IAAI,CAACF,KAAL,GAAaA,KAAjB,EAAwB;AACtBE,MAAAA,IAAI,CAACF,KAAL,GAAaA,KAAb;AACAE,MAAAA,IAAI,CAACN,MAAL,GAAcG,0BAA0B,CAACG,IAAI,CAACF,KAAN,CAAxC;AACD;AACF;;AAED,SAAOE,IAAP;AACD","sourcesContent":["export function calculateAspectRatioWidth(height) {\n    return Math.ceil(16 / 9 * height)\n  }\n  \n  export function calculateAspectRatioHeight(width) {\n    return Math.ceil(width / 16 * 9)\n  }\n  \n  export function calculateAspectRatio({ width, height }) {\n    let size = { height, width }\n  \n    if (height >= width) {\n      size.height = calculateAspectRatioHeight(width)\n      size.width = width\n    } else {\n      size.height = height\n      size.width = calculateAspectRatioWidth(height)\n  \n      // Calculated width will overflow the container, calculate again\n      if (size.width > width) {\n        size.width = width\n        size.height = calculateAspectRatioHeight(size.width)\n      }\n    }\n  \n    return size\n  }\n  "]},"metadata":{},"sourceType":"module"}