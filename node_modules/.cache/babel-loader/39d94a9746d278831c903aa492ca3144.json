{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/BodyPortal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ColorMode, useCurrentMode } from '@codecademy/gamut-styles';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useIsomorphicLayoutEffect } from 'react-use';\nimport { AppWrapper } from '../AppWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PortalWrapper = AppWrapper.withComponent(ColorMode);\n_c = PortalWrapper;\nexport const BodyPortal = ({\n  children\n}) => {\n  _s();\n\n  const [ready, setReady] = useState(false);\n  const mode = useCurrentMode();\n  /** Delay initial render once to ensure that rehydration does not conflict with portal mounting */\n\n  useIsomorphicLayoutEffect(() => {\n    setReady(typeof document !== 'undefined');\n  }, []);\n  if (!ready) return null;\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(PortalWrapper, {\n    mode: mode,\n    alwaysSetVariables: true,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this), document.body);\n};\n\n_s(BodyPortal, \"Sc+xFYpJ829O8xo2XRWvYl4BCso=\", false, function () {\n  return [useCurrentMode, useIsomorphicLayoutEffect];\n});\n\n_c2 = BodyPortal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PortalWrapper\");\n$RefreshReg$(_c2, \"BodyPortal\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/BodyPortal/index.tsx"],"names":["ColorMode","useCurrentMode","React","useState","ReactDOM","useIsomorphicLayoutEffect","AppWrapper","PortalWrapper","withComponent","BodyPortal","children","ready","setReady","mode","document","createPortal","body"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,0BAA1C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,yBAAT,QAA0C,WAA1C;AAEA,SAASC,UAAT,QAA2B,eAA3B;;AAEA,MAAMC,aAAa,GAAGD,UAAU,CAACE,aAAX,CAAyBR,SAAzB,CAAtB;KAAMO,a;AAEN,OAAO,MAAME,UAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMU,IAAI,GAAGZ,cAAc,EAA3B;AAEA;;AACAI,EAAAA,yBAAyB,CAAC,MAAM;AAC9BO,IAAAA,QAAQ,CAAC,OAAOE,QAAP,KAAoB,WAArB,CAAR;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,MAAI,CAACH,KAAL,EAAY,OAAO,IAAP;AAEZ,sBAAOP,QAAQ,CAACW,YAAT,eACL,QAAC,aAAD;AAAe,IAAA,IAAI,EAAEF,IAArB;AAA2B,IAAA,kBAAkB,MAA7C;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADK,EAILI,QAAQ,CAACE,IAJJ,CAAP;AAMD,CAjBM;;GAAMP,U;UAEER,c,EAGbI,yB;;;MALWI,U","sourcesContent":["import { ColorMode, useCurrentMode } from '@codecademy/gamut-styles';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useIsomorphicLayoutEffect } from 'react-use';\n\nimport { AppWrapper } from '../AppWrapper';\n\nconst PortalWrapper = AppWrapper.withComponent(ColorMode);\n\nexport const BodyPortal: React.FC = ({ children }) => {\n  const [ready, setReady] = useState(false);\n  const mode = useCurrentMode();\n\n  /** Delay initial render once to ensure that rehydration does not conflict with portal mounting */\n  useIsomorphicLayoutEffect(() => {\n    setReady(typeof document !== 'undefined');\n  }, []);\n\n  if (!ready) return null;\n\n  return ReactDOM.createPortal(\n    <PortalWrapper mode={mode} alwaysSetVariables>\n      {children}\n    </PortalWrapper>,\n    document.body\n  );\n};\n"]},"metadata":{},"sourceType":"module"}