{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/Avatar/index.tsx\";\nimport { theme } from '@codecademy/gamut-styles';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Image = styled.img();\n_c = Image;\nconst defaultAvatarSize = '118px';\nconst AvatarContainer = styled.div`\n  position: relative;\n  display: table;\n\n  ${({\n  disableDropshadow,\n  mode\n}) => !disableDropshadow && css`\n      &::before {\n        content: '';\n        position: absolute;\n        border-radius: 50%;\n        transform: scale(0.92);\n        transform-origin: bottom right;\n        height: 100%;\n        width: 100%;\n        background-color: ${mode ? mode === 'light' ? theme.colors.lightGreen : theme.colors.green : theme.colors['feedback-success']};\n      }\n    `}\n\n  ${Image} {\n    position: relative;\n    border-radius: 50%;\n    object-fit: cover;\n\n    ${({\n  disableDropshadow\n}) => !disableDropshadow && css`\n        transform: scale(0.92);\n        transform-origin: top left;\n      `}\n  }\n`;\n_c2 = AvatarContainer;\nexport const Avatar = ({\n  mode,\n  disableDropshadow,\n  className,\n  ...avatarImageProps\n}) => /*#__PURE__*/_jsxDEV(AvatarContainer, {\n  className: className,\n  mode: mode,\n  disableDropshadow: disableDropshadow,\n  \"data-testid\": \"avatar-container\",\n  children: /*#__PURE__*/_jsxDEV(Image, {\n    width: defaultAvatarSize,\n    height: defaultAvatarSize,\n    ...avatarImageProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 87,\n  columnNumber: 3\n}, this);\n_c3 = Avatar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Image\");\n$RefreshReg$(_c2, \"AvatarContainer\");\n$RefreshReg$(_c3, \"Avatar\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/Avatar/index.tsx"],"names":["theme","css","styled","React","Image","img","defaultAvatarSize","AvatarContainer","div","disableDropshadow","mode","colors","lightGreen","green","Avatar","className","avatarImageProps"],"mappings":";AACA,SAASA,KAAT,QAAsB,0BAAtB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAK,GAAGF,MAAM,CAACG,GAAP,EAAd;KAAMD,K;AAEN,MAAME,iBAAiB,GAAG,OAA1B;AAEA,MAAMC,eAAe,GAAGL,MAAM,CAACM,GAG5B;AACH;AACA;AACA;AACA,IAAI,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KACA,CAACD,iBAAD,IACAR,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4BS,IAAI,GACpBA,IAAI,KAAK,OAAT,GACEV,KAAK,CAACW,MAAN,CAAaC,UADf,GAEEZ,KAAK,CAACW,MAAN,CAAaE,KAHK,GAIpBb,KAAK,CAACW,MAAN,CAAa,kBAAb,CAAiC;AAC7C;AACA,KAAM;AACN;AACA,IAAIP,KAAM;AACV;AACA;AACA;AACA;AACA,MAAM,CAAC;AAAEK,EAAAA;AAAF,CAAD,KACA,CAACA,iBAAD,IACAR,GAAI;AACV;AACA;AACA,OAAQ;AACR;AACA,CAtCA;MAAMM,e;AAsEN,OAAO,MAAMO,MAA6B,GAAG,CAAC;AAC5CJ,EAAAA,IAD4C;AAE5CD,EAAAA,iBAF4C;AAG5CM,EAAAA,SAH4C;AAI5C,KAAGC;AAJyC,CAAD,kBAM3C,QAAC,eAAD;AACE,EAAA,SAAS,EAAED,SADb;AAEE,EAAA,IAAI,EAAEL,IAFR;AAGE,EAAA,iBAAiB,EAAED,iBAHrB;AAIE,iBAAY,kBAJd;AAAA,yBAME,QAAC,KAAD;AACE,IAAA,KAAK,EAAEH,iBADT;AAEE,IAAA,MAAM,EAAEA,iBAFV;AAAA,OAGMU;AAHN;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,QANK;MAAMF,M","sourcesContent":["import { VisualTheme } from '@codecademy/gamut';\nimport { theme } from '@codecademy/gamut-styles';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nconst Image = styled.img();\n\nconst defaultAvatarSize = '118px';\n\nconst AvatarContainer = styled.div<{\n  mode?: VisualTheme;\n  disableDropshadow?: boolean;\n}>`\n  position: relative;\n  display: table;\n\n  ${({ disableDropshadow, mode }) =>\n    !disableDropshadow &&\n    css`\n      &::before {\n        content: '';\n        position: absolute;\n        border-radius: 50%;\n        transform: scale(0.92);\n        transform-origin: bottom right;\n        height: 100%;\n        width: 100%;\n        background-color: ${mode\n          ? mode === 'light'\n            ? theme.colors.lightGreen\n            : theme.colors.green\n          : theme.colors['feedback-success']};\n      }\n    `}\n\n  ${Image} {\n    position: relative;\n    border-radius: 50%;\n    object-fit: cover;\n\n    ${({ disableDropshadow }) =>\n      !disableDropshadow &&\n      css`\n        transform: scale(0.92);\n        transform-origin: top left;\n      `}\n  }\n`;\n\nexport type AvatarImageProps =\n  | { alt: string; 'aria-labelledby'?: never }\n  | { alt?: never; 'aria-labelledby': string };\n\nexport type AvatarBaseProps = {\n  /**\n   * path to image asset\n   */\n  src: string;\n\n  /**\n   * Disables the drop shadow entirely.\n   */\n  disableDropshadow?: boolean;\n\n  /**\n   * Overrides styles on the Avatar container.\n   */\n  className?: string;\n\n  /**\n   * @deprecated\n   * This will be determined automatically by the theme moving forward.\n   * Supplying it will determine the color of drop shadow.\n   */\n  mode?: VisualTheme;\n};\n\nexport type AvatarProps = AvatarBaseProps & AvatarImageProps;\n\nexport const Avatar: React.FC<AvatarProps> = ({\n  mode,\n  disableDropshadow,\n  className,\n  ...avatarImageProps\n}) => (\n  <AvatarContainer\n    className={className}\n    mode={mode}\n    disableDropshadow={disableDropshadow}\n    data-testid=\"avatar-container\"\n  >\n    <Image\n      width={defaultAvatarSize}\n      height={defaultAvatarSize}\n      {...avatarImageProps}\n    />\n  </AvatarContainer>\n);\n"]},"metadata":{},"sourceType":"module"}