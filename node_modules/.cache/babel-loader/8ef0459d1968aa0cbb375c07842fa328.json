{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport { InteractionModes, Defaults } from \"portal/scenes/CoursePlayer/constants\";\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\n\nexport const initialState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action) => {\n      state.playing = true;\n    },\n    pause: (state, action) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action) => {\n      state.playbackSpeed = action.payload;\n    },\n    setActiveMenu: (state, action) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(`${action.payload} not in valid list: ${validModes.join()}`);\n      }\n\n      state.interactionMode = action.payload;\n    },\n    setDuration: () => {},\n    setTime: (state, action) => {},\n    toggleMute: (state, action) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n\n      state.muted = true;\n      state.previousVolume = state.volume;\n      state.volume = 0;\n    }\n  }\n});\nexport const selectPlayer = state => state.player;\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute\n} = playerSlice.actions;\nexport default playerSlice.reducer;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/player/playerSlice.ts"],"names":["createSlice","clamp","InteractionModes","Defaults","validModes","Object","values","includes","modes","mode","indexOf","initialState","playing","playbackSpeed","activeMenu","volumeSliderActive","volume","muted","previousVolume","interactionMode","MOUSE","time","duration","playerSlice","name","reducers","play","state","action","pause","setPlaybackSpeed","payload","setActiveMenu","setVolumeSliderActive","setVolume","clamped","setPreviousVolume","setInteractionMode","Error","join","setDuration","setTime","toggleMute","selectPlayer","player","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v1 as uuid } from \"uuid\";\nimport { StringChain, stubFalse, without } from \"lodash\";\nimport { AppThunk, RootState } from \"store\";\nimport { clamp } from \"portal/scenes/CoursePlayer/utilities/clamp\";\nimport {\n  InteractionModes,\n  Defaults,\n} from \"portal/scenes/CoursePlayer/constants\";\n\nconst validModes = Object.values(InteractionModes);\n\nfunction includes(modes, mode) {\n  return !!~modes.indexOf(mode);\n}\nexport interface PlayerState {\n  playing: boolean;\n  playbackSpeed: number;\n  activeMenu: string;\n  volumeSliderActive: boolean;\n  volume: number;\n  muted: boolean;\n  previousVolume: number;\n  interactionMode: string;\n  time: number,\n  duration: number,\n}\n\nexport const initialState: PlayerState = {\n  playing: false,\n  playbackSpeed: 1.0,\n  activeMenu: null,\n  volumeSliderActive: false,\n  volume: 0.5,\n  muted: false,\n  previousVolume: null,\n  interactionMode: InteractionModes.MOUSE,\n  time: 0,\n  duration: 0\n};\nexport const playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<void>) => {\n      state.playing = true;\n    },\n\n    pause: (state, action: PayloadAction<void>) => {\n      state.playing = false;\n    },\n    setPlaybackSpeed: (state, action: PayloadAction<number>) => {\n      state.playbackSpeed = action.payload;\n    },\n\n    setActiveMenu: (state, action: PayloadAction<string>) => {\n      state.activeMenu = action.payload;\n    },\n    setVolumeSliderActive: (state, action: PayloadAction<boolean>) => {\n      state.volumeSliderActive = action.payload;\n    },\n    setVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setPreviousVolume: (state, action: PayloadAction<number>) => {\n      const clamped = clamp(action.payload, 0, 1);\n      const muted = clamped === 0;\n      state.volume = clamped;\n      state.muted = muted;\n    },\n    setInteractionMode: (state, action: PayloadAction<string>) => {\n      if (!includes(validModes, action.payload)) {\n        throw new Error(\n          `${action.payload} not in valid list: ${validModes.join()}`\n        );\n      }\n      state.interactionMode = action.payload;\n    },\n\n    setDuration: () => {\n\n    },\n    setTime: (state, action: PayloadAction<number>) => {\n        \n    },\n\n    toggleMute: (state, action: PayloadAction<void>) => {\n      if (state.muted) {\n        setVolume(state.previousVolume || Defaults.volume);\n      }\n     state.muted = true;\n     state.previousVolume = state.volume\n     state.volume = 0;\n    },\n  },\n});\n\nexport const selectPlayer = (state: RootState) => state.player;\n\nexport const {\n  play,\n  pause,\n  setPlaybackSpeed,\n  setActiveMenu,\n  setVolumeSliderActive,\n  setVolume,\n  setPreviousVolume,\n  toggleMute,\n} = playerSlice.actions;\n\n\n\nexport default playerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}