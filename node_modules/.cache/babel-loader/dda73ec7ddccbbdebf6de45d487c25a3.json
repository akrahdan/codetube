{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/with-adobe-heartbeat.js\";\nimport React, { Component, Fragment } from 'react';\nimport adobe from './VideoHeartbeat.min.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  MediaHeartbeat,\n  MediaHeartbeatConfig,\n  MediaHeartbeatDelegate\n} = adobe.va;\nexport default function withAdobeHeartbeat(WrappedComponent) {\n  let mediaHeartbeat;\n\n  class AdobeHeartbeatWrapper extends Component {\n    constructor(props) {\n      super(props);\n\n      this.getAdobeReportSuite = () => {\n        const {\n          isStagingEnv\n        } = this.props;\n        const subdomain = window.location.host.split('.')[0];\n\n        if (subdomain === 'app' || isStagingEnv === false) {\n          return 'pluralsight.united.dev';\n        }\n\n        return 'pluralsightapptest';\n      };\n\n      this.initMediaHeartbeat = () => {\n        const {\n          versions\n        } = this.props;\n        var mediaConfig = new MediaHeartbeatConfig();\n        mediaConfig.trackingServer = 'pluralsight.hb.omtrdc.net';\n        mediaConfig.playerName = 'embeddable-player';\n        mediaConfig.channel = 'test-channel';\n        mediaConfig.debugLogging = false;\n        mediaConfig.appVersion = versions.VERSION;\n        mediaConfig.ssl = true;\n        mediaConfig.ovp = 'test-ovp';\n        var mediaDelegate = new MediaHeartbeatDelegate();\n\n        mediaDelegate.getCurrentPlaybackTime = () => {\n          const {\n            time\n          } = this.props;\n          return time;\n        };\n\n        const adobeReportSuite = this.getAdobeReportSuite();\n        mediaHeartbeat = new MediaHeartbeat(mediaDelegate, mediaConfig, s_gi(adobeReportSuite));\n        this.setState({\n          isInitialized: true\n        });\n      };\n\n      this.initHeartbeat = duration => {\n        if (!window.AppMeasurement) {\n          console.warn('AppMeasurement was not found. Please ensure that Adobe Analytics is configured.');\n          return;\n        }\n\n        if (!this.state.isInitialized) this.initMediaHeartbeat();\n        if (!this.state.sessionStarted) this.trackSessionStart(duration);\n      };\n\n      this.trackSessionStart = duration => {\n        const {\n          clipId,\n          title\n        } = this.props;\n        let mediaObject = MediaHeartbeat.createMediaObject(title, clipId, duration, MediaHeartbeat.StreamType.VOD); //mediaHeartbeat && mediaHeartbeat.trackSessionStart(mediaObject, {})\n\n        this.setState({\n          sessionStarted: true\n        });\n      };\n\n      this.trackSeekComplete = () => {\n        this.setState({\n          seeking: false\n        }, () => {// mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete)\n        });\n      };\n\n      this.trackSeekStart = () => {\n        //if (!mediaHeartbeat) this.initHeartbeat()\n        const {\n          buffering,\n          seeking\n        } = this.state;\n\n        if (buffering && !seeking) {\n          this.setState({\n            buffering: false,\n            seeking: true\n          }, () => {\n            mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete);\n            mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart);\n          });\n        } else if (!seeking) {\n          this.setState({\n            seeking: true\n          }, () => {\n            mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart);\n          });\n        }\n      };\n\n      this.trackBufferComplete = () => {\n        const {\n          buffering\n        } = this.state;\n\n        if (!buffering) {\n          return;\n        }\n\n        this.setState({\n          buffering: false\n        }, () => {\n          mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete);\n        });\n      };\n\n      this.trackBufferStart = () => {\n        if (!mediaHeartbeat) this.initHeartbeat();\n        const {\n          buffering,\n          seeking\n        } = this.state;\n\n        if (buffering || seeking) {\n          return;\n        }\n\n        this.setState({\n          buffering: true\n        }, () => {\n          mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferStart);\n        });\n      };\n\n      this.trackPause = () => {\n        const {\n          buffering,\n          seeking,\n          playing\n        } = this.state;\n\n        if (!playing) {\n          return;\n        }\n\n        if (buffering || seeking) {\n          this.setState({\n            seeking: false,\n            buffering: false,\n            playing: false\n          }, () => {\n            seeking && mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete);\n            buffering && mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete);\n            mediaHeartbeat.trackPause();\n          });\n        } else {\n          this.setState({\n            playing: false\n          }, () => {\n            mediaHeartbeat.trackPause();\n          });\n        }\n      };\n\n      this.trackPlay = () => {\n        if (!mediaHeartbeat) this.initHeartbeat();\n        const {\n          playing\n        } = this.state;\n\n        if (!playing) {\n          this.setState({\n            playing: true\n          }, () => {\n            mediaHeartbeat.trackPlay();\n          });\n        }\n      };\n\n      this.trackComplete = () => {\n        if (this.state.sessionStarted) {\n          if (!mediaHeartbeat) this.initHeartbeat();\n          mediaHeartbeat && mediaHeartbeat.trackComplete();\n          mediaHeartbeat && mediaHeartbeat.trackSessionEnd();\n          this.setState({\n            playing: false,\n            sessionStarted: false\n          });\n        }\n      };\n\n      this.state = {\n        seeking: false,\n        buffering: false,\n        playing: false,\n        isInitialized: false,\n        sessionStarted: false\n      };\n    }\n\n    componentWillUnmount() {\n      mediaHeartbeat && mediaHeartbeat.trackSessionEnd && mediaHeartbeat.trackSessionEnd();\n    }\n\n    render() {\n      let api = {\n        initHeartbeat: this.initHeartbeat,\n        trackBufferComplete: this.trackBufferComplete,\n        trackBufferStart: this.trackBufferStart,\n        trackComplete: this.trackComplete,\n        trackPause: this.trackPause,\n        trackPlay: this.trackPlay,\n        trackSeekComplete: this.trackSeekComplete,\n        trackSeekStart: this.trackSeekStart\n      };\n\n      if (!window.AppMeasurement) {\n        api = {\n          initHeartbeat: this.initHeartbeat,\n          trackBufferComplete: () => {},\n          trackBufferStart: () => {},\n          trackComplete: () => {},\n          trackPause: () => {},\n          trackPlay: () => {},\n          trackSeekComplete: () => {},\n          trackSeekStart: () => {}\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        adobeHeartbeat: api\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 14\n      }, this);\n    }\n\n  }\n\n  return AdobeHeartbeatWrapper; // return connect(\n  //   state => ({\n  //     clipId: state.clipId,\n  //     duration: state.duration,\n  //     time: state.time,\n  //     title: state.title,\n  //     versions: state.versions,\n  //     isStagingEnv: state.isStagingEnv,\n  //   }),\n  //   store => ({})\n  // )(AdobeHeartbeatWrapper)\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/video/with-adobe-heartbeat.js"],"names":["React","Component","Fragment","adobe","MediaHeartbeat","MediaHeartbeatConfig","MediaHeartbeatDelegate","va","withAdobeHeartbeat","WrappedComponent","mediaHeartbeat","AdobeHeartbeatWrapper","constructor","props","getAdobeReportSuite","isStagingEnv","subdomain","window","location","host","split","initMediaHeartbeat","versions","mediaConfig","trackingServer","playerName","channel","debugLogging","appVersion","VERSION","ssl","ovp","mediaDelegate","getCurrentPlaybackTime","time","adobeReportSuite","s_gi","setState","isInitialized","initHeartbeat","duration","AppMeasurement","console","warn","state","sessionStarted","trackSessionStart","clipId","title","mediaObject","createMediaObject","StreamType","VOD","trackSeekComplete","seeking","trackSeekStart","buffering","trackEvent","Event","BufferComplete","SeekStart","trackBufferComplete","trackBufferStart","BufferStart","trackPause","playing","SeekComplete","trackPlay","trackComplete","trackSessionEnd","componentWillUnmount","render","api"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\n\n\nimport adobe from './VideoHeartbeat.min.js'\n\nconst { MediaHeartbeat, MediaHeartbeatConfig, MediaHeartbeatDelegate } = adobe.va\n\nexport default function withAdobeHeartbeat(WrappedComponent) {\n  let mediaHeartbeat\n\n  class AdobeHeartbeatWrapper extends Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        seeking: false,\n        buffering: false,\n        playing: false,\n        isInitialized: false,\n        sessionStarted: false,\n      }\n    }\n\n    getAdobeReportSuite = () => {\n      const { isStagingEnv } = this.props\n      const subdomain = window.location.host.split('.')[0]\n\n      if (subdomain === 'app' || isStagingEnv === false) {\n        return 'pluralsight.united.dev'\n      }\n      return 'pluralsightapptest'\n    }\n\n    initMediaHeartbeat = () => {\n      const { versions } = this.props\n\n      var mediaConfig = new MediaHeartbeatConfig()\n\n      mediaConfig.trackingServer = 'pluralsight.hb.omtrdc.net'\n      mediaConfig.playerName = 'embeddable-player'\n      mediaConfig.channel = 'test-channel'\n      mediaConfig.debugLogging = false\n      mediaConfig.appVersion = versions.VERSION\n      mediaConfig.ssl = true\n      mediaConfig.ovp = 'test-ovp'\n\n      var mediaDelegate = new MediaHeartbeatDelegate()\n\n      mediaDelegate.getCurrentPlaybackTime = () => {\n        const { time } = this.props\n\n        return time\n      }\n\n      const adobeReportSuite = this.getAdobeReportSuite()\n\n      mediaHeartbeat = new MediaHeartbeat(mediaDelegate, mediaConfig, s_gi(adobeReportSuite))\n      this.setState({\n        isInitialized: true,\n      })\n    }\n\n    initHeartbeat = (duration) => {\n      if (!window.AppMeasurement) {\n        console.warn('AppMeasurement was not found. Please ensure that Adobe Analytics is configured.')\n        return\n      }\n\n      if (!this.state.isInitialized) this.initMediaHeartbeat()\n      if (!this.state.sessionStarted) this.trackSessionStart(duration)\n    }\n\n    trackSessionStart = (duration) => {\n      const { clipId, title } = this.props\n\n      let mediaObject = MediaHeartbeat.createMediaObject(title, clipId, duration, MediaHeartbeat.StreamType.VOD)\n      //mediaHeartbeat && mediaHeartbeat.trackSessionStart(mediaObject, {})\n      this.setState({ sessionStarted: true })\n    }\n\n    trackSeekComplete = () => {\n      this.setState({ seeking: false }, () => {\n       // mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete)\n      })\n    }\n\n    trackSeekStart = () => {\n      //if (!mediaHeartbeat) this.initHeartbeat()\n\n      const { buffering, seeking } = this.state\n\n      if (buffering && !seeking) {\n        this.setState({ buffering: false, seeking: true }, () => {\n          mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete)\n          mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart)\n        })\n      } else if (!seeking) {\n        this.setState({ seeking: true }, () => {\n          mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekStart)\n        })\n      }\n    }\n\n    trackBufferComplete = () => {\n      const { buffering } = this.state\n\n      if (!buffering) {\n        return\n      }\n\n      this.setState({ buffering: false }, () => {\n        mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete)\n      })\n    }\n\n    trackBufferStart = () => {\n      if (!mediaHeartbeat) this.initHeartbeat()\n\n      const { buffering, seeking } = this.state\n\n      if (buffering || seeking) {\n        return\n      }\n\n      this.setState({ buffering: true }, () => {\n        mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferStart)\n      })\n    }\n\n    trackPause = () => {\n      const { buffering, seeking, playing } = this.state\n\n      if (!playing) {\n        return\n      }\n\n      if (buffering || seeking) {\n        this.setState({ seeking: false, buffering: false, playing: false }, () => {\n          seeking && mediaHeartbeat.trackEvent(MediaHeartbeat.Event.SeekComplete)\n\n          buffering && mediaHeartbeat.trackEvent(MediaHeartbeat.Event.BufferComplete)\n\n          mediaHeartbeat.trackPause()\n        })\n      } else {\n        this.setState({ playing: false }, () => {\n          mediaHeartbeat.trackPause()\n        })\n      }\n    }\n\n    trackPlay = () => {\n      if (!mediaHeartbeat) this.initHeartbeat()\n\n      const { playing } = this.state\n\n      if (!playing) {\n        this.setState({ playing: true }, () => {\n          mediaHeartbeat.trackPlay()\n        })\n      }\n    }\n\n    trackComplete = () => {\n      if (this.state.sessionStarted) {\n        if (!mediaHeartbeat) this.initHeartbeat()\n        mediaHeartbeat && mediaHeartbeat.trackComplete()\n        mediaHeartbeat && mediaHeartbeat.trackSessionEnd()\n\n        this.setState({ playing: false, sessionStarted: false })\n      }\n    }\n\n    componentWillUnmount() {\n      mediaHeartbeat && mediaHeartbeat.trackSessionEnd && mediaHeartbeat.trackSessionEnd()\n    }\n\n    render() {\n      let api = {\n        initHeartbeat: this.initHeartbeat,\n        trackBufferComplete: this.trackBufferComplete,\n        trackBufferStart: this.trackBufferStart,\n        trackComplete: this.trackComplete,\n        trackPause: this.trackPause,\n        trackPlay: this.trackPlay,\n        trackSeekComplete: this.trackSeekComplete,\n        trackSeekStart: this.trackSeekStart,\n      }\n\n      if (!window.AppMeasurement) {\n        api = {\n          initHeartbeat: this.initHeartbeat,\n          trackBufferComplete: () => {},\n          trackBufferStart: () => {},\n          trackComplete: () => {},\n          trackPause: () => {},\n          trackPlay: () => {},\n          trackSeekComplete: () => {},\n          trackSeekStart: () => {},\n        }\n      }\n\n      return <WrappedComponent adobeHeartbeat={api} />\n    }\n  }\n  return AdobeHeartbeatWrapper;\n\n  // return connect(\n  //   state => ({\n  //     clipId: state.clipId,\n  //     duration: state.duration,\n  //     time: state.time,\n  //     title: state.title,\n  //     versions: state.versions,\n  //     isStagingEnv: state.isStagingEnv,\n  //   }),\n  //   store => ({})\n  // )(AdobeHeartbeatWrapper)\n}\n"]},"metadata":{},"sourceType":"module"}