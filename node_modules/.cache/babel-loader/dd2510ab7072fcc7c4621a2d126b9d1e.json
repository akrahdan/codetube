{"ast":null,"code":"import _slicedToArray from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import CMSContext from'portal/scenes/Paths/ContentfulContext';// import { selectUserJWT } from '~/state/currentUser/selectors';\nimport{Paths}from'./sample';import RecommendationsPresenter from'./Recommendations';import{jsx as _jsx}from\"react/jsx-runtime\";export var Recommendations=function Recommendations(_ref){var pathId=_ref.pathId;var cms=useContext(CMSContext);var pathIds=cms.other_path_ids;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),paths=_useState2[0],setPaths=_useState2[1];// const jwt = useSelector(selectUserJWT);\n// useEffect(() => {\n//   (async () => {\n//     if (pathIds) {\n//       const { data: paths } = await contentServiceRequest({\n//         endpoint: 'paths/search',\n//         version: 1,\n//         data: {\n//           id: pathIds,\n//           minimal: false,\n//         },\n//         method: 'POST',\n//         jwt,\n//       });\n//       setPaths(\n//         pathIds.map((id: string) =>\n//           paths.find((path: Path) => path.id === id)\n//         )\n//       );\n//     }\n//   })();\n// }, [pathIds, jwt]);\n// if (paths.length === 0) return null;\nreturn/*#__PURE__*/_jsx(RecommendationsPresenter,{pathId:pathId,paths:Paths,cms:cms});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/Paths/PathMarketingPage/Recommendations/index.tsx"],"names":["React","useContext","useState","CMSContext","Paths","RecommendationsPresenter","Recommendations","pathId","cms","pathIds","other_path_ids","paths","setPaths"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAAuCC,QAAvC,KAAuD,OAAvD,CAIA,MAAOC,CAAAA,UAAP,KAAuB,uCAAvB,CACA;AAEA,OAASC,KAAT,KAAsB,UAAtB,CACA,MAAOC,CAAAA,wBAAP,KAAqC,mBAArC,C,2CAMA,MAAO,IAAMC,CAAAA,eAA+C,CAAG,QAAlDA,CAAAA,eAAkD,MAAgB,IAAbC,CAAAA,MAAa,MAAbA,MAAa,CAC7E,GAAMC,CAAAA,GAAG,CAAGP,UAAU,CAACE,UAAD,CAAtB,CAD6E,GAErDM,CAAAA,OAFqD,CAEzCD,GAFyC,CAErEE,cAFqE,eAInDR,QAAQ,CAAS,EAAT,CAJ2C,wCAItES,KAJsE,eAI/DC,QAJ+D,eAK7E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,mBAAO,KAAC,wBAAD,EAA0B,MAAM,CAAEL,MAAlC,CAA0C,KAAK,CAAEH,KAAjD,CAAwD,GAAG,CAAEI,GAA7D,EAAP,CACD,CAjCM","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { contentServiceRequest } from 'libs/contentServiceRequest';\nimport CMSContext from 'portal/scenes/Paths/ContentfulContext';\n// import { selectUserJWT } from '~/state/currentUser/selectors';\nimport { Path } from 'typings/path';\nimport { Paths } from './sample';\nimport RecommendationsPresenter from './Recommendations';\n\nexport type RecommendationsProps = {\n  pathId: string;\n};\n\nexport const Recommendations: React.FC<RecommendationsProps> = ({ pathId }) => {\n  const cms = useContext(CMSContext);\n  const { other_path_ids: pathIds } = cms;\n\n  const [paths, setPaths] = useState<Path[]>([]);\n  // const jwt = useSelector(selectUserJWT);\n\n  // useEffect(() => {\n  //   (async () => {\n  //     if (pathIds) {\n  //       const { data: paths } = await contentServiceRequest({\n  //         endpoint: 'paths/search',\n  //         version: 1,\n  //         data: {\n  //           id: pathIds,\n  //           minimal: false,\n  //         },\n  //         method: 'POST',\n  //         jwt,\n  //       });\n\n  //       setPaths(\n  //         pathIds.map((id: string) =>\n  //           paths.find((path: Path) => path.id === id)\n  //         )\n  //       );\n  //     }\n  //   })();\n  // }, [pathIds, jwt]);\n\n  // if (paths.length === 0) return null;\n\n  return <RecommendationsPresenter pathId={pathId} paths={Paths} cms={cms} />;\n};\n"]},"metadata":{},"sourceType":"module"}