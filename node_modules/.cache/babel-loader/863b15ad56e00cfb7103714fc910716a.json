{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/ButtonBase/ButtonBase.tsx\";\nimport { styledOptions, system } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ButtonSelectors;\n\n(function (ButtonSelectors) {\n  ButtonSelectors[\"HOVER\"] = \"&:hover\";\n  ButtonSelectors[\"ACTIVE\"] = \"&:active\";\n  ButtonSelectors[\"FOCUS\"] = \"&:focus\";\n  ButtonSelectors[\"DISABLED\"] = \"[disabled], &:disabled, &[aria-disabled='true']\";\n  ButtonSelectors[\"FOCUS_VISIBLE\"] = \" &:focus-visible\";\n  ButtonSelectors[\"OUTLINE\"] = \"&:before\";\n  ButtonSelectors[\"OUTLINE_FOCUS_VISIBLE\"] = \"&:focus-visible:before\";\n})(ButtonSelectors || (ButtonSelectors = {}));\n\nconst ResetElement = styled('button', styledOptions())(system.css({\n  background: 'none',\n  boxShadow: 'none',\n  border: 'none',\n  p: 0,\n  fontSize: 'inherit',\n  cursor: 'pointer',\n  textDecoration: 'none',\n  [ButtonSelectors.HOVER]: {\n    textDecoration: 'none'\n  },\n  [ButtonSelectors.FOCUS]: {\n    outline: 'none'\n  }\n}));\nexport const ButtonBase = /*#__PURE__*/forwardRef(_c = ({\n  href,\n  disabled,\n  children,\n  as,\n  role = 'button',\n  type = 'button',\n  ...rest\n}, ref) => {\n  if (href == null) {\n    return /*#__PURE__*/_jsxDEV(ResetElement, { ...rest,\n      ref: ref,\n      as: \"button\",\n      type: type,\n      role: role,\n      disabled: !!disabled,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ResetElement, { ...rest,\n    ref: ref,\n    as: \"a\",\n    href: href,\n    \"aria-disabled\": !!disabled,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n});\n_c2 = ButtonBase;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonBase$forwardRef\");\n$RefreshReg$(_c2, \"ButtonBase\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/ButtonBase/ButtonBase.tsx"],"names":["styledOptions","system","styled","React","forwardRef","ButtonSelectors","ResetElement","css","background","boxShadow","border","p","fontSize","cursor","textDecoration","HOVER","FOCUS","outline","ButtonBase","href","disabled","children","as","role","type","rest","ref"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,MAAxB,QAAsC,0BAAtC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAA+D,OAA/D;;AAeA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAUZ,MAAMC,YAAY,GAAGJ,MAAM,CACzB,QADyB,EAEzBF,aAAa,EAFY,CAAN,CAInBC,MAAM,CAACM,GAAP,CAAW;AACTC,EAAAA,UAAU,EAAE,MADH;AAETC,EAAAA,SAAS,EAAE,MAFF;AAGTC,EAAAA,MAAM,EAAE,MAHC;AAITC,EAAAA,CAAC,EAAE,CAJM;AAKTC,EAAAA,QAAQ,EAAE,SALD;AAMTC,EAAAA,MAAM,EAAE,SANC;AAOTC,EAAAA,cAAc,EAAE,MAPP;AAQT,GAACT,eAAe,CAACU,KAAjB,GAAyB;AACvBD,IAAAA,cAAc,EAAE;AADO,GARhB;AAWT,GAACT,eAAe,CAACW,KAAjB,GAAyB;AACvBC,IAAAA,OAAO,EAAE;AADc;AAXhB,CAAX,CAJmB,CAArB;AAqBA,OAAO,MAAMC,UAAU,gBAAGd,UAAU,MAIlC,CACE;AAAEe,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,EAA5B;AAAgCC,EAAAA,IAAI,GAAG,QAAvC;AAAiDC,EAAAA,IAAI,GAAG,QAAxD;AAAkE,KAAGC;AAArE,CADF,EAEEC,GAFF,KAGK;AACH,MAAIP,IAAI,IAAI,IAAZ,EAAkB;AAChB,wBACE,QAAC,YAAD,OACMM,IADN;AAEE,MAAA,GAAG,EAAEC,GAFP;AAGE,MAAA,EAAE,EAAC,QAHL;AAIE,MAAA,IAAI,EAAEF,IAJR;AAKE,MAAA,IAAI,EAAED,IALR;AAME,MAAA,QAAQ,EAAE,CAAC,CAACH,QANd;AAAA,gBAQGC;AARH;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAED,sBACE,QAAC,YAAD,OACMI,IADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,EAAE,EAAC,GAHL;AAIE,IAAA,IAAI,EAAEP,IAJR;AAKE,qBAAe,CAAC,CAACC,QALnB;AAAA,cAOGC;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAlCiC,CAA7B;MAAMH,U","sourcesContent":["import { styledOptions, system } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { forwardRef, HTMLProps, MutableRefObject } from 'react';\n\nexport type ButtonBaseElements = HTMLAnchorElement | HTMLButtonElement;\nexport type ButtonBaseRef =\n  | ((instance: ButtonBaseElements | null) => void)\n  | MutableRefObject<ButtonBaseElements | null>\n  | null;\n\nexport type ButtonBaseElementProps = HTMLProps<\n  HTMLAnchorElement | HTMLButtonElement\n> & {\n  as?: never;\n  ref?: ButtonBaseRef;\n};\n\nexport enum ButtonSelectors {\n  HOVER = '&:hover',\n  ACTIVE = '&:active',\n  FOCUS = '&:focus',\n  DISABLED = \"[disabled], &:disabled, &[aria-disabled='true']\",\n  FOCUS_VISIBLE = ' &:focus-visible',\n  OUTLINE = '&:before',\n  OUTLINE_FOCUS_VISIBLE = '&:focus-visible:before',\n}\n\nconst ResetElement = styled(\n  'button',\n  styledOptions<'button'>()\n)(\n  system.css({\n    background: 'none',\n    boxShadow: 'none',\n    border: 'none',\n    p: 0,\n    fontSize: 'inherit',\n    cursor: 'pointer',\n    textDecoration: 'none',\n    [ButtonSelectors.HOVER]: {\n      textDecoration: 'none',\n    },\n    [ButtonSelectors.FOCUS]: {\n      outline: 'none',\n    },\n  })\n);\n\nexport const ButtonBase = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  any\n>(\n  (\n    { href, disabled, children, as, role = 'button', type = 'button', ...rest },\n    ref\n  ) => {\n    if (href == null) {\n      return (\n        <ResetElement\n          {...rest}\n          ref={ref as MutableRefObject<HTMLButtonElement>}\n          as=\"button\"\n          type={type}\n          role={role}\n          disabled={!!disabled}\n        >\n          {children}\n        </ResetElement>\n      );\n    }\n\n    return (\n      <ResetElement\n        {...rest}\n        ref={ref as MutableRefObject<HTMLAnchorElement>}\n        as=\"a\"\n        href={href}\n        aria-disabled={!!disabled}\n      >\n        {children}\n      </ResetElement>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}