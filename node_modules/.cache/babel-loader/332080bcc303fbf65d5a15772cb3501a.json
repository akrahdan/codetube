{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/command-layer/command-layer.js\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport connectt from 'react-redux';\nimport { InteractionModes, Menus } from '../constants';\nimport { setActiveMenu, play, pause } from 'state/player/playerSlice';\nimport css from './command-layer.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class CommandLayer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {// const { activeMenu, pause, play, playing, visible, setActiveMenu } = this.props\n      // if (activeMenu !== Menus.NONE) {\n      // //   setActiveMenu(Menus.NONE)\n      // }\n      // if (visible) {\n      //   playing ? pause() : play()\n      // }\n    };\n\n    this.state = {\n      clientY: null\n    };\n  }\n\n  handleTouchStart(e) {\n    e && e.preventDefault();\n    const touch = e && e.touches[0];\n    touch && this.setState({\n      clientY: touch.clientY\n    });\n  }\n\n  handleTouchEnd(e) {\n    const newTouch = e && e.changedTouches[0];\n    const offset = newTouch && Math.abs(this.state.clientY - newTouch.clientY);\n    const minimumScrollDistance = 50;\n    if (!offset || offset < minimumScrollDistance) this.handleClick();\n    e && e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.commandLayer,\n      onClick: this.handleClick,\n      onTouchStart: e => this.handleTouchStart(e),\n      onTouchEnd: e => this.handleTouchEnd(e),\n      ref: ref => this.ref = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default connect(state => ({\n  activeMenu: state.player.activeMenu,\n  playing: state.player.playing,\n  visible: state.player.visible\n}), dispatch => ({\n  pause: actions.pause,\n  play: actions.play,\n  setActiveMenu: actions.setActiveMenu\n}))(CommandLayer);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/command-layer/command-layer.js"],"names":["React","Component","classnames","connectt","InteractionModes","Menus","setActiveMenu","play","pause","css","CommandLayer","constructor","props","handleClick","e","state","clientY","handleTouchStart","preventDefault","touch","touches","setState","handleTouchEnd","newTouch","changedTouches","offset","Math","abs","minimumScrollDistance","render","commandLayer","ref","connect","activeMenu","player","playing","visible","dispatch","actions"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,gBAAT,EAA2BC,KAA3B,QAAwC,cAAxC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA2C,0BAA3C;AACA,OAAOC,GAAP,MAAgB,4BAAhB;;AAEA,OAAO,MAAMC,YAAN,SAA2BT,SAA3B,CAAqC;AAC1CU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,WAvBmB,GAuBLC,CAAC,IAAI,CACjB;AAEA;AACA;AACA;AAEA;AACA;AACA;AACD,KAjCkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD;;AAEDC,EAAAA,gBAAgB,CAACH,CAAD,EAAI;AAClBA,IAAAA,CAAC,IAAIA,CAAC,CAACI,cAAF,EAAL;AAEA,UAAMC,KAAK,GAAGL,CAAC,IAAIA,CAAC,CAACM,OAAF,CAAU,CAAV,CAAnB;AACAD,IAAAA,KAAK,IAAI,KAAKE,QAAL,CAAc;AAAEL,MAAAA,OAAO,EAAEG,KAAK,CAACH;AAAjB,KAAd,CAAT;AACD;;AAEDM,EAAAA,cAAc,CAACR,CAAD,EAAI;AAChB,UAAMS,QAAQ,GAAGT,CAAC,IAAIA,CAAC,CAACU,cAAF,CAAiB,CAAjB,CAAtB;AACA,UAAMC,MAAM,GAAGF,QAAQ,IAAIG,IAAI,CAACC,GAAL,CAAS,KAAKZ,KAAL,CAAWC,OAAX,GAAqBO,QAAQ,CAACP,OAAvC,CAA3B;AACA,UAAMY,qBAAqB,GAAG,EAA9B;AAEA,QAAI,CAACH,MAAD,IAAWA,MAAM,GAAGG,qBAAxB,EAA+C,KAAKf,WAAL;AAC/CC,IAAAA,CAAC,IAAIA,CAAC,CAACI,cAAF,EAAL;AACD;;AAcDW,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,SAAS,EAAEpB,GAAG,CAACqB,YADjB;AAEE,MAAA,OAAO,EAAE,KAAKjB,WAFhB;AAGE,MAAA,YAAY,EAAEC,CAAC,IAAI,KAAKG,gBAAL,CAAsBH,CAAtB,CAHrB;AAIE,MAAA,UAAU,EAAEA,CAAC,IAAI,KAAKQ,cAAL,CAAoBR,CAApB,CAJnB;AAKE,MAAA,GAAG,EAAEiB,GAAG,IAAK,KAAKA,GAAL,GAAWA;AAL1B;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA9CyC;AAmD5C,eAAeC,OAAO,CACpBjB,KAAK,KAAK;AACRkB,EAAAA,UAAU,EAAElB,KAAK,CAACmB,MAAN,CAAaD,UADjB;AAERE,EAAAA,OAAO,EAAEpB,KAAK,CAACmB,MAAN,CAAaC,OAFd;AAGRC,EAAAA,OAAO,EAAErB,KAAK,CAACmB,MAAN,CAAaE;AAHd,CAAL,CADe,EAMpBC,QAAQ,KAAK;AACX7B,EAAAA,KAAK,EAAE8B,OAAO,CAAC9B,KADJ;AAEXD,EAAAA,IAAI,EAAE+B,OAAO,CAAC/B,IAFH;AAGXD,EAAAA,aAAa,EAAEgC,OAAO,CAAChC;AAHZ,CAAL,CANY,CAAP,CAWbI,YAXa,CAAf","sourcesContent":["import React, { Component } from 'react'\n\nimport classnames from 'classnames'\nimport connectt from 'react-redux';\nimport { InteractionModes, Menus } from '../constants';\nimport { setActiveMenu, play, pause } from 'state/player/playerSlice';\nimport css from './command-layer.module.css'\n\nexport class CommandLayer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      clientY: null,\n    }\n  }\n\n  handleTouchStart(e) {\n    e && e.preventDefault()\n\n    const touch = e && e.touches[0]\n    touch && this.setState({ clientY: touch.clientY })\n  }\n\n  handleTouchEnd(e) {\n    const newTouch = e && e.changedTouches[0]\n    const offset = newTouch && Math.abs(this.state.clientY - newTouch.clientY)\n    const minimumScrollDistance = 50\n\n    if (!offset || offset < minimumScrollDistance) this.handleClick()\n    e && e.preventDefault()\n  }\n\n  handleClick = e => {\n    // const { activeMenu, pause, play, playing, visible, setActiveMenu } = this.props\n\n    // if (activeMenu !== Menus.NONE) {\n    // //   setActiveMenu(Menus.NONE)\n    // }\n\n    // if (visible) {\n    //   playing ? pause() : play()\n    // }\n  }\n\n  render() {\n    return (\n      <div\n        className={css.commandLayer}\n        onClick={this.handleClick}\n        onTouchStart={e => this.handleTouchStart(e)}\n        onTouchEnd={e => this.handleTouchEnd(e)}\n        ref={ref => (this.ref = ref)}\n      />\n    )\n  }\n}\n\n\n\nexport default connect(\n  state => ({\n    activeMenu: state.player.activeMenu,\n    playing: state.player.playing,\n    visible: state.player.visible,\n  }),\n  dispatch => ({\n    pause: actions.pause,\n    play: actions.play,\n    setActiveMenu: actions.setActiveMenu,\n  })\n)(CommandLayer)\n"]},"metadata":{},"sourceType":"module"}