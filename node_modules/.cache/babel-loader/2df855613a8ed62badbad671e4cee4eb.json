{"ast":null,"code":"import{styledOptions,system,variant}from'@codecademy/gamut-styles';import{variance}from'@codecademy/variance';import styled from'@emotion/styled';import{typographyElementVariants,typographyStyleVariants}from'./variants';var displayVariants=variant({variants:typographyStyleVariants});var elementVariants=variant({prop:'as',variants:typographyElementVariants});var truncateVariants=variant({prop:'truncate',base:{display:'inline-block',whiteSpace:'nowrap',overflow:'hidden',width:1,maxWidth:1},variants:{ellipsis:{textOverflow:'ellipsis'},fade:{position:'relative',textOverflow:'clip','&:after':{content:'\"\"',position:'absolute',textColor:'background-current',inset:0,left:0.65,background:'linear-gradient(to right, rgba(0, 0, 0, 0), currentColor 75%)'}}}});var textStates=system.states({center:{textAlign:'center'},block:{display:'block'},screenreader:{display:'inline-block',height:'1px',width:'1px',whiteSpace:'nowrap',overflow:'hidden',position:'absolute',color:'transparent',left:-9999,p:0,m:0,border:'none'},smooth:{WebkitFontSmoothing:'antialiased',MozOsxFontSmoothing:'grayscale'}});var textProps=variance.compose(system.layout,system.typography,system.color,system.space);export var Text=styled('span',styledOptions())(elementVariants,displayVariants,truncateVariants,textStates,textProps);Text.defaultProps={as:'span',m:0};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/Typography/Text.tsx"],"names":["styledOptions","system","variant","variance","styled","typographyElementVariants","typographyStyleVariants","displayVariants","variants","elementVariants","prop","truncateVariants","base","display","whiteSpace","overflow","width","maxWidth","ellipsis","textOverflow","fade","position","content","textColor","inset","left","background","textStates","states","center","textAlign","block","screenreader","height","color","p","m","border","smooth","WebkitFontSmoothing","MozOsxFontSmoothing","textProps","compose","layout","typography","space","Text","defaultProps","as"],"mappings":"AAAA,OAASA,aAAT,CAAwBC,MAAxB,CAAgCC,OAAhC,KAA+C,0BAA/C,CACA,OAAqBC,QAArB,KAAqC,sBAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CAEA,OAASC,yBAAT,CAAoCC,uBAApC,KAAmE,YAAnE,CAEA,GAAMC,CAAAA,eAAe,CAAGL,OAAO,CAAC,CAC9BM,QAAQ,CAAEF,uBADoB,CAAD,CAA/B,CAIA,GAAMG,CAAAA,eAAe,CAAGP,OAAO,CAAC,CAC9BQ,IAAI,CAAE,IADwB,CAE9BF,QAAQ,CAAEH,yBAFoB,CAAD,CAA/B,CAKA,GAAMM,CAAAA,gBAAgB,CAAGT,OAAO,CAAC,CAC/BQ,IAAI,CAAE,UADyB,CAE/BE,IAAI,CAAE,CACJC,OAAO,CAAE,cADL,CAEJC,UAAU,CAAE,QAFR,CAGJC,QAAQ,CAAE,QAHN,CAIJC,KAAK,CAAE,CAJH,CAKJC,QAAQ,CAAE,CALN,CAFyB,CAS/BT,QAAQ,CAAE,CACRU,QAAQ,CAAE,CACRC,YAAY,CAAE,UADN,CADF,CAIRC,IAAI,CAAE,CACJC,QAAQ,CAAE,UADN,CAEJF,YAAY,CAAE,MAFV,CAGJ,UAAW,CACTG,OAAO,CAAE,IADA,CAETD,QAAQ,CAAE,UAFD,CAGTE,SAAS,CAAE,oBAHF,CAITC,KAAK,CAAE,CAJE,CAKTC,IAAI,CAAE,IALG,CAMTC,UAAU,CACR,+DAPO,CAHP,CAJE,CATqB,CAAD,CAAhC,CA6BA,GAAMC,CAAAA,UAAU,CAAG1B,MAAM,CAAC2B,MAAP,CAAc,CAC/BC,MAAM,CAAE,CACNC,SAAS,CAAE,QADL,CADuB,CAI/BC,KAAK,CAAE,CACLlB,OAAO,CAAE,OADJ,CAJwB,CAO/BmB,YAAY,CAAE,CACZnB,OAAO,CAAE,cADG,CAEZoB,MAAM,CAAE,KAFI,CAGZjB,KAAK,CAAE,KAHK,CAIZF,UAAU,CAAE,QAJA,CAKZC,QAAQ,CAAE,QALE,CAMZM,QAAQ,CAAE,UANE,CAOZa,KAAK,CAAE,aAPK,CAQZT,IAAI,CAAE,CAAC,IARK,CASZU,CAAC,CAAE,CATS,CAUZC,CAAC,CAAE,CAVS,CAWZC,MAAM,CAAE,MAXI,CAPiB,CAoB/BC,MAAM,CAAE,CACNC,mBAAmB,CAAE,aADf,CAENC,mBAAmB,CAAE,WAFf,CApBuB,CAAd,CAAnB,CA0BA,GAAMC,CAAAA,SAAS,CAAGtC,QAAQ,CAACuC,OAAT,CAChBzC,MAAM,CAAC0C,MADS,CAEhB1C,MAAM,CAAC2C,UAFS,CAGhB3C,MAAM,CAACiC,KAHS,CAIhBjC,MAAM,CAAC4C,KAJS,CAAlB,CAcA,MAAO,IAAMC,CAAAA,IAAI,CAAG1C,MAAM,CAAC,MAAD,CAASJ,aAAa,EAAtB,CAAN,CAClBS,eADkB,CAElBF,eAFkB,CAGlBI,gBAHkB,CAIlBgB,UAJkB,CAKlBc,SALkB,CAAb,CAQPK,IAAI,CAACC,YAAL,CAAoB,CAClBC,EAAE,CAAE,MADc,CAElBZ,CAAC,CAAE,CAFe,CAApB","sourcesContent":["import { styledOptions, system, variant } from '@codecademy/gamut-styles';\nimport { StyleProps, variance } from '@codecademy/variance';\nimport styled from '@emotion/styled';\n\nimport { typographyElementVariants, typographyStyleVariants } from './variants';\n\nconst displayVariants = variant({\n  variants: typographyStyleVariants,\n});\n\nconst elementVariants = variant({\n  prop: 'as',\n  variants: typographyElementVariants,\n});\n\nconst truncateVariants = variant({\n  prop: 'truncate',\n  base: {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    width: 1,\n    maxWidth: 1,\n  },\n  variants: {\n    ellipsis: {\n      textOverflow: 'ellipsis',\n    },\n    fade: {\n      position: 'relative',\n      textOverflow: 'clip',\n      '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        textColor: 'background-current',\n        inset: 0,\n        left: 0.65,\n        background:\n          'linear-gradient(to right, rgba(0, 0, 0, 0), currentColor 75%)',\n      },\n    },\n  },\n});\n\nconst textStates = system.states({\n  center: {\n    textAlign: 'center',\n  },\n  block: {\n    display: 'block',\n  },\n  screenreader: {\n    display: 'inline-block',\n    height: '1px',\n    width: '1px',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    position: 'absolute',\n    color: 'transparent',\n    left: -9999,\n    p: 0,\n    m: 0,\n    border: 'none',\n  },\n  smooth: {\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n  },\n});\n\nconst textProps = variance.compose(\n  system.layout,\n  system.typography,\n  system.color,\n  system.space\n);\n\nexport interface TextProps\n  extends StyleProps<typeof textProps>,\n    StyleProps<typeof textStates>,\n    StyleProps<typeof truncateVariants>,\n    StyleProps<typeof elementVariants>,\n    StyleProps<typeof displayVariants> {}\n\nexport const Text = styled('span', styledOptions<'span'>())<TextProps>(\n  elementVariants,\n  displayVariants,\n  truncateVariants,\n  textStates,\n  textProps\n);\n\nText.defaultProps = {\n  as: 'span',\n  m: 0,\n};\n"]},"metadata":{},"sourceType":"module"}