{"ast":null,"code":"import queryString from 'query-string';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport { connectRoutes } from 'redux-first-router';\nimport { SiteState } from 'state/types';\nimport promiseMiddleware from 'redux-promise';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nconst sagaMiddleware = createSagaMiddleware();\nexport default function initializeStore({\n  initialState,\n  requestPath,\n  reduceInitialState,\n  routesMap,\n  rootReducers,\n  rootSaga,\n  hotReloadPath\n}) {\n  const preloadedState = reduceInitialState(initialState);\n  const router = connectRoutes(routesMap, {\n    querySerializer: queryString,\n    initialEntries: [requestPath],\n    initialDispatch: false,\n    scrollTop: true\n  });\n  const middlewares = [thunk, promiseMiddleware, router.middleware];\n  const allReducers = combineReducers < SiteState({ ...rootReducers,\n    location: router.reducer\n  });\n\n  if (rootSaga) {\n    middlewares.push(sagaMiddleware);\n  }\n\n  const composeEnhancers = compose;\n  const enhancer = compose(router.enhancer, applyMiddleware(...middlewares));\n  const store = createStore(allReducers, {}, enhancer);\n\n  if (rootSaga) {\n    sagaMiddleware.run(rootSaga);\n  }\n\n  router.initialDispatch();\n  return store;\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/store/initializeStore.ts"],"names":["queryString","applyMiddleware","combineReducers","compose","createStore","connectRoutes","SiteState","promiseMiddleware","createSagaMiddleware","thunk","sagaMiddleware","initializeStore","initialState","requestPath","reduceInitialState","routesMap","rootReducers","rootSaga","hotReloadPath","preloadedState","router","querySerializer","initialEntries","initialDispatch","scrollTop","middlewares","middleware","allReducers","location","reducer","push","composeEnhancers","enhancer","store","run"],"mappings":"AACA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,OAHF,EAIEC,WAJF,QAMO,OANP;AAOA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,iBAAP,MAA8B,eAA9B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAKA,MAAMC,cAAc,GAAGF,oBAAoB,EAA3C;AAiBA,eAAe,SAASG,eAAT,CAAyB;AACpCC,EAAAA,YADoC;AAEpCC,EAAAA,WAFoC;AAGpCC,EAAAA,kBAHoC;AAIpCC,EAAAA,SAJoC;AAKpCC,EAAAA,YALoC;AAMpCC,EAAAA,QANoC;AAOpCC,EAAAA;AAPoC,CAAzB,EAQ6B;AACxC,QAAMC,cAAc,GAAGL,kBAAkB,CAACF,YAAD,CAAzC;AACA,QAAMQ,MAAM,GAAGf,aAAa,CAACU,SAAD,EAAY;AACpCM,IAAAA,eAAe,EAAErB,WADmB;AAEpCsB,IAAAA,cAAc,EAAE,CAACT,WAAD,CAFoB;AAGpCU,IAAAA,eAAe,EAAE,KAHmB;AAIpCC,IAAAA,SAAS,EAAE;AAJyB,GAAZ,CAA5B;AAMA,QAAMC,WAAW,GAAG,CAAChB,KAAD,EAAQF,iBAAR,EAA2Ba,MAAM,CAACM,UAAlC,CAApB;AACA,QAAMC,WAAW,GAAGzB,eAAe,GAACI,SAAS,CAAC,EAC1C,GAAGU,YADuC;AAE1CY,IAAAA,QAAQ,EAAER,MAAM,CAACS;AAFyB,GAAD,CAA7C;;AAKA,MAAIZ,QAAJ,EAAc;AACVQ,IAAAA,WAAW,CAACK,IAAZ,CAAiBpB,cAAjB;AACH;;AAED,QAAMqB,gBAAgB,GAAG5B,OAAzB;AACA,QAAM6B,QAAQ,GAAG7B,OAAO,CACpBiB,MAAM,CAACY,QADa,EAEpB/B,eAAe,CAAC,GAAGwB,WAAJ,CAFK,CAAxB;AAKA,QAAMQ,KAAK,GAAG7B,WAAW,CAACuB,WAAD,EAAc,EAAd,EAAkBK,QAAlB,CAAzB;;AACA,MAAGf,QAAH,EAAa;AACTP,IAAAA,cAAc,CAACwB,GAAf,CAAmBjB,QAAnB;AACH;;AACDG,EAAAA,MAAM,CAACG,eAAP;AACA,SAAOU,KAAP;AAGH","sourcesContent":["import { MemoVoidDictionaryIterator } from 'lodash';\nimport queryString from 'query-string';\nimport {\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore,\n  Store,\n} from 'redux';\nimport { connectRoutes } from 'redux-first-router';\nimport { SiteState } from 'state/types';\nimport promiseMiddleware from 'redux-promise';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nexport default function initializeStore({\n    initialState,\n    requestPath,\n    reduceInitialState,\n    routesMap,\n    rootReducers,\n    rootSaga,\n    hotReloadPath\n}: ConfigureStoreOptions): Store<SiteState> {\n    const preloadedState = reduceInitialState(initialState)\n    const router = connectRoutes(routesMap, {\n        querySerializer: queryString,\n        initialEntries: [requestPath],\n        initialDispatch: false,\n        scrollTop: true,\n    });\n    const middlewares = [thunk, promiseMiddleware, router.middleware]\n    const allReducers = combineReducers<SiteState({\n        ...rootReducers,\n        location: router.reducer\n    })\n\n    if (rootSaga) {\n        middlewares.push(sagaMiddleware)\n    }\n\n    const composeEnhancers = compose;\n    const enhancer = compose<any>(\n        router.enhancer,\n        applyMiddleware(...middlewares)\n    );\n\n    const store = createStore(allReducers, {}, enhancer);\n    if(rootSaga) {\n        sagaMiddleware.run(rootSaga)\n    }\n    router.initialDispatch!()\n    return store;\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}