{"ast":null,"code":"import{createApi,fetchBaseQuery}from\"@reduxjs/toolkit/query/react\";import cookie from\"react-cookies\";export var projectApi=createApi({reducerPath:'projectApi',baseQuery:fetchBaseQuery({baseUrl:\"/\",prepareHeaders:function prepareHeaders(headers,_ref){var getState=_ref.getState;var csrfToken=cookie.load(\"csrftoken\");if(csrfToken){headers.set(\"X-CSRFToken\",csrfToken);}var token=getState().auth.token||localStorage.getItem(\"token\");if(token){headers.set(\"Authorization\",\"Token \".concat(token));}headers.set(\"Content-Type\",\"application/json\");return headers;}}),tagTypes:['ProjectEntityResponse'],endpoints:function endpoints(build){return{fetchProjects:build.query({query:function query(){return{url:'api/projects/',method:\"GET\",responseHandler:function responseHandler(response){return response.json();}};}})};}});var useFetchProjectsQuery=projectApi.useFetchProjectsQuery;export{useFetchProjectsQuery};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/projects.ts"],"names":["createApi","fetchBaseQuery","cookie","projectApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchProjects","query","url","method","responseHandler","response","json","useFetchProjectsQuery"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,KAA0C,8BAA1C,CAEA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CAmDA,MAAO,IAAMC,CAAAA,UAAU,CAAGH,SAAS,CAAC,CAClCI,WAAW,CAAE,YADqB,CAElCC,SAAS,CAAEJ,cAAc,CAAC,CACxBK,OAAO,CAAE,GADe,CAExBC,cAAc,CAAE,wBAACC,OAAD,MAA2B,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACzC,GAAMC,CAAAA,SAAS,CAAGR,MAAM,CAACS,IAAP,CAAY,WAAZ,CAAlB,CAEA,GAAID,SAAJ,CAAe,CACbF,OAAO,CAACI,GAAR,CAAY,aAAZ,CAA2BF,SAA3B,EACD,CACD,GAAMG,CAAAA,KAAK,CACRJ,QAAQ,EAAT,CAA0BK,IAA1B,CAA+BD,KAA/B,EAAwCE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAD1C,CAEA,GAAIH,KAAJ,CAAW,CACTL,OAAO,CAACI,GAAR,CAAY,eAAZ,iBAAsCC,KAAtC,GACD,CAEDL,OAAO,CAACI,GAAR,CAAY,cAAZ,CAA4B,kBAA5B,EAEA,MAAOJ,CAAAA,OAAP,CACD,CAjBuB,CAAD,CAFS,CAsBlCS,QAAQ,CAAE,CAAC,uBAAD,CAtBwB,CAuBlCC,SAAS,CAAE,mBAAAC,KAAK,QAAK,CACjBC,aAAa,CAAED,KAAK,CAACE,KAAN,CAA2C,CACtDA,KAAK,CAAE,uBAAO,CACVC,GAAG,CAAE,eADK,CAEVC,MAAM,CAAE,KAFE,CAGVC,eAAe,CAAE,yBAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EAHP,CAAP,EAD+C,CAA3C,CADE,CAAL,EAvBkB,CAAD,CAA5B,C,GAkCQC,CAAAA,qB,CAA0BxB,U,CAA1BwB,qB","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { head } from \"lodash\";\nimport cookie from \"react-cookies\";\nimport { RootState } from \"store\";\n\n\nexport interface TitleDescription {\n    id: number;\n    title: string;\n    description: string\n}\n\nexport interface HeaderDescription {\n    id: number;\n    heading: string;\n    description: string\n}\n\nexport interface Course {\n    id: string;\n    title: string;\n    description: string;\n    url: string;\n    tags: string[];\n}\n\n\nexport interface ProjectEntityResponse {\n    id: string;\n    title: string;\n    lead:Boolean;\n    description:string;\n    slug:string;\n    goal:string;\n    hero:string;\n    thumbnail_url:string;\n    experience:string;\n    courses: Course[];\n    completion_time:string;\n    related: ProjectEntityResponse[]\n    header:HeaderDescription,\n    header_primary_color:string;\n    header_secondary_color:string;\n    video_headline:string;\n    difficulty:string;\n    progress:string;\n    tags:string[];\n    price:Number;\n    outcomes: TitleDescription[];\n    included: TitleDescription[];\n    syllabuses: TitleDescription[];\n}\n\nexport const projectApi = createApi({\n  reducerPath: 'projectApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n\n  tagTypes: ['ProjectEntityResponse'],\n  endpoints: build => ({\n      fetchProjects: build.query<ProjectEntityResponse[], void>({\n          query: () => ({\n              url: 'api/projects/',\n              method: \"GET\",\n              responseHandler: (response) => response.json()\n          }),\n      }),\n  })\n});\n\nexport const { useFetchProjectsQuery } = projectApi\n"]},"metadata":{},"sourceType":"module"}