{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/RadialProgress/index.tsx\";\nimport cx from 'classnames';\nimport React from 'react';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst offsetForEmptyProgress = 290;\nconst offsetForFullProgress = 10;\nconst offsetDelta = offsetForEmptyProgress - offsetForFullProgress;\n\nconst convertPercentToOffset = percent => offsetForEmptyProgress - Math.floor(offsetDelta * (percent / 100));\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n */\n\n\nexport const RadialProgress = ({\n  children,\n  className,\n  size = 24,\n  duration,\n  value,\n  strokeLinecap = 'round',\n  strokeWidth = 10,\n  ...props\n}) => {\n  let startingValue;\n  let finalValue;\n\n  if (Array.isArray(value)) {\n    startingValue = convertPercentToOffset(value[0]);\n    finalValue = convertPercentToOffset(value[1]);\n  } else {\n    finalValue = startingValue = convertPercentToOffset(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx(styles.radialProgress, className),\n    style: {\n      height: size,\n      width: size\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      \"aria-label\": `${value}% progress`,\n      viewBox: \"0 0 100 100\",\n      height: size,\n      width: size,\n      ...props,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"50\",\n        cy: \"50\",\n        r: \"45\",\n        stroke: \"currentColor\",\n        strokeWidth: strokeWidth,\n        fill: \"none\",\n        opacity: \".2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"50\",\n        cy: \"50\",\n        r: \"45\",\n        stroke: \"currentColor\",\n        strokeWidth: strokeWidth,\n        strokeLinecap: strokeLinecap,\n        fill: \"none\",\n        opacity: \"1\",\n        strokeDashoffset: finalValue,\n        strokeDasharray: offsetForEmptyProgress,\n        transform: \"rotate(-90 50 50)\",\n        children: startingValue !== finalValue && /*#__PURE__*/_jsxDEV(\"animate\", {\n          attributeType: \"CSS\",\n          attributeName: \"stroke-dashoffset\",\n          from: startingValue,\n          to: finalValue,\n          dur: `${duration}ms`,\n          begin: \"0\",\n          fill: \"freeze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), children && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.children,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = RadialProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadialProgress\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/RadialProgress/index.tsx"],"names":["cx","React","styles","offsetForEmptyProgress","offsetForFullProgress","offsetDelta","convertPercentToOffset","percent","Math","floor","RadialProgress","children","className","size","duration","value","strokeLinecap","strokeWidth","props","startingValue","finalValue","Array","isArray","radialProgress","height","width"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAUA,MAAMC,sBAAsB,GAAG,GAA/B;AACA,MAAMC,qBAAqB,GAAG,EAA9B;AACA,MAAMC,WAAW,GAAGF,sBAAsB,GAAGC,qBAA7C;;AAEA,MAAME,sBAAsB,GAAIC,OAAD,IAC7BJ,sBAAsB,GAAGK,IAAI,CAACC,KAAL,CAAWJ,WAAW,IAAIE,OAAO,GAAG,GAAd,CAAtB,CAD3B;AAGA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMG,cAA6C,GAAG,CAAC;AAC5DC,EAAAA,QAD4D;AAE5DC,EAAAA,SAF4D;AAG5DC,EAAAA,IAAI,GAAG,EAHqD;AAI5DC,EAAAA,QAJ4D;AAK5DC,EAAAA,KAL4D;AAM5DC,EAAAA,aAAa,GAAG,OAN4C;AAO5DC,EAAAA,WAAW,GAAG,EAP8C;AAQ5D,KAAGC;AARyD,CAAD,KASvD;AACJ,MAAIC,aAAJ;AACA,MAAIC,UAAJ;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;AACxBI,IAAAA,aAAa,GAAGb,sBAAsB,CAACS,KAAK,CAAC,CAAD,CAAN,CAAtC;AACAK,IAAAA,UAAU,GAAGd,sBAAsB,CAACS,KAAK,CAAC,CAAD,CAAN,CAAnC;AACD,GAHD,MAGO;AACLK,IAAAA,UAAU,GAAGD,aAAa,GAAGb,sBAAsB,CAACS,KAAD,CAAnD;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAEf,EAAE,CAACE,MAAM,CAACqB,cAAR,EAAwBX,SAAxB,CADf;AAEE,IAAA,KAAK,EAAE;AAAEY,MAAAA,MAAM,EAAEX,IAAV;AAAgBY,MAAAA,KAAK,EAAEZ;AAAvB,KAFT;AAAA,4BAIE;AACE,oBAAa,GAAEE,KAAM,YADvB;AAEE,MAAA,OAAO,EAAC,aAFV;AAGE,MAAA,MAAM,EAAEF,IAHV;AAIE,MAAA,KAAK,EAAEA,IAJT;AAAA,SAKMK,KALN;AAAA,8BAOE;AACE,QAAA,EAAE,EAAC,IADL;AAEE,QAAA,EAAE,EAAC,IAFL;AAGE,QAAA,CAAC,EAAC,IAHJ;AAIE,QAAA,MAAM,EAAC,cAJT;AAKE,QAAA,WAAW,EAAED,WALf;AAME,QAAA,IAAI,EAAC,MANP;AAOE,QAAA,OAAO,EAAC;AAPV;AAAA;AAAA;AAAA;AAAA,cAPF,eAgBE;AACE,QAAA,EAAE,EAAC,IADL;AAEE,QAAA,EAAE,EAAC,IAFL;AAGE,QAAA,CAAC,EAAC,IAHJ;AAIE,QAAA,MAAM,EAAC,cAJT;AAKE,QAAA,WAAW,EAAEA,WALf;AAME,QAAA,aAAa,EAAED,aANjB;AAOE,QAAA,IAAI,EAAC,MAPP;AAQE,QAAA,OAAO,EAAC,GARV;AASE,QAAA,gBAAgB,EAAEI,UATpB;AAUE,QAAA,eAAe,EAAEjB,sBAVnB;AAWE,QAAA,SAAS,EAAC,mBAXZ;AAAA,kBAaGgB,aAAa,KAAKC,UAAlB,iBACC;AACE,UAAA,aAAa,EAAC,KADhB;AAEE,UAAA,aAAa,EAAC,mBAFhB;AAGE,UAAA,IAAI,EAAED,aAHR;AAIE,UAAA,EAAE,EAAEC,UAJN;AAKE,UAAA,GAAG,EAAG,GAAEN,QAAS,IALnB;AAME,UAAA,KAAK,EAAC,GANR;AAOE,UAAA,IAAI,EAAC;AAPP;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EA8CGH,QAAQ,iBAAI;AAAK,MAAA,SAAS,EAAET,MAAM,CAACS,QAAvB;AAAA,gBAAkCA;AAAlC;AAAA;AAAA;AAAA;AAAA,YA9Cf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD,CAtEM;KAAMD,c","sourcesContent":["import cx from 'classnames';\nimport React, { SVGProps } from 'react';\n\nimport styles from './styles.module.scss';\n\nexport interface RadialProgressProps extends SVGProps<SVGSVGElement> {\n  size?: number | string;\n  duration?: number;\n  value: number | number[];\n  strokeWidth?: number | string;\n  strokeLinecap?: 'round' | 'butt' | 'square';\n}\n\nconst offsetForEmptyProgress = 290;\nconst offsetForFullProgress = 10;\nconst offsetDelta = offsetForEmptyProgress - offsetForFullProgress;\n\nconst convertPercentToOffset = (percent: number) =>\n  offsetForEmptyProgress - Math.floor(offsetDelta * (percent / 100));\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n */\n\nexport const RadialProgress: React.FC<RadialProgressProps> = ({\n  children,\n  className,\n  size = 24,\n  duration,\n  value,\n  strokeLinecap = 'round',\n  strokeWidth = 10,\n  ...props\n}) => {\n  let startingValue;\n  let finalValue;\n\n  if (Array.isArray(value)) {\n    startingValue = convertPercentToOffset(value[0]);\n    finalValue = convertPercentToOffset(value[1]);\n  } else {\n    finalValue = startingValue = convertPercentToOffset(value);\n  }\n\n  return (\n    <div\n      className={cx(styles.radialProgress, className)}\n      style={{ height: size, width: size }}\n    >\n      <svg\n        aria-label={`${value}% progress`}\n        viewBox=\"0 0 100 100\"\n        height={size}\n        width={size}\n        {...props}\n      >\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          opacity=\".2\"\n        />\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          strokeLinecap={strokeLinecap}\n          fill=\"none\"\n          opacity=\"1\"\n          strokeDashoffset={finalValue}\n          strokeDasharray={offsetForEmptyProgress}\n          transform=\"rotate(-90 50 50)\"\n        >\n          {startingValue !== finalValue && (\n            <animate\n              attributeType=\"CSS\"\n              attributeName=\"stroke-dashoffset\"\n              from={startingValue}\n              to={finalValue}\n              dur={`${duration}ms`}\n              begin=\"0\"\n              fill=\"freeze\"\n            />\n          )}\n        </circle>\n      </svg>\n      {children && <div className={styles.children}>{children}</div>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}