{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{breakpoints as originalBreakpoints}from'@codecademy/gamut-styles';import{mapValues}from'lodash';import{createBreakpoint}from'react-use';export var breakpoints=mapValues(_objectSpread({xxs:0},originalBreakpoints),function(value){return parseInt(value,10);});/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */export var useBreakpoint=createBreakpoint(breakpoints);/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */export function useBreakpointAtOrAbove(breakpoint){var currentBreakpoint=useBreakpoint();return breakpoints[currentBreakpoint]>=breakpoints[breakpoint];}/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */export function useBreakpointAt(breakpoint){var currentBreakpoint=useBreakpoint();return breakpoints[currentBreakpoint]===breakpoints[breakpoint];}/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */export function useBreakpointAtOrBelow(breakpoint){var currentBreakpoint=useBreakpoint();return breakpoints[currentBreakpoint]<=breakpoints[breakpoint];}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/gamut-overrides/lib/breakpointHooks/index.ts"],"names":["breakpoints","originalBreakpoints","mapValues","createBreakpoint","xxs","value","parseInt","useBreakpoint","useBreakpointAtOrAbove","breakpoint","currentBreakpoint","useBreakpointAt","useBreakpointAtOrBelow"],"mappings":"sKAAA,OAASA,WAAW,GAAIC,CAAAA,mBAAxB,KAAmD,0BAAnD,CACA,OAASC,SAAT,KAA0B,QAA1B,CACA,OAASC,gBAAT,KAAiC,WAAjC,CAKA,MAAO,IAAMH,CAAAA,WAAW,CAAIE,SAAS,gBACjCE,GAAG,CAAE,CAD4B,EACtBH,mBADsB,EAEnC,SAACI,KAAD,QAAmBC,CAAAA,QAAQ,CAACD,KAAD,CAAQ,EAAR,CAA3B,EAFmC,CAA9B,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,CAAAA,aAAa,CAAGJ,gBAAgB,CAC3CH,WAD2C,CAAtC,CAIP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASQ,CAAAA,sBAAT,CAAgCC,UAAhC,CAAiE,CACtE,GAAMC,CAAAA,iBAAiB,CAAGH,aAAa,EAAvC,CACA,MAAOP,CAAAA,WAAW,CAACU,iBAAD,CAAX,EAAkCV,WAAW,CAACS,UAAD,CAApD,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASE,CAAAA,eAAT,CAAyBF,UAAzB,CAA0D,CAC/D,GAAMC,CAAAA,iBAAiB,CAAGH,aAAa,EAAvC,CACA,MAAOP,CAAAA,WAAW,CAACU,iBAAD,CAAX,GAAmCV,WAAW,CAACS,UAAD,CAArD,CACD,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASG,CAAAA,sBAAT,CAAgCH,UAAhC,CAAiE,CACtE,GAAMC,CAAAA,iBAAiB,CAAGH,aAAa,EAAvC,CACA,MAAOP,CAAAA,WAAW,CAACU,iBAAD,CAAX,EAAkCV,WAAW,CAACS,UAAD,CAApD,CACD","sourcesContent":["import { breakpoints as originalBreakpoints } from '@codecademy/gamut-styles';\nimport { mapValues } from 'lodash';\nimport { createBreakpoint } from 'react-use';\n\nexport type Breakpoint = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\nexport type BreakpointMinWidths = Record<Breakpoint, number>;\n\nexport const breakpoints = (mapValues(\n  { xxs: 0, ...originalBreakpoints },\n  (value: string) => parseInt(value, 10)\n) as unknown) as BreakpointMinWidths;\n\n/**\n * useBreakpoint will provide the current breakpoint to a React component.\n *\n * If you think you need this, make sure to think twice.  It is really nice\n * to allow your styles layer to concern itself about the appearance of a\n * component at different screen sizes, and not have to maintain two different\n * components that could drift from eachother.  That being said, sometimes\n * The content, layout, and/or functionality of a mobile page/component can\n * be so different that it is non-performant or difficult to maintain the\n * changes in only styles.  For those cases where it is actually easier to maintain\n * two components or a programatic distinction of the breakpoint, this helper\n * exists.\n *\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport const useBreakpoint = createBreakpoint(\n  breakpoints\n) as () => keyof typeof breakpoints;\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAtOrAbove(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] >= breakpoints[breakpoint];\n}\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAt(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] === breakpoints[breakpoint];\n}\n\n/**\n * @deprecated\n * Use Box, LayoutGrid, or other responsive Gamut components instead.\n * JavaScript-time screen size checks are notorious for worsening page performance.\n * @see https://web.dev/cls\n */\nexport function useBreakpointAtOrBelow(breakpoint: Breakpoint): boolean {\n  const currentBreakpoint = useBreakpoint();\n  return breakpoints[currentBreakpoint] <= breakpoints[breakpoint];\n}\n"]},"metadata":{},"sourceType":"module"}