{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * DeferredRender\n *\n * This is a simple component that just ensures that it's children don't render\n * until this component is mounted.\n *\n * This is mainly used to prevent a component from rendering serverside.\n */\nexport const DeferredRender = ({\n  children,\n  fallback\n}) => {\n  _s();\n\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: mounted ? children : fallback || null\n  }, void 0, false);\n};\n\n_s(DeferredRender, \"LrrVfNW3d1raFE0BNzCTILYmIfo=\");\n\n_c = DeferredRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeferredRender\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/DeferredRender/index.tsx"],"names":["React","useEffect","useState","DeferredRender","children","fallback","mounted","setMounted"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAA6C,GAAG,CAAC;AAC5DC,EAAAA,QAD4D;AAE5DC,EAAAA;AAF4D,CAAD,KAGvD;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO;AAAA,cAAGD,OAAO,GAAGF,QAAH,GAAcC,QAAQ,IAAI;AAApC,mBAAP;AACD,CAXM;;GAAMF,c;;KAAAA,c","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport type DeferredRenderProps = {\n  fallback?: React.ReactNode;\n};\n\n/**\n * DeferredRender\n *\n * This is a simple component that just ensures that it's children don't render\n * until this component is mounted.\n *\n * This is mainly used to prevent a component from rendering serverside.\n */\nexport const DeferredRender: React.FC<DeferredRenderProps> = ({\n  children,\n  fallback,\n}) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return <>{mounted ? children : fallback || null}</>;\n};\n"]},"metadata":{},"sourceType":"module"}