{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ReactResizeDetector, { withResizeDetector } from 'react-resize-detector';\nimport css from './container.module.css';\nimport { setContainerSize } from 'state/player/playerSlice';\nimport { isIE } from '../utilities/is-ie';\nimport { FullscreenState } from '../constants';\nimport { setFullscreen, isFullscreen, collapseFullscreen } from '../fullscreen-helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst resize = container => (width, height) => {\n  const {\n    props: {\n      setContainerSize\n    }\n  } = container;\n  setContainerSize({\n    width,\n    height\n  });\n};\n\nexport class Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resizeContainer = (width, height) => {\n      console.log(\"Dimension\");\n    };\n\n    this.resize = resize(this);\n  }\n\n  updateFullscreenState(fullscreenState) {\n    const container = this.content;\n    const videoElement = document.getElementById('video-element');\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement);\n    } else {\n      collapseFullscreen(videoElement);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState;\n    const nextFullscreenState = nextProps.fullscreenState;\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return;\n    }\n\n    this.updateFullscreenState(nextFullscreenState);\n    return nextProps;\n  }\n\n  render() {\n    let {\n      containerSize,\n      interactionMode,\n      playerSize,\n      refreshRate,\n      fullscreenState\n    } = this.props;\n    return [/*#__PURE__*/_jsxDEV(ReactResizeDetector, {\n      handleWidth: true,\n      handleHeight: true,\n      onResize: (width, height) => console.log(\"Dimention: \", width, height),\n      refreshMode: \"throttle\",\n      refreshRate: refreshRate || 15\n    }, 'resize detector', false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.container,\n      style: fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize\n      } : {},\n      ref: el => this.element = el,\n      \"interaction-mode\": interactionMode,\n      \"is-ie\": `${isIE()}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.content,\n        style: fullscreenState === FullscreenState.NORMAL ? { ...playerSize\n        } : {\n          width: '100%',\n          height: '100%'\n        },\n        ref: el => this.content = el,\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, \"container\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)];\n  }\n\n}\nexport default connect(state => ({\n  containerSize: state.player.containerSize,\n  breakpoint: state.player.breakpoint,\n  interactionMode: state.player.interactionMode,\n  playerSize: state.player.playerSize,\n  fullscreenState: state.player.fullscreenState\n}), dispatch => ({\n  setContainersize: size => dispatch(setContainerSize(size))\n}))(Container);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Container/index.js"],"names":["React","Component","connect","ReactResizeDetector","withResizeDetector","css","setContainerSize","isIE","FullscreenState","setFullscreen","isFullscreen","collapseFullscreen","resize","container","width","height","props","Container","constructor","resizeContainer","console","log","updateFullscreenState","fullscreenState","content","videoElement","document","getElementById","FULLSCREEN","componentWillReceiveProps","nextProps","currentFullscreenState","nextFullscreenState","render","containerSize","interactionMode","playerSize","refreshRate","el","element","NORMAL","children","state","player","breakpoint","dispatch","setContainersize","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport ReactResizeDetector, { withResizeDetector} from 'react-resize-detector'\nimport css from './container.module.css'\nimport { setContainerSize } from 'state/player/playerSlice'\nimport { isIE } from '../utilities/is-ie';\nimport { FullscreenState } from '../constants'\nimport { setFullscreen, isFullscreen, collapseFullscreen } from '../fullscreen-helper'\n\nconst resize = container => (width, height) => {\n  \n  const {\n    props: { setContainerSize },\n  } = container\n  setContainerSize({ width, height })\n}\n\nexport class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    this.resize = resize(this)\n  }\n  \n  resizeContainer = (width, height) => {\n    console.log(\"Dimension\")\n  }\n  updateFullscreenState(fullscreenState) {\n    const container = this.content\n    const videoElement = document.getElementById('video-element')\n\n    if (fullscreenState === FullscreenState.FULLSCREEN && !isFullscreen()) {\n      setFullscreen(container, videoElement)\n    } else {\n      collapseFullscreen(videoElement)\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentFullscreenState = this.props.fullscreenState\n    const nextFullscreenState = nextProps.fullscreenState\n\n    if (currentFullscreenState === nextFullscreenState) {\n      return\n    }\n\n    this.updateFullscreenState(nextFullscreenState)\n\n    return nextProps\n  }\n\n  render() {\n    let { containerSize, interactionMode, playerSize, refreshRate, fullscreenState } = this.props\n\n    return [\n      <ReactResizeDetector\n        key={'resize detector'}\n        handleWidth\n        handleHeight\n        onResize={(width, height) => console.log(\"Dimention: \", width, height)}\n        refreshMode=\"throttle\"\n        refreshRate={refreshRate || 15}\n      />,\n      <div\n        key=\"container\"\n        className={css.container}\n        style={fullscreenState === FullscreenState.FULLSCREEN ? { ...containerSize } : {}}\n        ref={el => (this.element = el)}\n        interaction-mode={interactionMode}\n        is-ie={`${isIE()}`}\n      >\n        <div className={css.content} style={fullscreenState === FullscreenState.NORMAL ? { ...playerSize } : { width: '100%', height: '100%' }} ref={el => (this.content = el)}>\n          {this.props.children}\n        </div>\n      </div>,\n    ]\n  }\n}\n\nexport default  connect(\n  state => ({\n    containerSize: state.player.containerSize,\n    breakpoint: state.player.breakpoint,\n    interactionMode: state.player.interactionMode,\n    playerSize: state.player.playerSize,\n    fullscreenState: state.player.fullscreenState,\n  }),\n  dispatch => ({\n    setContainersize: (size) => dispatch(setContainerSize(size)),\n  })\n)(Container)"]},"metadata":{},"sourceType":"module"}