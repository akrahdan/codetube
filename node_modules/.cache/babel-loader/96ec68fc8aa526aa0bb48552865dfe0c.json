{"ast":null,"code":"import pathToAction from './pathToAction';\n\nvar _unblock = void 0;\n\nvar _removeConfirmBlocking = void 0;\n\nvar _displayConfirmLeave = void 0;\n\nexport var clearBlocking = function clearBlocking() {\n  _unblock && _unblock();\n  _removeConfirmBlocking && _removeConfirmBlocking();\n}; // This is the default `displayConfirmLeave` handler.\n// It receives the message to display and a callback to call when complete.\n// Pass `true` to the callback to proceed with leaving the current route.\n\nvar defaultDisplayConfirmLeave = function defaultDisplayConfirmLeave(message, callback) {\n  var hasConfirm = typeof window !== 'undefined' && window.confirm;\n\n  if (!hasConfirm) {\n    throw new Error('[rudy] environment requires `displayConfirmLeave` option');\n  }\n\n  var canLeave = window.confirm(message);\n  callback(canLeave);\n}; // createConfirm is called whenever you enter a route that has a `confirmLeave`\n// option. It tells the history package to block via `history.block`, but\n// to determine to do so based on our redux state-centric `confirm` handler.\n// This handler is also returned for use in the middleware to block when\n// leaving the current route via actions (i.e. as opposed to browser buttons)\n\n\nexport var createConfirm = function createConfirm(confirmLeave, store, selectLocationState, history, querySerializer, removeConfirmBlocking) {\n  var confirm = function confirm(location) {\n    var state = store.getState();\n    var routesMap = selectLocationState(state).routesMap;\n    var pathname = location.pathname;\n    var action = pathToAction(pathname, routesMap, querySerializer);\n    var response = confirmLeave(state, action); // we use the confirmLeave function manually in onBeforeChange, so we must\n    // manually clear blocking that history.block would otherwise handle, plus\n    // we remove additional onBeforeChange blocking via _removeConfirmBlocking\n\n    if (!response) clearBlocking();\n    return response;\n  };\n\n  _unblock = history.block(confirm);\n  _removeConfirmBlocking = removeConfirmBlocking;\n  return confirm;\n}; // confirmUI here is triggered only by onBeforeChange:\n\nexport var confirmUI = function confirmUI(message, store, action) {\n  var cb = function cb(canLeave) {\n    if (canLeave) {\n      clearBlocking();\n      store.dispatch(action);\n    }\n  };\n\n  _displayConfirmLeave(message, cb);\n};\nexport var getUserConfirmation = function getUserConfirmation(message, cb) {\n  _displayConfirmLeave(message, function (canLeave) {\n    if (canLeave) clearBlocking();\n    cb(canLeave);\n  });\n};\nexport var setDisplayConfirmLeave = function setDisplayConfirmLeave(displayConfirmLeave) {\n  _displayConfirmLeave = displayConfirmLeave || defaultDisplayConfirmLeave;\n};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/node_modules/redux-first-router/dist/es/pure-utils/confirmLeave.js"],"names":["pathToAction","_unblock","_removeConfirmBlocking","_displayConfirmLeave","clearBlocking","defaultDisplayConfirmLeave","message","callback","hasConfirm","window","confirm","Error","canLeave","createConfirm","confirmLeave","store","selectLocationState","history","querySerializer","removeConfirmBlocking","location","state","getState","routesMap","pathname","action","response","block","confirmUI","cb","dispatch","getUserConfirmation","setDisplayConfirmLeave","displayConfirmLeave"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;;AAEA,IAAIC,QAAQ,GAAG,KAAK,CAApB;;AACA,IAAIC,sBAAsB,GAAG,KAAK,CAAlC;;AACA,IAAIC,oBAAoB,GAAG,KAAK,CAAhC;;AAEA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAT,GAAyB;AAClDH,EAAAA,QAAQ,IAAIA,QAAQ,EAApB;AACAC,EAAAA,sBAAsB,IAAIA,sBAAsB,EAAhD;AACD,CAHM,C,CAKP;AACA;AACA;;AAEA,IAAIG,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,OAApC,EAA6CC,QAA7C,EAAuD;AACtF,MAAIC,UAAU,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAAzD;;AAEA,MAAI,CAACF,UAAL,EAAiB;AACf,UAAM,IAAIG,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,MAAIC,QAAQ,GAAGH,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAAf;AAEAC,EAAAA,QAAQ,CAACK,QAAD,CAAR;AACD,CAVD,C,CAYA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,YAAvB,EAAqCC,KAArC,EAA4CC,mBAA5C,EAAiEC,OAAjE,EAA0EC,eAA1E,EAA2FC,qBAA3F,EAAkH;AAC3I,MAAIT,OAAO,GAAG,SAASA,OAAT,CAAiBU,QAAjB,EAA2B;AACvC,QAAIC,KAAK,GAAGN,KAAK,CAACO,QAAN,EAAZ;AACA,QAAIC,SAAS,GAAGP,mBAAmB,CAACK,KAAD,CAAnB,CAA2BE,SAA3C;AACA,QAAIC,QAAQ,GAAGJ,QAAQ,CAACI,QAAxB;AACA,QAAIC,MAAM,GAAGzB,YAAY,CAACwB,QAAD,EAAWD,SAAX,EAAsBL,eAAtB,CAAzB;AACA,QAAIQ,QAAQ,GAAGZ,YAAY,CAACO,KAAD,EAAQI,MAAR,CAA3B,CALuC,CAOvC;AACA;AACA;;AACA,QAAI,CAACC,QAAL,EAAetB,aAAa;AAC5B,WAAOsB,QAAP;AACD,GAZD;;AAcAzB,EAAAA,QAAQ,GAAGgB,OAAO,CAACU,KAAR,CAAcjB,OAAd,CAAX;AACAR,EAAAA,sBAAsB,GAAGiB,qBAAzB;AAEA,SAAOT,OAAP;AACD,CAnBM,C,CAqBP;;AAEA,OAAO,IAAIkB,SAAS,GAAG,SAASA,SAAT,CAAmBtB,OAAnB,EAA4BS,KAA5B,EAAmCU,MAAnC,EAA2C;AAChE,MAAII,EAAE,GAAG,SAASA,EAAT,CAAYjB,QAAZ,EAAsB;AAC7B,QAAIA,QAAJ,EAAc;AACZR,MAAAA,aAAa;AACbW,MAAAA,KAAK,CAACe,QAAN,CAAeL,MAAf;AACD;AACF,GALD;;AAOAtB,EAAAA,oBAAoB,CAACG,OAAD,EAAUuB,EAAV,CAApB;AACD,CATM;AAWP,OAAO,IAAIE,mBAAmB,GAAG,SAASA,mBAAT,CAA6BzB,OAA7B,EAAsCuB,EAAtC,EAA0C;AACzE1B,EAAAA,oBAAoB,CAACG,OAAD,EAAU,UAAUM,QAAV,EAAoB;AAChD,QAAIA,QAAJ,EAAcR,aAAa;AAC3ByB,IAAAA,EAAE,CAACjB,QAAD,CAAF;AACD,GAHmB,CAApB;AAID,CALM;AAOP,OAAO,IAAIoB,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,mBAAhC,EAAqD;AACvF9B,EAAAA,oBAAoB,GAAG8B,mBAAmB,IAAI5B,0BAA9C;AACD,CAFM","sourcesContent":["import pathToAction from './pathToAction';\n\nvar _unblock = void 0;\nvar _removeConfirmBlocking = void 0;\nvar _displayConfirmLeave = void 0;\n\nexport var clearBlocking = function clearBlocking() {\n  _unblock && _unblock();\n  _removeConfirmBlocking && _removeConfirmBlocking();\n};\n\n// This is the default `displayConfirmLeave` handler.\n// It receives the message to display and a callback to call when complete.\n// Pass `true` to the callback to proceed with leaving the current route.\n\nvar defaultDisplayConfirmLeave = function defaultDisplayConfirmLeave(message, callback) {\n  var hasConfirm = typeof window !== 'undefined' && window.confirm;\n\n  if (!hasConfirm) {\n    throw new Error('[rudy] environment requires `displayConfirmLeave` option');\n  }\n\n  var canLeave = window.confirm(message);\n\n  callback(canLeave);\n};\n\n// createConfirm is called whenever you enter a route that has a `confirmLeave`\n// option. It tells the history package to block via `history.block`, but\n// to determine to do so based on our redux state-centric `confirm` handler.\n// This handler is also returned for use in the middleware to block when\n// leaving the current route via actions (i.e. as opposed to browser buttons)\n\nexport var createConfirm = function createConfirm(confirmLeave, store, selectLocationState, history, querySerializer, removeConfirmBlocking) {\n  var confirm = function confirm(location) {\n    var state = store.getState();\n    var routesMap = selectLocationState(state).routesMap;\n    var pathname = location.pathname;\n    var action = pathToAction(pathname, routesMap, querySerializer);\n    var response = confirmLeave(state, action);\n\n    // we use the confirmLeave function manually in onBeforeChange, so we must\n    // manually clear blocking that history.block would otherwise handle, plus\n    // we remove additional onBeforeChange blocking via _removeConfirmBlocking\n    if (!response) clearBlocking();\n    return response;\n  };\n\n  _unblock = history.block(confirm);\n  _removeConfirmBlocking = removeConfirmBlocking;\n\n  return confirm;\n};\n\n// confirmUI here is triggered only by onBeforeChange:\n\nexport var confirmUI = function confirmUI(message, store, action) {\n  var cb = function cb(canLeave) {\n    if (canLeave) {\n      clearBlocking();\n      store.dispatch(action);\n    }\n  };\n\n  _displayConfirmLeave(message, cb);\n};\n\nexport var getUserConfirmation = function getUserConfirmation(message, cb) {\n  _displayConfirmLeave(message, function (canLeave) {\n    if (canLeave) clearBlocking();\n    cb(canLeave);\n  });\n};\n\nexport var setDisplayConfirmLeave = function setDisplayConfirmLeave(displayConfirmLeave) {\n  _displayConfirmLeave = displayConfirmLeave || defaultDisplayConfirmLeave;\n};"]},"metadata":{},"sourceType":"module"}