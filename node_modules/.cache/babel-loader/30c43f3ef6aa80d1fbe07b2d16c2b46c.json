{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import{variant}from'@codecademy/gamut-styles';import styled from'@emotion/styled';import React from'react';import{Pattern}from'../Pattern';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var progressBarSizeVariants=variant({defaultVariant:'small',prop:'size',variants:{small:{height:'6px',borderRadius:'3px'},medium:{height:'8px',borderRadius:'80px'},large:{height:'36px',borderRadius:'18px'}}});var progressBarBackgroundVariants=variant({defaultVariant:'blue',variants:{blue:{bg:'navy'},yellow:{bg:\"gray-100\"},dark:{textColor:'white'},light:{textColor:'navy'}}});var progressBarBorderVariants=variant({defaultVariant:'basic',prop:'border',variants:{basic:{borderWidth:'0'},bordered:{borderWidth:'1px',borderStyle:'solid'}}});var progressBarForegroundVariants=variant({defaultVariant:'blue',base:{alignItems:'center',height:'100%',display:'flex',transition:'width 0.5s',position:'relative',borderRadius:'inherit'},variants:{blue:{bg:'blue',textColor:'white'},yellow:{bg:\"yellow\",textColor:\"black\"},light:{bg:'navy',textColor:'navy'},dark:{bg:'white',textColor:'white'}}});var ProgressBarWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  position: relative;\\n  \",\";\\n  \",\";\\n  \",\";\\n\"])),progressBarBackgroundVariants,progressBarSizeVariants,progressBarBorderVariants);var Bar=styled.div(progressBarForegroundVariants);var DisplayedPercent=styled.span(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  font-weight: bold;\\n  padding: 0.5rem;\\n  text-align: right;\\n  width: 100%;\\n\"])));export var ProgressBar=function ProgressBar(_ref){var _ref$minimumPercent=_ref.minimumPercent,minimumPercent=_ref$minimumPercent===void 0?0:_ref$minimumPercent,percent=_ref.percent,pattern=_ref.pattern,bordered=_ref.bordered,_ref$size=_ref.size,size=_ref$size===void 0?'small':_ref$size,_ref$variant=_ref.variant,variant=_ref$variant===void 0?'blue':_ref$variant;return/*#__PURE__*/_jsxs(ProgressBarWrapper,{\"aria-label\":\"Progress: \".concat(percent,\"%\"),\"aria-live\":\"polite\",role:\"figure\",border:bordered?'bordered':'basic',size:size,variant:variant,children:[pattern&&/*#__PURE__*/_jsx(Pattern,{width:\"100%\",position:\"absolute\",zIndex:0,name:pattern}),/*#__PURE__*/_jsx(Bar,{variant:variant,\"data-testid\":\"progress-bar-bar\",style:{width:\"\".concat(Math.max(minimumPercent,percent),\"%\")},children:size==='large'&&/*#__PURE__*/_jsxs(DisplayedPercent,{children:[percent,\"%\"]})})]});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/ProgressBar/index.tsx"],"names":["variant","styled","React","Pattern","progressBarSizeVariants","defaultVariant","prop","variants","small","height","borderRadius","medium","large","progressBarBackgroundVariants","blue","bg","yellow","dark","textColor","light","progressBarBorderVariants","basic","borderWidth","bordered","borderStyle","progressBarForegroundVariants","base","alignItems","display","transition","position","ProgressBarWrapper","div","Bar","DisplayedPercent","span","ProgressBar","minimumPercent","percent","pattern","size","width","Math","max"],"mappings":"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","sourcesContent":["import { variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { Pattern, PatternName } from '../Pattern';\n\nexport type ProgressBarProps = {\n  className?: string;\n\n  /**\n   * Whether to increase size and display the percentage as text.\n   */\n  size?: 'small' | 'medium' | 'large';\n\n  /**\n   * Minimum amount of the bar to fill in visually.\n   */\n  minimumPercent?: number;\n\n  /**\n   * How much of the bar to fill in, as a number in [0, 100].\n   */\n  percent: number;\n\n  /**\n   * Base variant display themes.\n   */\n  variant: 'blue' | 'yellow' | 'dark' | 'light';\n\n  /**\n   * Base variant display themes.\n   */\n  bordered?: boolean;\n\n  /**\n   * Whether to use a pattern background\n   */\n  pattern?: PatternName;\n};\n\nconst progressBarSizeVariants = variant({\n  defaultVariant: 'small',\n  prop: 'size',\n  variants: {\n    small: {\n      height: '6px',\n      borderRadius: '3px',\n    },\n    medium: {\n      height: '8px',\n      borderRadius: '80px',\n    },\n    large: {\n      height: '36px',\n      borderRadius: '18px',\n    },\n  },\n});\n\nconst progressBarBackgroundVariants = variant({\n  defaultVariant: 'blue',\n  variants: {\n    blue: {\n      bg: 'navy',\n    },\n    yellow: {\n      bg: `gray-100`,\n    },\n    dark: {\n      textColor: 'white',\n    },\n    light: {\n      textColor: 'navy',\n    },\n  },\n});\n\nconst progressBarBorderVariants = variant({\n  defaultVariant: 'basic',\n  prop: 'border',\n  variants: {\n    basic: {\n      borderWidth: '0',\n    },\n    bordered: {\n      borderWidth: '1px',\n      borderStyle: 'solid',\n    },\n  },\n});\n\nconst progressBarForegroundVariants = variant({\n  defaultVariant: 'blue',\n  base: {\n    alignItems: 'center',\n    height: '100%',\n    display: 'flex',\n    transition: 'width 0.5s',\n    position: 'relative',\n    borderRadius: 'inherit',\n  },\n  variants: {\n    blue: {\n      bg: 'blue',\n      textColor: 'white',\n    },\n    yellow: {\n      bg: `yellow`,\n      textColor: `black`,\n    },\n    light: {\n      bg: 'navy',\n      textColor: 'navy',\n    },\n    dark: {\n      bg: 'white',\n      textColor: 'white',\n    },\n  },\n});\n\ntype ProgressBarElementProps = Pick<ProgressBarProps, 'variant' | 'size'>;\n\ntype ProgressBarElementWrapperProps = ProgressBarElementProps & {\n  border: 'basic' | 'bordered';\n};\n\nconst ProgressBarWrapper = styled.div<ProgressBarElementWrapperProps>`\n  overflow: hidden;\n  position: relative;\n  ${progressBarBackgroundVariants};\n  ${progressBarSizeVariants};\n  ${progressBarBorderVariants};\n`;\n\nconst Bar = styled.div(progressBarForegroundVariants);\n\nconst DisplayedPercent = styled.span`\n  font-weight: bold;\n  padding: 0.5rem;\n  text-align: right;\n  width: 100%;\n`;\n\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n  minimumPercent = 0,\n  percent,\n  pattern,\n  bordered,\n  size = 'small',\n  variant = 'blue',\n}) => {\n  return (\n    <ProgressBarWrapper\n      aria-label={`Progress: ${percent}%`}\n      aria-live=\"polite\"\n      role=\"figure\"\n      border={bordered ? 'bordered' : 'basic'}\n      size={size}\n      variant={variant}\n    >\n      {pattern && (\n        <Pattern width=\"100%\" position=\"absolute\" zIndex={0} name={pattern} />\n      )}\n      <Bar\n        variant={variant}\n        data-testid=\"progress-bar-bar\"\n        style={{\n          width: `${Math.max(minimumPercent, percent)}%`,\n        }}\n      >\n        {size === 'large' && <DisplayedPercent>{percent}%</DisplayedPercent>}\n      </Bar>\n    </ProgressBarWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}