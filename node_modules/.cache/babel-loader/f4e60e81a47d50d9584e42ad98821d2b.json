{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\nimport cookie from \"react-cookies\";\nconst searchClient = algoliasearch(process.env.REACT_APP_ALGOLIA_APP_ID, process.env.REACT_APP_ALGOLIA_SEARCH_KEY);\nexport const autoSearch = query => {\n  searchClient.initIndex(\"tags_index\").search(query).then(({\n    hits\n  }) => console.log(\"Hits: \", hits)).catch(err => console.log(\"Error: \", err));\n};\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n\n      const token = getState().auth.token || localStorage.getItem(\"token\");\n\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: ['Review'],\n  endpoints: build => ({\n    fetchCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPlayerCourse: build.query({\n      query: id => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    trackViews: build.mutation({\n      query: ({\n        id,\n        ...body\n      }) => ({\n        url: `/courses/lecture/${id}/views/`,\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchViews: build.query({\n      query: () => ({\n        url: `/courses/lecture/views/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchVideoViews: build.query({\n      query: id => ({\n        url: `/analytics/${id}/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    trackVideoViews: build.mutation({\n      query: ({\n        lecture,\n        ...body\n      }) => ({\n        url: `/analytics/lecture/views/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchInstructorCourses: build.query({\n      query: id => ({\n        url: `/instructors/courses/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editInstructorInfo: build.mutation({\n      query: body => ({\n        url: `/instructors/edit-info/`,\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchInstructorInfo: build.query({\n      query: () => ({\n        url: `/instructors/profile/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCategories: build.query({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchCourseLevel: build.query({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingTier: build.query({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricingCurrency: build.query({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchPricing: build.query({\n      query: id => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchSections: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    searchTags: build.query({\n      query: q => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createCourse: build.mutation({\n      query: body => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    updateCourse: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    uploadLectureVideo: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: response => response.json()\n      })\n    }),\n    createSection: build.mutation({\n      query: body => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createGoal: build.mutation({\n      query: body => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createPricing: build.mutation({\n      query: body => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createExperience: build.mutation({\n      query: body => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createRequirement: build.mutation({\n      query: body => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    editRequirement: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/requirements/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editExperience: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/experience/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editGoal: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/goals/${id}/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    submitReview: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${id}/review/`,\n          body,\n          method: \"PUT\",\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    fetchExperience: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchGoals: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchRequirements: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    deleteExperience: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteGoal: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    deleteRequirement: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    editSection: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteSection: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    }),\n    createLecture: build.mutation({\n      query: body => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchLectures: build.query({\n      query: pk => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    fetchResources: build.query({\n      query: pk => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: response => response.json()\n      })\n    }),\n    createResource: build.mutation({\n      query: data => {\n        const {\n          course,\n          ...body\n        } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: response => response.json()\n        };\n      }\n    }),\n    editLecture: build.mutation({\n      query: data => {\n        const {\n          id,\n          ...body\n        } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\"\n        };\n      }\n    }),\n    deleteLecture: build.mutation({\n      query: id => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\"\n        };\n      }\n    })\n  })\n});\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation,\n  useFetchInstructorCoursesQuery,\n  useEditInstructorInfoMutation,\n  useFetchInstructorInfoQuery,\n  useFetchPlayerCourseQuery,\n  useTrackViewsMutation,\n  useFetchViewsQuery\n} = coursesApi;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/services/courses.ts"],"names":["createApi","fetchBaseQuery","algoliasearch","cookie","searchClient","process","env","REACT_APP_ALGOLIA_APP_ID","REACT_APP_ALGOLIA_SEARCH_KEY","autoSearch","query","initIndex","search","then","hits","console","log","catch","err","coursesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","csrfToken","load","set","token","auth","localStorage","getItem","tagTypes","endpoints","build","fetchCourse","id","url","method","responseHandler","response","json","fetchPlayerCourse","trackViews","mutation","body","fetchViews","fetchVideoViews","trackVideoViews","lecture","fetchInstructorCourses","editInstructorInfo","fetchInstructorInfo","fetchCategories","fetchCourseLevel","fetchPricingTier","fetchPricingCurrency","fetchPricing","fetchSections","pk","searchTags","q","createCourse","updateCourse","data","uploadLectureVideo","createSection","createGoal","createPricing","createExperience","createRequirement","editRequirement","editExperience","editGoal","submitReview","fetchExperience","fetchGoals","fetchRequirements","deleteExperience","deleteGoal","deleteRequirement","editSection","deleteSection","createLecture","fetchLectures","fetchResources","createResource","course","editLecture","deleteLecture","useCreateCourseMutation","useCreateLectureMutation","useCreateSectionMutation","useFetchCourseQuery","useFetchCategoriesQuery","useFetchCourseLevelQuery","useSearchTagsQuery","useUploadLectureVideoMutation","useFetchSectionsQuery","useDeleteSectionMutation","useEditSectionMutation","useDeleteLectureMutation","useEditLectureMutation","useFetchLecturesQuery","useFetchResourcesQuery","useCreateResourceMutation","useUpdateCourseMutation","useCreateExperienceMutation","useCreateGoalMutation","useCreateRequirementMutation","useEditExperienceMutation","useEditGoalMutation","useEditRequirementMutation","useFetchExperienceQuery","useFetchGoalsQuery","useFetchRequirementsQuery","useDeleteExperienceMutation","useDeleteGoalMutation","useDeleteRequirementMutation","useFetchPricingCurrencyQuery","useFetchPricingTierQuery","useCreatePricingMutation","useFetchPricingQuery","useSubmitReviewMutation","useFetchInstructorCoursesQuery","useEditInstructorInfoMutation","useFetchInstructorInfoQuery","useFetchPlayerCourseQuery","useTrackViewsMutation","useFetchViewsQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport algoliasearch from \"algoliasearch/lite\";\n\nimport { RootState } from \"store\";\nimport cookie from \"react-cookies\";\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID,\n  process.env.REACT_APP_ALGOLIA_SEARCH_KEY\n);\n\nexport interface CourseResponse {\n  title: string;\n  id: number;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  tags: string[];\n  url: string;\n  subcategory: number;\n  price: number;\n  state: string;\n}\n\nexport interface CoursePlayerResponse {\n  title: string;\n  id: number;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  headline: string;\n  level: string;\n  sections: Section[];\n  tags: string[];\n  url: string;\n  subcategory: number;\n  price: number;\n  state: string;\n}\n\nexport interface Instructor {\n  id: string;\n  headline: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  description: string;\n  avatar: string\n\n}\n\nexport interface InstructorResponse {\n  id: string;\n  headline: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  avatar: string\n  user: User;\n  description: string;\n\n}\n\nexport interface User {\n  email: string;\n  username: string;\n  first_name: string;\n  last_name: string\n}\n\nexport interface MediaRequest {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  size: number;\n}\n\nexport interface MediaResponse {\n  course: number;\n  name: string;\n  filetype: string;\n  key: string;\n  id: number;\n  url?: string;\n  size: number;\n  timestamp: string;\n}\n\nexport interface SearchResponse {\n  title: string;\n  tags: string[];\n}\n\nexport interface CourseRequest {\n  id: number;\n  title: string;\n  category: number;\n  description: string;\n  cover_image: string;\n  video_url: string;\n  level: string;\n  tags: string[];\n  headline: string;\n  subcategory: number;\n  price: number;\n}\n\nexport interface Section {\n  title: string;\n  id: number;\n  course: number;\n  duration: number;\n  instructor: number;\n  description: string;\n  order: number;\n  resources: number[];\n  lectures?: Lecture[];\n}\n\n\nexport interface Experience {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Goal {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface Requirement {\n  name: string;\n  id: number;\n  course: number;\n}\n\nexport interface SectionRequest {\n  title: string;\n  id: number;\n  course: number;\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface LectureRequest {\n  title: string;\n  id: number;\n  video: number;\n  video_url: string;\n  section: number;\n  resources: number[];\n  description?: string;\n  position: string;\n  neighbor: number;\n}\n\nexport interface Options {\n  name: string;\n  display: string;\n}\n\nexport interface Pricing {\n  amount: string;\n  currency: string;\n  course: number;\n}\n\nexport interface Lecture {\n  title: string;\n  id: number;\n  position: string;\n  neighbor: number;\n  duration: number\n  description: string;\n  video: MediaResponse;\n  resources: number[];\n  instructor: number;\n  section: number;\n  video_url: string;\n  order: number;\n}\n\nexport interface Review {\n  id: number;\n  state: string\n}\n\nexport interface Views {\n  id: number\n}\n\nexport interface ViewsResponse {\n  object_id: number\n}\n\nexport interface VideoAnalytics {\n  id: number;\n  thumbnail: string;\n  lecture: number;\n  progress: number;\n\n}\n\n\n\nexport interface CategoryResponse {\n  title: string;\n  id: number;\n  children: CategoryResponse[];\n}\n\nexport const autoSearch = (query: string) => {\n  searchClient\n    .initIndex(\"tags_index\")\n    .search(query)\n    .then(({ hits }) => console.log(\"Hits: \", hits))\n    .catch((err) => console.log(\"Error: \", err));\n};\n\nexport const coursesApi = createApi({\n  reducerPath: \"courseApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/\",\n    prepareHeaders: (headers, { getState }) => {\n      const csrfToken = cookie.load(\"csrftoken\");\n\n      if (csrfToken) {\n        headers.set(\"X-CSRFToken\", csrfToken);\n      }\n      const token =\n        (getState() as RootState).auth.token || localStorage.getItem(\"token\");\n      if (token) {\n        headers.set(\"Authorization\", `Token ${token}`);\n      }\n\n      headers.set(\"Content-Type\", \"application/json\");\n\n      return headers;\n    },\n  }),\n  tagTypes: ['Review'],\n  endpoints: (build) => ({\n    fetchCourse: build.query<CourseResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPlayerCourse: build.query<CoursePlayerResponse, number>({\n      query: (id) => ({\n        url: `/courses/${id}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    trackViews: build.mutation<ViewsResponse[], Views>({\n      query: ({id, ...body}) => ({\n        url: `/courses/lecture/${id}/views/`,\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchViews: build.query<ViewsResponse[], void>({\n      query: () => ({\n        url: `/courses/lecture/views/`,\n        method: \"GET\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchVideoViews: build.query<VideoAnalytics, Partial<number>>({\n      query: (id) => ({\n        url: `/analytics/${id}/`,\n        method: \"GET\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    trackVideoViews: build.mutation<ViewsResponse[], Partial<VideoAnalytics>>({\n      query: ({ lecture, ...body}) => ({\n        url: `/analytics/lecture/views/`,\n        method: \"GET\",\n       \n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n\n\n    fetchInstructorCourses: build.query<CourseResponse[], void>({\n      query: (id) => ({\n        url: `/instructors/courses/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editInstructorInfo: build.mutation<InstructorResponse, Partial<Instructor>>({\n      query: (body) => ({\n        url: `/instructors/edit-info/`,\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchInstructorInfo: build.query<InstructorResponse, void>({\n      query: () => ({\n        url: `/instructors/profile/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchCategories: build.query<CategoryResponse[], void>({\n      query: () => ({\n        url: \"/api/categories\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    \n\n    fetchCourseLevel: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/level\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingTier: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/tier/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricingCurrency: build.query<Options[], void>({\n      query: () => ({\n        url: \"/courses/pricing/currency/\",\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchPricing: build.query<Pricing, number>({\n      query: (id) => ({\n        url: `/courses/${id}/pricing/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchSections: build.query<Section[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/sections`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    searchTags: build.query<SearchResponse[], string>({\n      query: (q) => ({\n        url: `/courses/search?q=${q}`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (body) => ({\n        url: \"/courses/create/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    updateCourse: build.mutation<CourseResponse, Partial<CourseRequest>>({\n      query: (data) => {\n        const { id, ...body} = data\n        return {\n          url: `/courses/${id}/edit/`,\n          method: \"PUT\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    uploadLectureVideo: build.mutation<MediaResponse, Partial<MediaRequest>>({\n      query: (body) => ({\n        url: \"/courses/lecture/video_upload/\",\n        method: \"POST\",\n        body,\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    createSection: build.mutation<Section[], Partial<SectionRequest>>({\n      query: (body) => ({\n        url: \"/courses/section/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createGoal: build.mutation<Goal[], Partial<Goal>>({\n      query: (body) => ({\n        url: \"/courses/goal/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createPricing: build.mutation<Pricing[], Partial<Pricing>>({\n      query: (body) => ({\n        url: \"/courses/pricing/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createExperience: build.mutation<Experience[], Partial<Experience>>({\n      query: (body) => ({\n        url: \"/courses/experience/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createRequirement: build.mutation<Requirement[], Partial<Requirement>>({\n      query: (body) => ({\n        url: \"/courses/requirement/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    editRequirement: build.mutation<Requirement, Partial<Requirement>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/requirements/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editExperience: build.mutation<Experience, Partial<Experience>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/experience/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    editGoal: build.mutation<Goal, Partial<Goal>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/goals/${id}/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      },\n    }),\n\n    submitReview: build.mutation<Review, Partial<Review>>({\n      query: (data) => {\n       const { id, ...body } = data\n       return  {url: `/courses/${id}/review/`,\n        body,\n        method: \"PUT\",\n        responseHandler: (response) => response.json(),\n      }\n      }\n    }),\n\n    fetchExperience: build.query<Experience[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/experience`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchGoals: build.query<Goal[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/goals`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchRequirements: build.query<Requirement[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/requirements`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    deleteExperience: build.mutation<Experience, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/experience/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteGoal: build.mutation<Goal, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/goals/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    deleteRequirement: build.mutation<Requirement, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/requirements/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n\n\n    editSection: build.mutation<Section, Partial<SectionRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/sections/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteSection: build.mutation<Section, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/sections/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n\n    createLecture: build.mutation<Lecture[], Partial<Lecture>>({\n      query: (body) => ({\n        url: \"/courses/lecture/create/\",\n        body,\n        method: \"POST\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n    fetchLectures: build.query<Lecture[], number>({\n      query: (pk) => ({\n        url: `/courses/section/${pk}/lectures`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    fetchResources: build.query<MediaResponse[], number>({\n      query: (pk) => ({\n        url: `/courses/${pk}/resources/`,\n        method: \"GET\",\n        responseHandler: (response) => response.json(),\n      }),\n    }),\n\n    createResource: build.mutation<MediaResponse[], MediaRequest>({\n      query: (data) => {\n        const { course, ...body } = data;\n        return {\n          url: `/courses/${course}/resources/`,\n          method: \"POST\",\n          body,\n          responseHandler: (response) => response.json(),\n        };\n      },\n    }),\n\n    editLecture: build.mutation<Lecture, Partial<LectureRequest>>({\n      query: (data) => {\n        const { id, ...body } = data;\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          body,\n          method: \"PUT\",\n        };\n      },\n    }),\n\n    deleteLecture: build.mutation<Lecture, Partial<number>>({\n      query: (id) => {\n        return {\n          url: `/courses/section/lectures/${id}/`,\n          method: \"DELETE\",\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useCreateCourseMutation,\n  useCreateLectureMutation,\n  useCreateSectionMutation,\n  useFetchCourseQuery,\n  useFetchCategoriesQuery,\n  useFetchCourseLevelQuery,\n  useSearchTagsQuery,\n  useUploadLectureVideoMutation,\n  useFetchSectionsQuery,\n  useDeleteSectionMutation,\n  useEditSectionMutation,\n  useDeleteLectureMutation,\n  useEditLectureMutation,\n  useFetchLecturesQuery,\n  useFetchResourcesQuery,\n  useCreateResourceMutation,\n  useUpdateCourseMutation,\n  useCreateExperienceMutation,\n  useCreateGoalMutation,\n  useCreateRequirementMutation,\n  useEditExperienceMutation,\n  useEditGoalMutation,\n  useEditRequirementMutation,\n  useFetchExperienceQuery,\n  useFetchGoalsQuery,\n  useFetchRequirementsQuery,\n  useDeleteExperienceMutation,\n  useDeleteGoalMutation,\n  useDeleteRequirementMutation,\n  useFetchPricingCurrencyQuery,\n  useFetchPricingTierQuery,\n  useCreatePricingMutation,\n  useFetchPricingQuery,\n  useSubmitReviewMutation,\n  useFetchInstructorCoursesQuery,\n  useEditInstructorInfoMutation,\n  useFetchInstructorInfoQuery,\n  useFetchPlayerCourseQuery,\n  useTrackViewsMutation,\n  useFetchViewsQuery\n  \n} = coursesApi;\n"]},"metadata":{},"sourceType":"module"}