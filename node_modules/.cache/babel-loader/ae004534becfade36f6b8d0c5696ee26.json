{"ast":null,"code":"import MousetrapClass from 'mousetrap'; // import { analytics } from '../analytics'\n\nlet mousetrapInstance;\n\nfunction initMousetrap(element) {\n  if (element) mousetrapInstance = new MousetrapClass(document);else mousetrapInstance = new window.Mousetrap();\n\n  mousetrapInstance.stopCallback = function (e, element, combo) {\n    return element.tagName == 'LI' || element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.getAttribute('role') == 'slider' || element.id == 'playback-speed-option' || element.contentEditable && element.contentEditable == 'true';\n  };\n}\n\nconst defaultShortcutKeys = {\n  togglePlayPause: {\n    sequence: ['space', 'k', 'K'],\n    display: 'k, spacebar',\n    description: 'play/pause'\n  },\n  toggleFullscreen: {\n    sequence: ['f', 'F'],\n    display: 'f',\n    description: 'full screen'\n  },\n  toggleMute: {\n    sequence: ['m', 'M'],\n    display: 'm',\n    description: 'mute on/off'\n  },\n  decreaseSpeed: {\n    sequence: ['-'],\n    display: '-',\n    description: 'decrease playback speed'\n  },\n  increaseSpeed: {\n    sequence: ['=', 'plus'],\n    display: '+',\n    description: 'increase playback speed'\n  },\n  previousClip: {\n    sequence: ['<'],\n    display: '< (shift+,)',\n    description: 'previous clip'\n  },\n  nextClip: {\n    sequence: ['>'],\n    display: '> (shift+.)',\n    description: 'next clip'\n  },\n  fastRewind: {\n    sequence: ['left'],\n    display: '←',\n    description: 'back 10 seconds'\n  },\n  fastForward: {\n    sequence: ['right'],\n    display: '→',\n    description: 'forward 10 seconds'\n  },\n  volumeUp: {\n    sequence: ['up'],\n    display: '↑',\n    description: 'volume up'\n  },\n  volumeDown: {\n    sequence: ['down'],\n    display: '↓',\n    description: 'volume down'\n  },\n  closeMenu: {\n    sequence: ['esc'],\n    display: 'esc',\n    description: 'close menu / exit full screen'\n  },\n  toggleKeyboardShortcutsModal: {\n    sequence: ['shift+/', 'h', 'H'],\n    display: 'h, ? (shift+/)',\n    description: 'toggle keyboard shortcuts list'\n  },\n  toggleClosedCaptioning: {\n    sequence: ['c', 'C'],\n    display: 'c',\n    description: 'toggle closed captions'\n  }\n};\nconst SPACE_BAR = 32;\nconst LEFT_KEY = 37;\nconst RIGHT_KEY = 39;\nconst keysNotToTrack = [SPACE_BAR, LEFT_KEY, RIGHT_KEY];\n\nconst getKey = keyName => shortcutName => {\n  const shortcut = defaultShortcutKeys[shortcutName];\n  return shortcut && shortcut[keyName];\n};\n\nconst getShortcutKeySequence = getKey('sequence');\nconst getShortcutKeySequenceDisplay = getKey('display');\n\nfunction registerShortcutKeyHandler(shortcutName, handler, handleGetClip, mousetrap = mousetrapInstance) {\n  if (!shortcutName) throw new Error('shortcutName is required');\n  if (typeof handler !== 'function') throw new Error(`shortcut ${shortcutName}: handler is required and must be a function`);\n  let sequence = getShortcutKeySequence(shortcutName);\n  if (!sequence) throw new Error(`no key sequence found for: ${sequence}`);\n  mousetrap && mousetrap.bind(sequence, e => {\n    handler();\n    const {\n      clipId\n    } = handleGetClip();\n    const isKeyToTrack = !keysNotToTrack.some(i => i === e.which);\n\n    if (isKeyToTrack) {//   analytics.trackGenericClick('Keyboard Shortcut Pressed', {\n      //     source: 'eplayer',\n      //     keyPressed: e.code,\n      //     keyPressedAction: shortcutName,\n      //     clipId,\n      //   })\n    }\n\n    return false;\n  });\n}\n\nfunction unregisterShortcutKeyHandler(shortcutName) {\n  let sequence = getShortcutKeySequence(shortcutName);\n  mousetrap && mousetrap.unbind(sequence);\n}\n\nconst resetMoustrap = (mousetrap = mousetrapInstance) => mousetrap.reset();\n\nexport { initMousetrap, defaultShortcutKeys, getShortcutKeySequence, getShortcutKeySequenceDisplay, registerShortcutKeyHandler, unregisterShortcutKeyHandler, mousetrapInstance, resetMoustrap };","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/keyboard/shortcut-keys.js"],"names":["MousetrapClass","mousetrapInstance","initMousetrap","element","document","window","Mousetrap","stopCallback","e","combo","tagName","getAttribute","id","contentEditable","defaultShortcutKeys","togglePlayPause","sequence","display","description","toggleFullscreen","toggleMute","decreaseSpeed","increaseSpeed","previousClip","nextClip","fastRewind","fastForward","volumeUp","volumeDown","closeMenu","toggleKeyboardShortcutsModal","toggleClosedCaptioning","SPACE_BAR","LEFT_KEY","RIGHT_KEY","keysNotToTrack","getKey","keyName","shortcutName","shortcut","getShortcutKeySequence","getShortcutKeySequenceDisplay","registerShortcutKeyHandler","handler","handleGetClip","mousetrap","Error","bind","clipId","isKeyToTrack","some","i","which","unregisterShortcutKeyHandler","unbind","resetMoustrap","reset"],"mappings":"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","sourcesContent":["import MousetrapClass from 'mousetrap'\n// import { analytics } from '../analytics'\n\nlet mousetrapInstance\n\nfunction initMousetrap(element) {\n  if (element) mousetrapInstance = new MousetrapClass(document)\n  else mousetrapInstance = new window.Mousetrap()\n\n  mousetrapInstance.stopCallback = function (e, element, combo) {\n    return (\n      element.tagName == 'LI' ||\n      element.tagName == 'INPUT' ||\n      element.tagName == 'SELECT' ||\n      element.tagName == 'TEXTAREA' ||\n      element.getAttribute('role') == 'slider' ||\n      element.id == 'playback-speed-option' ||\n      (element.contentEditable && element.contentEditable == 'true')\n    )\n  }\n}\n\nconst defaultShortcutKeys = {\n  togglePlayPause: {\n    sequence: ['space', 'k', 'K'],\n    display: 'k, spacebar',\n    description: 'play/pause',\n  },\n  toggleFullscreen: {\n    sequence: ['f', 'F'],\n    display: 'f',\n    description: 'full screen',\n  },\n  toggleMute: {\n    sequence: ['m', 'M'],\n    display: 'm',\n    description: 'mute on/off',\n  },\n  decreaseSpeed: {\n    sequence: ['-'],\n    display: '-',\n    description: 'decrease playback speed',\n  },\n  increaseSpeed: {\n    sequence: ['=', 'plus'],\n    display: '+',\n    description: 'increase playback speed',\n  },\n  previousClip: {\n    sequence: ['<'],\n    display: '< (shift+,)',\n    description: 'previous clip',\n  },\n  nextClip: {\n    sequence: ['>'],\n    display: '> (shift+.)',\n    description: 'next clip',\n  },\n  fastRewind: {\n    sequence: ['left'],\n    display: '←',\n    description: 'back 10 seconds',\n  },\n  fastForward: {\n    sequence: ['right'],\n    display: '→',\n    description: 'forward 10 seconds',\n  },\n  volumeUp: {\n    sequence: ['up'],\n    display: '↑',\n    description: 'volume up',\n  },\n  volumeDown: {\n    sequence: ['down'],\n    display: '↓',\n    description: 'volume down',\n  },\n  closeMenu: {\n    sequence: ['esc'],\n    display: 'esc',\n    description: 'close menu / exit full screen',\n  },\n  toggleKeyboardShortcutsModal: {\n    sequence: ['shift+/', 'h', 'H'],\n    display: 'h, ? (shift+/)',\n    description: 'toggle keyboard shortcuts list',\n  },\n  toggleClosedCaptioning: {\n    sequence: ['c', 'C'],\n    display: 'c',\n    description: 'toggle closed captions',\n  },\n}\n\nconst SPACE_BAR = 32\nconst LEFT_KEY = 37\nconst RIGHT_KEY = 39\n\nconst keysNotToTrack = [SPACE_BAR, LEFT_KEY, RIGHT_KEY]\n\nconst getKey = (keyName) => (shortcutName) => {\n  const shortcut = defaultShortcutKeys[shortcutName]\n  return shortcut && shortcut[keyName]\n}\n\nconst getShortcutKeySequence = getKey('sequence')\n\nconst getShortcutKeySequenceDisplay = getKey('display')\n\nfunction registerShortcutKeyHandler(shortcutName, handler, handleGetClip, mousetrap = mousetrapInstance) {\n  if (!shortcutName) throw new Error('shortcutName is required')\n  if (typeof handler !== 'function')\n    throw new Error(`shortcut ${shortcutName}: handler is required and must be a function`)\n\n  let sequence = getShortcutKeySequence(shortcutName)\n\n  if (!sequence) throw new Error(`no key sequence found for: ${sequence}`)\n\n  mousetrap && mousetrap.bind(sequence, (e) => {\n    handler()\n    const { clipId } = handleGetClip()\n\n    const isKeyToTrack = !keysNotToTrack.some((i) => i === e.which)\n\n    if (isKeyToTrack) {\n    //   analytics.trackGenericClick('Keyboard Shortcut Pressed', {\n    //     source: 'eplayer',\n    //     keyPressed: e.code,\n    //     keyPressedAction: shortcutName,\n    //     clipId,\n    //   })\n    }\n    return false\n  })\n}\n\nfunction unregisterShortcutKeyHandler(shortcutName) {\n  let sequence = getShortcutKeySequence(shortcutName)\n  mousetrap && mousetrap.unbind(sequence)\n}\n\nconst resetMoustrap = (mousetrap = mousetrapInstance) => mousetrap.reset()\n\nexport {\n  initMousetrap,\n  defaultShortcutKeys,\n  getShortcutKeySequence,\n  getShortcutKeySequenceDisplay,\n  registerShortcutKeyHandler,\n  unregisterShortcutKeyHandler,\n  mousetrapInstance,\n  resetMoustrap,\n}\n"]},"metadata":{},"sourceType":"module"}