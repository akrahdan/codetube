{"ast":null,"code":"import Uri from 'jsuri';\nimport { ccdata } from 'libs/cfdata';\nexport function createQuery(parameters) {\n  const queryString = Object.keys(parameters).filter(key => parameters[key]).map(key => `${key}=${parameters[key]}`).join('&');\n  return queryString ? `?${queryString}` : null;\n}\nexport const addParamsAsHash = (url, paramHash) => {\n  const uri = new Uri(url);\n  Object.keys(paramHash).forEach(k => {\n    if (paramHash[k]) {\n      uri.deleteQueryParam(k);\n      uri.addQueryParam(k, paramHash[k]);\n    }\n  });\n  return uri.toString();\n};\n/**\n * @remarks\n * Trailing slashes can compound across redirects and create invalid paths such as \"/learn//\"\n */\n\nfunction removeTrailingSlashes(path) {\n  return path === '/' ? path : path.replace(/(\\/+)$/, '');\n}\n\nexport function normalizeLocationSearch(search) {\n  if (!search) return '';\n  return `?${search.replace(/\\?/g, '')}`;\n}\nexport function createRedirectParam(location) {\n  if (!location && typeof window !== 'undefined' && window.location) {\n    // eslint-disable-next-line prefer-destructuring\n    location = window.location;\n  }\n\n  if (!location) {\n    return undefined;\n  }\n\n  return encodeURIComponent(removeTrailingSlashes(`${location.pathname}/${normalizeLocationSearch(location.search)}`));\n}\nexport function safeRedirectUrl(rawUri) {\n  if (!rawUri) return '';\n  const uri = new Uri(rawUri);\n  const currentUri = new Uri(__SSR__ ? ccdata.get('request_href') : window.location.href);\n  const path = currentUri.setPath(uri.path()).setHost(__SSR__ ? ccdata.get('request_host') : window.location.hostname).setQuery(uri.query()).toString();\n  return removeTrailingSlashes(path);\n}\nexport function validUrl(str) {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n  '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n\n  return pattern.test(str);\n}\nexport function youtubeOrVimeoUrl(str) {\n  if (!validUrl(str)) return false;\n  const pattern = new RegExp('(vimeo|youtu.be|youtube)');\n  return pattern.test(str);\n}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/libs/url.ts"],"names":["Uri","ccdata","createQuery","parameters","queryString","Object","keys","filter","key","map","join","addParamsAsHash","url","paramHash","uri","forEach","k","deleteQueryParam","addQueryParam","toString","removeTrailingSlashes","path","replace","normalizeLocationSearch","search","createRedirectParam","location","window","undefined","encodeURIComponent","pathname","safeRedirectUrl","rawUri","currentUri","__SSR__","get","href","setPath","setHost","hostname","setQuery","query","validUrl","str","pattern","RegExp","test","youtubeOrVimeoUrl"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,OAAO,SAASC,WAAT,CAAqBC,UAArB,EAAyD;AAC9D,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EACjBI,MADiB,CACTC,GAAD,IAASL,UAAU,CAACK,GAAD,CADT,EAEjBC,GAFiB,CAEZD,GAAD,IAAU,GAAEA,GAAI,IAAGL,UAAU,CAACK,GAAD,CAAM,EAFtB,EAGjBE,IAHiB,CAGZ,GAHY,CAApB;AAIA,SAAON,WAAW,GAAI,IAAGA,WAAY,EAAnB,GAAuB,IAAzC;AACD;AAED,OAAO,MAAMO,eAAe,GAAG,CAC7BC,GAD6B,EAE7BC,SAF6B,KAG1B;AACH,QAAMC,GAAG,GAAG,IAAId,GAAJ,CAAQY,GAAR,CAAZ;AACAP,EAAAA,MAAM,CAACC,IAAP,CAAYO,SAAZ,EAAuBE,OAAvB,CAAgCC,CAAD,IAAO;AACpC,QAAIH,SAAS,CAACG,CAAD,CAAb,EAAkB;AAChBF,MAAAA,GAAG,CAACG,gBAAJ,CAAqBD,CAArB;AACAF,MAAAA,GAAG,CAACI,aAAJ,CAAkBF,CAAlB,EAAqBH,SAAS,CAACG,CAAD,CAA9B;AACD;AACF,GALD;AAMA,SAAOF,GAAG,CAACK,QAAJ,EAAP;AACD,CAZM;AAcP;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,IAA/B,EAA6C;AAC3C,SAAOA,IAAI,KAAK,GAAT,GAAeA,IAAf,GAAsBA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAA7B;AACD;;AAED,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAkD;AACvD,MAAI,CAACA,MAAL,EAAa,OAAO,EAAP;AACb,SAAQ,IAAGA,MAAM,CAACF,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAA0B,EAArC;AACD;AAED,OAAO,SAASG,mBAAT,CACLC,QADK,EAEL;AACA,MAAI,CAACA,QAAD,IAAa,OAAOC,MAAP,KAAkB,WAA/B,IAA8CA,MAAM,CAACD,QAAzD,EAAmE;AACjE;AACAA,IAAAA,QAAQ,GAAGC,MAAM,CAACD,QAAlB;AACD;;AAED,MAAI,CAACA,QAAL,EAAe;AACb,WAAOE,SAAP;AACD;;AAED,SAAOC,kBAAkB,CACvBT,qBAAqB,CAClB,GAAEM,QAAQ,CAACI,QAAS,IAAGP,uBAAuB,CAACG,QAAQ,CAACF,MAAV,CAAkB,EAD9C,CADE,CAAzB;AAKD;AAED,OAAO,SAASO,eAAT,CAAyBC,MAAzB,EAAqD;AAC1D,MAAI,CAACA,MAAL,EAAa,OAAO,EAAP;AACb,QAAMlB,GAAG,GAAG,IAAId,GAAJ,CAAQgC,MAAR,CAAZ;AACA,QAAMC,UAAU,GAAG,IAAIjC,GAAJ,CACjBkC,OAAO,GAAGjC,MAAM,CAACkC,GAAP,CAAW,cAAX,CAAH,GAAgCR,MAAM,CAACD,QAAP,CAAgBU,IADtC,CAAnB;AAGA,QAAMf,IAAI,GAAGY,UAAU,CACpBI,OADU,CACFvB,GAAG,CAACO,IAAJ,EADE,EAEViB,OAFU,CAEFJ,OAAO,GAAGjC,MAAM,CAACkC,GAAP,CAAW,cAAX,CAAH,GAAgCR,MAAM,CAACD,QAAP,CAAgBa,QAFrD,EAGVC,QAHU,CAGD1B,GAAG,CAAC2B,KAAJ,EAHC,EAIVtB,QAJU,EAAb;AAMA,SAAOC,qBAAqB,CAACC,IAAD,CAA5B;AACD;AAED,OAAO,SAASqB,QAAT,CAAkBC,GAAlB,EAA+B;AACpC,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CACd,sBAAsB;AACpB,oDADF,GACuD;AACrD,+BAFF,GAEkC;AAChC,mCAHF,GAGsC;AACpC,4BAJF,GAI+B;AAC7B,sBANY,EAOd,GAPc,CAAhB,CADoC,CASjC;;AACH,SAAOD,OAAO,CAACE,IAAR,CAAaH,GAAb,CAAP;AACD;AAED,OAAO,SAASI,iBAAT,CAA2BJ,GAA3B,EAAwC;AAC7C,MAAI,CAACD,QAAQ,CAACC,GAAD,CAAb,EAAoB,OAAO,KAAP;AACpB,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,0BAAX,CAAhB;AACA,SAAOD,OAAO,CAACE,IAAR,CAAaH,GAAb,CAAP;AACD","sourcesContent":["import Uri from 'jsuri';\nimport _ from 'lodash';\n\nimport { ccdata } from 'libs/cfdata';\n\nexport function createQuery(parameters: Record<string, string>) {\n  const queryString = Object.keys(parameters)\n    .filter((key) => parameters[key])\n    .map((key) => `${key}=${parameters[key]}`)\n    .join('&');\n  return queryString ? `?${queryString}` : null;\n}\n\nexport const addParamsAsHash = (\n  url: string,\n  paramHash: Record<string, boolean | number | string>\n) => {\n  const uri = new Uri(url);\n  Object.keys(paramHash).forEach((k) => {\n    if (paramHash[k]) {\n      uri.deleteQueryParam(k);\n      uri.addQueryParam(k, paramHash[k]);\n    }\n  });\n  return uri.toString();\n};\n\n/**\n * @remarks\n * Trailing slashes can compound across redirects and create invalid paths such as \"/learn//\"\n */\nfunction removeTrailingSlashes(path: string) {\n  return path === '/' ? path : path.replace(/(\\/+)$/, '');\n}\n\nexport function normalizeLocationSearch(search?: string) {\n  if (!search) return '';\n  return `?${search.replace(/\\?/g, '')}`;\n}\n\nexport function createRedirectParam(\n  location?: Pick<Location, 'pathname' | 'search'>\n) {\n  if (!location && typeof window !== 'undefined' && window.location) {\n    // eslint-disable-next-line prefer-destructuring\n    location = window.location;\n  }\n\n  if (!location) {\n    return undefined;\n  }\n\n  return encodeURIComponent(\n    removeTrailingSlashes(\n      `${location.pathname}/${normalizeLocationSearch(location.search)}`\n    )\n  );\n}\n\nexport function safeRedirectUrl(rawUri: string | undefined) {\n  if (!rawUri) return '';\n  const uri = new Uri(rawUri);\n  const currentUri = new Uri(\n    __SSR__ ? ccdata.get('request_href') : window.location.href\n  );\n  const path = currentUri\n    .setPath(uri.path())\n    .setHost(__SSR__ ? ccdata.get('request_host') : window.location.hostname)\n    .setQuery(uri.query())\n    .toString();\n\n  return removeTrailingSlashes(path);\n}\n\nexport function validUrl(str: string) {\n  const pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i'\n  ); // fragment locator\n  return pattern.test(str);\n}\n\nexport function youtubeOrVimeoUrl(str: string) {\n  if (!validUrl(str)) return false;\n  const pattern = new RegExp('(vimeo|youtu.be|youtube)');\n  return pattern.test(str);\n}\n"]},"metadata":{},"sourceType":"module"}