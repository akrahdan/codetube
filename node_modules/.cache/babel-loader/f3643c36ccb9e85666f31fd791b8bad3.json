{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import queryString from'query-string';import{applyMiddleware,combineReducers,compose,createStore}from'redux';import{connectRoutes}from'redux-first-router';import promiseMiddleware from'redux-promise';import createSagaMiddleware from'redux-saga';import thunk from'redux-thunk';var sagaMiddleware=createSagaMiddleware();export default function initializeStore(_ref){var initialState=_ref.initialState,requestPath=_ref.requestPath,reduceInitialState=_ref.reduceInitialState,routesMap=_ref.routesMap,rootReducers=_ref.rootReducers,rootSaga=_ref.rootSaga,hotReloadPath=_ref.hotReloadPath;var preloadedState=reduceInitialState(initialState);var router=connectRoutes(routesMap,{querySerializer:queryString,initialEntries:[requestPath],initialDispatch:false,scrollTop:true});var middlewares=[thunk,promiseMiddleware,router.middleware];var allReducers=combineReducers(_objectSpread(_objectSpread({},rootReducers),{},{location:router.reducer}));if(rootSaga){middlewares.push(sagaMiddleware);}var composeEnhancers=compose;var enhancer=compose(router.enhancer,applyMiddleware.apply(void 0,middlewares));var store=createStore(allReducers,{},enhancer);if(rootSaga){sagaMiddleware.run(rootSaga);}router.initialDispatch();return store;}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/store/initializeStore.ts"],"names":["queryString","applyMiddleware","combineReducers","compose","createStore","connectRoutes","promiseMiddleware","createSagaMiddleware","thunk","sagaMiddleware","initializeStore","initialState","requestPath","reduceInitialState","routesMap","rootReducers","rootSaga","hotReloadPath","preloadedState","router","querySerializer","initialEntries","initialDispatch","scrollTop","middlewares","middleware","allReducers","location","reducer","push","composeEnhancers","enhancer","store","run"],"mappings":"2JACA,MAAOA,CAAAA,WAAP,KAAwB,cAAxB,CACA,OACEC,eADF,CAEEC,eAFF,CAGEC,OAHF,CAIEC,WAJF,KAMO,OANP,CAOA,OAASC,aAAT,KAA8B,oBAA9B,CAEA,MAAOC,CAAAA,iBAAP,KAA8B,eAA9B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CAKA,GAAMC,CAAAA,cAAc,CAAGF,oBAAoB,EAA3C,CAiBA,cAAe,SAASG,CAAAA,eAAT,MAQ6B,IAPxCC,CAAAA,YAOwC,MAPxCA,YAOwC,CANxCC,WAMwC,MANxCA,WAMwC,CALxCC,kBAKwC,MALxCA,kBAKwC,CAJxCC,SAIwC,MAJxCA,SAIwC,CAHxCC,YAGwC,MAHxCA,YAGwC,CAFxCC,QAEwC,MAFxCA,QAEwC,CADxCC,aACwC,MADxCA,aACwC,CACxC,GAAMC,CAAAA,cAAc,CAAGL,kBAAkB,CAACF,YAAD,CAAzC,CACA,GAAMQ,CAAAA,MAAM,CAAGd,aAAa,CAACS,SAAD,CAAY,CACpCM,eAAe,CAAEpB,WADmB,CAEpCqB,cAAc,CAAE,CAACT,WAAD,CAFoB,CAGpCU,eAAe,CAAE,KAHmB,CAIpCC,SAAS,CAAE,IAJyB,CAAZ,CAA5B,CAMA,GAAMC,CAAAA,WAAW,CAAG,CAAChB,KAAD,CAAQF,iBAAR,CAA2Ba,MAAM,CAACM,UAAlC,CAApB,CACA,GAAMC,CAAAA,WAAW,CAAGxB,eAAe,gCAC5Ba,YAD4B,MAE/BY,QAAQ,CAAER,MAAM,CAACS,OAFc,GAAnC,CAKA,GAAIZ,QAAJ,CAAc,CACVQ,WAAW,CAACK,IAAZ,CAAiBpB,cAAjB,EACH,CAED,GAAMqB,CAAAA,gBAAgB,CAAG3B,OAAzB,CACA,GAAM4B,CAAAA,QAAQ,CAAG5B,OAAO,CACpBgB,MAAM,CAACY,QADa,CAEpB9B,eAAe,MAAf,QAAmBuB,WAAnB,CAFoB,CAAxB,CAKA,GAAMQ,CAAAA,KAAK,CAAG5B,WAAW,CAACsB,WAAD,CAAc,EAAd,CAAkBK,QAAlB,CAAzB,CACA,GAAGf,QAAH,CAAa,CACTP,cAAc,CAACwB,GAAf,CAAmBjB,QAAnB,EACH,CACDG,MAAM,CAACG,eAAP,GACA,MAAOU,CAAAA,KAAP,CAGH","sourcesContent":["import { MemoVoidDictionaryIterator } from 'lodash';\nimport queryString from 'query-string';\nimport {\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore,\n  Store,\n} from 'redux';\nimport { connectRoutes } from 'redux-first-router';\nimport { SiteState } from 'state/types';\nimport promiseMiddleware from 'redux-promise';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport type StoreRequestPath = {\n    pathname: string;\n}\n\nexport type ConfigureStoreOptions = {\n    requestPath: StoreRequestPath;\n    initialState: SiteState;\n    reduceInitialState: (initialState: SiteState) => SiteState;\n    routesMap: any;\n    rootReducers: any;\n    rootSaga?: any;\n    hotReloadPath?: string;\n\n}\n\nexport default function initializeStore({\n    initialState,\n    requestPath,\n    reduceInitialState,\n    routesMap,\n    rootReducers,\n    rootSaga,\n    hotReloadPath\n}: ConfigureStoreOptions): Store<SiteState> {\n    const preloadedState = reduceInitialState(initialState)\n    const router = connectRoutes(routesMap, {\n        querySerializer: queryString,\n        initialEntries: [requestPath],\n        initialDispatch: false,\n        scrollTop: true,\n    });\n    const middlewares = [thunk, promiseMiddleware, router.middleware]\n    const allReducers = combineReducers<SiteState>({\n        ...rootReducers,\n        location: router.reducer\n    })\n\n    if (rootSaga) {\n        middlewares.push(sagaMiddleware)\n    }\n\n    const composeEnhancers = compose;\n    const enhancer = compose<any>(\n        router.enhancer,\n        applyMiddleware(...middlewares)\n    );\n\n    const store = createStore(allReducers, {}, enhancer);\n    if(rootSaga) {\n        sagaMiddleware.run(rootSaga)\n    }\n    router.initialDispatch!()\n    return store;\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}