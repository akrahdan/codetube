{"ast":null,"code":"import _toConsumableArray from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import invariant from'invariant';import{isPlainObject,omit,without}from'lodash';/**\n * omitProps\n *\n * removes a provided array of props from a props object,\n * leaving necessary props like children intact\n */export function omitProps(initialPropsToOmit,props){var propsToOmit=isPlainObject(initialPropsToOmit)?Object.keys(initialPropsToOmit):initialPropsToOmit;invariant(Array.isArray(propsToOmit),'omitProps first argument should be an Array');// allow all data-* props, mainly used for testing libraries\nvar dataProps=propsToOmit.filter(function(p){return p.match(/^data-.*/);});return omit(props,without.apply(void 0,[propsToOmit,'children','className'].concat(_toConsumableArray(dataProps))));}","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/utils/omitProps.tsx"],"names":["invariant","isPlainObject","omit","without","omitProps","initialPropsToOmit","props","propsToOmit","Object","keys","Array","isArray","dataProps","filter","p","match"],"mappings":"oKAAA,MAAOA,CAAAA,SAAP,KAAsB,WAAtB,CACA,OAA8BC,aAA9B,CAA6CC,IAA7C,CAAmDC,OAAnD,KAAkE,QAAlE,CAMA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,SAAT,CACLC,kBADK,CAELC,KAFK,CAG8B,CACnC,GAAMC,CAAAA,WAAW,CAAGN,aAAa,CAACI,kBAAD,CAAb,CAChBG,MAAM,CAACC,IAAP,CAAYJ,kBAAZ,CADgB,CAEfA,kBAFL,CAIAL,SAAS,CACPU,KAAK,CAACC,OAAN,CAAcJ,WAAd,CADO,CAEP,6CAFO,CAAT,CAKA;AACA,GAAMK,CAAAA,SAAS,CAAGL,WAAW,CAACM,MAAZ,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,KAAF,CAAQ,UAAR,CAAP,EAAnB,CAAlB,CAEA,MAAOb,CAAAA,IAAI,CACRI,KADQ,CAETH,OAAO,MAAP,SAAQI,WAAR,CAAqB,UAArB,CAAiC,WAAjC,4BAAiDK,SAAjD,GAFS,CAAX,CAID","sourcesContent":["import invariant from 'invariant';\nimport { AnyKindOfDictionary, isPlainObject, omit, without } from 'lodash';\n\nexport type RemoveFrom<TContainer, TRemoved> = {\n  [P in keyof TContainer]: P extends keyof TRemoved ? never : TContainer[P];\n};\n\n/**\n * omitProps\n *\n * removes a provided array of props from a props object,\n * leaving necessary props like children intact\n */\nexport function omitProps<TOmittedProps extends {}, TProps extends {}>(\n  initialPropsToOmit: TOmittedProps | (keyof TOmittedProps)[],\n  props: TProps\n): RemoveFrom<TOmittedProps, TProps> {\n  const propsToOmit = isPlainObject(initialPropsToOmit)\n    ? Object.keys(initialPropsToOmit)\n    : (initialPropsToOmit as string[]);\n\n  invariant(\n    Array.isArray(propsToOmit),\n    'omitProps first argument should be an Array'\n  );\n\n  // allow all data-* props, mainly used for testing libraries\n  const dataProps = propsToOmit.filter((p) => p.match(/^data-.*/));\n\n  return omit(\n    (props as unknown) as AnyKindOfDictionary,\n    without(propsToOmit, 'children', 'className', ...dataProps)\n  ) as RemoveFrom<TOmittedProps, TProps>;\n}\n"]},"metadata":{},"sourceType":"module"}