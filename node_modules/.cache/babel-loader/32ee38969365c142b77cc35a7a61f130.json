{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/settings-menu/settings-menu.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { onResolutionChange, getQualityFromHeight, getQualityAriaLabel, onKeyPressLanguage, onKeyDownLanguage } from './settings-menu-utils';\nimport { SearchIcon } from '@pluralsight/ps-design-system-icon';\nimport { setActiveMenu, setAutoplay } from 'state/player/playerSlice';\nimport { CaptionLanguages, Menus, InteractionModes, PlaybackSpeedStops } from '../constants';\nimport { displayFeedbackForm } from '../utilities/feedback';\nimport LayeredMenuContainer from '../layered-menu/layered-menu-container';\nimport LayeredMenu from '../layered-menu/layered-menu';\nimport LayeredMenuSubmenu from '../layered-menu/layered-menu-submenu';\nimport LayeredMenuItem from '../layered-menu/layered-menu-item';\nimport css from './settings-menu.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getScrollPaneHeight = (layout, {\n  desktopHeight,\n  heightToSubtract\n}) => {\n  heightToSubtract = heightToSubtract || 0;\n\n  switch (layout) {\n    case '120p':\n    case '240p':\n      return `${96 - heightToSubtract}px`;\n\n    case '360p':\n      return `${128 - heightToSubtract}px`;\n\n    case '480p':\n      return `${180 - heightToSubtract}px`;\n\n    case '720p':\n    case '1080p':\n      return desktopHeight || `${212 - heightToSubtract}px`;\n\n    default:\n      return null;\n  }\n};\n\nconst SettingsMenu = props => {\n  _s();\n\n  const menuRef = useRef(null);\n  const {\n    activeMenu,\n    currentResolution,\n    closedCaptioningLanguage,\n    playbackSpeed,\n    layout,\n    setPlaybackSpeed,\n    interactionMode,\n    setAutoplay,\n    userAutoplaySetting,\n    nextCallback,\n    isActive\n  } = props;\n  const [languageFilterString, setLanguageFilterString] = useState('');\n  const [activeSettingsMenu, setActiveSettingsMenu] = useState({\n    id: 'MAIN',\n    level: 0,\n    height: 68\n  });\n  const [activeItems, setActiveItems] = useState({\n    QUALITY: '1080p',\n    CAPTIONS: closedCaptioningLanguage && closedCaptioningLanguage.name,\n    SPEED: '1x'\n  });\n\n  const setActive = (id, level) => {\n    const menu = document.getElementById(id);\n    const height = menu && menu.offsetHeight;\n    setActiveSettingsMenu({\n      id,\n      level,\n      height\n    });\n  };\n\n  const setActiveItem = (menu, id) => setActiveItems({ ...activeItems,\n    [menu]: id\n  });\n\n  const trapTabs = e => {\n    if (e.which === 9) {\n      const currentFocus = document.activeElement;\n      const focusableChildren = Array.from(menuRef.current.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), object, embed, *[tabindex], *[contenteditable]'));\n      const focusableCount = focusableChildren.length;\n      const focusedIndex = focusableChildren.indexOf(currentFocus);\n\n      if (e.shiftKey) {\n        if (focusedIndex === 0) {\n          e.preventDefault();\n          focusableChildren[focusableCount - 1].focus();\n        }\n      } else {\n        if (focusedIndex === focusableCount - 1) {\n          e.preventDefault();\n          focusableChildren[0].focus();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    setActive('MAIN', 0);\n  }, []);\n  useEffect(() => {\n    setActive('MAIN', 0);\n  }, [activeMenu]);\n  useEffect(() => {\n    menuRef && menuRef.current.children[0].children[0].children[0].focus();\n  }, [isActive]);\n  useEffect(() => {\n    setLanguageFilterString('');\n  }, [activeSettingsMenu]);\n  useEffect(() => {\n    closedCaptioningLanguage && setActiveItem('CAPTIONS', closedCaptioningLanguage.name);\n  }, [closedCaptioningLanguage]);\n  useEffect(() => {\n    setActiveItem('SPEED', `${playbackSpeed}x`);\n  }, [playbackSpeed]);\n  const showPlaybackSpeed = layout === '360p' || layout === '240p' || layout === '120p';\n\n  const getQualityMenuItems = () => {\n    const {\n      supportedResolutions,\n      currentResolution\n    } = props;\n    return supportedResolutions && supportedResolutions.sort((a, b) => b.height - a.height).map((r, i) => {\n      const quality = getQualityFromHeight(r.height, props);\n      return /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n        label: quality,\n        ariaLabel: getQualityAriaLabel(r.height, currentResolution),\n        onClick: () => {\n          setActiveItem('QUALITY', quality);\n          onResolutionChange(r, props);\n        },\n        isActive: currentResolution && currentResolution.height === r.height\n      }, `${quality}-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this);\n    });\n  }; // const getLanguageMenuItems = () => {\n  //   const { closedCaptioningLanguage, setClosedCaptioningLanguage } = props\n  //   return CaptionLanguages.filter(language => language.name.toLowerCase().includes(languageFilterString)).map(\n  //     language => {\n  //       const selected = closedCaptioningLanguage && closedCaptioningLanguage.code === language.code\n  //       return (\n  //         <LayeredMenuItem\n  //           data-testid={`caption-language-${language.code}`}\n  //           data-value={language.code}\n  //           key={language.code}\n  //           onClick={() => {\n  //             setClosedCaptioningLanguage && setClosedCaptioningLanguage(language)\n  //             language && setActiveItem('CAPTIONS', language.name)\n  //           }}\n  //           onKeyPress={onKeyPressLanguage(language, props)}\n  //           onKeyDown={onKeyDownLanguage(language, props)}\n  //           aria-selected={selected}\n  //           tabIndex=\"0\"\n  //           role=\"radiobutton\"\n  //           label={language.name}\n  //           isActive={selected}\n  //         />\n  //       )\n  //     }\n  //   )\n  // }\n\n\n  const getPlaybackSpeedItems = () => {\n    return PlaybackSpeedStops.map(speed => /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n      label: `${speed}x`,\n      onClick: () => {\n        setActiveItem('SPEED', `${speed}x`);\n        setPlaybackSpeed(speed);\n      },\n      isActive: speed === playbackSpeed\n    }, `${speed}x`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this));\n  };\n\n  const getIsAutoplayText = () => {\n    return userAutoplaySetting ? 'On' : 'Off';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css['settings-menu'],\n    ref: menuRef,\n    tabIndex: \"-1\",\n    onKeyDown: trapTabs,\n    children: /*#__PURE__*/_jsxDEV(LayeredMenuContainer, {\n      hidden: activeMenu !== Menus.SETTINGS,\n      height: activeSettingsMenu.height,\n      children: /*#__PURE__*/_jsxDEV(LayeredMenu, {\n        id: \"MAIN\",\n        isActive: activeSettingsMenu === 'MAIN',\n        activeSettingsMenu: activeSettingsMenu,\n        isUsingKeyboard: interactionMode && interactionMode === InteractionModes.KEYBOARD,\n        children: [nextCallback && /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n          direction: \"forward\",\n          label: \"Autoplay:\",\n          onClick: () => setActive('AUTOPLAY', 1),\n          selectedSubItem: getIsAutoplayText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LayeredMenuSubmenu, {\n          id: \"AUTOPLAY\",\n          isActive: activeSettingsMenu.id === 'AUTOPLAY',\n          ariaLabel: `select autoplay default`,\n          children: [/*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            direction: \"back\",\n            label: \"Autoplay\",\n            onClick: () => setActive('MAIN', 0),\n            ariaLabel: `back to main menu`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            onClick: () => setAutoplay && setAutoplay(true),\n            label: `On`,\n            isActive: userAutoplaySetting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            onClick: () => setAutoplay && setAutoplay(false),\n            label: `Off`,\n            isActive: !userAutoplaySetting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n          direction: \"forward\",\n          label: \"Quality:\",\n          onClick: () => setActive('QUALITY', 1),\n          selectedSubItem: getQualityFromHeight(currentResolution && currentResolution.height, props)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LayeredMenuSubmenu, {\n          id: \"QUALITY\",\n          isActive: activeSettingsMenu.id === 'QUALITY',\n          children: [/*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            direction: \"back\",\n            label: \"Quality\",\n            onClick: () => setActive('MAIN', 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: css.scrollable,\n            style: {\n              maxHeight: getScrollPaneHeight(layout, {\n                desktopHeight: 'auto'\n              })\n            },\n            \"aria-label\": \"set quality\",\n            role: \"list\",\n            children: getQualityMenuItems()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n          direction: \"forward\",\n          label: \"Captions:\",\n          onClick: () => setActive('CAPTIONS', 1),\n          selectedSubItem: activeItems && activeItems.CAPTIONS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LayeredMenuSubmenu, {\n          id: \"CAPTIONS\",\n          isActive: activeSettingsMenu.id === 'CAPTIONS',\n          ariaLabel: `select caption language`,\n          children: [/*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            direction: \"back\",\n            label: \"Captions\",\n            onClick: () => setActive('MAIN', 0),\n            ariaLabel: `back to captions menu`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classNames(css['searchbox']),\n            children: [/*#__PURE__*/_jsxDEV(SearchIcon, {\n              size: SearchIcon.sizes.small\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"caption-language-searchbox\",\n              className: css['searchbox__input'],\n              \"data-testid\": \"searchbox-input\",\n              \"aria-label\": \"Search caption languages\",\n              placeholder: \"Search\",\n              onChange: e => setLanguageFilterString(e.target.value.toLowerCase()),\n              value: languageFilterString,\n              onTouchEnd: e => e.stopPropagation(),\n              onTouchStart: e => e.stopPropagation()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: css.scrollable,\n            style: {\n              height: getScrollPaneHeight(layout, {\n                heightToSubtract: 46\n              })\n            },\n            \"aria-label\": \"set caption language\",\n            role: \"list\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), showPlaybackSpeed && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n            direction: \"forward\",\n            label: \"Speed:\",\n            onClick: () => setActive('SPEED', 1),\n            selectedSubItem: `${playbackSpeed}x`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LayeredMenuSubmenu, {\n            id: \"SPEED\",\n            isActive: activeSettingsMenu.id === 'SPEED',\n            \"aria-label\": 'set playback speed',\n            children: [/*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n              direction: \"back\",\n              label: \"Speed\",\n              onClick: () => setActive('MAIN', 0),\n              ariaLabel: `back to captions menu`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: css.scrollable,\n              style: {\n                maxHeight: getScrollPaneHeight(layout, {})\n              },\n              \"aria-label\": \"set playback speed\",\n              role: \"list\",\n              children: getPlaybackSpeedItems()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(LayeredMenuItem, {\n          onClick: () => displayFeedbackForm(props),\n          label: \"Send Feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsMenu, \"40uu50KxUQ1cXhWGQKq2/bsQEGc=\");\n\n_c = SettingsMenu;\nexport default SettingsMenu; // export default connect(\n//   state => ({\n//     activeMenu: state.activeMenu,\n//     activeSettingsMenu: state.activeSettingsMenu,\n//     userAutoplaySetting: state.userAutoplaySetting,\n//     boundedContext: state.boundedContext,\n//     bufferedTime: state.bufferedTime,\n//     clipId: state.clipId,\n//     clipTitle: state.clipTitle,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\n//     courseTitle: state.courseTitle,\n//     currentResolution: state.currentResolution,\n//     currentUrlIndex: state.currentUrlIndex,\n//     duration: state.duration,\n//     fullscreenState: state.fullscreenState,\n//     interactionMode: state.interactionMode,\n//     mediaType: state.mediaType,\n//     playbackSpeed: state.playbackSpeed,\n//     playing: state.playing,\n//     preferredResolutions: state.preferredResolutions,\n//     resolution: state.resolution,\n//     resolutionValue: state.resolutionValue,\n//     sessionId: state.sessionId,\n//     subtitle: state.subtitle,\n//     supportedResolutions: state.supportedResolutions,\n//     time: state.time,\n//     title: state.title,\n//     urls: state.urls,\n//     userId: state.userId,\n//     versions: state.versions,\n//     volume: state.volume,\n//     playbackSpeed: state.playbackSpeed,\n//     layout: state.layout,\n//     nextCallback: state.nextCallback,\n//   }),\n//   store => ({\n//     requestUrls: actions.requestUrls,\n//     setActiveMenu: actions.setActiveMenu,\n//     setClosedCaptioningLanguage: actions.setClosedCaptioningLanguage,\n//     setCurrentResolution: actions.setCurrentResolution,\n//     setLoading: actions.setLoading,\n//     setPreferredResolutions: actions.setPreferredResolutions,\n//     setPlaybackSpeed: actions.setPlaybackSpeed,\n//     setAutoplay: actions.setAutoplay,\n//   })\n// )(SettingsMenu)\n\nexport { SettingsMenu };\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsMenu\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/settings-menu/settings-menu.js"],"names":["React","useState","useEffect","useRef","connect","classNames","onResolutionChange","getQualityFromHeight","getQualityAriaLabel","onKeyPressLanguage","onKeyDownLanguage","SearchIcon","setActiveMenu","setAutoplay","CaptionLanguages","Menus","InteractionModes","PlaybackSpeedStops","displayFeedbackForm","LayeredMenuContainer","LayeredMenu","LayeredMenuSubmenu","LayeredMenuItem","css","getScrollPaneHeight","layout","desktopHeight","heightToSubtract","SettingsMenu","props","menuRef","activeMenu","currentResolution","closedCaptioningLanguage","playbackSpeed","setPlaybackSpeed","interactionMode","userAutoplaySetting","nextCallback","isActive","languageFilterString","setLanguageFilterString","activeSettingsMenu","setActiveSettingsMenu","id","level","height","activeItems","setActiveItems","QUALITY","CAPTIONS","name","SPEED","setActive","menu","document","getElementById","offsetHeight","setActiveItem","trapTabs","e","which","currentFocus","activeElement","focusableChildren","Array","from","current","querySelectorAll","focusableCount","length","focusedIndex","indexOf","shiftKey","preventDefault","focus","children","showPlaybackSpeed","getQualityMenuItems","supportedResolutions","sort","a","b","map","r","i","quality","getPlaybackSpeedItems","speed","getIsAutoplayText","SETTINGS","KEYBOARD","scrollable","maxHeight","sizes","small","target","value","toLowerCase","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport classNames from 'classnames'\n\nimport {\n  onResolutionChange,\n  getQualityFromHeight,\n  getQualityAriaLabel,\n  onKeyPressLanguage,\n  onKeyDownLanguage,\n} from './settings-menu-utils'\n\nimport { SearchIcon } from '@pluralsight/ps-design-system-icon'\nimport { setActiveMenu, setAutoplay,  } from 'state/player/playerSlice'\nimport { CaptionLanguages, Menus, InteractionModes, PlaybackSpeedStops } from '../constants'\nimport { displayFeedbackForm } from '../utilities/feedback'\nimport LayeredMenuContainer from '../layered-menu/layered-menu-container'\nimport LayeredMenu from '../layered-menu/layered-menu'\nimport LayeredMenuSubmenu from '../layered-menu/layered-menu-submenu'\nimport LayeredMenuItem from '../layered-menu/layered-menu-item'\nimport css from './settings-menu.module.scss'\n\nconst getScrollPaneHeight = (layout, { desktopHeight, heightToSubtract }) => {\n  heightToSubtract = heightToSubtract || 0\n  switch (layout) {\n    case '120p':\n    case '240p':\n      return `${96 - heightToSubtract}px`\n    case '360p':\n      return `${128 - heightToSubtract}px`\n    case '480p':\n      return `${180 - heightToSubtract}px`\n    case '720p':\n    case '1080p':\n      return desktopHeight || `${212 - heightToSubtract}px`\n    default:\n      return null\n  }\n}\n\nconst SettingsMenu = props => {\n  const menuRef = useRef(null)\n  const {\n    activeMenu,\n    currentResolution,\n    closedCaptioningLanguage,\n    playbackSpeed,\n    layout,\n    setPlaybackSpeed,\n    interactionMode,\n    setAutoplay,\n    userAutoplaySetting,\n    nextCallback,\n    isActive,\n  } = props\n\n  const [languageFilterString, setLanguageFilterString] = useState('')\n\n  const [activeSettingsMenu, setActiveSettingsMenu] = useState({ id: 'MAIN', level: 0, height: 68 })\n  const [activeItems, setActiveItems] = useState({\n    QUALITY: '1080p',\n    CAPTIONS: closedCaptioningLanguage && closedCaptioningLanguage.name,\n    SPEED: '1x',\n  })\n\n  const setActive = (id, level) => {\n    const menu = document.getElementById(id)\n    const height = menu && menu.offsetHeight\n    setActiveSettingsMenu({ id, level, height })\n  }\n  const setActiveItem = (menu, id) => setActiveItems({ ...activeItems, [menu]: id })\n\n  const trapTabs = e => {\n    if (e.which === 9) {\n      const currentFocus = document.activeElement\n      const focusableChildren = Array.from(\n        menuRef.current.querySelectorAll(\n          'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), object, embed, *[tabindex], *[contenteditable]'\n        )\n      )\n      const focusableCount = focusableChildren.length\n\n      const focusedIndex = focusableChildren.indexOf(currentFocus)\n      if (e.shiftKey) {\n        if (focusedIndex === 0) {\n          e.preventDefault()\n          focusableChildren[focusableCount - 1].focus()\n        }\n      } else {\n        if (focusedIndex === focusableCount - 1) {\n          e.preventDefault()\n          focusableChildren[0].focus()\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    setActive('MAIN', 0)\n  }, [])\n\n  useEffect(() => {\n    setActive('MAIN', 0)\n  }, [activeMenu])\n\n  useEffect(() => {\n    menuRef && menuRef.current.children[0].children[0].children[0].focus()\n  }, [isActive])\n\n  useEffect(() => {\n    setLanguageFilterString('')\n  }, [activeSettingsMenu])\n\n  useEffect(() => {\n    closedCaptioningLanguage && setActiveItem('CAPTIONS', closedCaptioningLanguage.name)\n  }, [closedCaptioningLanguage])\n\n  useEffect(() => {\n    setActiveItem('SPEED', `${playbackSpeed}x`)\n  }, [playbackSpeed])\n\n  const showPlaybackSpeed = layout === '360p' || layout === '240p' || layout === '120p'\n\n  const getQualityMenuItems = () => {\n    const { supportedResolutions, currentResolution } = props\n\n    return (\n      supportedResolutions &&\n      supportedResolutions\n        .sort((a, b) => b.height - a.height)\n        .map((r, i) => {\n          const quality = getQualityFromHeight(r.height, props)\n          return (\n            <LayeredMenuItem\n              key={`${quality}-${i}`}\n              label={quality}\n              ariaLabel={getQualityAriaLabel(r.height, currentResolution)}\n              onClick={() => {\n                setActiveItem('QUALITY', quality)\n                onResolutionChange(r, props)\n              }}\n              isActive={currentResolution && currentResolution.height === r.height}\n            />\n          )\n        })\n    )\n  }\n\n  // const getLanguageMenuItems = () => {\n  //   const { closedCaptioningLanguage, setClosedCaptioningLanguage } = props\n\n  //   return CaptionLanguages.filter(language => language.name.toLowerCase().includes(languageFilterString)).map(\n  //     language => {\n  //       const selected = closedCaptioningLanguage && closedCaptioningLanguage.code === language.code\n  //       return (\n  //         <LayeredMenuItem\n  //           data-testid={`caption-language-${language.code}`}\n  //           data-value={language.code}\n  //           key={language.code}\n  //           onClick={() => {\n  //             setClosedCaptioningLanguage && setClosedCaptioningLanguage(language)\n  //             language && setActiveItem('CAPTIONS', language.name)\n  //           }}\n  //           onKeyPress={onKeyPressLanguage(language, props)}\n  //           onKeyDown={onKeyDownLanguage(language, props)}\n  //           aria-selected={selected}\n  //           tabIndex=\"0\"\n  //           role=\"radiobutton\"\n  //           label={language.name}\n  //           isActive={selected}\n  //         />\n  //       )\n  //     }\n  //   )\n  // }\n\n  const getPlaybackSpeedItems = () => {\n    return PlaybackSpeedStops.map(speed => (\n      <LayeredMenuItem\n        key={`${speed}x`}\n        label={`${speed}x`}\n        onClick={() => {\n          setActiveItem('SPEED', `${speed}x`)\n          setPlaybackSpeed(speed)\n        }}\n        isActive={speed === playbackSpeed}\n      />\n    ))\n  }\n\n  const getIsAutoplayText = () => {\n    return userAutoplaySetting ? 'On' : 'Off'\n  }\n\n  return (\n    <div className={css['settings-menu']} ref={menuRef} tabIndex=\"-1\" onKeyDown={trapTabs}>\n      <LayeredMenuContainer hidden={activeMenu !== Menus.SETTINGS} height={activeSettingsMenu.height}>\n        <LayeredMenu\n          id=\"MAIN\"\n          isActive={activeSettingsMenu === 'MAIN'}\n          activeSettingsMenu={activeSettingsMenu}\n          isUsingKeyboard={interactionMode && interactionMode === InteractionModes.KEYBOARD}\n        >\n          {nextCallback && (\n            <LayeredMenuItem\n              direction=\"forward\"\n              label=\"Autoplay:\"\n              onClick={() => setActive('AUTOPLAY', 1)}\n              selectedSubItem={getIsAutoplayText()}\n            />\n          )}\n          <LayeredMenuSubmenu\n            id=\"AUTOPLAY\"\n            isActive={activeSettingsMenu.id === 'AUTOPLAY'}\n            ariaLabel={`select autoplay default`}\n          >\n            <LayeredMenuItem\n              direction=\"back\"\n              label=\"Autoplay\"\n              onClick={() => setActive('MAIN', 0)}\n              ariaLabel={`back to main menu`}\n            />\n            <LayeredMenuItem\n              onClick={() => setAutoplay && setAutoplay(true)}\n              label={`On`}\n              isActive={userAutoplaySetting}\n            ></LayeredMenuItem>\n            <LayeredMenuItem\n              onClick={() => setAutoplay && setAutoplay(false)}\n              label={`Off`}\n              isActive={!userAutoplaySetting}\n            ></LayeredMenuItem>\n          </LayeredMenuSubmenu>\n\n          <LayeredMenuItem\n            direction=\"forward\"\n            label=\"Quality:\"\n            onClick={() => setActive('QUALITY', 1)}\n            selectedSubItem={getQualityFromHeight(currentResolution && currentResolution.height, props)}\n          />\n          <LayeredMenuSubmenu id=\"QUALITY\" isActive={activeSettingsMenu.id === 'QUALITY'}>\n            <LayeredMenuItem direction=\"back\" label=\"Quality\" onClick={() => setActive('MAIN', 0)} />\n            <div\n              className={css.scrollable}\n              style={{ maxHeight: getScrollPaneHeight(layout, { desktopHeight: 'auto' }) }}\n              aria-label=\"set quality\"\n              role=\"list\"\n            >\n              {getQualityMenuItems()}\n            </div>\n          </LayeredMenuSubmenu>\n\n          <LayeredMenuItem\n            direction=\"forward\"\n            label=\"Captions:\"\n            onClick={() => setActive('CAPTIONS', 1)}\n            selectedSubItem={activeItems && activeItems.CAPTIONS}\n          />\n          <LayeredMenuSubmenu\n            id=\"CAPTIONS\"\n            isActive={activeSettingsMenu.id === 'CAPTIONS'}\n            ariaLabel={`select caption language`}\n          >\n            <LayeredMenuItem\n              direction=\"back\"\n              label=\"Captions\"\n              onClick={() => setActive('MAIN', 0)}\n              ariaLabel={`back to captions menu`}\n            />\n            <span className={classNames(css['searchbox'])}>\n              <SearchIcon size={SearchIcon.sizes.small} />\n              <input\n                name=\"caption-language-searchbox\"\n                className={css['searchbox__input']}\n                data-testid=\"searchbox-input\"\n                aria-label=\"Search caption languages\"\n                placeholder=\"Search\"\n                onChange={e => setLanguageFilterString(e.target.value.toLowerCase())}\n                value={languageFilterString}\n                onTouchEnd={e => e.stopPropagation()}\n                onTouchStart={e => e.stopPropagation()}\n              />\n            </span>\n            <div\n              className={css.scrollable}\n              style={{ height: getScrollPaneHeight(layout, { heightToSubtract: 46 }) }}\n              aria-label=\"set caption language\"\n              role=\"list\"\n            >\n              {/* {getLanguageMenuItems()} */}\n            </div>\n          </LayeredMenuSubmenu>\n          {showPlaybackSpeed && (\n            <>\n              <LayeredMenuItem\n                direction=\"forward\"\n                label=\"Speed:\"\n                onClick={() => setActive('SPEED', 1)}\n                selectedSubItem={`${playbackSpeed}x`}\n              />\n              <LayeredMenuSubmenu\n                id=\"SPEED\"\n                isActive={activeSettingsMenu.id === 'SPEED'}\n                aria-label={'set playback speed'}\n              >\n                <LayeredMenuItem\n                  direction=\"back\"\n                  label=\"Speed\"\n                  onClick={() => setActive('MAIN', 0)}\n                  ariaLabel={`back to captions menu`}\n                />\n                <div\n                  className={css.scrollable}\n                  style={{ maxHeight: getScrollPaneHeight(layout, {}) }}\n                  aria-label=\"set playback speed\"\n                  role=\"list\"\n                >\n                  {getPlaybackSpeedItems()}\n                </div>\n              </LayeredMenuSubmenu>\n            </>\n          )}\n          <LayeredMenuItem onClick={() => displayFeedbackForm(props)} label=\"Send Feedback\" />\n        </LayeredMenu>\n      </LayeredMenuContainer>\n    </div>\n  )\n}\nexport default SettingsMenu \n// export default connect(\n//   state => ({\n//     activeMenu: state.activeMenu,\n//     activeSettingsMenu: state.activeSettingsMenu,\n//     userAutoplaySetting: state.userAutoplaySetting,\n//     boundedContext: state.boundedContext,\n//     bufferedTime: state.bufferedTime,\n//     clipId: state.clipId,\n//     clipTitle: state.clipTitle,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     closedCaptioningLanguage: state.closedCaptioningLanguage,\n//     courseTitle: state.courseTitle,\n//     currentResolution: state.currentResolution,\n//     currentUrlIndex: state.currentUrlIndex,\n//     duration: state.duration,\n//     fullscreenState: state.fullscreenState,\n//     interactionMode: state.interactionMode,\n//     mediaType: state.mediaType,\n//     playbackSpeed: state.playbackSpeed,\n//     playing: state.playing,\n//     preferredResolutions: state.preferredResolutions,\n//     resolution: state.resolution,\n//     resolutionValue: state.resolutionValue,\n//     sessionId: state.sessionId,\n//     subtitle: state.subtitle,\n//     supportedResolutions: state.supportedResolutions,\n//     time: state.time,\n//     title: state.title,\n//     urls: state.urls,\n//     userId: state.userId,\n//     versions: state.versions,\n//     volume: state.volume,\n//     playbackSpeed: state.playbackSpeed,\n//     layout: state.layout,\n//     nextCallback: state.nextCallback,\n//   }),\n//   store => ({\n//     requestUrls: actions.requestUrls,\n//     setActiveMenu: actions.setActiveMenu,\n//     setClosedCaptioningLanguage: actions.setClosedCaptioningLanguage,\n//     setCurrentResolution: actions.setCurrentResolution,\n//     setLoading: actions.setLoading,\n//     setPreferredResolutions: actions.setPreferredResolutions,\n//     setPlaybackSpeed: actions.setPlaybackSpeed,\n//     setAutoplay: actions.setAutoplay,\n//   })\n// )(SettingsMenu)\n\nexport { SettingsMenu }\n"]},"metadata":{},"sourceType":"module"}