{"ast":null,"code":"var getClusterInterval=function getClusterInterval(duration){var clusterIntervalPercentage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;return Math.max(clusterIntervalPercentage/100*duration);};var getClusterIntervalWithLayoutOffset=function getClusterIntervalWithLayoutOffset(duration,layout){if(layout==='240p')return getClusterInterval(duration,10);if(layout==='360p')return getClusterInterval(duration,8);if(layout==='480p')return getClusterInterval(duration,6);if(layout==='720p')return getClusterInterval(duration,4);return getClusterInterval(duration,2);};var cluster=function cluster(markers){var clusterInterval=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;if(!markers.length)return[];var clusters=[{timeIndex:markers[0].timeIndex,markers:[]}];var cluster=clusters[0];for(var i=0;i<markers.length;i++){var marker=markers[i];if(marker.timeIndex<=cluster.timeIndex+clusterInterval){cluster.markers.push(marker);}else{cluster={timeIndex:marker.timeIndex,markers:[marker]};clusters.push(cluster);}}return clusters;};var clusterMarkers=function clusterMarkers(markers,duration,layout){if(!markers.length)return[];var sorted=markers.sort(function(a,b){return a.timeIndex-b.timeIndex;});var clusterInterval=getClusterIntervalWithLayoutOffset(duration,layout);return cluster(sorted,clusterInterval);};module.exports={cluster:cluster,getClusterInterval:getClusterInterval,clusterMarkers:clusterMarkers};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/marker/marker-clustering.js"],"names":["getClusterInterval","duration","clusterIntervalPercentage","Math","max","getClusterIntervalWithLayoutOffset","layout","cluster","markers","clusterInterval","length","clusters","timeIndex","i","marker","push","clusterMarkers","sorted","sort","a","b","module","exports"],"mappings":"AAAA,GAAMA,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAA6C,IAAlCC,CAAAA,yBAAkC,2DAAN,CAAM,CACpE,MAAOC,CAAAA,IAAI,CAACC,GAAL,CAAUF,yBAAyB,CAAG,GAA7B,CAAoCD,QAA7C,CAAP,CACD,CAFH,CAIE,GAAMI,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAACJ,QAAD,CAAWK,MAAX,CAAsB,CAC/D,GAAIA,MAAM,GAAK,MAAf,CAAuB,MAAON,CAAAA,kBAAkB,CAACC,QAAD,CAAW,EAAX,CAAzB,CACvB,GAAIK,MAAM,GAAK,MAAf,CAAuB,MAAON,CAAAA,kBAAkB,CAACC,QAAD,CAAW,CAAX,CAAzB,CACvB,GAAIK,MAAM,GAAK,MAAf,CAAuB,MAAON,CAAAA,kBAAkB,CAACC,QAAD,CAAW,CAAX,CAAzB,CACvB,GAAIK,MAAM,GAAK,MAAf,CAAuB,MAAON,CAAAA,kBAAkB,CAACC,QAAD,CAAW,CAAX,CAAzB,CACvB,MAAOD,CAAAA,kBAAkB,CAACC,QAAD,CAAW,CAAX,CAAzB,CACD,CAND,CAQA,GAAMM,CAAAA,OAAO,CAAG,iBAACC,OAAD,CAAkC,IAAxBC,CAAAA,eAAwB,2DAAN,CAAM,CAChD,GAAI,CAACD,OAAO,CAACE,MAAb,CAAqB,MAAO,EAAP,CAErB,GAAMC,CAAAA,QAAQ,CAAG,CAAC,CAAEC,SAAS,CAAEJ,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAxB,CAAmCJ,OAAO,CAAE,EAA5C,CAAD,CAAjB,CACA,GAAID,CAAAA,OAAO,CAAGI,QAAQ,CAAC,CAAD,CAAtB,CAEA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,OAAO,CAACE,MAA5B,CAAoCG,CAAC,EAArC,CAAyC,CACvC,GAAMC,CAAAA,MAAM,CAAGN,OAAO,CAACK,CAAD,CAAtB,CACA,GAAIC,MAAM,CAACF,SAAP,EAAoBL,OAAO,CAACK,SAAR,CAAoBH,eAA5C,CAA6D,CAC3DF,OAAO,CAACC,OAAR,CAAgBO,IAAhB,CAAqBD,MAArB,EACD,CAFD,IAEO,CACLP,OAAO,CAAG,CAAEK,SAAS,CAAEE,MAAM,CAACF,SAApB,CAA+BJ,OAAO,CAAE,CAACM,MAAD,CAAxC,CAAV,CACAH,QAAQ,CAACI,IAAT,CAAcR,OAAd,EACD,CACF,CACD,MAAOI,CAAAA,QAAP,CACD,CAhBD,CAkBA,GAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACR,OAAD,CAAUP,QAAV,CAAoBK,MAApB,CAA+B,CACpD,GAAI,CAACE,OAAO,CAACE,MAAb,CAAqB,MAAO,EAAP,CAErB,GAAMO,CAAAA,MAAM,CAAGT,OAAO,CAACU,IAAR,CAAa,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACP,SAAF,CAAcQ,CAAC,CAACR,SAA1B,EAAb,CAAf,CACA,GAAMH,CAAAA,eAAe,CAAGJ,kCAAkC,CAACJ,QAAD,CAAWK,MAAX,CAA1D,CACA,MAAOC,CAAAA,OAAO,CAACU,MAAD,CAASR,eAAT,CAAd,CACD,CAND,CAQAY,MAAM,CAACC,OAAP,CAAiB,CACff,OAAO,CAAPA,OADe,CAEfP,kBAAkB,CAAlBA,kBAFe,CAGfgB,cAAc,CAAdA,cAHe,CAAjB","sourcesContent":["const getClusterInterval = (duration, clusterIntervalPercentage = 2) => {\n    return Math.max((clusterIntervalPercentage / 100) * duration)\n  }\n  \n  const getClusterIntervalWithLayoutOffset = (duration, layout) => {\n    if (layout === '240p') return getClusterInterval(duration, 10)\n    if (layout === '360p') return getClusterInterval(duration, 8)\n    if (layout === '480p') return getClusterInterval(duration, 6)\n    if (layout === '720p') return getClusterInterval(duration, 4)\n    return getClusterInterval(duration, 2)\n  }\n  \n  const cluster = (markers, clusterInterval = 5) => {\n    if (!markers.length) return []\n  \n    const clusters = [{ timeIndex: markers[0].timeIndex, markers: [] }]\n    let cluster = clusters[0]\n  \n    for (let i = 0; i < markers.length; i++) {\n      const marker = markers[i]\n      if (marker.timeIndex <= cluster.timeIndex + clusterInterval) {\n        cluster.markers.push(marker)\n      } else {\n        cluster = { timeIndex: marker.timeIndex, markers: [marker] }\n        clusters.push(cluster)\n      }\n    }\n    return clusters\n  }\n  \n  const clusterMarkers = (markers, duration, layout) => {\n    if (!markers.length) return []\n  \n    const sorted = markers.sort((a, b) => a.timeIndex - b.timeIndex)\n    const clusterInterval = getClusterIntervalWithLayoutOffset(duration, layout)\n    return cluster(sorted, clusterInterval)\n  }\n  \n  module.exports = {\n    cluster,\n    getClusterInterval,\n    clusterMarkers,\n  }\n  "]},"metadata":{},"sourceType":"module"}