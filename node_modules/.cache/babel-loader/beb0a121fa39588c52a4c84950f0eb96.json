{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/progress-bar/progress-bar.js\";\nimport classNames from 'classnames';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clusterMarkers } from '../marker/marker-clustering';\nimport { play, pause } from 'state/player/playerSlice'; // import * as actions from '../../actions'\n\nimport { formatTime } from '../utilities/format-time';\nimport css from './progress-bar.module.css';\nimport { InteractionModes } from '../constants';\nimport Marker from '../marker/marker';\nimport Slider from '../slider/slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ProgressBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setTime = ratio => {\n      const {\n        setTime,\n        duration\n      } = this.props;\n      setTime && setTime(Math.floor(ratio * duration));\n    };\n\n    this.handleHoverChange = ({\n      ratio,\n      active\n    }) => {\n      const {\n        duration\n      } = this.props;\n      const {\n        hoveringPercentage\n      } = this.state;\n      const value = ratio || hoveringPercentage / 100;\n      const hoveringTime = formatTime(value * duration);\n      this.setState({\n        hoveringPercentage: value * 100,\n        hovering: active,\n        hoveringTime\n      });\n    };\n\n    this.getClustersWithLeftOffset = markers => {\n      const {\n        duration,\n        layout\n      } = this.props;\n      const clusters = clusterMarkers(markers, duration, layout);\n      return clusters.map(c => ({ ...c,\n        leftOffset: Math.floor(c.timeIndex / duration * 100)\n      }));\n    };\n\n    this.renderMarkers = (markers, visible) => {\n      const clusters = this.getClustersWithLeftOffset(markers);\n      return clusters.map(({\n        timeIndex,\n        markers,\n        leftOffset\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          timeIndex: timeIndex,\n          markers: markers,\n          leftOffset: leftOffset,\n          isVisible: visible\n        }, markers[0].id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.state = {\n      hovering: false,\n      dragging: false,\n      hoveringTime: null\n    };\n  }\n\n  get currentPercentage() {\n    const {\n      time,\n      duration\n    } = this.props;\n    if (duration <= 0) return 0;\n    return time / (duration - 1);\n  }\n\n  render() {\n    const {\n      isDragging,\n      hovering,\n      hoveringPercentage,\n      hoveringTime,\n      percentage,\n      dragging,\n      startRatio,\n      endRatio\n    } = this.state;\n    const {\n      visible,\n      setTime,\n      duration,\n      bufferedTime,\n      interactionMode,\n      time,\n      seek,\n      markers\n    } = this.props;\n    const ariaValueText = `${formatTime(time)} of ${formatTime(duration)}`;\n    const bars = [{\n      value: 1,\n      fillStyle: css.progressBar,\n      key: 'background-bar'\n    }, {\n      value: duration ? Math.ceil(bufferedTime) / duration : 0,\n      fillStyle: css.bufferedTime,\n      key: 'buffering-bar'\n    }];\n    const active = visible && (hovering || dragging);\n    const interactiveHovering = (interactionMode === InteractionModes.TOUCH || interactionMode === InteractionModes.KEYBOARD) && visible;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(css.progressBarWrapper, {\n        [css.hidden]: !visible\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          left: `${hoveringPercentage}%`\n        },\n        className: classNames(css.timestamp, {\n          [css.timestampFadeIn]: active\n        }),\n        children: hoveringTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), markers && this.renderMarkers(markers, visible), /*#__PURE__*/_jsxDEV(Slider, {\n        ariaLabel: \"Seek slider\",\n        ariaValueText: ariaValueText,\n        step: getStep(duration, 3),\n        hovering: interactiveHovering,\n        verticalAlign: 80,\n        className: classNames(css.slider, {\n          [css.hiddenSlider]: !visible\n        }),\n        value: this.currentPercentage,\n        onChange: ratio => {\n          this.setTime(ratio);\n          this.setState({\n            endRatio: ratio\n          });\n        },\n        onChangeStart: ratio => {\n          const {\n            time: currentTime,\n            onSeekStart,\n            pause,\n            playing\n          } = this.props;\n          this.setTime(ratio);\n          onSeekStart && onSeekStart();\n          pause && pause(false);\n          this.setState({\n            dragging: true,\n            startRatio: currentTime / duration,\n            endRatio: ratio,\n            playing\n          });\n        },\n        onChangeEnd: () => {\n          const {\n            onSeekEnd,\n            play\n          } = this.props;\n          const {\n            startRatio,\n            endRatio,\n            playing\n          } = this.state;\n          onSeekEnd && onSeekEnd();\n          seek && seek({\n            startRatio,\n            endRatio\n          });\n          playing && play(false);\n          this.setState({\n            dragging: false,\n            startRatio: null,\n            endRatio: null\n          });\n        },\n        onHoverChange: this.handleHoverChange,\n        bars: bars,\n        barClass: css.barClass,\n        markerClusters: markers && this.getClustersWithLeftOffset(markers)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction getStep(duration, seconds) {\n  return seconds / duration;\n}\n\nexport default ProgressBar; // export default connect(\n//   state => ({\n//     bufferedTime: state.bufferedTime,\n//     duration: state.duration,\n//     time: state.time,\n//     visible: state.visible,\n//     interactionMode: state.interactionMode,\n//     markers: state.markers,\n//     clusterInterval: state.clusterInterval,\n//     layout: state.layout,\n//     playing: state.playing\n//   }),\n//   store => ({\n//     setTime: actions.setTime,\n//     seek: actions.seek,\n//     onSeekStart: actions.seekStart,\n//     onSeekEnd: actions.seekEnd,\n//     markerClick: actions.markerClick,\n//     pause: actions.pause,\n//     play: actions.play\n//   })\n// )(ProgressBar)","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/progress-bar/progress-bar.js"],"names":["classNames","React","Component","connect","clusterMarkers","play","pause","formatTime","css","InteractionModes","Marker","Slider","ProgressBar","constructor","props","setTime","ratio","duration","Math","floor","handleHoverChange","active","hoveringPercentage","state","value","hoveringTime","setState","hovering","getClustersWithLeftOffset","markers","layout","clusters","map","c","leftOffset","timeIndex","renderMarkers","visible","id","dragging","currentPercentage","time","render","isDragging","percentage","startRatio","endRatio","bufferedTime","interactionMode","seek","ariaValueText","bars","fillStyle","progressBar","key","ceil","interactiveHovering","TOUCH","KEYBOARD","progressBarWrapper","hidden","left","timestamp","timestampFadeIn","getStep","slider","hiddenSlider","currentTime","onSeekStart","playing","onSeekEnd","barClass","seconds"],"mappings":"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","sourcesContent":["import classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { clusterMarkers } from '../marker/marker-clustering'\nimport { play, pause,  } from 'state/player/playerSlice'\n// import * as actions from '../../actions'\nimport { formatTime } from '../utilities/format-time'\nimport css from './progress-bar.module.css'\nimport { InteractionModes } from '../constants'\nimport Marker from '../marker/marker'\n\nimport Slider from '../slider/slider'\n\nexport class ProgressBar extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { hovering: false, dragging: false, hoveringTime: null }\n  }\n\n  get currentPercentage() {\n    const { time, duration } = this.props\n\n    if (duration <= 0) return 0\n\n    return time / (duration-1)\n  }\n\n  setTime = ratio => {\n    const { setTime, duration } = this.props\n    setTime && setTime(Math.floor(ratio * duration))\n  }\n\n  handleHoverChange = ({ ratio, active }) => {\n    const { duration } = this.props\n    const { hoveringPercentage } = this.state\n\n    const value = ratio || hoveringPercentage / 100\n    const hoveringTime = formatTime(value * duration)\n\n    this.setState({ hoveringPercentage: value * 100, hovering: active, hoveringTime })\n  }\n\n  getClustersWithLeftOffset = markers => {\n    const { duration, layout } = this.props\n\n    const clusters = clusterMarkers(markers, duration, layout)\n    return clusters.map(c => ({\n      ...c,\n      leftOffset: Math.floor((c.timeIndex / duration) * 100),\n    }))\n  }\n\n  renderMarkers = (markers, visible) => {\n    const clusters = this.getClustersWithLeftOffset(markers)\n    return clusters.map(({ timeIndex, markers, leftOffset }) => {\n      return (\n        <Marker\n          timeIndex={timeIndex}\n          markers={markers}\n          key={markers[0].id}\n          leftOffset={leftOffset}\n          isVisible={visible}\n        />\n      )\n    })\n  }\n\n  render() {\n    const {\n      isDragging,\n      hovering,\n      hoveringPercentage,\n      hoveringTime,\n      percentage,\n      dragging,\n      startRatio,\n      endRatio,\n    } = this.state\n    const { visible, setTime, duration, bufferedTime, interactionMode, time, seek, markers } = this.props\n    const ariaValueText = `${formatTime(time)} of ${formatTime(duration)}`\n\n    const bars = [\n      {\n        value: 1,\n        fillStyle: css.progressBar,\n        key: 'background-bar',\n      },\n      {\n        value: duration ? Math.ceil(bufferedTime) / duration : 0,\n        fillStyle: css.bufferedTime,\n        key: 'buffering-bar',\n      },\n    ]\n\n    const active = visible && (hovering || dragging)\n    const interactiveHovering =\n      (interactionMode === InteractionModes.TOUCH || interactionMode === InteractionModes.KEYBOARD) && visible\n\n    return (\n      <div className={classNames(css.progressBarWrapper, { [css.hidden]: !visible })}>\n        <div\n          style={{ left: `${hoveringPercentage}%` }}\n          className={classNames(css.timestamp, {\n            [css.timestampFadeIn]: active,\n          })}\n        >\n          {hoveringTime}\n        </div>\n        {markers && this.renderMarkers(markers, visible)}\n        <Slider\n          ariaLabel=\"Seek slider\"\n          ariaValueText={ariaValueText}\n          step={getStep(duration, 3)}\n          hovering={interactiveHovering}\n          verticalAlign={80}\n          className={classNames(css.slider, { [css.hiddenSlider]: !visible })}\n          value={this.currentPercentage}\n          onChange={ratio => {\n            this.setTime(ratio)\n\n            this.setState({ endRatio: ratio })\n          }}\n          onChangeStart={ratio => {\n            const { time: currentTime, onSeekStart, pause, playing } = this.props\n\n            this.setTime(ratio)\n\n            onSeekStart && onSeekStart()\n            pause && pause(false)\n\n            this.setState({ dragging: true, startRatio: currentTime / duration, endRatio: ratio, playing })\n          }}\n          onChangeEnd={() => {\n            const { onSeekEnd, play } = this.props\n            const { startRatio, endRatio, playing } = this.state\n\n            onSeekEnd && onSeekEnd()\n\n            seek && seek({ startRatio, endRatio })\n            playing && play(false)\n\n            this.setState({ dragging: false, startRatio: null, endRatio: null })\n          }}\n          onHoverChange={this.handleHoverChange}\n          bars={bars}\n          barClass={css.barClass}\n          markerClusters={markers && this.getClustersWithLeftOffset(markers)}\n        />\n      </div>\n    )\n  }\n}\n\nfunction getStep(duration, seconds) {\n  return seconds / duration\n}\nexport default ProgressBar;\n// export default connect(\n//   state => ({\n//     bufferedTime: state.bufferedTime,\n//     duration: state.duration,\n//     time: state.time,\n//     visible: state.visible,\n//     interactionMode: state.interactionMode,\n//     markers: state.markers,\n//     clusterInterval: state.clusterInterval,\n//     layout: state.layout,\n//     playing: state.playing\n//   }),\n//   store => ({\n//     setTime: actions.setTime,\n//     seek: actions.seek,\n//     onSeekStart: actions.seekStart,\n//     onSeekEnd: actions.seekEnd,\n//     markerClick: actions.markerClick,\n//     pause: actions.pause,\n//     play: actions.play\n//   })\n// )(ProgressBar)\n"]},"metadata":{},"sourceType":"module"}