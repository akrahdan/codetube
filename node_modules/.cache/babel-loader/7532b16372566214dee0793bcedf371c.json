{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/TrackLink/NonRouterTrackLink/index.tsx\",\n    _s = $RefreshSig$();\n\nimport cx from 'classnames';\nimport React, { useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NonRouterTrackLink = ({\n  data,\n  children,\n  asButton,\n  onClick,\n  trackUserClickCallback,\n  ...passThroughProps\n}) => {\n  _s();\n\n  const {\n    href,\n    target\n  } = passThroughProps;\n  const nonSPAOnClick = useCallback(e => {\n    // if (disableTracking || isEmpty(data)) return;\n    e.preventDefault();\n    trackUserClickCallback();\n    onClick === null || onClick === void 0 ? void 0 : onClick(e); // uses href prop because\n    // we ONLY want to do this if it is an anchor link\n\n    if (href) {\n      const newTab = e.metaKey || e.ctrlKey || target === '_blank';\n\n      if (newTab) {\n        window.open(href);\n      } else {\n        window.location.href = href;\n      }\n    }\n  }, [data, href, target, trackUserClickCallback, onClick]);\n\n  if (href) {\n    return /*#__PURE__*/_jsxDEV(\"a\", { ...passThroughProps,\n      href: href,\n      onClick: nonSPAOnClick,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  } // For accessibility, we prefer to use a button on our trackable components without an href\n  // This was added after TrackLink so not everything can safely be converted from span to button\n  // When adding or reworking components that use TrackLink, please use either asButton, href, or to(Redux First Router Link)\n\n\n  if (asButton) {\n    return /*#__PURE__*/_jsxDEV(\"button\", { ...passThroughProps,\n      type: \"button\",\n      className: cx(styles.asButton, passThroughProps.className),\n      onClick: nonSPAOnClick,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n    _jsxDEV(\"span\", { ...passThroughProps,\n      onClick: nonSPAOnClick,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(NonRouterTrackLink, \"WgJR8rVdTFNz/VbUjr3mEnYJnY0=\");\n\n_c = NonRouterTrackLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"NonRouterTrackLink\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/TrackLink/NonRouterTrackLink/index.tsx"],"names":["cx","React","useCallback","styles","NonRouterTrackLink","data","children","asButton","onClick","trackUserClickCallback","passThroughProps","href","target","nonSPAOnClick","e","preventDefault","newTab","metaKey","ctrlKey","window","open","location","className"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,YAAf;AAEA,OAAOC,KAAP,IAAoCC,WAApC,QAAuD,OAAvD;AAGA,OAAOC,MAAP,MAAmB,sBAAnB;;AAMA,OAAO,MAAMC,kBAA+C,GAAG,CAAC;AAC9DC,EAAAA,IAD8D;AAE9DC,EAAAA,QAF8D;AAG9DC,EAAAA,QAH8D;AAI9DC,EAAAA,OAJ8D;AAK9DC,EAAAA,sBAL8D;AAM9D,KAAGC;AAN2D,CAAD,KAOzD;AAAA;;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBF,gBAAzB;AAEA,QAAMG,aAAa,GAAGX,WAAW,CAC9BY,CAAD,IAAyB;AACvB;AAEAA,IAAAA,CAAC,CAACC,cAAF;AAEAN,IAAAA,sBAAsB;AAErBD,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAGM,CAAH,CAAP,CAPsB,CASvB;AACA;;AACA,QAAIH,IAAJ,EAAU;AACR,YAAMK,MAAM,GAAGF,CAAC,CAACG,OAAF,IAAaH,CAAC,CAACI,OAAf,IAA0BN,MAAM,KAAK,QAApD;;AACA,UAAII,MAAJ,EAAY;AACVG,QAAAA,MAAM,CAACC,IAAP,CAAYT,IAAZ;AACD,OAFD,MAEO;AACLQ,QAAAA,MAAM,CAACE,QAAP,CAAgBV,IAAhB,GAAuBA,IAAvB;AACD;AACF;AACF,GApB8B,EAqB/B,CAACN,IAAD,EAAOM,IAAP,EAAaC,MAAb,EAAqBH,sBAArB,EAA6CD,OAA7C,CArB+B,CAAjC;;AAwBA,MAAIG,IAAJ,EAAU;AACR,wBACE,kBAAOD,gBAAP;AAAyB,MAAA,IAAI,EAAEC,IAA/B;AAAqC,MAAA,OAAO,EAAEE,aAA9C;AAAA,gBACGP;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAjCG,CAmCJ;AACA;AACA;;;AACA,MAAIC,QAAJ,EAAc;AACZ,wBACE,uBACMG,gBADN;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EAAEV,EAAE,CAACG,MAAM,CAACI,QAAR,EAAkBG,gBAAgB,CAACY,SAAnC,CAHf;AAIE,MAAA,OAAO,EAAET,aAJX;AAAA,gBAMGP;AANH;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAED;AAAA;AACE;AACA,yBACOI,gBADP;AAEE,MAAA,OAAO,EAAEG,aAFX;AAAA,gBAIGP;AAJH;AAAA;AAAA;AAAA;AAAA;AAFF;AASD,CAnEM;;GAAMF,kB;;KAAAA,kB","sourcesContent":["import cx from 'classnames';\nimport { isEmpty } from 'lodash';\nimport React, { FC, HTMLAttributes, useCallback } from 'react';\n\nimport { BaseTrackLinkProps } from 'components/TrackLink/types';\nimport styles from './styles.module.scss';\n\ninterface NonRouterTrackLinkProps extends BaseTrackLinkProps {\n  trackUserClickCallback: () => void;\n}\n\nexport const NonRouterTrackLink: FC<NonRouterTrackLinkProps> = ({\n  data,\n  children,\n  asButton,\n  onClick,\n  trackUserClickCallback,\n  ...passThroughProps\n}) => {\n  const { href, target } = passThroughProps;\n\n  const nonSPAOnClick = useCallback(\n    (e: React.MouseEvent) => {\n      // if (disableTracking || isEmpty(data)) return;\n\n      e.preventDefault();\n\n      trackUserClickCallback();\n\n       onClick?.(e);\n\n      // uses href prop because\n      // we ONLY want to do this if it is an anchor link\n      if (href) {\n        const newTab = e.metaKey || e.ctrlKey || target === '_blank';\n        if (newTab) {\n          window.open(href);\n        } else {\n          window.location.href = href;\n        }\n      }\n    },\n    [data, href, target, trackUserClickCallback, onClick]\n  );\n\n  if (href) {\n    return (\n      <a {...passThroughProps} href={href} onClick={nonSPAOnClick}>\n        {children}\n      </a>\n    );\n  }\n\n  // For accessibility, we prefer to use a button on our trackable components without an href\n  // This was added after TrackLink so not everything can safely be converted from span to button\n  // When adding or reworking components that use TrackLink, please use either asButton, href, or to(Redux First Router Link)\n  if (asButton) {\n    return (\n      <button\n        {...passThroughProps}\n        type=\"button\"\n        className={cx(styles.asButton, passThroughProps.className)}\n        onClick={nonSPAOnClick}\n      >\n        {children}\n      </button>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n    <span\n      {...(passThroughProps as HTMLAttributes<HTMLSpanElement>)}\n      onClick={nonSPAOnClick}\n    >\n      {children}\n    </span>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}