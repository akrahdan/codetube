{"ast":null,"code":"import _objectSpread from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectWithoutProperties from\"/Users/akrah/Documents/dev/codefluent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import cx from'classnames';import React from'react';import{omitProps}from'../utils/omitProps';import styles from'./styles.module.scss';import{jsx as _jsx}from\"react/jsx-runtime\";var propKeys=['children','className','href','link','onClick','target','rel'];/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality\n *\n * @example\n * import { Anchor } from '@codecademy/gamut';\n *\n * <Anchor variant=\"interface\">Button</Anchor>\n *\n */export var ButtonDeprecatedBase=function ButtonDeprecatedBase(props){var href=props.href,className=props.className,link=props.link,onClick=props.onClick,target=props.target,rel=props.rel;var As=props.as,_props$asProps=props.asProps,asProps=_props$asProps===void 0?{}:_props$asProps,restOfProps=_objectWithoutProperties(props,[\"as\",\"asProps\"]);var propsToTransfer=omitProps(propKeys,restOfProps);var classes=cx(styles.basicBtn,className,_defineProperty({},styles.basicLink,link));var defaultProps=_objectSpread(_objectSpread({},propsToTransfer),{},{className:classes,onClick:onClick,'data-btn':true});if(As){return/*#__PURE__*/_jsx(As,_objectSpread(_objectSpread({},defaultProps),asProps));}if(href){// Check if this is a popup and and appropriate rel props if they don't exist (see https://web.dev/external-anchors-use-rel-noopener/)\nvar anchorProps={target:target,rel:target==='_blank'&&!rel?'noopener noreferrer':rel};// Anchor tag receives children content from propsToTransfer\n// eslint-disable-next-line jsx-a11y/anchor-has-content\nreturn/*#__PURE__*/_jsx(\"a\",_objectSpread(_objectSpread(_objectSpread({},defaultProps),anchorProps),{},{href:href}));}// eslint-disable-next-line react/button-has-type\nreturn/*#__PURE__*/_jsx(\"button\",_objectSpread({},defaultProps));};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/overrides/ButtonDeprecatedBase/index.tsx"],"names":["cx","React","omitProps","styles","propKeys","ButtonDeprecatedBase","props","href","className","link","onClick","target","rel","As","as","asProps","restOfProps","propsToTransfer","classes","basicBtn","basicLink","defaultProps","anchorProps"],"mappings":"yeAAA,MAAOA,CAAAA,EAAP,KAAe,YAAf,CACA,MAAOC,CAAAA,KAAP,KAA4C,OAA5C,CAGA,OAASC,SAAT,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,C,2CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACf,UADe,CAEf,WAFe,CAGf,MAHe,CAIf,MAJe,CAKf,SALe,CAMf,QANe,CAOf,KAPe,CAAjB,CA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,IAAMC,CAAAA,oBAAyD,CAAG,QAA5DA,CAAAA,oBAA4D,CACvEC,KADuE,CAEpE,IACKC,CAAAA,IADL,CACqDD,KADrD,CACKC,IADL,CACWC,SADX,CACqDF,KADrD,CACWE,SADX,CACsBC,IADtB,CACqDH,KADrD,CACsBG,IADtB,CAC4BC,OAD5B,CACqDJ,KADrD,CAC4BI,OAD5B,CACqCC,MADrC,CACqDL,KADrD,CACqCK,MADrC,CAC6CC,GAD7C,CACqDN,KADrD,CAC6CM,GAD7C,IAESC,CAAAA,EAFT,CAE8CP,KAF9C,CAEKQ,EAFL,gBAE8CR,KAF9C,CAEaS,OAFb,CAEaA,OAFb,yBAEuB,EAFvB,gBAE8BC,WAF9B,0BAE8CV,KAF9C,mBAGH,GAAMW,CAAAA,eAAe,CAAGf,SAAS,CAACE,QAAD,CAAWY,WAAX,CAAjC,CAEA,GAAME,CAAAA,OAAO,CAAGlB,EAAE,CAACG,MAAM,CAACgB,QAAR,CAAkBX,SAAlB,oBACfL,MAAM,CAACiB,SADQ,CACIX,IADJ,EAAlB,CAIA,GAAMY,CAAAA,YAAY,gCACbJ,eADa,MAEhBT,SAAS,CAAEU,OAFK,CAGhBR,OAAO,CAAPA,OAHgB,CAIhB,WAAY,IAJI,EAAlB,CAOA,GAAIG,EAAJ,CAAQ,CACN,mBAAO,KAAC,EAAD,gCAAQQ,YAAR,EAA0BN,OAA1B,EAAP,CACD,CAED,GAAIR,IAAJ,CAAU,CACR;AACA,GAAMe,CAAAA,WAAW,CAAG,CAClBX,MAAM,CAANA,MADkB,CAElBC,GAAG,CAAED,MAAM,GAAK,QAAX,EAAuB,CAACC,GAAxB,CAA8B,qBAA9B,CAAsDA,GAFzC,CAApB,CAKA;AACA;AACA,mBAAO,sDAAOS,YAAP,EAAyBC,WAAzB,MAAsC,IAAI,CAAEf,IAA5C,GAAP,CACD,CAED;AACA,mBAAO,+BAAYc,YAAZ,EAAP,CACD,CApCM","sourcesContent":["import cx from 'classnames';\nimport React, { HTMLProps, ReactNode } from 'react';\n\nimport { ChildComponentDescriptor } from '../typings/react';\nimport { omitProps } from '../utils/omitProps';\nimport styles from './styles.module.scss';\n\nconst propKeys = [\n  'children',\n  'className',\n  'href',\n  'link',\n  'onClick',\n  'target',\n  'rel',\n];\n\nexport type ButtonDeprecatedBaseProps = Omit<\n  HTMLProps<HTMLAnchorElement> & HTMLProps<HTMLButtonElement>,\n  'as' | 'size'\n> & {\n  /**\n   * Component type to wrap children with.\n   */\n  as?: ChildComponentDescriptor;\n  /**\n   * @remarks We would love to properly type this with generics, but cannot yet.\n   * @see https://github.com/Codecademy/client-modules/pull/270#discussion_r270917147\n   * @see https://github.com/Microsoft/TypeScript/issues/21048\n   */\n  asProps?: any;\n  children?: ReactNode;\n  className?: string;\n  href?: string;\n  target?: string;\n  rel?: string;\n  /**\n   * Variant that displays the button as an inline link element, but maintains its semantic meaning as a button.\n   */\n  link?: boolean;\n  /**\n   * @remarks\n   * Technically, this is only ever a button event *or* a link event.\n   * We '&' them together for ease of usage.\n   */\n  onClick?: (\n    event: React.MouseEvent<HTMLAnchorElement> &\n      React.MouseEvent<HTMLButtonElement>\n  ) => void;\n};\n\n/**\n * @deprecated\n * This component is deprecated and is no longer supported.\n *\n * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality\n *\n * @example\n * import { Anchor } from '@codecademy/gamut';\n *\n * <Anchor variant=\"interface\">Button</Anchor>\n *\n */\n\nexport const ButtonDeprecatedBase: React.FC<ButtonDeprecatedBaseProps> = (\n  props\n) => {\n  const { href, className, link, onClick, target, rel } = props;\n  const { as: As, asProps = {}, ...restOfProps } = props;\n  const propsToTransfer = omitProps(propKeys, restOfProps);\n\n  const classes = cx(styles.basicBtn, className, {\n    [styles.basicLink]: link,\n  });\n\n  const defaultProps = {\n    ...propsToTransfer,\n    className: classes,\n    onClick,\n    'data-btn': true,\n  };\n\n  if (As) {\n    return <As {...defaultProps} {...asProps} />;\n  }\n\n  if (href) {\n    // Check if this is a popup and and appropriate rel props if they don't exist (see https://web.dev/external-anchors-use-rel-noopener/)\n    const anchorProps = {\n      target,\n      rel: target === '_blank' && !rel ? 'noopener noreferrer' : rel,\n    };\n\n    // Anchor tag receives children content from propsToTransfer\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    return <a {...defaultProps} {...anchorProps} href={href} />;\n  }\n\n  // eslint-disable-next-line react/button-has-type\n  return <button {...defaultProps} />;\n};\n"]},"metadata":{},"sourceType":"module"}