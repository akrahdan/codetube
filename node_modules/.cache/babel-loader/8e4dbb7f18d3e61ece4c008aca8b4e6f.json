{"ast":null,"code":"import{Card,FlexBox,ProLabel,Text}from'@codecademy/gamut';import{pxRem}from'@codecademy/gamut-styles';import React from'react';import{Footer}from'./Footer/index';import{Image}from'./Image/index';import{Subtitle}from'./Subtitle';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var cardHeight=180;var cardStyles={inProgress:'yellow',completed:'navy'};export var CurriculumCard=function CurriculumCard(_ref){var difficulty=_ref.difficulty,_ref$headingLevel=_ref.headingLevel,headingLevel=_ref$headingLevel===void 0?'h3':_ref$headingLevel,image=_ref.image,_ref$isFullSize=_ref.isFullSize,isFullSize=_ref$isFullSize===void 0?false:_ref$isFullSize,progressState=_ref.progressState,scope=_ref.scope,scopeCount=_ref.scopeCount,showProLogo=_ref.showProLogo,tag=_ref.tag,tagColor=_ref.tagColor,text=_ref.text,title=_ref.title;var boxVariant=progressState?cardStyles[progressState]:false;var mode=progressState==='completed'?'dark':'light';return/*#__PURE__*/_jsxs(Card,{display:\"grid\",gridTemplateRows:\"repeat(3, max-content) 1fr max-content\",minHeight:isFullSize?pxRem(cardHeight*2+32):pxRem(cardHeight),variant:boxVariant!==null&&boxVariant!==void 0?boxVariant:'white',shadow:\"medium\",position:\"relative\",children:[/*#__PURE__*/_jsxs(Text,{display:\"flex\",fontSize:14,mb:12,fontFamily:\"accent\",textTransform:\"capitalize\",children:[showProLogo&&/*#__PURE__*/_jsx(ProLabel,{alignSelf:\"center\",mr:8,mode:mode}),text]}),/*#__PURE__*/_jsx(Text,{as:headingLevel,mb:4,fontSize:20,children:title}),/*#__PURE__*/_jsx(FlexBox,{flexWrap:\"wrap\",children:!progressState&&/*#__PURE__*/_jsx(Subtitle,{scope:scope,scopeCount:scopeCount,difficulty:difficulty})}),/*#__PURE__*/_jsx(FlexBox,{center:true,pb:16,children:isFullSize&&image&&/*#__PURE__*/_jsx(Image,{image:image,progressState:progressState})}),/*#__PURE__*/_jsx(Footer,{progressState:progressState,tag:tag,tagColor:tagColor})]});};","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/CurriculumCard/index.tsx"],"names":["Card","FlexBox","ProLabel","Text","pxRem","React","Footer","Image","Subtitle","cardHeight","cardStyles","inProgress","completed","CurriculumCard","difficulty","headingLevel","image","isFullSize","progressState","scope","scopeCount","showProLogo","tag","tagColor","text","title","boxVariant","mode"],"mappings":"AAAA,OAASA,IAAT,CAAeC,OAAf,CAAqCC,QAArC,CAA+CC,IAA/C,KAA2D,mBAA3D,CACA,OAASC,KAAT,KAAsB,0BAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,MAAT,KAAuB,gBAAvB,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,OAASC,QAAT,KAAwC,YAAxC,C,wFAIA,GAAMC,CAAAA,UAAU,CAAG,GAAnB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,UAAU,CAAE,QADK,CAEjBC,SAAS,CAAE,MAFM,CAAnB,CAiBA,MAAO,IAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAavD,IAZJC,CAAAA,UAYI,MAZJA,UAYI,wBAXJC,YAWI,CAXJA,YAWI,4BAXW,IAWX,mBAVJC,KAUI,MAVJA,KAUI,sBATJC,UASI,CATJA,UASI,0BATS,KAST,iBARJC,aAQI,MARJA,aAQI,CAPJC,KAOI,MAPJA,KAOI,CANJC,UAMI,MANJA,UAMI,CALJC,WAKI,MALJA,WAKI,CAJJC,GAII,MAJJA,GAII,CAHJC,QAGI,MAHJA,QAGI,CAFJC,IAEI,MAFJA,IAEI,CADJC,KACI,MADJA,KACI,CACJ,GAAMC,CAAAA,UAAU,CAAGR,aAAa,CAAER,UAAU,CAACQ,aAAD,CAAZ,CAA6B,KAA7D,CACA,GAAMS,CAAAA,IAAI,CAAGT,aAAa,GAAK,WAAlB,CAAgC,MAAhC,CAAyC,OAAtD,CAEA,mBACE,MAAC,IAAD,EACE,OAAO,CAAC,MADV,CAEE,gBAAgB,CAAC,wCAFnB,CAGE,SAAS,CAAED,UAAU,CAAGb,KAAK,CAACK,UAAU,CAAG,CAAb,CAAiB,EAAlB,CAAR,CAAgCL,KAAK,CAACK,UAAD,CAH5D,CAIE,OAAO,CAAEiB,UAAF,SAAEA,UAAF,UAAEA,UAAF,CAAgB,OAJzB,CAKE,MAAM,CAAC,QALT,CAME,QAAQ,CAAC,UANX,wBAQE,MAAC,IAAD,EACE,OAAO,CAAC,MADV,CAEE,QAAQ,CAAE,EAFZ,CAGE,EAAE,CAAE,EAHN,CAIE,UAAU,CAAC,QAJb,CAKE,aAAa,CAAC,YALhB,WAOGL,WAAW,eAAI,KAAC,QAAD,EAAU,SAAS,CAAC,QAApB,CAA6B,EAAE,CAAE,CAAjC,CAAoC,IAAI,CAAEM,IAA1C,EAPlB,CAQGH,IARH,GARF,cAkBE,KAAC,IAAD,EAAM,EAAE,CAAET,YAAV,CAAwB,EAAE,CAAE,CAA5B,CAA+B,QAAQ,CAAE,EAAzC,UACGU,KADH,EAlBF,cAqBE,KAAC,OAAD,EAAS,QAAQ,CAAC,MAAlB,UACG,CAACP,aAAD,eACC,KAAC,QAAD,EACE,KAAK,CAAEC,KADT,CAEE,UAAU,CAAEC,UAFd,CAGE,UAAU,CAAEN,UAHd,EAFJ,EArBF,cA8BE,KAAC,OAAD,EAAS,MAAM,KAAf,CAAgB,EAAE,CAAE,EAApB,UACGG,UAAU,EAAID,KAAd,eACC,KAAC,KAAD,EAAO,KAAK,CAAEA,KAAd,CAAqB,aAAa,CAAEE,aAApC,EAFJ,EA9BF,cAmCE,KAAC,MAAD,EAAQ,aAAa,CAAEA,aAAvB,CAAsC,GAAG,CAAEI,GAA3C,CAAgD,QAAQ,CAAEC,QAA1D,EAnCF,GADF,CAuCD,CAxDM","sourcesContent":["import { Card, FlexBox, HeadingTags, ProLabel, Text } from '@codecademy/gamut';\nimport { pxRem } from '@codecademy/gamut-styles';\nimport React from 'react';\n\nimport { TagColor } from './BottomTag/index';\nimport { Footer } from './Footer/index';\nimport { Image } from './Image/index';\nimport { Subtitle, SubtitleProps } from './Subtitle';\n\nexport type ProgressState = 'inProgress' | 'completed';\n\nconst cardHeight = 180;\n\nconst cardStyles = {\n  inProgress: 'yellow',\n  completed: 'navy',\n} as const;\n\nexport type CurriculumCardProps = SubtitleProps & {\n  text: string;\n  title: string;\n  headingLevel?: HeadingTags;\n  image?: string;\n  isFullSize?: boolean;\n  progressState?: ProgressState;\n  showProLogo?: boolean;\n  tag?: string;\n  tagColor?: TagColor;\n};\n\nexport const CurriculumCard: React.FC<CurriculumCardProps> = ({\n  difficulty,\n  headingLevel = 'h3',\n  image,\n  isFullSize = false,\n  progressState,\n  scope,\n  scopeCount,\n  showProLogo,\n  tag,\n  tagColor,\n  text,\n  title,\n}) => {\n  const boxVariant = progressState? cardStyles[progressState]: false;\n  const mode = progressState === 'completed' ? 'dark' : 'light';\n\n  return (\n    <Card\n      display=\"grid\"\n      gridTemplateRows=\"repeat(3, max-content) 1fr max-content\"\n      minHeight={isFullSize ? pxRem(cardHeight * 2 + 32) : pxRem(cardHeight)}\n      variant={boxVariant ?? 'white'}\n      shadow=\"medium\"\n      position=\"relative\"\n    >\n      <Text\n        display=\"flex\"\n        fontSize={14}\n        mb={12}\n        fontFamily=\"accent\"\n        textTransform=\"capitalize\"\n      >\n        {showProLogo && <ProLabel alignSelf=\"center\" mr={8} mode={mode} />}\n        {text}\n      </Text>\n      <Text as={headingLevel} mb={4} fontSize={20}>\n        {title}\n      </Text>\n      <FlexBox flexWrap=\"wrap\">\n        {!progressState && (\n          <Subtitle\n            scope={scope}\n            scopeCount={scopeCount}\n            difficulty={difficulty}\n          />\n        )}\n      </FlexBox>\n      <FlexBox center pb={16}>\n        {isFullSize && image && (\n          <Image image={image} progressState={progressState} />\n        )}\n      </FlexBox>\n      <Footer progressState={progressState} tag={tag} tagColor={tagColor} />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}