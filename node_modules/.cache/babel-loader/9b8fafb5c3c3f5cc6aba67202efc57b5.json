{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { projectApi } from 'services/projects';\nconst initialState = {\n  pricing: null,\n  project: null,\n  projects: null,\n  saveProps: {\n    submit: false,\n    locationPath: null\n  }\n};\nconst projectSplice = createSlice({\n  name: \"project\",\n  initialState: initialState,\n  reducers: {\n    saveProject: (state, action) => {\n      state.saveProps = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addMatcher(projectApi.endpoints.createProject.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.project = payload;\n    }).addMatcher(projectApi.endpoints.updateProject.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.project = payload;\n    }).addMatcher(projectApi.endpoints.fetchProjects.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.projects = payload;\n    }).addMatcher(projectApi.endpoints.createHeading.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.heading = payload;\n    }).addMatcher(projectApi.endpoints.createIncluded.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.included = payload;\n    }).addMatcher(projectApi.endpoints.fetchIncluded.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.included = payload;\n    }).addMatcher(projectApi.endpoints.fetchOutcomes.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.outcomes = payload;\n    }).addMatcher(projectApi.endpoints.fetchSyllabus.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.syllabuses = payload;\n    }).addMatcher(projectApi.endpoints.fetchSyllabus.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.syllabuses = payload;\n    }).addMatcher(projectApi.endpoints.editIncluded.matchFulfilled, (state, {\n      payload\n    }) => {\n      const included = state.included.map(included => {\n        if (included.id == payload.id) {\n          return payload;\n        }\n\n        return included;\n      });\n      state.included = included;\n    }).addMatcher(projectApi.endpoints.editHeading.matchFulfilled, (state, {\n      payload\n    }) => {\n      state.header = payload;\n    }).addMatcher(projectApi.endpoints.editLearningOutcome.matchFulfilled, (state, {\n      payload\n    }) => {\n      const outcomes = state.outcomes.map(outcome => {\n        if (outcome.id == payload.id) {\n          return payload;\n        }\n\n        return outcome;\n      });\n      state.outcomes = outcomes;\n    }).addMatcher(projectApi.endpoints.editSyllabus.matchFulfilled, (state, {\n      payload\n    }) => {\n      const syllabuses = state.syllabuses.map(syllabus => {\n        if (syllabus.id == payload.id) {\n          return payload;\n        }\n\n        return syllabus;\n      });\n      state.syllabuses = syllabuses;\n    });\n  }\n});\nexport const {\n  saveProject\n} = projectSplice.actions;\nexport default projectSplice.reducer;\nexport const selectCourse = state => state.course.course;\nexport const selectCourses = state => state.course.courses;\nexport const selectResources = state => state.course.resources;\nexport const selectPricing = state => state.course.pricing;\nexport const selectSave = state => state.course.saveProps;","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/state/project/projectSplice.ts"],"names":["createSlice","projectApi","initialState","pricing","project","projects","saveProps","submit","locationPath","projectSplice","name","reducers","saveProject","state","action","payload","extraReducers","builder","addMatcher","endpoints","createProject","matchFulfilled","updateProject","fetchProjects","createHeading","heading","createIncluded","included","fetchIncluded","fetchOutcomes","outcomes","fetchSyllabus","syllabuses","editIncluded","map","id","editHeading","header","editLearningOutcome","outcome","editSyllabus","syllabus","actions","reducer","selectCourse","course","selectCourses","courses","selectResources","resources","selectPricing","selectSave"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserSubmitKey } from \"components/Forms/RegistrationForm/dist/types\";\nimport type { User } from \"services/auth\";\nimport type { RootState } from \"store\";\nimport type { TitleDescription, HeaderDescription, ProjectEntityResponse, Pricing } from 'services/projects';\nimport { projectApi } from 'services/projects'\ninterface submitProps {\n  submit: boolean;\n  locationPath: string;\n}\ntype ProjectState = {\n  project: ProjectEntityResponse | null;\n  projects: ProjectEntityResponse[] | null;\n  saveProps: submitProps | null;\n  pricing: Pricing | null;\n  outcomes: TitleDescription[] | null,\n  header: HeaderDescription | null,\n  included: TitleDescription[] | null,\n  syllabuses: TitleDescription[] | null,\n};\nconst initialState = {\n  pricing: null,\n  project: null,\n  projects: null,\n  saveProps: {\n    submit: false,\n    locationPath: null,\n  },\n};\nconst projectSplice = createSlice({\n  name: \"project\",\n  initialState: initialState as ProjectState,\n  reducers: {\n    saveProject: (state, action: PayloadAction<submitProps>) => {\n      state.saveProps = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addMatcher(\n        projectApi.endpoints.createProject.matchFulfilled,\n        (state, { payload }) => {\n          state.project = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.updateProject.matchFulfilled,\n        (state, { payload }) => {\n          state.project = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchProjects.matchFulfilled,\n        (state, { payload }) => {\n          state.projects = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.createHeading.matchFulfilled,\n        (state, { payload }) => {\n          state.heading = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.createIncluded.matchFulfilled,\n        (state, { payload }) => {\n          state.included = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchIncluded.matchFulfilled,\n        (state, { payload }) => {\n          state.included = payload;\n        }\n      )\n      .addMatcher(\n        projectApi.endpoints.fetchOutcomes.matchFulfilled,\n        (state, { payload }) => {\n          state.outcomes = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.fetchSyllabus.matchFulfilled,\n        (state, { payload }) => {\n          state.syllabuses = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.fetchSyllabus.matchFulfilled,\n        (state, { payload }) => {\n          state.syllabuses = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.editIncluded.matchFulfilled,\n        (state, { payload }) => {\n          const included = state.included.map((included) => {\n            if (included.id == payload.id) {\n              return payload;\n            }\n            return included;\n          });\n          state.included = included;\n        }\n      ).addMatcher(\n        projectApi.endpoints.editHeading.matchFulfilled,\n        (state, { payload }) => {\n          \n          state.header = payload;\n        }\n      ).addMatcher(\n        projectApi.endpoints.editLearningOutcome.matchFulfilled,\n        (state, { payload }) => {\n          const outcomes = state.outcomes.map((outcome) => {\n            if (outcome.id == payload.id) {\n              return payload;\n            }\n            return outcome;\n          });\n          state.outcomes = outcomes;\n        }\n      ).addMatcher(\n        projectApi.endpoints.editSyllabus.matchFulfilled,\n        (state, { payload }) => {\n          const syllabuses = state.syllabuses.map((syllabus) => {\n            if (syllabus.id == payload.id) {\n              return payload;\n            }\n            return syllabus;\n          });\n          state.syllabuses = syllabuses;\n        }\n      );\n  },\n});\n\nexport const { saveProject } = projectSplice.actions;\n\nexport default projectSplice.reducer;\n\nexport const selectCourse = (state: RootState) => state.course.course;\nexport const selectCourses = (state: RootState) => state.course.courses;\nexport const selectResources = (state: RootState) => state.course.resources;\nexport const selectPricing = (state: RootState) => state.course.pricing;\nexport const selectSave = (state: RootState) => state.course.saveProps;\n"]},"metadata":{},"sourceType":"module"}