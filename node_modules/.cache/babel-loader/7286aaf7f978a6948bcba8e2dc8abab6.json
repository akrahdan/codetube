{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Markdown/libs/overrides/MarkdownAnchor/index.tsx\";\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport React from 'react';\nimport { Anchor } from '../../../../Anchor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst absoluteURLPattern = new RegExp('^(?:[a-z]+:)?//', 'i');\n\nconst matchesOrigin = href => {\n  if (typeof window === 'undefined' || typeof URL === 'undefined') return false;\n\n  try {\n    const url = new window.URL(href);\n\n    if (url.origin === window.location.origin) {\n      return true;\n    }\n  } catch (e) {// Standard markdown behavior is to just render the bad url,\n    // So we don't need to handle this error\n  }\n\n  return false;\n};\n\nexport const MarkdownAnchor = ({\n  children,\n  ...props\n}) => {\n  const anchorProps = { ...props,\n    target: '_blank',\n    rel: 'noopener'\n  }; // remove noopener/noreferrer on relative & same origin urls\n\n  if (matchesOrigin(props.href) || !absoluteURLPattern.test(props.href)) {\n    delete anchorProps.rel;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Anchor, { ...anchorProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n_c = MarkdownAnchor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarkdownAnchor\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Markdown/libs/overrides/MarkdownAnchor/index.tsx"],"names":["React","Anchor","absoluteURLPattern","RegExp","matchesOrigin","href","window","URL","url","origin","location","e","MarkdownAnchor","children","props","anchorProps","target","rel","test"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAsC,OAAtC;AAEA,SAASC,MAAT,QAAuB,oBAAvB;;AAMA,MAAMC,kBAAkB,GAAG,IAAIC,MAAJ,CAAW,iBAAX,EAA8B,GAA9B,CAA3B;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAkB;AACtC,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,GAAP,KAAe,WAApD,EAAiE,OAAO,KAAP;;AAEjE,MAAI;AACF,UAAMC,GAAG,GAAG,IAAIF,MAAM,CAACC,GAAX,CAAeF,IAAf,CAAZ;;AACA,QAAIG,GAAG,CAACC,MAAJ,KAAeH,MAAM,CAACI,QAAP,CAAgBD,MAAnC,EAA2C;AACzC,aAAO,IAAP;AACD;AACF,GALD,CAKE,OAAOE,CAAP,EAAU,CACV;AACA;AACD;;AACD,SAAO,KAAP;AACD,CAbD;;AAeA,OAAO,MAAMC,cAA6C,GAAG,CAAC;AAC5DC,EAAAA,QAD4D;AAE5D,KAAGC;AAFyD,CAAD,KAGvD;AACJ,QAAMC,WAAW,GAAG,EAClB,GAAGD,KADe;AAElBE,IAAAA,MAAM,EAAE,QAFU;AAGlBC,IAAAA,GAAG,EAAE;AAHa,GAApB,CADI,CAOJ;;AACA,MAAIb,aAAa,CAACU,KAAK,CAACT,IAAP,CAAb,IAA6B,CAACH,kBAAkB,CAACgB,IAAnB,CAAwBJ,KAAK,CAACT,IAA9B,CAAlC,EAAuE;AACrE,WAAOU,WAAW,CAACE,GAAnB;AACD;;AAED,sBAAO,QAAC,MAAD,OAAYF,WAAZ;AAAA,cAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhBM;KAAMD,c","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\nimport React, { ComponentProps } from 'react';\n\nimport { Anchor } from '../../../../Anchor';\n\nexport interface MarkdownAnchorProps extends ComponentProps<typeof Anchor> {\n  href: string;\n}\n\nconst absoluteURLPattern = new RegExp('^(?:[a-z]+:)?//', 'i');\n\nconst matchesOrigin = (href: string) => {\n  if (typeof window === 'undefined' || typeof URL === 'undefined') return false;\n\n  try {\n    const url = new window.URL(href);\n    if (url.origin === window.location.origin) {\n      return true;\n    }\n  } catch (e) {\n    // Standard markdown behavior is to just render the bad url,\n    // So we don't need to handle this error\n  }\n  return false;\n};\n\nexport const MarkdownAnchor: React.FC<MarkdownAnchorProps> = ({\n  children,\n  ...props\n}) => {\n  const anchorProps = {\n    ...props,\n    target: '_blank',\n    rel: 'noopener',\n  } as MarkdownAnchorProps & { rel?: string; target?: string };\n\n  // remove noopener/noreferrer on relative & same origin urls\n  if (matchesOrigin(props.href) || !absoluteURLPattern.test(props.href)) {\n    delete anchorProps.rel;\n  }\n\n  return <Anchor {...anchorProps}>{children}</Anchor>;\n};\n"]},"metadata":{},"sourceType":"module"}