{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Alert/Alert.tsx\",\n    _s = $RefreshSig$();\n\nimport { MiniChevronDownIcon, MiniDeleteIcon } from '@codecademy/gamut-icons';\nimport { Background, system, timing, variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport { motion } from 'framer-motion';\nimport React, { useState } from 'react';\nimport { Box } from '../Box';\nimport { FillButton, IconButton } from '../Button';\nimport { Truncate } from '../Truncate';\nimport { alertVariants, placementVariants } from './variants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlertBanner = styled(Background)(placementVariants);\nAlertBanner.defaultProps = {\n  role: 'status',\n  'aria-label': 'alert box',\n  'aria-live': 'polite'\n};\nconst CollapsableContent = styled(motion.div)(system.css({\n  py: 4,\n  overflowY: 'hidden'\n}));\nCollapsableContent.defaultProps = {\n  variants: {\n    collapsed: {\n      height: '2rem'\n    },\n    expanded: {\n      height: 'auto'\n    }\n  },\n  transition: {\n    duration: 0.2,\n    ease: 'easeInOut'\n  }\n};\nconst CollapseButton = styled(IconButton)(variant({\n  prop: 'toggleState',\n  defaultVariant: 'collapsed',\n  base: {\n    svg: {\n      transition: `${timing.fast} transform`\n    }\n  },\n  variants: {\n    collapsed: {},\n    expanded: {\n      svg: {\n        transform: 'rotate(180deg)'\n      }\n    }\n  }\n}));\nexport const Alert = ({\n  children,\n  cta,\n  onClose,\n  hidden,\n  type = 'general',\n  ...props\n}) => {\n  _s();\n\n  var _alertVariants$type, _cta$children, _cta$children2;\n\n  const isInline = props.placement === 'inline';\n  const activeAlert = (_alertVariants$type = alertVariants === null || alertVariants === void 0 ? void 0 : alertVariants[type]) !== null && _alertVariants$type !== void 0 ? _alertVariants$type : alertVariants.general;\n  const {\n    icon: Icon,\n    bg\n  } = activeAlert;\n  const [expanded, setExpanded] = useState(false);\n  const [truncated, setTruncated] = useState(false);\n  const toggleState = expanded || isInline ? 'expanded' : 'collapsed';\n  const tabIndex = hidden ? -1 : undefined;\n  const content = isInline ? children : /*#__PURE__*/_jsxDEV(Truncate, {\n    expanded: expanded,\n    onTruncate: setTruncated,\n    lines: 1,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n\n  const expandButton = truncated && /*#__PURE__*/_jsxDEV(CollapseButton, {\n    tabIndex: tabIndex,\n    \"aria-label\": expanded ? 'Collapse' : 'Expand',\n    toggleState: toggleState,\n    variant: \"secondary\",\n    size: \"small\",\n    icon: MiniChevronDownIcon,\n    onClick: () => setExpanded(!expanded)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n\n  const ctaButton = cta && Boolean((_cta$children = cta.children) !== null && _cta$children !== void 0 ? _cta$children : cta.text) && /*#__PURE__*/_jsxDEV(Box, {\n    gridColumn: ['2',, 'auto'],\n    gridRow: ['2',, 'auto'],\n    children: /*#__PURE__*/_jsxDEV(FillButton, { ...cta,\n      mode: \"dark\",\n      variant: \"secondary\",\n      size: \"small\",\n      tabIndex: tabIndex,\n      children: (_cta$children2 = cta.children) !== null && _cta$children2 !== void 0 ? _cta$children2 : cta.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(AlertBanner, {\n    bg: bg,\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(Icon, {\n      size: 32,\n      \"aria-hidden\": true,\n      p: 8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CollapsableContent, {\n      \"aria-expanded\": expanded,\n      initial: toggleState,\n      animate: toggleState,\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: expandButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: ctaButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), onClose && /*#__PURE__*/_jsxDEV(IconButton, {\n      tabIndex: tabIndex,\n      \"aria-label\": \"Close Alert\",\n      variant: \"secondary\",\n      size: \"small\",\n      onClick: onClose,\n      icon: MiniDeleteIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Alert, \"q5pSEvRbwNMQJYbHynKXUF6mC9g=\");\n\n_c = Alert;\nAlert.defaultProps = {\n  type: 'general',\n  placement: 'floating'\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Alert/Alert.tsx"],"names":["MiniChevronDownIcon","MiniDeleteIcon","Background","system","timing","variant","styled","motion","React","useState","Box","FillButton","IconButton","Truncate","alertVariants","placementVariants","AlertBanner","defaultProps","role","CollapsableContent","div","css","py","overflowY","variants","collapsed","height","expanded","transition","duration","ease","CollapseButton","prop","defaultVariant","base","svg","fast","transform","Alert","children","cta","onClose","hidden","type","props","isInline","placement","activeAlert","general","icon","Icon","bg","setExpanded","truncated","setTruncated","toggleState","tabIndex","undefined","content","expandButton","ctaButton","Boolean","text"],"mappings":"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","sourcesContent":["import { MiniChevronDownIcon, MiniDeleteIcon } from '@codecademy/gamut-icons';\nimport { Background, system, timing, variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport { motion } from 'framer-motion';\nimport React, { useState } from 'react';\n\nimport { Box } from '../Box';\nimport { FillButton, IconButton } from '../Button';\nimport { Truncate } from '../Truncate';\nimport { alertVariants, placementVariants } from './variants';\n\nexport type AlertType = keyof typeof alertVariants;\nexport type InlineAlertType = Exclude<AlertType, 'notice' | 'feature'>;\nexport type AlertPlacements = 'inline' | 'floating';\n\nexport type AlertBase = {\n  type?: AlertType;\n  placement?: AlertPlacements;\n  hidden?: boolean;\n  className?: string;\n  /** Callback to be called when the close icon is clicked */\n  onClose?: () => void;\n  /** Call to Action Configuration */\n  cta?: Omit<\n    React.ComponentProps<typeof FillButton>,\n    'variant' | 'mode' | 'size'\n  > & { text?: string };\n};\n\nexport type FloatingAlert = AlertBase & {\n  type?: AlertType;\n  placement?: 'floating';\n};\n\nexport type InlineAlert = AlertBase & {\n  type?: InlineAlertType;\n  placement?: 'inline';\n};\n\nexport type AlertProps = FloatingAlert | InlineAlert;\n\nconst AlertBanner = styled(Background)<Pick<AlertProps, 'type' | 'placement'>>(\n  placementVariants\n);\n\nAlertBanner.defaultProps = {\n  role: 'status',\n  'aria-label': 'alert box',\n  'aria-live': 'polite',\n};\n\nconst CollapsableContent = styled(motion.div)(\n  system.css({ py: 4, overflowY: 'hidden' })\n);\n\nCollapsableContent.defaultProps = {\n  variants: {\n    collapsed: { height: '2rem' },\n    expanded: { height: 'auto' },\n  },\n  transition: { duration: 0.2, ease: 'easeInOut' },\n};\n\nconst CollapseButton = styled(IconButton)(\n  variant({\n    prop: 'toggleState',\n    defaultVariant: 'collapsed',\n    base: { svg: { transition: `${timing.fast} transform` } },\n    variants: {\n      collapsed: {},\n      expanded: {\n        svg: {\n          transform: 'rotate(180deg)',\n        },\n      },\n    },\n  })\n);\n\nexport const Alert: React.FC<AlertProps> = ({\n  children,\n  cta,\n  onClose,\n  hidden,\n  type = 'general',\n  ...props\n}) => {\n  const isInline = props.placement === 'inline';\n  const activeAlert = alertVariants?.[type] ?? alertVariants.general;\n  const { icon: Icon, bg } = activeAlert;\n\n  const [expanded, setExpanded] = useState(false);\n  const [truncated, setTruncated] = useState(false);\n\n  const toggleState = expanded || isInline ? 'expanded' : 'collapsed';\n  const tabIndex = hidden ? -1 : undefined;\n\n  const content = isInline ? (\n    children\n  ) : (\n    <Truncate expanded={expanded} onTruncate={setTruncated} lines={1}>\n      {children}\n    </Truncate>\n  );\n\n  const expandButton = truncated && (\n    <CollapseButton\n      tabIndex={tabIndex}\n      aria-label={expanded ? 'Collapse' : 'Expand'}\n      toggleState={toggleState}\n      variant=\"secondary\"\n      size=\"small\"\n      icon={MiniChevronDownIcon}\n      onClick={() => setExpanded(!expanded)}\n    />\n  );\n\n  const ctaButton = cta && Boolean(cta.children ?? cta.text) && (\n    <Box gridColumn={['2', , 'auto']} gridRow={['2', , 'auto']}>\n      <FillButton\n        {...cta}\n        mode=\"dark\"\n        variant=\"secondary\"\n        size=\"small\"\n        tabIndex={tabIndex}\n      >\n        {cta.children ?? cta.text}\n      </FillButton>\n    </Box>\n  );\n\n  return (\n    <AlertBanner bg={bg} {...props}>\n      <Icon size={32} aria-hidden p={8} />\n      <CollapsableContent\n        aria-expanded={expanded}\n        initial={toggleState}\n        animate={toggleState}\n      >\n        {content}\n      </CollapsableContent>\n      <Box>{expandButton}</Box>\n      <Box>{ctaButton}</Box>\n      {onClose && (\n        <IconButton\n          tabIndex={tabIndex}\n          aria-label=\"Close Alert\"\n          variant=\"secondary\"\n          size=\"small\"\n          onClick={onClose}\n          icon={MiniDeleteIcon}\n        />\n      )}\n    </AlertBanner>\n  );\n};\n\nAlert.defaultProps = {\n  type: 'general',\n  placement: 'floating',\n};\n"]},"metadata":{},"sourceType":"module"}