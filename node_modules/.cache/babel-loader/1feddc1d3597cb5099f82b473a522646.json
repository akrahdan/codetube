{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Accordion/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AccordionArea } from '../AccordionArea';\nimport { AccordionButton } from '../AccordionButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * @deprecated\n * This component is in the old visual identity and will be updated soon.\n *\n * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status\n */\nexport const Accordion = ({\n  children,\n  className,\n  initiallyExpanded,\n  onClick,\n  size,\n  theme,\n  top\n}) => {\n  _s();\n\n  const [expanded, setExpanded] = useState(!!initiallyExpanded);\n\n  const expandRenderer = renderer => renderer instanceof Function ? renderer(expanded) : renderer;\n\n  return /*#__PURE__*/_jsxDEV(AccordionArea, {\n    className: className,\n    expanded: expanded,\n    top: /*#__PURE__*/_jsxDEV(AccordionButton, {\n      expanded: expanded,\n      onClick: () => {\n        setExpanded(!expanded);\n        onClick === null || onClick === void 0 ? void 0 : onClick(!expanded);\n      },\n      size: size,\n      theme: theme,\n      children: expandRenderer(top)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this),\n    children: expandRenderer(children)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Accordion, \"OP23gipCeva6NqUSzZ4R+8O4/Ao=\");\n\n_c = Accordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/components/overrides/Accordion/index.tsx"],"names":["React","useState","AccordionArea","AccordionButton","Accordion","children","className","initiallyExpanded","onClick","size","theme","top","expanded","setExpanded","expandRenderer","renderer","Function"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SACEC,eADF,QAIO,oBAJP;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,SAAmC,GAAG,CAAC;AAClDC,EAAAA,QADkD;AAElDC,EAAAA,SAFkD;AAGlDC,EAAAA,iBAHkD;AAIlDC,EAAAA,OAJkD;AAKlDC,EAAAA,IALkD;AAMlDC,EAAAA,KANkD;AAOlDC,EAAAA;AAPkD,CAAD,KAQ7C;AAAA;;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAC,CAACM,iBAAH,CAAxC;;AACA,QAAMO,cAAc,GAAIC,QAAD,IACrBA,QAAQ,YAAYC,QAApB,GAA+BD,QAAQ,CAACH,QAAD,CAAvC,GAAoDG,QADtD;;AAGA,sBACE,QAAC,aAAD;AACE,IAAA,SAAS,EAAET,SADb;AAEE,IAAA,QAAQ,EAAEM,QAFZ;AAGE,IAAA,GAAG,eACD,QAAC,eAAD;AACE,MAAA,QAAQ,EAAEA,QADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACbC,QAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACAJ,QAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAG,CAACI,QAAJ,CAAP;AACD,OALH;AAME,MAAA,IAAI,EAAEH,IANR;AAOE,MAAA,KAAK,EAAEC,KAPT;AAAA,gBASGI,cAAc,CAACH,GAAD;AATjB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,cAiBGG,cAAc,CAACT,QAAD;AAjBjB;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAlCM;;GAAMD,S;;KAAAA,S","sourcesContent":["import React, { useState } from 'react';\n\nimport { AccordionArea } from '../AccordionArea';\nimport {\n  AccordionButton,\n  AccordionButtonSize,\n  AccordionButtonTheme,\n} from '../AccordionButton';\n\nexport type ChildrenOrExpandedRender =\n  | React.ReactNode\n  | ((expanded: boolean) => React.ReactNode);\n\nexport type AccordionProps = {\n  children: ChildrenOrExpandedRender;\n\n  /**\n   * CSS class name added to the root area container.\n   */\n  className?: string;\n\n  /**\n   * Whether the accordion should start off with expanded state.\n   */\n  initiallyExpanded?: boolean;\n\n  /**\n   * Called when the top button is clicked.\n   *\n   * @param expanding - New expanded state the accordion will transition to.\n   */\n  onClick?: (expanding: boolean) => void;\n\n  /**\n   * Visual size of the top button.\n   */\n  size?: AccordionButtonSize;\n\n  /**\n   * Visual theme of the top button.\n   */\n  theme?: AccordionButtonTheme;\n\n  /**\n   * Contents to place within the top button.\n   */\n  top: ChildrenOrExpandedRender;\n};\n\n/**\n * @deprecated\n * This component is in the old visual identity and will be updated soon.\n *\n * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status\n */\n\nexport const Accordion: React.FC<AccordionProps> = ({\n  children,\n  className,\n  initiallyExpanded,\n  onClick,\n  size,\n  theme,\n  top,\n}) => {\n  const [expanded, setExpanded] = useState(!!initiallyExpanded);\n  const expandRenderer = (renderer: ChildrenOrExpandedRender) =>\n    renderer instanceof Function ? renderer(expanded) : renderer;\n\n  return (\n    <AccordionArea\n      className={className}\n      expanded={expanded}\n      top={\n        <AccordionButton\n          expanded={expanded}\n          onClick={() => {\n            setExpanded(!expanded);\n            onClick?.(!expanded);\n          }}\n          size={size}\n          theme={theme}\n        >\n          {expandRenderer(top)}\n        </AccordionButton>\n      }\n    >\n      {expandRenderer(children)}\n    </AccordionArea>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}