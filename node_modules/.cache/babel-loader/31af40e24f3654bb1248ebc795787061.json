{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/DropdownButton/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, FillButton, IconButton, StrokeButton } from '@codecademy/gamut';\nimport { ArrowChevronDownFilledIcon, MiniKebabMenuIcon } from '@codecademy/gamut-icons';\nimport { pxRem, styledOptions } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { useRef, useState } from 'react';\nimport { Popover } from '../Popover';\nimport { DropdownList } from './DropdownList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DownArrow = styled(ArrowChevronDownFilledIcon, styledOptions)`\n  margin-left: ${pxRem(8)};\n  transition: transform 0.35s ease-out;\n  ${({\n  isOpen\n}) => isOpen && 'transform: rotate(-180deg)'};\n`;\n_c = DownArrow;\nexport const DropdownButton = ({\n  buttonType = 'fill',\n  children,\n  align = 'left',\n  dropdownItems,\n  onClick,\n  verticalOffset,\n  horizontalOffset\n}) => {\n  _s();\n\n  const targetRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = event => {\n    !isOpen && onClick && onClick(event);\n    setIsOpen(!isOpen);\n  };\n\n  const handleRequestClosed = () => {\n    setIsOpen(false);\n  };\n\n  let clickTarget;\n\n  switch (buttonType) {\n    case 'fill':\n      clickTarget = /*#__PURE__*/_jsxDEV(FillButton, {\n        onClick: handleClick,\n        \"data-testid\": \"dropdown-fill-button\",\n        children: [children, /*#__PURE__*/_jsxDEV(DownArrow, {\n          isOpen: isOpen,\n          size: 12,\n          \"aria-label\": \"dropdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 'stroke':\n      clickTarget = /*#__PURE__*/_jsxDEV(StrokeButton, {\n        onClick: handleClick,\n        \"data-testid\": \"dropdown-stroke-button\",\n        children: [children, /*#__PURE__*/_jsxDEV(DownArrow, {\n          isOpen: isOpen,\n          size: 12,\n          \"aria-label\": \"dropdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 'kebab':\n      clickTarget = /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"More options\",\n        icon: MiniKebabMenuIcon,\n        size: \"small\",\n        variant: \"secondary\",\n        onClick: handleClick,\n        \"data-testid\": \"dropdown-kebab-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"inline-block\",\n      ref: targetRef,\n      children: clickTarget\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), isOpen && dropdownItems.length !== 0 && /*#__PURE__*/_jsxDEV(Popover, {\n      targetRef: targetRef,\n      isOpen: isOpen,\n      onRequestClose: handleRequestClosed,\n      align: align,\n      verticalOffset: verticalOffset,\n      horizontalOffset: horizontalOffset,\n      outline: true,\n      children: /*#__PURE__*/_jsxDEV(DropdownList, {\n        dropdownItems: dropdownItems,\n        onClose: handleRequestClosed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DropdownButton, \"D7EKNSDuI3U3kNN6Mf92MjQT5i0=\");\n\n_c2 = DropdownButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DownArrow\");\n$RefreshReg$(_c2, \"DropdownButton\");","map":{"version":3,"sources":["/Users/akrah/Documents/dev/codefluent/src/components/gamut-overrides/DropdownButton/index.tsx"],"names":["Box","FillButton","IconButton","StrokeButton","ArrowChevronDownFilledIcon","MiniKebabMenuIcon","pxRem","styledOptions","styled","React","useRef","useState","Popover","DropdownList","DownArrow","isOpen","DropdownButton","buttonType","children","align","dropdownItems","onClick","verticalOffset","horizontalOffset","targetRef","setIsOpen","handleClick","event","handleRequestClosed","clickTarget","length"],"mappings":"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","sourcesContent":["import { Box, FillButton, IconButton, StrokeButton } from '@codecademy/gamut';\nimport {\n  ArrowChevronDownFilledIcon,\n  MiniKebabMenuIcon,\n} from '@codecademy/gamut-icons';\nimport { pxRem, styledOptions } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\nimport React, { useRef, useState } from 'react';\n\nimport { Popover } from '../Popover';\nimport { DropdownItem, DropdownList } from './DropdownList';\n\nconst DownArrow = styled(ArrowChevronDownFilledIcon, styledOptions)<{\n  isOpen?: boolean;\n}>`\n  margin-left: ${pxRem(8)};\n  transition: transform 0.35s ease-out;\n  ${({ isOpen }) => isOpen && 'transform: rotate(-180deg)'};\n`;\n\nexport type DropdownButtonProps = {\n  buttonType?: 'fill' | 'stroke' | 'kebab';\n  dropdownItems: DropdownItem[];\n  align?: 'left' | 'right';\n  onClick?: (event: React.MouseEvent) => void;\n  verticalOffset?: number;\n  horizontalOffset?: number;\n};\n\nexport const DropdownButton: React.FC<DropdownButtonProps> = ({\n  buttonType = 'fill',\n  children,\n  align = 'left',\n  dropdownItems,\n  onClick,\n  verticalOffset,\n  horizontalOffset,\n}) => {\n  const targetRef = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClick = (event: React.MouseEvent) => {\n    !isOpen && onClick && onClick(event);\n    setIsOpen(!isOpen);\n  };\n  const handleRequestClosed = () => {\n    setIsOpen(false);\n  };\n\n  let clickTarget: React.ReactNode;\n  switch (buttonType) {\n    case 'fill':\n      clickTarget = (\n        <FillButton onClick={handleClick} data-testid=\"dropdown-fill-button\">\n          {children}\n          <DownArrow isOpen={isOpen} size={12} aria-label=\"dropdown\" />\n        </FillButton>\n      );\n      break;\n    case 'stroke':\n      clickTarget = (\n        <StrokeButton\n          onClick={handleClick}\n          data-testid=\"dropdown-stroke-button\"\n        >\n          {children}\n          <DownArrow isOpen={isOpen} size={12} aria-label=\"dropdown\" />\n        </StrokeButton>\n      );\n      break;\n    case 'kebab':\n      clickTarget = (\n        <IconButton\n          aria-label=\"More options\"\n          icon={MiniKebabMenuIcon}\n          size=\"small\"\n          variant=\"secondary\"\n          onClick={handleClick}\n          data-testid=\"dropdown-kebab-button\"\n        />\n      );\n      break;\n  }\n\n  return (\n    <>\n      <Box display=\"inline-block\" ref={targetRef}>\n        {clickTarget}\n      </Box>\n      {isOpen && dropdownItems.length !== 0 && (\n        <Popover\n          targetRef={targetRef}\n          isOpen={isOpen}\n          onRequestClose={handleRequestClosed}\n          align={align}\n          verticalOffset={verticalOffset}\n          horizontalOffset={horizontalOffset}\n          outline\n        >\n          <DropdownList\n            dropdownItems={dropdownItems}\n            onClose={handleRequestClosed}\n          />\n        </Popover>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}