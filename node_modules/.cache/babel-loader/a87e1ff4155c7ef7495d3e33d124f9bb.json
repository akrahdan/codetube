{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/control-bar/closed-captioning-button.js\";\nimport React, { Component, Fragment } from 'react'; // import { connect } from 'unistore/react'\n// import * as actions from '../../actions'\n\nimport ControlBarButton from './control-bar-button/control-bar-button';\nimport css from './control-bar.scss';\nimport buttonCss from './playback-speed-button.css';\nimport icons from '../icons';\nimport Tooltip from '../tooltip/tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ClosedCaptioningButton extends Component {\n  render() {\n    const {\n      activeClassName,\n      closedCaptioningEnabled,\n      versionId,\n      activeMenu,\n      boundedContext,\n      menuType,\n      toggleClosedCaptioning\n    } = this.props;\n    const {\n      ClosedCaptioningIcon,\n      ClosedCaptioningOnIcon\n    } = icons;\n    const isActive = activeMenu === menuType;\n    if (!versionId || boundedContext !== 'course') return null; //webvtt service requires versionId\n\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      text: \"Closed captions (c)\",\n      children: /*#__PURE__*/_jsxDEV(ControlBarButton, {\n        active: isActive,\n        activeClassName: activeClassName,\n        className: buttonCss,\n        onAction: toggleClosedCaptioning,\n        tooltip: \"Closed captioning\",\n        ariaLabel: \"closed captions\",\n        ariaPressed: closedCaptioningEnabled,\n        children: closedCaptioningEnabled ? /*#__PURE__*/_jsxDEV(ClosedCaptioningOnIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 38\n        }, this) : /*#__PURE__*/_jsxDEV(ClosedCaptioningIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 67\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default ClosedCaptioningButton; // export default connect(\n//   (state) => ({\n//     layout: state.layout,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     activeMenu: state.activeMenu,\n//     versionId: state.versionId,\n//     boundedContext: state.boundedContext,\n//   }),\n//   (store) => ({\n//     toggleClosedCaptioning: actions.toggleClosedCaptioning,\n//   })\n// )(ClosedCaptioningButton)","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/control-bar/closed-captioning-button.js"],"names":["React","Component","Fragment","ControlBarButton","css","buttonCss","icons","Tooltip","ClosedCaptioningButton","render","activeClassName","closedCaptioningEnabled","versionId","activeMenu","boundedContext","menuType","toggleClosedCaptioning","props","ClosedCaptioningIcon","ClosedCaptioningOnIcon","isActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;;AAEA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,OAAO,MAAMC,sBAAN,SAAqCP,SAArC,CAA+C;AACpDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,eADI;AAEJC,MAAAA,uBAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,cALI;AAMJC,MAAAA,QANI;AAOJC,MAAAA;AAPI,QAQF,KAAKC,KART;AAUA,UAAM;AAAEC,MAAAA,oBAAF;AAAwBC,MAAAA;AAAxB,QAAmDb,KAAzD;AAEA,UAAMc,QAAQ,GAAGP,UAAU,KAAKE,QAAhC;AACA,QAAI,CAACH,SAAD,IAAcE,cAAc,KAAK,QAArC,EAA+C,OAAO,IAAP,CAdxC,CAcoD;;AAE3D,wBACE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,qBAAd;AAAA,6BACE,QAAC,gBAAD;AACE,QAAA,MAAM,EAAEM,QADV;AAEE,QAAA,eAAe,EAAEV,eAFnB;AAGE,QAAA,SAAS,EAAEL,SAHb;AAIE,QAAA,QAAQ,EAAEW,sBAJZ;AAKE,QAAA,OAAO,EAAC,mBALV;AAME,QAAA,SAAS,EAAC,iBANZ;AAOE,QAAA,WAAW,EAAEL,uBAPf;AAAA,kBASGA,uBAAuB,gBAAG,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAgC,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAT1D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAhCmD;AAkCtD,eAAeH,sBAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from 'react'\n// import { connect } from 'unistore/react'\n// import * as actions from '../../actions'\n\nimport ControlBarButton from './control-bar-button/control-bar-button'\nimport css from './control-bar.scss'\nimport buttonCss from './playback-speed-button.css'\nimport icons from '../icons'\nimport Tooltip from '../tooltip/tooltip'\n\nexport class ClosedCaptioningButton extends Component {\n  render() {\n    const {\n      activeClassName,\n      closedCaptioningEnabled,\n      versionId,\n      activeMenu,\n      boundedContext,\n      menuType,\n      toggleClosedCaptioning,\n    } = this.props\n\n    const { ClosedCaptioningIcon, ClosedCaptioningOnIcon } = icons\n\n    const isActive = activeMenu === menuType\n    if (!versionId || boundedContext !== 'course') return null //webvtt service requires versionId\n\n    return (\n      <Tooltip text=\"Closed captions (c)\">\n        <ControlBarButton\n          active={isActive}\n          activeClassName={activeClassName}\n          className={buttonCss}\n          onAction={toggleClosedCaptioning}\n          tooltip=\"Closed captioning\"\n          ariaLabel=\"closed captions\"\n          ariaPressed={closedCaptioningEnabled}\n        >\n          {closedCaptioningEnabled ? <ClosedCaptioningOnIcon /> : <ClosedCaptioningIcon />}\n        </ControlBarButton>\n      </Tooltip>\n    )\n  }\n}\nexport default ClosedCaptioningButton;\n// export default connect(\n//   (state) => ({\n//     layout: state.layout,\n//     closedCaptioningEnabled: state.closedCaptioningEnabled,\n//     activeMenu: state.activeMenu,\n//     versionId: state.versionId,\n//     boundedContext: state.boundedContext,\n//   }),\n//   (store) => ({\n//     toggleClosedCaptioning: actions.toggleClosedCaptioning,\n//   })\n// )(ClosedCaptioningButton)\n"]},"metadata":{},"sourceType":"module"}