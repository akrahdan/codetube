{"ast":null,"code":"var _jsxFileName = \"/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Manager/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { isFullscreen } from '../fullscreen-helper';\nimport { FullscreenState, InteractionModes, TOUCH_TIMEOUT_DURATION, MOUSE_TIMEOUT_DURATION } from '../constants';\nimport { hideUI, showUI } from 'state/player/playerSlice';\nimport { initMousetrap, resetMoustrap } from '../keyboard/shortcut-keys';\nimport { registerDefaultShortcuts } from '../keyboard/register-shortcuts';\nimport css from './styles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Manager extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateMediaUI = () => {\n      if (!navigator || !navigator.mediaSession) return;\n      const {\n        title,\n        playing\n      } = this.props;\n      navigator.mediaSession.playbackState = playing ? 'playing' : 'paused';\n      navigator.mediaSession.metadata = new window.MediaMetadata({\n        title\n      });\n    };\n\n    this.handleGetClip = () => ({\n      clipId: this.props.clipId || null\n    });\n\n    this.handleFullscreenChange = () => {\n      const {\n        setFullscreen\n      } = this.props;\n      const fullscreenState = isFullscreen() ? FullscreenState.FULLSCREEN : FullscreenState.NORMAL;\n      setFullscreen && setFullscreen(fullscreenState);\n    };\n\n    this.handleMouseMove = e => {\n      const {\n        setInteractionMode\n      } = this.props;\n      setInteractionMode(InteractionModes.MOUSE);\n      this.showUI();\n      this.hideUITimeout && clearTimeout(this.hideUITimeout);\n      this.hideUITimeout = setTimeout(this.hideUI, MOUSE_TIMEOUT_DURATION);\n    };\n\n    this.handleMouseEnter = e => {\n      const {\n        setInteractionMode\n      } = this.props;\n      setInteractionMode(InteractionModes.MOUSE);\n      this.showUI();\n    };\n\n    this.handleMouseDown = e => {\n      const {\n        activeMenu,\n        setInteractionMode\n      } = this.props;\n      setInteractionMode(InteractionModes.MOUSE);\n      this.showUI();\n    };\n\n    this.handleTouchStart = e => {\n      const {\n        activeMenu,\n        setInteractionMode\n      } = this.props;\n      this.cancelEvent(e);\n      setInteractionMode(InteractionModes.TOUCH);\n      this.showUI();\n      this.hideUITimeout && clearTimeout(this.hideUITimeout);\n      this.hideUITimeout = setTimeout(this.hideUI, TOUCH_TIMEOUT_DURATION);\n    };\n\n    this.handleKeyUp = e => {\n      const {\n        setInteractionMode\n      } = this.props;\n      setInteractionMode(InteractionModes.KEYBOARD);\n    };\n\n    this.cancelEvent = e => {\n      e && e.preventDefault();\n    };\n\n    this.showUI = () => {\n      const {\n        showUI\n      } = this.props;\n      showUI && showUI();\n    };\n\n    this.hideUI = () => {\n      const {\n        hideUI,\n        activeMenu\n      } = this.props;\n\n      if (!activeMenu) {\n        hideUI && hideUI();\n      }\n    };\n\n    this.handleBlur = e => {\n      const {\n        interactionMode\n      } = this.props;\n      const target = e.relatedTarget || document.activeElement;\n\n      if (interactionMode === InteractionModes.KEYBOARD && !this.mainRef.current.contains(target)) {\n        this.hideUI();\n      }\n    };\n\n    this.mainRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      keyboardShortcutsEnabled\n    } = this.props;\n    document.addEventListener('fullscreenchange', this.handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', this.handleFullscreenChange);\n    document.addEventListener('mozfullscreenchange', this.handleFullscreenChange);\n    document.addEventListener('MSFullscreenChange', this.handleFullscreenChange);\n    initMousetrap(this.mainRef.current);\n    if (keyboardShortcutsEnabled !== false) registerDefaultShortcuts(this.props, this.handleGetClip);\n    this.updateMediaUI();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('fullscreenchange', this.handleFullscreenChange);\n    document.removeEventListener('webkitfullscreenchange', this.handleFullscreenChange);\n    document.removeEventListener('mozfullscreenchange', this.handleFullscreenChange);\n    document.removeEventListener('MSFullscreenChange', this.handleFullscreenChange);\n    resetMoustrap();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.keyboardShortcutsEnabled === nextProps.keyboardShortcutsEnabled) return;\n    if (nextProps.keyboardShortcutsEnabled !== false) registerDefaultShortcuts(this.props, this.handleGetClip);\n    if (nextProps.keyboardShortcutsEnabled == false) resetMoustrap();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.title !== this.props.title || prevProps.playing !== this.props.playing) this.updateMediaUI();\n  }\n\n  render() {\n    const {\n      children,\n      visible\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      tabIndex: \"-1\",\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.hideUI,\n      onMouseDown: this.handleMouseDown,\n      onMouseMove: this.handleMouseMove,\n      onTouchEnd: this.cancelEvent,\n      onTouchStart: this.handleTouchStart,\n      onFocus: this.showUI,\n      onBlur: this.handleBlur,\n      onKeyUp: this.handleKeyUp,\n      className: classnames(css.manager, {\n        [css.hidden]: !visible\n      }),\n      ref: this.mainRef,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default connect(state => ({\n  clipId: state.clipId,\n  title: state.title,\n  playing: state.playing,\n  activeMenu: state.activeMenu,\n  interactionMode: state.player.interactionMode,\n  visible: state.visible,\n  registeredShortcuts: state.registeredShortcuts,\n  hiddenButtons: state.hiddenButtons,\n  keyboardShortcutsEnabled: state.keyboardShortcutsEnabled\n}), dispatch => ({\n  hideUI: () => dispatch(hideUI()),\n  showUI: () => dispatch(showUI())\n}))(Manager);","map":{"version":3,"sources":["/Users/akrah/Documents/dev/readux/src/codefluent/src/portal/scenes/CoursePlayer/Manager/index.js"],"names":["React","Component","connect","classnames","isFullscreen","FullscreenState","InteractionModes","TOUCH_TIMEOUT_DURATION","MOUSE_TIMEOUT_DURATION","hideUI","showUI","initMousetrap","resetMoustrap","registerDefaultShortcuts","css","Manager","constructor","props","updateMediaUI","navigator","mediaSession","title","playing","playbackState","metadata","window","MediaMetadata","handleGetClip","clipId","handleFullscreenChange","setFullscreen","fullscreenState","FULLSCREEN","NORMAL","handleMouseMove","e","setInteractionMode","MOUSE","hideUITimeout","clearTimeout","setTimeout","handleMouseEnter","handleMouseDown","activeMenu","handleTouchStart","cancelEvent","TOUCH","handleKeyUp","KEYBOARD","preventDefault","handleBlur","interactionMode","target","relatedTarget","document","activeElement","mainRef","current","contains","createRef","componentDidMount","keyboardShortcutsEnabled","addEventListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","render","children","visible","manager","hidden","state","player","registeredShortcuts","hiddenButtons","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport classnames from 'classnames'\n\nimport { isFullscreen } from '../fullscreen-helper'\nimport { FullscreenState, InteractionModes, TOUCH_TIMEOUT_DURATION, MOUSE_TIMEOUT_DURATION } from '../constants'\nimport { hideUI, showUI } from 'state/player/playerSlice'\nimport { initMousetrap, resetMoustrap } from '../keyboard/shortcut-keys'\nimport { registerDefaultShortcuts } from '../keyboard/register-shortcuts'\n\nimport css from './styles.module.css'\n\nexport class Manager extends Component {\n  constructor(props) {\n    super(props)\n    this.mainRef = React.createRef()\n  }\n\n  componentDidMount() {\n    const { keyboardShortcutsEnabled } = this.props\n    document.addEventListener('fullscreenchange', this.handleFullscreenChange)\n    document.addEventListener('webkitfullscreenchange', this.handleFullscreenChange)\n    document.addEventListener('mozfullscreenchange', this.handleFullscreenChange)\n    document.addEventListener('MSFullscreenChange', this.handleFullscreenChange)\n    initMousetrap(this.mainRef.current)\n    if (keyboardShortcutsEnabled !== false) registerDefaultShortcuts(this.props, this.handleGetClip)\n    this.updateMediaUI()\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('fullscreenchange', this.handleFullscreenChange)\n    document.removeEventListener('webkitfullscreenchange', this.handleFullscreenChange)\n    document.removeEventListener('mozfullscreenchange', this.handleFullscreenChange)\n    document.removeEventListener('MSFullscreenChange', this.handleFullscreenChange)\n    resetMoustrap()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.keyboardShortcutsEnabled === nextProps.keyboardShortcutsEnabled) return\n    if (nextProps.keyboardShortcutsEnabled !== false) registerDefaultShortcuts(this.props, this.handleGetClip)\n    if (nextProps.keyboardShortcutsEnabled == false) resetMoustrap()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.title !== this.props.title || prevProps.playing !== this.props.playing) this.updateMediaUI()\n  }\n\n  updateMediaUI = () => {\n    if (!navigator || !navigator.mediaSession) return\n    const { title, playing } = this.props\n    navigator.mediaSession.playbackState = playing ? 'playing' : 'paused'\n    navigator.mediaSession.metadata = new window.MediaMetadata({ title })\n  }\n\n  handleGetClip = () => ({ clipId: this.props.clipId || null })\n\n  handleFullscreenChange = () => {\n    const { setFullscreen } = this.props\n\n    const fullscreenState = isFullscreen() ? FullscreenState.FULLSCREEN : FullscreenState.NORMAL\n\n    setFullscreen && setFullscreen(fullscreenState)\n  }\n\n  handleMouseMove = (e) => {\n    const { setInteractionMode } = this.props\n\n    setInteractionMode(InteractionModes.MOUSE)\n\n    this.showUI()\n\n    this.hideUITimeout && clearTimeout(this.hideUITimeout)\n\n    this.hideUITimeout = setTimeout(this.hideUI, MOUSE_TIMEOUT_DURATION)\n  }\n\n  handleMouseEnter = (e) => {\n    const { setInteractionMode } = this.props\n\n    setInteractionMode(InteractionModes.MOUSE)\n\n    this.showUI()\n  }\n\n  handleMouseDown = (e) => {\n    const { activeMenu, setInteractionMode } = this.props\n\n    setInteractionMode(InteractionModes.MOUSE)\n\n    this.showUI()\n  }\n\n  handleTouchStart = (e) => {\n    const { activeMenu, setInteractionMode } = this.props\n\n    this.cancelEvent(e)\n\n    setInteractionMode(InteractionModes.TOUCH)\n\n    this.showUI()\n\n    this.hideUITimeout && clearTimeout(this.hideUITimeout)\n\n    this.hideUITimeout = setTimeout(this.hideUI, TOUCH_TIMEOUT_DURATION)\n  }\n\n  handleKeyUp = (e) => {\n    const { setInteractionMode } = this.props\n\n    setInteractionMode(InteractionModes.KEYBOARD)\n  }\n\n  cancelEvent = (e) => {\n    e && e.preventDefault()\n  }\n\n  showUI = () => {\n    const { showUI } = this.props\n\n    showUI && showUI()\n  }\n\n  hideUI = () => {\n    const { hideUI, activeMenu } = this.props\n\n    if (!activeMenu) {\n      hideUI && hideUI()\n    }\n  }\n\n  handleBlur = (e) => {\n    const { interactionMode } = this.props\n\n    const target = e.relatedTarget || document.activeElement\n\n    if (interactionMode === InteractionModes.KEYBOARD && !this.mainRef.current.contains(target)) {\n      this.hideUI()\n    }\n  }\n\n  render() {\n    const { children, visible } = this.props\n\n    return (\n      <div\n        tabIndex=\"-1\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.hideUI}\n        onMouseDown={this.handleMouseDown}\n        onMouseMove={this.handleMouseMove}\n        onTouchEnd={this.cancelEvent}\n        onTouchStart={this.handleTouchStart}\n        onFocus={this.showUI}\n        onBlur={this.handleBlur}\n        onKeyUp={this.handleKeyUp}\n        className={classnames(css.manager, { [css.hidden]: !visible })}\n        ref={this.mainRef}\n      >\n        {children}\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    clipId: state.clipId,\n    title: state.title,\n    playing: state.playing,\n    activeMenu: state.activeMenu,\n    interactionMode: state.player.interactionMode,\n    visible: state.visible,\n    registeredShortcuts: state.registeredShortcuts,\n    hiddenButtons: state.hiddenButtons,\n    keyboardShortcutsEnabled: state.keyboardShortcutsEnabled,\n  }),\n  dispatch => ({\n    hideUI: () => dispatch(hideUI()),\n    showUI: () => dispatch(showUI())\n  })\n)(Manager)\n"]},"metadata":{},"sourceType":"module"}