var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useTheme } from '@pluralsight/ps-design-system-theme';
import { canUseDOM } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import polyfillFocusWithin from 'focus-within';
import React from 'react';
import stylesheet, { BASE_CLASSNAME, themeClasses } from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
if (canUseDOM())
    polyfillFocusWithin(document);
var styles = {
    halo: function (themeName, props) {
        var base = BASE_CLASSNAME;
        var theme = base + themeClasses[themeName];
        var shape = BASE_CLASSNAME + "--shape-" + props.shape;
        var gapSize = BASE_CLASSNAME + "--gap-size-" + props.gapSize;
        var gapTheme = gapSize + themeClasses[themeName];
        var visible = BASE_CLASSNAME + "--visible";
        var visibleOnFocus = BASE_CLASSNAME + "--visible-on-focus";
        return glamor.compose(glamor.css(stylesheet[base]), glamor.css(stylesheet[theme]), glamor.css(stylesheet[shape]), glamor.css(stylesheet[gapSize]), glamor.css(stylesheet[gapTheme]), props.inline && glamor.css(stylesheet[BASE_CLASSNAME + "--inline"]), props.error && glamor.css(stylesheet[BASE_CLASSNAME + "--error"]), props.visible && glamor.css(stylesheet[visible]), props.visibleOnFocus && glamor.css(stylesheet[visibleOnFocus]));
    }
};
var Halo = React.forwardRef(function (props, ref) {
    var themeName = useTheme();
    var _a = props.error, error = _a === void 0 ? false : _a, _b = props.gapSize, gapSize = _b === void 0 ? vars.gapSizes.default : _b, _c = props.inline, inline = _c === void 0 ? false : _c, _d = props.shape, shape = _d === void 0 ? vars.shapes.default : _d, _e = props.visible, visible = _e === void 0 ? false : _e, _f = props.visibleOnFocus, visibleOnFocus = _f === void 0 ? true : _f, rest = __rest(props, ["error", "gapSize", "inline", "shape", "visible", "visibleOnFocus"]);
    var style = styles.halo(themeName, {
        error: error,
        gapSize: gapSize,
        inline: inline,
        shape: shape,
        visible: visible,
        visibleOnFocus: visibleOnFocus
    });
    return React.createElement("div", __assign({ ref: ref }, style, rest));
});
Halo.gapSizes = vars.gapSizes;
Halo.shapes = vars.shapes;
export default Halo;
//# sourceMappingURL=index.js.map