var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { RadioContext } from './context';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    buttonContainer: function () {
        return glamor.css(stylesheet['.psds-radio-group__button-container']);
    },
    group: function (disabled) {
        return glamor.css(stylesheet['.psds-radio-group'], disabled && stylesheet['.psds-radio-group--disabled']);
    },
    label: function (themeName) {
        return glamor.css(stylesheet['.psds-radio-group__label'], stylesheet[".psds-radio-group__label.psds-theme--" + themeName]);
    },
    subLabel: function (themeName) {
        return glamor.css(stylesheet['.psds-radio-group__sub-label'], stylesheet[".psds-radio-group__sub-label.psds-theme--" + themeName]);
    }
};
var useValue = function (_a) {
    var value = _a.value, onChange = _a.onChange;
    var _b = React.useState(value), _value = _b[0], setValue = _b[1];
    return __assign({}, (value !== undefined && onChange !== undefined
        ? { checkedValue: value, onChange: onChange }
        : {
            checkedValue: _value,
            onChange: function (evt, val) {
                return setValue(val);
            }
        }));
};
var Group = React.forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.error, error = _c === void 0 ? false : _c, label = _a.label, name = _a.name, onChange = _a.onChange, subLabel = _a.subLabel, value = _a.value, rest = __rest(_a, ["children", "disabled", "error", "label", "name", "onChange", "subLabel", "value"]);
    var themeName = useTheme();
    return (React.createElement("div", __assign({}, styles.group(disabled), rest, { ref: ref, role: "radiogroup" }),
        label && React.createElement("div", __assign({}, styles.label(themeName)), label),
        React.createElement("div", __assign({}, styles.buttonContainer()),
            React.createElement(RadioContext.Provider, { value: __assign({ disabled: disabled,
                    error: error,
                    name: name }, useValue({ value: value, onChange: onChange })) }, children)),
        subLabel && React.createElement("div", __assign({}, styles.subLabel(themeName)), subLabel)));
});
Group.displayName = 'Radio.Group';
export default Group;
//# sourceMappingURL=group.js.map