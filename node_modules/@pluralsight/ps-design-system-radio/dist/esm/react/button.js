var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Halo from '@pluralsight/ps-design-system-halo';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import { combineFns } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { RadioContext } from './context';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    button: function (disabled) {
        return glamor.compose(glamor.css(stylesheet['.psds-radio-button']), disabled && glamor.css(stylesheet['.psds-radio-button--disabled']));
    },
    circle: function (themeName, checked) {
        return glamor.compose(glamor.css(stylesheet['.psds-radio-button__circle']), glamor.css(stylesheet[".psds-radio-button__circle.psds-theme--" + themeName]), checked && glamor.css(stylesheet['.psds-radio-button__circle--checked']));
    },
    circleOuter: function () { return glamor.css(stylesheet['.psds-radio-button__circle-outer']); },
    circleInner: function () { return glamor.css(stylesheet['.psds-radio-button__circle-inner']); },
    halo: function () { return glamor.css(stylesheet['.psds-radio-button__halo']); },
    input: function () { return glamor.css(stylesheet['.psds-radio-button__input']); },
    label: function (themeName) {
        return glamor.compose(glamor.css(stylesheet['.psds-radio-button__label']), glamor.css(stylesheet[".psds-radio-button__label.psds-theme--" + themeName]));
    }
};
var isChecked = function (a, b) { return a === b; };
var Button = React.forwardRef(function (_a, forwardedRef) {
    var value = _a.value, label = _a.label, props = __rest(_a, ["value", "label"]);
    var themeName = useTheme();
    var _b = React.useContext(RadioContext), checkedValue = _b.checkedValue, onChange = _b.onChange, disabled = _b.disabled, error = _b.error, name = _b.name;
    var ref = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return ref.current; });
    var _c = React.useState(false), isFocused = _c[0], setFocus = _c[1];
    var handleFocus = function (evt) {
        if (disabled)
            return;
        combineFns(function (_evt) { return setFocus(true); }, props.onFocus)(evt);
    };
    var handleBlur = function (evt) {
        if (disabled)
            return;
        combineFns(props.onBlur, function () { return setFocus(false); })(evt);
    };
    var handleClick = function (evt) {
        var value = evt.target.value;
        combineFns(onChange, props.onClick)(evt, value);
        ref.current.focus();
    };
    var checked = isChecked(value, checkedValue);
    return (React.createElement("label", __assign({}, styles.button(disabled)),
        React.createElement("div", __assign({}, styles.circleOuter()),
            React.createElement(Halo, __assign({ error: error, inline: true, shape: Halo.shapes.pill, visibleOnFocus: !disabled, visible: isFocused }, styles.halo()),
                React.createElement("div", __assign({}, styles.circle(themeName, checked)), checked && React.createElement("div", __assign({}, styles.circleInner()))))),
        React.createElement("input", __assign({}, props, { checked: checked, onClick: disabled ? undefined : handleClick, onFocus: handleFocus, onBlur: handleBlur, type: "radio", readOnly: true, name: name, ref: ref, value: value }, styles.input())),
        React.createElement("div", __assign({}, styles.label(themeName)), label)));
});
Button.displayName = 'Radio.Button';
export default Button;
//# sourceMappingURL=button.js.map