var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Icon, { sizes as iconSizes } from '@pluralsight/ps-design-system-icon';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
var spin = glamor.keyframes(stylesheet['@keyframes psds-button__keyframes__spin']);
var styles = {
    button: function (_a) {
        var appearance = _a.appearance, disabled = _a.disabled, icon = _a.icon, iconAlign = _a.iconAlign, iconOnly = _a.iconOnly, layout = _a.layout, size = _a.size, themeName = _a.themeName;
        return glamor.css(stylesheet['.psds-button'], stylesheet[".psds-button--layout-" + layout], stylesheet[".psds-button--size-" + size], stylesheet[".psds-button--appearance-" + appearance], stylesheet[".psds-button.psds-theme--" + themeName], stylesheet[".psds-button--appearance-" + appearance + ".psds-theme--" + themeName], disabled && __assign(__assign(__assign({}, stylesheet[".psds-button--disabled"]), stylesheet[".psds-button--disabled.psds-theme--" + themeName]), stylesheet[".psds-button--disabled.psds-button--appearance-" + appearance]), icon &&
            !iconOnly && __assign(__assign({}, stylesheet[".psds-button--iconAlign-" + iconAlign + ".psds-button--not-iconOnly"]), stylesheet[".psds-button--iconAlign-" + iconAlign + ".psds-button--not-iconOnly.psds-button--size-" + size]), iconAlign === vars.iconAligns.right &&
            stylesheet[".psds-button--iconAlign-" + iconAlign], iconOnly && __assign(__assign({}, stylesheet[".psds-button--iconOnly"]), stylesheet[".psds-button--iconOnly.psds-button--size-" + size]));
    },
    loading: function (_a) {
        var appearance = _a.appearance, themeName = _a.themeName, size = _a.size;
        return glamor.css(stylesheet[".psds-button__loading"]({ spin: spin }), stylesheet[".psds-button__loading--size-" + size], stylesheet[".psds-button__loading--appearance-" + appearance], stylesheet[".psds-button__loading--appearance-" + appearance + ".psds-button__loading--theme-" + themeName]);
    },
    icon: function (_a) {
        var iconAlign = _a.iconAlign, iconOnly = _a.iconOnly, labelOnly = _a.labelOnly, loading = _a.loading, size = _a.size;
        return glamor.css(stylesheet['.psds-button__icon'], stylesheet[".psds-button__icon--iconAlign-" + iconAlign], stylesheet[".psds-button__icon--iconAlign-" + iconAlign + ".psds-button--size-" + size], (iconOnly || (loading && labelOnly)) &&
            stylesheet['.psds-button__icon--iconOnly'], loading && labelOnly && stylesheet['.psds-button__icon--loadingLabelOnly']);
    },
    text: function (invisible) {
        return glamor.compose(glamor.css(stylesheet[".psds-button__text"]), invisible && glamor.css(stylesheet[".psds-button__text--invisible"]));
    }
};
var mapIconSize = function (size) {
    var _a;
    var btnToIconSizes = (_a = {},
        _a[vars.sizes.xSmall] = iconSizes.xSmall,
        _a[vars.sizes.small] = iconSizes.small,
        _a[vars.sizes.medium] = iconSizes.medium,
        _a[vars.sizes.large] = iconSizes.medium,
        _a);
    return btnToIconSizes[size] ? btnToIconSizes[size] : iconSizes.medium;
};
var IconContainer = function (props) {
    return props.loading ? (React.createElement("div", __assign({}, styles.icon({
        iconAlign: props.iconAlign,
        iconOnly: props.iconOnly,
        labelOnly: props.labelOnly,
        loading: props.loading,
        size: props.size
    })),
        React.createElement(Icon, { size: mapIconSize(props.size) },
            React.createElement("span", __assign({}, styles.loading({
                appearance: props.appearance,
                size: props.size,
                themeName: props.themeName
            })))))) : props.icon ? (React.createElement("div", __assign({}, styles.icon({
        iconAlign: props.iconAlign,
        iconOnly: props.iconOnly,
        labelOnly: props.labelOnly,
        loading: props.loading,
        size: props.size
    })), React.cloneElement(props.icon, {
        size: mapIconSize(props.size)
    }))) : null;
};
var Button = React.forwardRef(function (props, forwardedRef) {
    var _a = props.appearance, appearance = _a === void 0 ? vars.appearances.primary : _a, children = props.children, _b = props.disabled, disabled = _b === void 0 ? false : _b, icon = props.icon, _c = props.iconAlign, iconAlign = _c === void 0 ? vars.iconAligns.left : _c, _d = props.layout, layout = _d === void 0 ? vars.layouts.inline : _d, _e = props.loading, loading = _e === void 0 ? false : _e, _f = props.size, size = _f === void 0 ? vars.sizes.medium : _f, rest = __rest(props, ["appearance", "children", "disabled", "icon", "iconAlign", "layout", "loading", "size"]);
    var themeName = useTheme();
    var ref = React.useRef();
    React.useImperativeHandle(forwardedRef, function () { return ref.current; });
    var hasLabel = React.Children.count(children) > 0;
    var iconOnly = !hasLabel;
    var glamorStyle = styles.button({
        appearance: appearance,
        disabled: disabled,
        icon: Boolean(icon),
        iconAlign: iconAlign,
        iconOnly: iconOnly,
        layout: layout,
        size: size,
        themeName: themeName
    });
    var iconEl = (React.createElement(IconContainer, { appearance: appearance, icon: icon, iconAlign: iconAlign, iconOnly: iconOnly, labelOnly: hasLabel && !icon, loading: loading, size: size, themeName: themeName }));
    var isLoadingAndLabelOnly = hasLabel && loading && !icon;
    var labelEl = (React.createElement("span", __assign({}, styles.text(isLoadingAndLabelOnly), { "aria-hidden": isLoadingAndLabelOnly }), children));
    var isAnchor = Boolean(rest.href);
    var Component = isAnchor ? 'a' : 'button';
    !isAnchor && delete rest.download;
    var isDisabled = isAnchor ? undefined : disabled || loading;
    var handleClick = disabled && isAnchor
        ? undefined
        : rest.onClick;
    return (React.createElement(Component, __assign({}, rest, { disabled: isDisabled }, glamorStyle, { onClick: handleClick, ref: ref }),
        iconEl,
        labelEl));
});
Button.appearances = vars.appearances;
Button.iconAligns = vars.iconAligns;
Button.layouts = vars.layouts;
Button.sizes = vars.sizes;
export var appearances = vars.appearances;
export var iconAligns = vars.iconAligns;
export var sizes = vars.sizes;
export default Button;
//# sourceMappingURL=index.js.map