var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import Halo from '@pluralsight/ps-design-system-halo';
import { stylesFor } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import Context from './context';
import stylesheet from '../css/index';
import { alignments } from '../vars/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    bar: function (props) {
        var isHorz = props.alignment === alignments.horizontal;
        var isVert = props.alignment === alignments.vertical;
        return glamor.compose(glamor.css(stylesheet['.psds-navitem__bar']), isHorz && glamor.css(stylesheet['.psds-navitem__horz-bar']), isVert && glamor.css(stylesheet['.psds-navitem__vert-bar']), props.selected && stylesheet['.psds-navitem__bar--selected'], stylesFor('navitem__bar', props), props.selected && stylesFor('navitem__bar--selected', props));
    },
    button: function (props) {
        return glamor.compose(glamor.css(stylesheet['.psds-navitem__button']), props.selected &&
            glamor.css(stylesheet['.psds-navitem__button--selected']));
    }
};
export var Bar = function (props) {
    // eslint-disable-next-line camelcase
    var _a = React.useContext(Context), alignment = _a.alignment, selected = _a.selected, UNSAFE_stylesFor = _a.UNSAFE_stylesFor;
    return (React.createElement("div", __assign({}, styles.bar({ alignment: alignment, selected: selected, UNSAFE_stylesFor: UNSAFE_stylesFor }), props)));
};
export var Button = function (props) {
    var _a = React.useContext(Context), renderContainer = _a.renderContainer, ref = _a.ref, selected = _a.selected, rest = _a.rest;
    var Container = React.useMemo(function () { return renderContainer; }, [renderContainer]);
    return (React.createElement(Halo, { inline: true, gapSize: Halo.gapSizes.small },
        React.createElement(Container, __assign({}, styles.button({ selected: selected }), { ref: ref }, rest), props.children)));
};
//# sourceMappingURL=common.js.map