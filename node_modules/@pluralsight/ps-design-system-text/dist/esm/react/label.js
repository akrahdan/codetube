var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
var style = function (_a) {
    var themeName = _a.themeName, size = _a.size, color = _a.color, mono = _a.mono, strong = _a.strong, caps = _a.caps;
    return glamor.compose(glamor.css(stylesheet['.psds-text__label']), glamor.css(stylesheet[".psds-text__label--size-" + size]), glamor.css(stylesheet[".psds-text__label--color-" + color + ".psds-theme--" + themeName]), strong && glamor.css(stylesheet[".psds-text__label--strong"]), caps && glamor.css(stylesheet[".psds-text__label--caps"]), mono && glamor.css(stylesheet[".psds-text__label--mono"]));
};
var Label = function (_a) {
    var _b = _a.size, size = _b === void 0 ? vars.labelSizes.medium : _b, _c = _a.color, color = _c === void 0 ? vars.textColors.primary : _c, _d = _a.mono, mono = _d === void 0 ? false : _d, _e = _a.strong, strong = _e === void 0 ? false : _e, _f = _a.caps, caps = _f === void 0 ? false : _f, rest = __rest(_a, ["size", "color", "mono", "strong", "caps"]);
    var themeName = useTheme();
    return (React.createElement("span", __assign({}, rest, style({ themeName: themeName, mono: mono, size: size, color: color, strong: strong, caps: caps }))));
};
Label.sizes = vars.labelSizes;
Label.colors = vars.textColors;
export var sizes = vars.labelSizes;
export var colors = vars.textColors;
export default Label;
//# sourceMappingURL=label.js.map