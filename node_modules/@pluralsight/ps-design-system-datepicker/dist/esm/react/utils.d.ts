import { ValueOf } from '@pluralsight/ps-design-system-util';
import type { DateObj } from 'dayzed';
import React from 'react';
import { slides } from '../vars/index';
export declare const useIsInRange: (selected?: Date[]) => {
    onMouseLeave: () => void;
    onMouseEnter: (date: Date) => void;
    isInRange: (date: Date) => {
        [x: string]: "";
    };
};
interface OnMultipleDatesSelected {
    setSelected: (arr: Date[]) => void;
    selected?: Date[];
    onSelect?: (evt: React.SyntheticEvent, selectedDate: DateObj) => void;
}
export declare const onRangeDateSelected: ({ selected, setSelected, onSelect }: OnMultipleDatesSelected) => (dateObj: DateObj, evt: React.SyntheticEvent) => void;
export declare const onMultiDateSelected: ({ selected, setSelected, onSelect }: OnMultipleDatesSelected) => (dateObj: DateObj, evt: React.SyntheticEvent) => void;
interface HandleChange<T> {
    selected?: T;
    setSlide: React.Dispatch<React.SetStateAction<ValueOf<typeof slides>>>;
    setSelected: React.Dispatch<React.SetStateAction<T | undefined>>;
    dateFormat?: string;
}
export declare const useDateSelectChange: ({ selected, setSlide, setSelected, dateFormat }: HandleChange<Date>) => [string, (event: React.ChangeEvent<HTMLInputElement>) => void];
interface HandleRangeChange extends HandleChange<Date[]> {
    start: boolean;
}
export declare const useRangeSelectChange: ({ start, selected, setSlide, setSelected, dateFormat }: HandleRangeChange) => [string, (event: React.ChangeEvent<HTMLInputElement>) => void];
export {};
