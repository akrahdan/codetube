var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
import Button from '@pluralsight/ps-design-system-button';
import { CaretLeftIcon, CaretRightIcon } from '@pluralsight/ps-design-system-icon';
import Theme from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { DateContext } from './context';
import stylesheet from '../css/index';
import { slides } from '../vars/index';
var glamor = glamorDefault || glamorExports;
var forward = glamor.keyframes(stylesheet['@keyframes psds-calendar__keyframes__forward']);
var backward = glamor.keyframes(stylesheet['@keyframes psds-calendar__keyframes__backward']);
var styles = {
    calendar: function () { return glamor.css(stylesheet['.psds-calendar']); },
    headerWrapper: function () { return glamor.css(stylesheet[".psds-calendar__header-wrapper"]); },
    gridWrapper: function () { return glamor.css(stylesheet[".psds-calendar__grid-wrapper"]); },
    gridSlide: function (slide) {
        return glamor.css(stylesheet[".psds-calendar__grid-slide"], slide === 'forward' &&
            stylesheet[".psds-calendar__grid-slide--forward"](forward), slide === 'backward' &&
            stylesheet[".psds-calendar__grid-slide--backward"](backward));
    },
    month: function () { return glamor.css(stylesheet['.psds-calendar__month']); },
    header: function () { return glamor.css(stylesheet['.psds-calendar__header']); },
    headerButton: function () { return glamor.css(stylesheet['.psds-calendar__header-button']); },
    headerMonth: function () { return glamor.css(stylesheet['.psds-calendar__header-month']); },
    weekdayHeader: function () { return glamor.css(stylesheet['.psds-calendar__weekday-header']); },
    dateFiller: function () { return glamor.css(stylesheet['.psds-calendar__filler']); },
    dateGrid: function () { return glamor.css(stylesheet['.psds-calendar__date-grid']); }
};
var monthNamesShort = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
var weekdayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
export var Calendar = React.forwardRef(function (_a, ref) {
    var calendars = _a.calendars, getBackProps = _a.getBackProps, getForwardProps = _a.getForwardProps, children = _a.children, slide = _a.slide, rest = __rest(_a, ["calendars", "getBackProps", "getForwardProps", "children", "slide"]);
    var _b = React.useState(slide), _slide = _b[0], setSlide = _b[1];
    var _c = React.useState(), height = _c[0], setHeight = _c[1];
    var _d = getBackProps({ calendars: calendars }), onBackClick = _d.onClick, backRest = __rest(_d, ["onClick"]);
    var _e = getForwardProps({
        calendars: calendars
    }), onForwardClick = _e.onClick, forwardRest = __rest(_e, ["onClick"]);
    var handleForwardClick = function (e) {
        onForwardClick(e);
        setSlide(slides.forward);
    };
    var handleBackClick = function (e) {
        onBackClick(e);
        setSlide(slides.backward);
    };
    var animationRef = React.useRef();
    React.useEffect(function () {
        var el = animationRef.current;
        if (el) {
            var height_1 = el.getBoundingClientRect().height;
            setHeight(height_1);
        }
    }, [_slide, slide]);
    React.useEffect(function () {
        var el = animationRef.current;
        if (el) {
            var height_2 = el.getBoundingClientRect().height;
            setHeight(height_2);
            var updateOffset_1 = function () { return setSlide(undefined); };
            el.addEventListener('animationend', updateOffset_1);
            return function () { return el.removeEventListener('animationend', updateOffset_1); };
        }
    }, []);
    if (calendars.length) {
        return (React.createElement("div", __assign({}, styles.calendar(), rest, { ref: ref }),
            React.createElement("div", __assign({}, styles.headerWrapper()), calendars.map(function (calendar, i) { return (React.createElement("div", __assign({ key: "" + calendar.month + calendar.year }, styles.header()),
                React.createElement(Theme, { name: Theme.names.light },
                    React.createElement("div", __assign({}, styles.month()),
                        i === 0 ? (React.createElement(Button, __assign({}, backRest, styles.headerButton(), { onClick: handleBackClick, icon: React.createElement(CaretLeftIcon, null), appearance: Button.appearances.flat }))) : (React.createElement("div", __assign({}, styles.headerButton()))),
                        React.createElement("div", __assign({ key: "" + calendar.month + calendar.year }, styles.headerMonth()),
                            monthNamesShort[calendar.month],
                            " ",
                            calendar.year),
                        calendars.length - 1 === i ? (React.createElement(Button, __assign({}, forwardRest, styles.headerButton(), { onClick: handleForwardClick, icon: React.createElement(CaretRightIcon, null), appearance: Button.appearances.flat }))) : (React.createElement("div", __assign({}, styles.headerButton()))))),
                weekdayNamesShort.map(function (weekday) { return (React.createElement("div", __assign({ key: "" + calendar.month + calendar.year + weekday }, styles.weekdayHeader()), weekday)); }))); })),
            React.createElement("div", __assign({ style: { height: height } }, styles.gridWrapper()),
                React.createElement("div", __assign({}, styles.gridSlide(_slide), { ref: animationRef }), calendars.map(function (calendar, i) { return (React.createElement("div", __assign({}, styles.dateGrid(), { key: "" + calendar.month + calendar.year }),
                    React.createElement(DateContext.Provider, { value: calendar }, children))); })))));
    }
    return null;
});
//# sourceMappingURL=calendar.js.map