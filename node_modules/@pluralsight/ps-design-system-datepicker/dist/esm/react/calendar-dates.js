var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { DateContext } from './context';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    calendarDate: function (selected, today) {
        return glamor.css(stylesheet['.psds-calendar__date'], selected && stylesheet['.psds-calendar__date--selected'], today && stylesheet['.psds-calendar__date--today']);
    },
    dateFiller: function () { return glamor.css(stylesheet['.psds-calendar__filler']); }
};
export var CalendarDates = function (_a) {
    var getDateProps = _a.getDateProps, children = _a.children, rest = __rest(_a, ["getDateProps", "children"]);
    var calendar = React.useContext(DateContext);
    return (React.createElement(React.Fragment, null, calendar.weeks.map(function (week, weekIndex) {
        return week.map(function (dateObj, index) {
            var key = "" + calendar.month + calendar.year + weekIndex + index;
            if (!dateObj) {
                return React.createElement("div", __assign({ key: key }, styles.dateFiller()));
            }
            var date = dateObj.date, selected = dateObj.selected, selectable = dateObj.selectable, today = dateObj.today;
            return children(__assign(__assign(__assign({ key: key, children: date.getDate(), disabled: !selectable }, styles.calendarDate(selected, today)), getDateProps({ dateObj: dateObj })), rest), dateObj);
        });
    })));
};
//# sourceMappingURL=calendar-dates.js.map