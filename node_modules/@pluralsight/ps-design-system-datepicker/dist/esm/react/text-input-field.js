var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Field from '@pluralsight/ps-design-system-field';
import { CalendarIcon } from '@pluralsight/ps-design-system-icon';
import { uniqueId as defaultUniqueId } from '@pluralsight/ps-design-system-util';
import React from 'react';
export var TextInputField = function (props) {
    var disabled = props.disabled, label = props.label, onChange = props.onChange, onClick = props.onClick, placeholder = props.placeholder, prefix = props.prefix, subLabel = props.subLabel, value = props.value, _a = props._uniqueId, uniqueId = _a === void 0 ? defaultUniqueId : _a, rest = __rest(props, ["disabled", "label", "onChange", "onClick", "placeholder", "prefix", "subLabel", "value", "_uniqueId"]);
    var labelId = uniqueId('text-input__label-');
    var inputId = uniqueId('text-input__input-');
    var Prefix = React.useMemo(function () {
        if (React.isValidElement(prefix))
            return prefix;
        return React.createElement(CalendarIcon, { onClick: onClick, style: { cursor: 'pointer' } });
    }, [prefix]);
    var Label = React.useMemo(function () {
        if (!label)
            return;
        if (React.isValidElement(label))
            return label;
        return (React.createElement(Field.Label, { htmlFor: inputId, id: labelId }, label));
    }, [label]);
    var SubLabel = React.useMemo(function () {
        if (!subLabel)
            return;
        if (React.isValidElement(subLabel))
            return subLabel;
        return React.createElement(Field.SubLabel, null, subLabel);
    }, [subLabel]);
    return (React.createElement(Field, __assign({ disabled: disabled, prefix: Prefix, label: Label, subLabel: SubLabel }, rest),
        React.createElement(Field.Input, { disabled: disabled, id: inputId, onChange: onChange, placeholder: placeholder, value: value })));
};
//# sourceMappingURL=text-input-field.js.map