var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
var radius = vars.style.width / 2 - vars.style.strokeWidth / 2;
var circumference = 2 * Math.PI * radius;
var spin = glamor.keyframes({
    to: {
        transform: 'rotate(270deg)'
    }
});
var styles = {
    circularprogress: function (themeName, _a) {
        var _b = _a.size, size = _b === void 0 ? vars.sizes.medium : _b;
        return glamor.css(stylesheet[".psds-circularprogress--size-" + size]);
    },
    svg: function (themeName, _a) {
        var value = _a.value;
        var noValue = typeof value === 'undefined';
        return glamor.compose(glamor.css(stylesheet['.psds-circularprogress__svg']), noValue &&
            glamor.css(stylesheet['.psds-circularprogress__svg--no-value']({ spin: spin })));
    },
    bg: function (themeName, _props) {
        return glamor.compose(glamor.css(stylesheet['.psds-circularprogress__bg']), glamor.css(stylesheet[".psds-circularprogress__bg.psds-theme--" + themeName]));
    },
    fg: function (themeName, _props) {
        return glamor.compose(glamor.css(stylesheet['.psds-circularprogress__fg']), glamor.css(stylesheet[".psds-circularprogress__fg.psds-theme--" + themeName]));
    }
};
var CircularProgress = React.forwardRef(function (props, ref) {
    var defaultIndeterminateValue = 25;
    var size = props.size, value = props.value, ariaLabel = props["aria-label"], rest = __rest(props, ["size", "value", 'aria-label']);
    var themeName = useTheme();
    var dashOffset = ((100 - (value || defaultIndeterminateValue)) / 100) * circumference;
    var busy = value
        ? value === 100
            ? 'false'
            : value > 0
                ? 'true'
                : 'false'
        : 'true';
    var ariaAttributes = value
        ? {
            'aria-label': ariaLabel,
            'aria-valuemin': 0,
            'aria-valuemax': 100,
            'aria-valuenow': Math.round(value)
        }
        : {
            'aria-label': 'Loading'
        };
    return (React.createElement("div", __assign({ ref: ref }, styles.circularprogress(themeName, props), rest, { role: "progressbar" }, ariaAttributes, { "aria-busy": busy }),
        value ? (React.createElement(ScreenReaderOnly, { "aria-live": 'polite' }, value < 100 ? Math.round(value) + "%" : 'complete')) : null,
        React.createElement("svg", __assign({}, styles.svg(themeName, props), { viewBox: "0 0 " + vars.style.width + " " + vars.style.width, version: "1.1", xmlns: "http://www.w3.org/2000/svg" }),
            React.createElement("circle", __assign({ r: radius, cx: "24", cy: "24" }, styles.bg(themeName, props))),
            React.createElement("circle", __assign({ r: radius, cx: "24", cy: "24" }, styles.fg(themeName, props), { strokeDasharray: circumference + " " + circumference, strokeDashoffset: dashOffset })))));
});
CircularProgress.sizes = vars.sizes;
export var sizes = vars.sizes;
export default CircularProgress;
//# sourceMappingURL=index.js.map