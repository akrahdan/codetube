var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Avatar from '@pluralsight/ps-design-system-avatar';
import Halo from '@pluralsight/ps-design-system-halo';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    navUser: function (props) {
        var clickable = !!props.href || !!props.onClick;
        return glamor.compose(glamor.css(stylesheet['.psds-navuser']), clickable && glamor.css(stylesheet['.psds-navuser--clickable']));
    },
    meta: function () { return glamor.css(stylesheet['.psds-navuser__plan-name']); },
    name: function () { return glamor.css(stylesheet['.psds-navuser__name']); },
    words: function () { return glamor.css(stylesheet['.psds-navuser__words']); }
};
var NavUser = React.forwardRef(function (props, forwardedRef) {
    var meta = props.meta, name = props.name, src = props.src, rest = __rest(props, ["meta", "name", "src"]);
    var ref = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return ref.current; });
    var isAnchor = 'href' in props;
    var isButton = !isAnchor && 'onClick' in props;
    var tagName = isAnchor ? 'a' : isButton ? 'button' : 'div';
    return (React.createElement(Halo, { inline: true, gapSize: Halo.gapSizes.small }, React.createElement(tagName, __assign(__assign({ ref: ref }, styles.navUser(props)), rest), React.createElement(React.Fragment, null,
        React.createElement(Avatar, { src: src, size: Avatar.sizes.xSmall, name: name }),
        React.createElement(Words, { name: name, meta: meta })))));
});
NavUser.displayName = 'NavUser';
export default NavUser;
var Words = function (props) {
    var name = props.name, meta = props.meta, rest = __rest(props, ["name", "meta"]);
    return (React.createElement("div", __assign({}, styles.words(), rest),
        React.createElement("div", __assign({}, styles.name()), name),
        React.createElement("div", __assign({}, styles.meta()), meta)));
};
//# sourceMappingURL=index.js.map