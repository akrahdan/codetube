var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Halo from '@pluralsight/ps-design-system-halo';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    logo: function (children) {
        return glamor.css(stylesheet['.psds-navbrand__logo'], children &&
            glamor.media('(min-width: 1200px)', stylesheet['@media (min-width: 1200px)']['.psds-navbrand__logo--wordmark']));
    },
    navBrand: function (clickable) {
        return glamor.css(stylesheet['.psds-navbrand'], clickable && stylesheet['.psds-navbrand--clickable']);
    },
    wordmark: function () {
        return glamor.css(stylesheet['.psds-navbrand__wordmark'], glamor.media('(min-width: 1200px)', stylesheet['@media (min-width: 1200px)']['.psds-navbrand__wordmark']));
    }
};
var NavBrand = React.forwardRef(function (props, forwardedRef) {
    var logo = props.logo, wordmark = props.wordmark, rest = __rest(props, ["logo", "wordmark"]);
    var ref = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return ref.current; });
    var isAnchor = 'href' in props;
    var isButton = !isAnchor && 'onClick' in props;
    var Wrapper = isAnchor ? 'a' : isButton ? 'button' : 'div';
    return (React.createElement(Halo, { inline: true, gapSize: Halo.gapSizes.small },
        React.createElement(Wrapper, __assign({}, styles.navBrand(Boolean(props.href || props.onClick)), { ref: ref }, rest),
            React.createElement(Logo, null, logo),
            React.createElement(Wordmark, null, wordmark))));
});
export default NavBrand;
var Logo = function (props) { return (React.createElement("div", __assign({}, styles.logo(Boolean(props.children)), props))); };
Logo.displayName = 'NavBrand.Logo';
var Wordmark = function (props) { return React.createElement("div", __assign({}, styles.wordmark(), props)); };
Wordmark.displayName = 'NavBrand.Wordmark';
//# sourceMappingURL=index.js.map