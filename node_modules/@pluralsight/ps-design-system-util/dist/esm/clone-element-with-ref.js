var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { isCallbackRef, isRef } from './is-ref';
export var cloneElementWithRef = function (el, outerRef, props) {
    var innerRef = el.ref;
    var combine = function (node) {
        if (!node)
            return;
        if (isRef(outerRef))
            outerRef.current = node;
        if (isCallbackRef(innerRef))
            innerRef(node);
        else if (isRef(innerRef))
            innerRef.current = node;
    };
    return React.cloneElement(el, __assign(__assign({}, props), { ref: combine }));
};
//# sourceMappingURL=clone-element-with-ref.js.map