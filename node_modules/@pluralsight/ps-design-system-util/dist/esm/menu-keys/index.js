import React from 'react';
import { useCombinedRefs } from '../use-combined-refs';
export var searchListItem = function (el, down) {
    if (down === void 0) { down = true; }
    if (!el)
        return;
    var isDisabled = el.hasAttribute('[data-disabled]');
    var isListItem = el.tagName === 'LI';
    if (isListItem && !isDisabled)
        return el;
    var nextEl = down ? el.nextElementSibling : el.previousElementSibling;
    return searchListItem(nextEl, down);
};
var rightArrow = function (evt) {
    var target = evt.target;
    var subMenu = target.querySelector('* > ul');
    if (!subMenu)
        return;
    var firstElementChild = subMenu.firstElementChild;
    var firstChild = searchListItem(firstElementChild);
    if (!firstChild)
        return;
    firstChild.focus();
};
var leftArrow = function (evt) {
    var _a;
    var target = evt.target;
    var atMenuRoot = target.parentNode === evt.currentTarget;
    if (atMenuRoot)
        return;
    target.blur();
    var parent = (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    if (!parent)
        return;
    parent.focus();
};
var downArrow = function (evt) {
    var _a;
    var target = evt.target;
    var nextEl = target.nextElementSibling;
    var nextSibling = searchListItem(nextEl);
    var firstChildEl = (_a = target.parentNode) === null || _a === void 0 ? void 0 : _a.firstElementChild;
    var firstChild = searchListItem(firstChildEl);
    if (nextSibling)
        nextSibling.focus();
    else if (firstChild)
        firstChild.focus();
};
var upArrow = function (evt) {
    var _a;
    var target = evt.target;
    var prevEl = target.previousElementSibling;
    var prevSibling = searchListItem(prevEl, false);
    var lastEl = (_a = target.parentNode) === null || _a === void 0 ? void 0 : _a.lastElementChild;
    var lastChild = searchListItem(lastEl, false);
    if (prevSibling)
        prevSibling.focus();
    else if (lastChild)
        lastChild.focus();
};
var home = function (evt) {
    var _a;
    var target = evt.target;
    var firstChildEl = (_a = target.parentNode) === null || _a === void 0 ? void 0 : _a.firstElementChild;
    var firstChild = searchListItem(firstChildEl);
    if (firstChild)
        firstChild.focus();
};
var end = function (evt) {
    var _a;
    var target = evt.target;
    var lastChildEl = (_a = target.parentNode) === null || _a === void 0 ? void 0 : _a.lastElementChild;
    var lastChild = searchListItem(lastChildEl, false);
    if (lastChild)
        lastChild.focus();
};
var startsWith = function (el, key) {
    if (el && typeof el.innerText === 'string') {
        return (el.innerText.startsWith(key) || el.innerText.startsWith(key.toUpperCase()));
    }
    return false;
};
var character = function (evt) {
    var _a;
    var target = evt.target;
    var char = evt.key.length === 1 ? evt.key : false;
    if (!char)
        return;
    var nextSiblingEl = target.nextElementSibling;
    var firstParentChild = (_a = target.parentNode) === null || _a === void 0 ? void 0 : _a.firstElementChild;
    var sibling = searchListItem(nextSiblingEl) || searchListItem(firstParentChild);
    var siblings = [];
    while (sibling) {
        if (sibling === target)
            break;
        var nextSiblingsSiblingEl = sibling.nextElementSibling;
        siblings.push(sibling);
        sibling =
            searchListItem(nextSiblingsSiblingEl) || searchListItem(firstParentChild);
    }
    for (var _i = 0, siblings_1 = siblings; _i < siblings_1.length; _i++) {
        var el = siblings_1[_i];
        if (startsWith(el, char)) {
            el.focus();
            break;
        }
    }
};
export var handleMenuKeyDownEvents = function (synthetic) {
    var evt = synthetic.nativeEvent;
    evt.key === 'ArrowDown'
        ? downArrow(evt)
        : evt.key === 'ArrowUp'
            ? upArrow(evt)
            : evt.key === 'Home'
                ? home(evt)
                : evt.key === 'End'
                    ? end(evt)
                    : character(evt);
    evt.preventDefault();
};
export var handleMenuKeyUpEvents = function (synthetic) {
    var evt = synthetic.nativeEvent;
    evt.key === 'ArrowRight' && rightArrow(evt);
    evt.key === 'ArrowLeft' && leftArrow(evt);
    evt.preventDefault();
};
export var useMenuRef = function (focus) {
    if (focus === void 0) { focus = false; }
    var outer = React.createRef();
    var inner = React.useCallback(function (node) {
        if (node && focus) {
            var firstMenuItem = searchListItem(node.firstElementChild);
            firstMenuItem && firstMenuItem.focus();
        }
    }, [focus]);
    return useCombinedRefs(outer, inner);
};
//# sourceMappingURL=index.js.map