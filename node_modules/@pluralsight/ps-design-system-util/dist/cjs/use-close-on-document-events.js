"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCloseOnDocumentEvents = exports.onGlobalEventsClose = exports.useScrollOutside = exports.onScrollOutside = exports.useResize = exports.onResize = exports.useClickOutside = exports.useEvent = exports.onClickOutside = void 0;
var react_1 = __importDefault(require("react"));
var can_use_dom_1 = require("./can-use-dom");
exports.onClickOutside = function (el, callback) {
    if (!can_use_dom_1.canUseDOM())
        return noop;
    var handleClick = function (evt) {
        if (evt.target instanceof HTMLElement ||
            evt.target instanceof HTMLDocument) {
            if (el.contains(evt.target))
                return;
            callback(evt);
        }
    };
    document.addEventListener('click', handleClick, { capture: true });
    return function () {
        document.removeEventListener('click', handleClick, {
            capture: true
        });
    };
};
exports.useEvent = function (eventHandler) { return function (ref, cb) {
    if (cb === void 0) { cb = noop; }
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    react_1.default.useEffect(function () {
        if (!can_use_dom_1.canUseDOM())
            return noop;
        var el = ref.current;
        if (el) {
            return eventHandler(el, cb);
        }
        return noop;
    }, [ref, cb]);
}; };
exports.useClickOutside = function (ref, cb) {
    if (cb === void 0) { cb = noop; }
    return exports.useEvent(exports.onClickOutside)(ref, cb);
};
exports.onResize = function (_el, callback) {
    if (!can_use_dom_1.canUseDOM())
        return noop;
    var currentAnimationFrame;
    var handleResize = function (evt) {
        window.cancelAnimationFrame(currentAnimationFrame);
        currentAnimationFrame = window.requestAnimationFrame(function () { return callback(evt); });
        return currentAnimationFrame;
    };
    window.addEventListener('resize', handleResize, {
        passive: true,
        capture: true
    });
    return function () {
        window.removeEventListener('resize', handleResize, {
            capture: true
        });
    };
};
exports.useResize = function (ref, cb) {
    if (cb === void 0) { cb = noop; }
    return exports.useEvent(exports.onResize)(ref, cb);
};
exports.onScrollOutside = function (el, callback) {
    if (!can_use_dom_1.canUseDOM())
        return noop;
    var currentAnimationFrame;
    var handleScroll = function (evt) {
        window.cancelAnimationFrame(currentAnimationFrame);
        if (evt.target instanceof HTMLElement ||
            evt.target instanceof HTMLDocument) {
            if (el.contains(evt.target))
                return;
            currentAnimationFrame = window.requestAnimationFrame(function () { return callback(evt); });
        }
        return currentAnimationFrame;
    };
    document.addEventListener('scroll', handleScroll, {
        passive: true,
        capture: true
    });
    return function () {
        window.removeEventListener('scroll', handleScroll, {
            capture: true
        });
    };
};
exports.useScrollOutside = function (ref, cb) {
    if (cb === void 0) { cb = noop; }
    return exports.useEvent(exports.onScrollOutside)(ref, cb);
};
exports.onGlobalEventsClose = function (el, callback) {
    if (!can_use_dom_1.canUseDOM())
        return noop;
    var handleClickOutsideMenu = function (evt) {
        if (evt.target instanceof HTMLElement) {
            if (el.contains(evt.target))
                return;
            callback(evt);
        }
    };
    var currentAnimationFrame;
    var requestAnimationFrame = function (evt) {
        window.cancelAnimationFrame(currentAnimationFrame);
        currentAnimationFrame = window.requestAnimationFrame(function () { return callback(evt); });
        return currentAnimationFrame;
    };
    document.addEventListener('click', handleClickOutsideMenu, { capture: true });
    window.addEventListener('resize', requestAnimationFrame, {
        passive: true,
        capture: true
    });
    document.addEventListener('scroll', requestAnimationFrame, {
        passive: true,
        capture: true
    });
    return function () {
        document.removeEventListener('click', handleClickOutsideMenu, {
            capture: true
        });
        window.removeEventListener('resize', requestAnimationFrame, {
            capture: true
        });
        window.removeEventListener('scroll', requestAnimationFrame, {
            capture: true
        });
    };
};
exports.useCloseOnDocumentEvents = function (ref, cb) {
    if (cb === void 0) { cb = noop; }
    return react_1.default.useEffect(function () {
        if (!can_use_dom_1.canUseDOM())
            return noop;
        var el = ref.current;
        if (el) {
            return exports.onGlobalEventsClose(el, cb);
        }
        return noop;
    }, [ref, cb]);
};
// eslint-disable-next-line @typescript-eslint/no-empty-function
var noop = function () { };
//# sourceMappingURL=use-close-on-document-events.js.map