/**
 * NOTE: Polymorphic approach inspired by(lifted from) reach-ui
 *       ref: https://github.com/reach/reach-ui/blob/develop/packages/utils/src/index.tsx
 *
 *       - danethurber 3/19/21
 */
import type { ComponentPropsWithRef, ComponentType, ElementType, ForwardRefExoticComponent, ForwardRefRenderFunction, MutableRefObject, PropsWithChildren, ReactElement, ValidationMap, WeakValidationMap } from 'react';
export declare type As<BaseProps = any> = ElementType<BaseProps>;
export declare type ElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>;
export declare type PropsWithAs<CompType extends As, ComponentProps> = ComponentProps & Omit<ComponentPropsWithRef<CompType>, 'as' | keyof ComponentProps> & {
    as?: CompType;
};
export declare type PropsFromAs<CompType extends As, ComponentProps> = (PropsWithAs<CompType, ComponentProps> & {
    as: CompType;
}) & PropsWithAs<CompType, ComponentProps>;
export interface FunctionComponentWithAs<DefaultComponentType extends As, ComponentProps> {
    /**
     * Inherited from React.FunctionComponent with modifications to support `as`
     */
    <CompType extends As>(props: PropsWithAs<CompType, ComponentProps>, context?: any): ReactElement<any, any> | null;
    (props: PropsWithAs<DefaultComponentType, ComponentProps>, context?: any): ReactElement<any, any> | null;
    /**
     * Inherited from React.FunctionComponent
     */
    displayName?: string;
    propTypes?: WeakValidationMap<PropsWithAs<DefaultComponentType, ComponentProps>>;
    contextTypes?: ValidationMap<any>;
    defaultProps?: Partial<PropsWithAs<DefaultComponentType, ComponentProps>>;
}
interface ExoticComponentWithAs<DefaultComponentType extends As, ComponentProps> {
    /**
     * **NOTE**: Exotic components are not callable.
     * Inherited from React.ExoticComponent with modifications to support `as`
     */
    (props: PropsWithAs<DefaultComponentType, ComponentProps>): ReactElement | null;
    <CompType extends As>(props: PropsWithAs<CompType, ComponentProps> & {
        as: CompType;
    }): ReactElement | null;
    /**
     * Inherited from React.ExoticComponent
     */
    readonly $$typeof: symbol;
}
interface NamedExoticComponentWithAs<DefaultComponentType extends As, ComponentProps> extends ExoticComponentWithAs<DefaultComponentType, ComponentProps> {
    /**
     * Inherited from React.NamedExoticComponent
     */
    displayName?: string;
}
export interface ForwardRefExoticComponentWithAs<DefaultComponentType extends As, ComponentProps> extends NamedExoticComponentWithAs<DefaultComponentType, ComponentProps> {
    /**
     * Inherited from React.ForwardRefExoticComponent
     * Will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,
     * but can be given its own specific name
     */
    defaultProps?: Partial<PropsWithAs<DefaultComponentType, ComponentProps>>;
    propTypes?: WeakValidationMap<PropsWithAs<DefaultComponentType, ComponentProps>>;
}
export interface MemoExoticComponentWithAs<DefaultComponentType extends As, ComponentProps> extends NamedExoticComponentWithAs<DefaultComponentType, ComponentProps> {
    readonly type: DefaultComponentType extends ComponentType ? DefaultComponentType : FunctionComponentWithAs<DefaultComponentType, ComponentProps>;
}
export interface ForwardRefWithAsRenderFunction<DefaultComponentType extends As, ComponentProps = Record<string, any>> {
    (props: PropsWithChildren<PropsFromAs<DefaultComponentType, ComponentProps>>, ref: ((instance: (DefaultComponentType extends keyof ElementTagNameMap ? ElementTagNameMap[DefaultComponentType] : any) | null) => void) | MutableRefObject<(DefaultComponentType extends keyof ElementTagNameMap ? ElementTagNameMap[DefaultComponentType] : any) | null> | null): ReactElement | null;
    displayName?: string;
    /**
     * defaultProps are not supported on render functions
     */
    defaultProps?: never;
    /**
     * propTypes are not supported on render functions
     */
    propTypes?: never;
}
export declare function forwardRefWithAs<Props, DefaultComponentType extends As = 'div'>(render: ForwardRefWithAsRenderFunction<DefaultComponentType, Props>): ForwardRefExoticComponentWithAs<DefaultComponentType, Props>;
export declare function forwardRefWithAsAndStatics<Props, DefaultComponentType extends As = 'div', Statics = unknown>(render: ForwardRefWithAsRenderFunction<DefaultComponentType, Props>): ForwardRefExoticComponentWithAs<DefaultComponentType, Props> & Statics;
export declare function forwardRefWithStatics<Props, IntrinsicElement = HTMLDivElement, Statics = unknown>(render: ForwardRefRenderFunction<IntrinsicElement, Props>): ForwardRefExoticComponent<Props> & Statics;
export declare function memoWithAs<Props, DefaultComponentType extends As = 'div'>(Component: FunctionComponentWithAs<DefaultComponentType, Props>, propsAreEqual?: (prevProps: Readonly<PropsWithChildren<Props>>, nextProps: Readonly<PropsWithChildren<Props>>) => boolean): MemoExoticComponentWithAs<DefaultComponentType, Props>;
export {};
