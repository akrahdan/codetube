var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import FocusManager from '@pluralsight/ps-design-system-focusmanager';
import Theme from '@pluralsight/ps-design-system-theme';
import { createUniversalPortal, isFunction, stylesFor, usePortal } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
/* eslint-disable-next-line camelcase */
var MODAL_OVERLAY_ID = 'psds-dialog__overlay';
var fade = glamor.keyframes(stylesheet['@keyframes psds-dialog__keyframes__fade']);
var styles = {
    dialog: function (modal, tailPosition) {
        return glamor.compose(glamor.css(stylesheet['.psds-dialog']({ fade: fade })), modal && glamor.css(stylesheet['.psds-dialog--modal']), Boolean(tailPosition) &&
            glamor.compose(stylesheet['.psds-dialog--w-tail'], stylesheet[".psds-dialog--tailPosition-" + tailPosition]));
    },
    content: function (props) {
        return glamor.css(stylesheet['.psds-dialog__content'], stylesFor('dialog__content', props));
    },
    close: function () { return glamor.css(stylesheet['.psds-dialog__close']); },
    overlay: function () { return glamor.css(stylesheet['.psds-dialog__overlay']); }
};
var CloseButton = function (props) { return (React.createElement("button", __assign({}, styles.close(), props, { "aria-label": "Close dialog" }),
    React.createElement("svg", { "aria-label": "close icon", role: "img", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
        React.createElement("path", { d: "M18 7.41L16.59 6 12 10.59 7.41 6 6 7.41 10.59 12 6 16.59 7.41 18 12 13.41 16.59 18 18 16.59 13.41 12" })))); };
var Overlay = function (_a) {
    var disableCloseOnOverlayClick = _a.disableCloseOnOverlayClick, onClose = _a.onClose, props = __rest(_a, ["disableCloseOnOverlayClick", "onClose"]);
    function handleOverlayClick(evt) {
        if (disableCloseOnOverlayClick)
            return;
        if (evt.target.id === MODAL_OVERLAY_ID)
            onClose && onClose(evt);
    }
    return (React.createElement("div", __assign({}, styles.overlay(), props, { id: MODAL_OVERLAY_ID, onClick: handleOverlayClick, role: "region" })));
};
var Dialog = React.forwardRef(function (props, ref) {
    var children = props.children, _a = props.disableCloseButton, disableCloseButton = _a === void 0 ? false : _a, _b = props.disableCloseOnEscape, disableCloseOnEscape = _b === void 0 ? false : _b, _c = props.disableCloseOnOverlayClick, disableCloseOnOverlayClick = _c === void 0 ? false : _c, _d = props.disableFocusOnMount, disableFocusOnMount = _d === void 0 ? false : _d, onClose = props.onClose, _e = props.modal, modal = _e === void 0 ? false : _e, _f = props.returnFocus, returnFocus = _f === void 0 ? true : _f, tailPosition = props.tailPosition, 
    /* eslint-disable-next-line camelcase */
    UNSAFE_stylesFor = props.UNSAFE_stylesFor, rest = __rest(props, ["children", "disableCloseButton", "disableCloseOnEscape", "disableCloseOnOverlayClick", "disableFocusOnMount", "onClose", "modal", "returnFocus", "tailPosition", "UNSAFE_stylesFor"]);
    var autofocus = !disableFocusOnMount;
    var trapped = !!modal || !!onClose;
    var closeOnEscape = isFunction(onClose) && !disableCloseOnEscape;
    var portal = usePortal();
    // TODO: combine fns
    function handleKeyUp(evt) {
        if (!isEscape(evt))
            return;
        onClose && onClose(evt);
    }
    var content = (React.createElement(FocusManager, __assign({}, styles.dialog(modal, tailPosition), rest, (closeOnEscape && { onKeyUp: handleKeyUp }), (modal && { 'aria-label': undefined }), { autofocus: autofocus, trapped: trapped, returnFocus: returnFocus, ref: ref }),
        React.createElement(Theme, { name: Theme.names.light },
            React.createElement("div", __assign({}, styles.content(props)),
                !disableCloseButton && isFunction(onClose) && (
                // eslint-disable-next-line react/jsx-handler-names
                React.createElement(CloseButton, { onClick: onClose })),
                children))));
    return (React.createElement(React.Fragment, null, modal
        ? createUniversalPortal(React.createElement(Overlay, { "aria-label": rest['aria-label'], disableCloseOnOverlayClick: disableCloseOnOverlayClick, onClose: onClose }, content), portal.current)
        : content));
});
Dialog.displayName = 'Dialog';
Dialog.tailPositions = vars.tailPositions;
export var tailPositions = Dialog.tailPositions;
export default Dialog;
function isEscape(evt) {
    return evt.key === 'Escape';
}
//# sourceMappingURL=index.js.map