var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Button from '@pluralsight/ps-design-system-button';
import { breakpoints } from '@pluralsight/ps-design-system-core';
import Scrollable from '@pluralsight/ps-design-system-scrollable';
import Theme, { useTheme } from '@pluralsight/ps-design-system-theme';
import { canUseDOM, isFunction, useMatchMedia, usePrevious } from '@pluralsight/ps-design-system-util';
import polyfillFocusWithin from 'focus-within';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import polyfillElementClosest from '../js/polyfill-element-closest';
import useBodyScrollLock from './use-body-scroll-lock';
import useOnClickOutside from './use-on-click-outside';
import useOnEscape from './use-on-escape';
import useOnInnerFocus from './use-on-inner-focus';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
if (canUseDOM()) {
    polyfillElementClosest();
    polyfillFocusWithin(document);
}
var SKIP_TARGET_ID = 'ps-appframe--skip-target';
var TOP_NAV_ID = 'ps-appframe--topnav';
var styles = {
    appframe: function (themeName) {
        return glamor.compose(glamor.css(stylesheet['.psds-appframe']), glamor.css(stylesheet[".psds-appframe.psds-theme--" + themeName]));
    },
    skipBanner: function () { return glamor.css(stylesheet['.psds-appframe__skip-banner']); },
    container: function (variant) {
        return glamor.compose(glamor.css(stylesheet['.psds-appframe__container']), variant && glamor.css(stylesheet[".psds-appframe__container--" + variant]));
    },
    content: function () { return glamor.css(stylesheet['.psds-appframe__content']); },
    sidenav: function (variant) {
        return glamor.compose(glamor.css(stylesheet['.psds-appframe__sidenav']), variant && glamor.css(stylesheet[".psds-appframe__sidenav--" + variant]));
    },
    sidenavOverflowMask: function () {
        return glamor.css(stylesheet['.psds-appframe__sidenav__overflow-mask']);
    },
    sidenavInner: function () { return glamor.css(stylesheet['.psds-appframe__sidenav__inner']); },
    topnav: function () { return glamor.css(stylesheet['.psds-appframe__topnav']); }
};
var AppFrameContext = React.createContext({
    closeSidenav: function () { },
    openSidenav: function () { },
    sidenavOpen: undefined,
    sidenavVariant: vars.sidenavVariants.closed
});
var AppFrame = React.forwardRef(function (props, forwardedRef) {
    var children = props.children, onRequestSideNavClose = props.onRequestSideNavClose, onRequestSideNavOpen = props.onRequestSideNavOpen, sidenav = props.sidenav, initialSidenavOpen = props.sidenavOpen, topnav = props.topnav, rest = __rest(props, ["children", "onRequestSideNavClose", "onRequestSideNavOpen", "sidenav", "sidenavOpen", "topnav"]);
    var ref = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return ref.current; });
    var themeName = useTheme();
    var smallMedia = useMatchMedia("(min-width: " + breakpoints.small + ")");
    var largeMedia = useMatchMedia("(min-width: " + breakpoints.large + ")");
    var prevLargeMedia = usePrevious(largeMedia);
    var defaultSidenavOpen = React.useMemo(function () {
        var controlled = typeof initialSidenavOpen !== 'undefined';
        return controlled ? initialSidenavOpen : largeMedia;
    }, [initialSidenavOpen, largeMedia]);
    var _a = React.useState(defaultSidenavOpen), sidenavOpen = _a[0], setSidenavOpen = _a[1];
    var closeSidenav = React.useCallback(function () {
        var controlled = typeof props.sidenavOpen !== 'undefined';
        if (controlled && isFunction(onRequestSideNavClose))
            onRequestSideNavClose();
        else if (!controlled)
            setSidenavOpen(false);
    }, [props.sidenavOpen, onRequestSideNavClose]);
    var openSidenav = React.useCallback(function () {
        var controlled = typeof props.sidenavOpen !== 'undefined';
        if (controlled && isFunction(onRequestSideNavOpen))
            onRequestSideNavOpen();
        else if (!controlled)
            setSidenavOpen(true);
    }, [props.sidenavOpen, onRequestSideNavOpen]);
    React.useEffect(function () {
        var enteringXLarge = prevLargeMedia !== largeMedia && largeMedia;
        if (enteringXLarge)
            openSidenav();
    }, [prevLargeMedia, largeMedia, openSidenav]);
    React.useEffect(function () {
        var controlled = typeof props.sidenavOpen !== 'undefined';
        var next = controlled ? props.sidenavOpen : defaultSidenavOpen;
        setSidenavOpen(next);
    }, [props.sidenavOpen, defaultSidenavOpen]);
    var sidenavVariant = React.useMemo(function () {
        var variants = vars.sidenavVariants;
        if (!sidenav)
            return variants.closed;
        if (sidenavOpen) {
            return largeMedia ? variants.open : variants.overlay;
        }
        else {
            return smallMedia ? variants.minimized : variants.closed;
        }
    }, [sidenav, sidenavOpen, smallMedia, largeMedia]);
    var skipTargetRef = React.useRef(null);
    var focusSkipTarget = React.useCallback(function () {
        if (!skipTargetRef.current)
            return;
        skipTargetRef.current.focus();
    }, []);
    var contextValue = {
        closeSidenav: closeSidenav,
        openSidenav: openSidenav,
        sidenavOpen: sidenavOpen,
        sidenavVariant: sidenavVariant
    };
    return (React.createElement(AppFrameContext.Provider, { value: contextValue },
        React.createElement("div", __assign({ ref: ref }, styles.appframe(themeName), rest),
            React.createElement(SkipBanner, { href: '#' + SKIP_TARGET_ID }),
            React.createElement(TopNav, { id: TOP_NAV_ID }, topnav),
            React.createElement(Container, null,
                sidenav && React.createElement(SideNav, null, sidenav),
                React.createElement("main", __assign({}, styles.content()),
                    React.createElement(SkipTarget, { id: SKIP_TARGET_ID, onClick: focusSkipTarget, ref: skipTargetRef }),
                    children)))));
});
AppFrame.displayName = 'AppFrame';
var SkipBanner = function (props) {
    return (React.createElement(Theme, { name: Theme.names.dark },
        React.createElement("div", __assign({}, styles.skipBanner(), props),
            React.createElement(Button, { appearance: Button.appearances.secondary, size: Button.sizes.small, tabIndex: 0 }, "skip to main content"))));
};
var SkipTarget = React.forwardRef(function (props, ref) {
    return React.createElement("a", __assign({ ref: ref, tabIndex: -1 }, props));
});
SkipTarget.displayName = 'SkipTarget';
var Container = function (props) {
    var context = React.useContext(AppFrameContext);
    return React.createElement("div", __assign({}, styles.container(context.sidenavVariant), props));
};
var SideNav = function (props) {
    var variants = vars.sidenavVariants;
    var children = props.children;
    var _a = React.useContext(AppFrameContext), closeSidenav = _a.closeSidenav, openSidenav = _a.openSidenav, sidenavVariant = _a.sidenavVariant;
    var hoverable = sidenavVariant === variants.minimized;
    var _b = React.useState(false), hovered = _b[0], setHovered = _b[1];
    var variant = hoverable && hovered ? variants.overlay : sidenavVariant;
    var visible = variant === variants.overlay || variant === variants.open;
    var ref = React.useRef(null);
    var overlayed = variant === variants.overlay;
    useBodyScrollLock(ref, overlayed);
    var closeIfOverlayed = React.useCallback(function () {
        if (overlayed)
            closeSidenav();
    }, [overlayed, closeSidenav]);
    useOnClickOutside(ref, function (evt) {
        var target = evt.target;
        var inTopNav = target && !!target.closest("#" + TOP_NAV_ID);
        if (!inTopNav)
            closeIfOverlayed();
    });
    useOnEscape(closeIfOverlayed);
    useOnInnerFocus(ref, { onEnter: openSidenav, onLeave: closeIfOverlayed });
    return (React.createElement(Theme, { name: Theme.names.dark },
        React.createElement("div", __assign({ ref: ref }, styles.sidenav(variant), props, (hoverable && {
            onMouseEnter: function () { return setHovered(true); },
            onMouseLeave: function () { return setHovered(false); }
        })),
            React.createElement("div", __assign({}, styles.sidenavOverflowMask()),
                React.createElement(Scrollable, __assign({}, styles.sidenavInner()), typeof children === 'function' ? children({ visible: visible }) : children)))));
};
SideNav.variants = vars.sidenavVariants;
var TopNav = function (props) {
    var children = props.children;
    var _a = React.useContext(AppFrameContext), closeSidenav = _a.closeSidenav, openSidenav = _a.openSidenav, sidenavOpen = _a.sidenavOpen;
    var meta = { closeSidenav: closeSidenav, openSidenav: openSidenav, sidenavOpen: sidenavOpen };
    return (React.createElement(Theme, { name: Theme.names.dark },
        React.createElement("div", __assign({}, styles.topnav(), props), isFunction(children)
            ? children(meta)
            : children)));
};
AppFrame.SideNav = SideNav;
AppFrame.SideNav.displayName = 'AppFrame.SideNav';
AppFrame.TopNav = TopNav;
AppFrame.TopNav.displayName = 'AppFrame.TopNav';
export default AppFrame;
//# sourceMappingURL=index.js.map