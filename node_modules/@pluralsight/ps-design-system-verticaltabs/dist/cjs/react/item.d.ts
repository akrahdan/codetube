import React from 'react';
interface ItemProps extends React.HTMLAttributes<HTMLLIElement> {
    active?: React.ReactNode;
    collapsed?: boolean;
    collapsible?: boolean;
    header?: React.ReactElement;
    itemType?: string;
}
interface ItemHeaderBaseProps {
    active?: boolean;
    collapsed?: boolean;
    collapsible?: boolean;
    icon?: React.ReactElement;
}
interface AnchorHeaderProps extends ItemHeaderBaseProps, React.HTMLAttributes<HTMLAnchorElement> {
    onclick?: undefined;
    href?: string;
}
interface ButtonHeaderProps extends ItemHeaderBaseProps, React.HTMLAttributes<HTMLButtonElement> {
    onclick?: React.MouseEventHandler;
    href?: undefined;
}
interface SpanHeaderProps extends ItemHeaderBaseProps, React.HTMLAttributes<HTMLSpanElement> {
    onclick?: undefined;
    href?: undefined;
}
declare const Item: React.ForwardRefExoticComponent<ItemProps & React.RefAttributes<HTMLLIElement>>;
interface Tier1Props extends Omit<React.ComponentProps<typeof Item>, 'header'> {
    header: React.ReactElement<typeof Tier1Header>;
}
declare const Tier1: React.FC<Tier1Props> & {
    Header: typeof Tier1Header;
};
declare const Tier1Header: React.ForwardRefExoticComponent<(AnchorHeaderProps & React.RefAttributes<any>) | (ButtonHeaderProps & React.RefAttributes<any>) | (SpanHeaderProps & React.RefAttributes<any>)>;
interface Tier2Props extends Omit<React.ComponentProps<typeof Item>, 'header'> {
    header: React.ReactElement<typeof Tier1Header>;
}
declare const Tier2: React.FC<Tier2Props> & {
    Header: typeof Tier2Header;
};
declare const Tier2Header: React.ForwardRefExoticComponent<(AnchorHeaderProps & React.RefAttributes<any>) | (ButtonHeaderProps & React.RefAttributes<any>) | (SpanHeaderProps & React.RefAttributes<any>)>;
export default Item;
export { Tier1, Tier2 };
