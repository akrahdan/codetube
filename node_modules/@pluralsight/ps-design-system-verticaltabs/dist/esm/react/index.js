var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import Context from './context';
import stylesheet from '../css/index';
import Divider from './divider';
import { Group, CollapsibleGroup } from './group';
import { Tier1, Tier2 } from './item';
var glamor = glamorDefault || glamorExports;
var styles = {
    verticaltabs: function () { return glamor.css(stylesheet['.psds-verticaltabs']); }
};
var VerticalTabs = React.forwardRef(function (props, ref) {
    var children = props.children, _a = props.forceCollapsed, forceCollapsed = _a === void 0 ? false : _a, _b = props.hideLabels, hideLabels = _b === void 0 ? false : _b, rest = __rest(props, ["children", "forceCollapsed", "hideLabels"]);
    var contextValue = React.useMemo(function () { return ({ forceCollapsed: forceCollapsed, hideLabels: hideLabels }); }, [
        forceCollapsed,
        hideLabels
    ]);
    return (React.createElement(Context.Provider, { value: contextValue },
        React.createElement("ul", __assign({}, styles.verticaltabs(), { ref: ref }, rest), children)));
});
VerticalTabs.displayName = 'VerticalTabs';
VerticalTabs.Group = Group;
VerticalTabs.CollapsibleGroup = CollapsibleGroup;
VerticalTabs.Divider = Divider;
VerticalTabs.Tier1 = Tier1;
VerticalTabs.Tier2 = Tier2;
export default VerticalTabs;
//# sourceMappingURL=index.js.map