var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useTheme } from '@pluralsight/ps-design-system-theme';
import { CaretDownIcon } from '@pluralsight/ps-design-system-icon';
import { combineFns, omit } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import React, { useEffect } from 'react';
import { useHideLabels } from './context';
import stylesheet from '../css/index';
import { List, CollapsibleList } from './list';
var glamor = glamorDefault || glamorExports;
var styles = {
    item: function (themeName) {
        var label = 'verticaltabs__item';
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]), glamor.css(stylesheet[".psds-" + label + ".psds-theme--" + themeName]));
    },
    itemIcon: function () { return glamor.css(stylesheet['.psds-verticaltabs__item__icon']); },
    itemIconActive: function () {
        return glamor.css(stylesheet['.psds-verticaltabs__item__icon--active']);
    },
    itemTier: function (themeName, props) {
        var label = "verticaltabs__" + props.type;
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]), glamor.css(stylesheet[".psds-" + label + ".psds-theme--" + themeName]));
    },
    tier1Header: function () {
        var label = "verticaltabs__tier1__header";
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]));
    },
    tier1HeaderInner: function () {
        var label = "verticaltabs__tier1__header__inner";
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]));
    },
    tier2Header: function () {
        var label = "verticaltabs__tier2__header";
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]));
    },
    tierHeaderLabel: function (hideLabels) {
        var label = "verticaltabs__header__label";
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]), hideLabels && glamor.css(stylesheet[".psds-" + label + "--hide-labels"]));
    },
    tierHeaderLabelIcon: function (collapsed) {
        var label = "verticaltabs__header__label__icon";
        return glamor.compose(glamor.css({ label: label }), glamor.css(stylesheet[".psds-" + label]), collapsed && glamor.css(stylesheet[".psds-" + label + "--collapsed"]));
    }
};
var Item = React.forwardRef(function (props, ref) {
    var active = props.active, _a = props.collapsed, initialCollapsed = _a === void 0 ? false : _a, _b = props.collapsible, collapsible = _b === void 0 ? false : _b, children = props.children, header = props.header, onClick = props.onClick, type = props.itemType, rest = __rest(props, ["active", "collapsed", "collapsible", "children", "header", "onClick", "itemType"]);
    var _c = React.useState(initialCollapsed), collapsed = _c[0], setCollapsed = _c[1];
    useEffect(function () {
        setCollapsed(initialCollapsed);
    }, [initialCollapsed]);
    var themeName = useTheme();
    var handleHeaderClick = combineFns(function () {
        setCollapsed(!collapsed);
    }, onClick);
    var ListComp = collapsible ? CollapsibleList : List;
    return (React.createElement("li", __assign({ ref: ref }, rest),
        React.createElement("div", __assign({}, styles.item(themeName), styles.itemTier(themeName, { type: type }), (active && { 'data-active': true })), header &&
            React.cloneElement(header, __assign({ active: active,
                collapsed: collapsed,
                collapsible: collapsible }, (collapsible && { onClick: handleHeaderClick })))),
        children && React.createElement(ListComp, { collapsed: collapsed }, children)));
});
Item.displayName = 'VerticalTabs.Item';
var Tier1 = function (props) { return (React.createElement(Item, __assign({}, props, { itemType: "tier1" }))); };
var Tier1Header = React.forwardRef(function (props, ref) {
    var active = props.active, collapsed = props.collapsed, collapsible = props.collapsible, children = props.children, icon = props.icon, rest = __rest(props, ["active", "collapsed", "collapsible", "children", "icon"]);
    var hideLabels = useHideLabels();
    var Tag = function (wrapperProps) {
        return rest.href ? (React.createElement("a", __assign({}, wrapperProps, { ref: ref }))) : rest.onClick ? (React.createElement("button", __assign({}, wrapperProps, { ref: ref }))) : (React.createElement("span", __assign({}, wrapperProps, { ref: ref })));
    };
    return (React.createElement(Tag, __assign({}, styles.tier1Header(), rest, { "aria-expanded": !collapsed }),
        icon &&
            React.cloneElement(icon, __assign(__assign({ size: CaretDownIcon.sizes.medium }, styles.itemIcon()), (active ? { 'data-active': true } : {}))),
        React.createElement("span", __assign({}, styles.tierHeaderLabel(hideLabels)), children),
        collapsible && (React.createElement(CaretDownIcon, __assign({ "aria-hidden": "true", size: CaretDownIcon.sizes.small }, styles.tierHeaderLabelIcon(Boolean(collapsed)))))));
});
Tier1.Header = Tier1Header;
Tier1.displayName = 'VerticalTabs.Tier1';
Tier1.Header.displayName = 'VerticalTabs.Tier1.Header';
var Tier2 = function (props) {
    return React.createElement(Item, __assign({}, props, { itemType: "tier2" }));
};
var Tier2Header = React.forwardRef(function (props, ref) {
    var hideLabels = useHideLabels();
    // NOTE: some props are given during clone that are not used as should not be
    //       passed to the underlying dom node
    var rest = omit(props, ['active', 'collapsed', 'collapsible']);
    var Tag = function (wrapperProps) {
        return rest.href ? (React.createElement("a", __assign({}, wrapperProps, { ref: ref }))) : rest.onClick ? (React.createElement("button", __assign({}, wrapperProps, { ref: ref }))) : (React.createElement("span", __assign({}, wrapperProps, { ref: ref })));
    };
    var hideItemProps = props.collapsed || hideLabels
        ? {
            'aria-hidden': 'true',
            tabIndex: -1
        }
        : {};
    return (React.createElement(Tag, __assign({}, styles.tier2Header, rest, hideItemProps),
        React.createElement("span", __assign({}, styles.tierHeaderLabel(hideLabels)), props.children)));
});
Tier2.Header = Tier2Header;
Tier2.displayName = 'VerticalTabs.Tier2';
Tier2.Header.displayName = 'VerticalTabs.Tier2.Header';
export default Item;
export { Tier1, Tier2 };
//# sourceMappingURL=item.js.map