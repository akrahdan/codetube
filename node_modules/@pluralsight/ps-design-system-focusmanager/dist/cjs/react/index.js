"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var use_focus_manager_1 = __importDefault(require("./use-focus-manager"));
var FocusManager = react_1.default.forwardRef(function (_a, _ref) {
    var _b = _a.autofocus, autofocus = _b === void 0 ? true : _b, _c = _a.returnFocus, returnFocus = _c === void 0 ? true : _c, _d = _a.trapped, trapped = _d === void 0 ? true : _d, rest = __rest(_a, ["autofocus", "returnFocus", "trapped"]);
    var ref = react_1.default.useRef(null);
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    react_1.default.useImperativeHandle(_ref, function () { return ref.current; });
    use_focus_manager_1.default(ref, {
        autofocus: autofocus,
        returnFocus: returnFocus,
        trapped: trapped
    });
    return react_1.default.createElement("div", __assign({ ref: ref }, rest));
});
exports.default = FocusManager;
//# sourceMappingURL=index.js.map