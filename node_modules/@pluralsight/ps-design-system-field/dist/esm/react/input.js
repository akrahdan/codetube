var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { FieldContext } from './context';
import stylesheet from '../css/input';
var glamor = glamorDefault || glamorExports;
var styles = {
    container: function () { return glamor.css(stylesheet['.psds-field__input__container']); },
    input: function (size) {
        return glamor.compose(glamor.css(stylesheet['.psds-field__input']), glamor.css(stylesheet[".psds-field__input--" + size]));
    }
};
var Input = React.forwardRef(function (props, ref) {
    var size = React.useContext(FieldContext).size;
    var _a = props.renderContainer, renderContainer = _a === void 0 ? defaultRenderContainer : _a, _b = props.renderTag, renderTag = _b === void 0 ? defaultRenderTag : _b, rest = __rest(props, ["renderContainer", "renderTag"]);
    var containerRef = React.useRef(null);
    var Container = React.useMemo(function () { return renderContainer; }, [renderContainer]);
    var Tag = React.useMemo(function () { return renderTag; }, [renderTag]);
    return (React.createElement(Container, __assign({}, styles.container(), { ref: containerRef }),
        React.createElement(Tag, __assign({ ref: ref }, styles.input(size), rest))));
});
Input.displayName = 'Field.Input';
var defaultRenderContainer = React.forwardRef(function (props, ref) { return React.createElement("div", __assign({ ref: ref }, props)); });
var defaultRenderTag = React.forwardRef(function (props, ref) { return React.createElement("input", __assign({ ref: ref }, props)); });
export default Input;
//# sourceMappingURL=input.js.map