var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { equalColumnLayoutCSS as stylesheet } from '../css/index';
import { equalColumnLayout as vars } from '../vars/index';
var glamor = glamorDefault || glamorExports;
var styleLayout = function () { return glamor.css(stylesheet['.psds-equal-column-layout']); };
var styleColumn = function (count) {
    var label = 'psds-equal-column-layout__column';
    var labelCount = label + "--count-" + count;
    return glamor.compose(glamor.css(stylesheet["." + label]), glamor.css(stylesheet["." + labelCount]), glamor.media('(min-width: 769px)', glamor.css(stylesheet['@media (min-width: 769px)']["." + labelCount])));
};
var EqualColumnLayout = function (props) {
    var _a = props.count, count = _a === void 0 ? vars.counts.four : _a, rest = __rest(props, ["count"]);
    var useCustomMarkup = React.Children.count(props.children) === 1;
    var parentProps = __assign(__assign({}, styleLayout()), rest);
    var children = React.Children.map(useCustomMarkup
        ? props.children.props.children
        : props.children, function (child) { return React.cloneElement(child, styleColumn(count)); });
    return useCustomMarkup ? (React.cloneElement(props.children, parentProps, children)) : (React.createElement("div", __assign({}, parentProps), children));
};
EqualColumnLayout.displayName = 'EqualColumnLayout';
EqualColumnLayout.counts = vars.counts;
export var counts = vars.counts;
export default EqualColumnLayout;
//# sourceMappingURL=equal-column-layout.js.map