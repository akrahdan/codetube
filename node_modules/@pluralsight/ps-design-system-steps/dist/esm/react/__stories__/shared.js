var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as core from '@pluralsight/ps-design-system-core';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import { statuses } from '../../vars/index';
var glamor = glamorDefault || glamorExports;
export function useStoryData() {
    var description = 'An optional description to provide more detail about this step.';
    var _a = React.useState([
        {
            description: description,
            title: 'Select type',
            status: statuses.completed
        },
        {
            description: description,
            title: 'Select template',
            status: statuses.current
        },
        {
            description: description,
            title: 'Add details',
            status: statuses.incomplete
        },
        {
            description: description,
            title: 'Select goals',
            status: statuses.incomplete
        },
        {
            description: description,
            title: 'Review',
            status: statuses.incomplete
        }
    ]), steps = _a[0], setSteps = _a[1];
    var selectStep = React.useCallback(function (nextStep) {
        var curIndex = steps.indexOf(nextStep);
        if (curIndex < 0)
            return;
        setSteps(function (prev) {
            return prev.map(function (s, i) {
                var status = i === curIndex
                    ? 'current'
                    : i < curIndex
                        ? 'completed'
                        : 'incomplete';
                return __assign(__assign({}, s), { status: status });
            });
        });
    }, [steps]);
    return { steps: steps, selectStep: selectStep };
}
export var FixedWidthContainer = function (props) {
    var _a = props.width, width = _a === void 0 ? 300 : _a, rest = __rest(props, ["width"]);
    return (React.createElement("div", __assign({}, glamor.css({ padding: core.layout.spacingMedium, width: width }), rest)));
};
//# sourceMappingURL=shared.js.map