var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React from 'react';
import { forceRepaint, setHeightToAuto, setTransitionEnabled, updateOverflowStyle, waitForHeightTransitionToEnd } from '../js/index';
export var useCollapsible = function (isOpen) {
    var _a = React.useState(false), mounted = _a[0], setMount = _a[1];
    React.useEffect(function () {
        setMount(true);
    }, []);
    var ref = React.useCallback(function (node) { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!node) return [3 /*break*/, 5];
                    if (!isOpen) return [3 /*break*/, 2];
                    return [4 /*yield*/, open(node)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, close(node, { mounted: mounted })];
                case 3:
                    _a = _b.sent();
                    _b.label = 4;
                case 4:
                    _a;
                    _b.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    }); }, [isOpen, mounted]);
    return { 'aria-hidden': !isOpen, ref: ref };
};
var open = function (el) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                setHeightToAuto(el);
                updateOverflowStyle(el, { isOpen: true, isTransitioning: true });
                return [4 /*yield*/, waitForHeightTransitionToEnd(el)];
            case 1:
                _a.sent();
                if (isClosed(el))
                    return [2 /*return*/];
                updateOverflowStyle(el, { isOpen: true, isTransitioning: false });
                setTransitionEnabled(el, { enabled: false });
                el.style.height = 'auto';
                forceRepaint(el);
                setTransitionEnabled(el, { enabled: true });
                return [2 /*return*/];
        }
    });
}); };
var close = function (el, opts) { return __awaiter(void 0, void 0, void 0, function () {
    var mounted;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mounted = opts.mounted;
                setTransitionEnabled(el, { enabled: false });
                el.style.height = window.getComputedStyle(el).height;
                forceRepaint(el);
                updateOverflowStyle(el, { isOpen: false, isTransitioning: true });
                mounted && setTransitionEnabled(el, { enabled: true });
                el.style.height = '0px';
                return [4 /*yield*/, waitForHeightTransitionToEnd(el)];
            case 1:
                _a.sent();
                if (isOpen(el))
                    return [2 /*return*/];
                updateOverflowStyle(el, { isOpen: false, isTransitioning: false });
                return [2 /*return*/];
        }
    });
}); };
var isClosed = function (el) { return el.getBoundingClientRect().height === 0; };
var isOpen = function (el) { return !isClosed(el); };
//# sourceMappingURL=use-collapsible.js.map