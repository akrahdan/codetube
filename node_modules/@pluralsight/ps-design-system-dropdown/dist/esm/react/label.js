var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import ScreenReaderOnly from '@pluralsight/ps-design-system-screenreaderonly';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    label: function (themeName) {
        return glamor.css(stylesheet['psds-dropdown__label'], stylesheet[".psds-dropdown__label.psds-theme--" + themeName]);
    }
};
export var Label = function (props) {
    var themeName = useTheme();
    return (React.createElement("label", null, props.label ? (React.createElement("span", __assign({}, styles.label(themeName)), props.label)) : (React.createElement(ScreenReaderOnly, { as: "span" }, "Dropdown"))));
};
Label.displayName = 'Dropdown.Label';
//# sourceMappingURL=label.js.map