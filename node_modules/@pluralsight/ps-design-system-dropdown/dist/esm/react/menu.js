var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createUniversalPortal, useCloseOnDocumentEvents } from '@pluralsight/ps-design-system-util';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import { DropdownContext, useMenuRef, handleMenuKeyDownEvents } from '../js/index';
var glamor = glamorDefault || glamorExports;
var slide = glamor.keyframes(stylesheet['@keyframes psds-dropdown__menu__keyframes__slide']);
var styles = {
    menuWrapper: function () { return glamor.css(stylesheet['.psds-dropdown__menu-wrapper']); },
    menu: function () {
        return glamor.css(stylesheet['.psds-dropdown__menu'], stylesheet['.psds-dropdown__menu__animation']({ slide: slide }));
    }
};
export var Menu = React.forwardRef((function (props, forwardedRef) {
    var inNode = props.inNode, isOpen = props.isOpen, menu = props.menu, menuPosition = props.menuPosition, buttonRef = props.buttonRef, rest = __rest(props
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    , ["inNode", "isOpen", "menu", "menuPosition", "buttonRef"]);
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    var _a = React.useState(), adjMenuPosition = _a[0], setAdjMenuPosition = _a[1];
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    var context = React.useContext(DropdownContext);
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    var ref = useMenuRef(forwardedRef);
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    useCloseOnDocumentEvents(ref, function (evt) {
        return context.onDocumentEvents(ref, evt);
    });
    var handleKeyDown = function (evt) {
        isOpen && handleMenuKeyDownEvents(evt);
    };
    /* eslint-disable-next-line react-hooks/rules-of-hooks */
    React.useLayoutEffect(function () {
        setAdjMenuPosition(menuPosition);
        if (!isOpen || !ref.current || !buttonRef.current)
            return;
        var menuRect = ref.current.getBoundingClientRect();
        var buttonRect = buttonRef.current.getBoundingClientRect();
        if (buttonRect.bottom + menuRect.height > window.innerHeight) {
            setAdjMenuPosition(__assign(__assign({}, menuPosition), { top: buttonRect.top - menuRect.height - 8 }));
        }
    }, [ref, buttonRef, isOpen, menuPosition, setAdjMenuPosition]);
    return (menu &&
        isOpen &&
        createUniversalPortal(React.createElement("div", __assign({}, styles.menuWrapper(), { style: adjMenuPosition }),
            React.createElement("div", __assign({}, styles.menu(), { ref: ref, role: "listbox" }, rest, { onKeyDown: handleKeyDown }), menu)), inNode));
}));
Menu.displayName = 'Dropdown.Menu';
// TODO: replace
Menu.defaultProps = {
    menu: React.createElement("span", null)
};
//# sourceMappingURL=menu.js.map