var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Halo from '@pluralsight/ps-design-system-halo';
import Icon from '@pluralsight/ps-design-system-icon';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import { CaretDown } from './caret-down';
import { ErrorIcon } from './error-icon';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    field: function (_a, themeName) {
        var appearance = _a.appearance, error = _a.error, size = _a.size;
        var label = 'psds-dropdown__field';
        var isSmall = size === vars.sizes.small;
        return glamor.compose(glamor.css(stylesheet["." + label]), isSmall && glamor.css(stylesheet["." + label + ".psds-dropdown--small"]), glamor.css(stylesheet["." + label + "--appearance-" + appearance]), glamor.css(stylesheet["." + label + ".psds-theme--" + themeName]), error &&
            glamor.css(stylesheet["." + label + "-error.psds-theme--" + themeName]));
    },
    fieldAligner: function () { return glamor.css(stylesheet['.psds-dropdown__field-aligner']); },
    fieldContainer: function () {
        return glamor.css(stylesheet['.psds-dropdown__field-container']);
    },
    halo: function () { return glamor.css(stylesheet['.psds-dropdown__field-halo']); },
    icon: function (appearance, themeName) {
        var label = 'psds-dropdown__icon';
        return glamor.compose(glamor.css(stylesheet["." + label]), glamor.css(stylesheet["." + label + "--appearance-" + appearance]), glamor.css(stylesheet["." + label + ".psds-theme--" + themeName]));
    },
    inner: function () { return glamor.css(stylesheet['.psds-dropdown__field-inner']); }
};
export var Button = React.forwardRef(function (_a, ref) {
    var appearance = _a.appearance, children = _a.children, disabled = _a.disabled, error = _a.error, isOpen = _a.isOpen, onClick = _a.onClick, setMenuPosition = _a.setMenuPosition, size = _a.size, rest = __rest(_a, ["appearance", "children", "disabled", "error", "isOpen", "onClick", "setMenuPosition", "size"]);
    var themeName = useTheme();
    var fieldContainerRef = React.useRef(null);
    React.useLayoutEffect(function () {
        if (!isOpen || !fieldContainerRef.current)
            return;
        var _a = fieldContainerRef.current.getBoundingClientRect(), left = _a.left, bottom = _a.bottom, width = _a.width;
        var requestId = requestAnimationFrame(function () {
            return setMenuPosition({ left: left, top: bottom, width: width });
        });
        return function () { return cancelAnimationFrame(requestId); };
    }, [fieldContainerRef, isOpen, setMenuPosition]);
    return (React.createElement("div", __assign({}, styles.fieldContainer(), { ref: fieldContainerRef }),
        React.createElement(Halo, __assign({ error: error, gapSize: Halo.gapSizes.small }, styles.halo()),
            React.createElement("div", __assign({}, styles.fieldAligner()),
                React.createElement("button", __assign({}, rest, styles.field({ appearance: appearance, error: error, size: size }, themeName), { disabled: disabled, onClick: disabled ? undefined : onClick, ref: ref }),
                    React.createElement("span", __assign({}, styles.inner()), children),
                    React.createElement("div", __assign({}, styles.icon(appearance, themeName)),
                        React.createElement(Icon, null,
                            React.createElement(CaretDown, null)))))),
        React.createElement(ErrorIcon, { error: !!error })));
});
Button.displayName = 'Dropdown.Button';
//# sourceMappingURL=button.js.map