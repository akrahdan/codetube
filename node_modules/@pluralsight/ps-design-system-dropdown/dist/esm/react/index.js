var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Divider } from './divider';
import { Item } from './item';
import { useDropdown, DropdownContext } from '../js/index';
import { Label } from './label';
import { Layout } from './layout';
import { Menu } from './menu';
import { SubLabel } from './sub-label';
import { Button } from './button';
import { Selected } from './selected';
import * as vars from '../vars/index';
var Dropdown = React.forwardRef(function (_a, forwardedRef) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var allProps = useDropdown(props, forwardedRef);
    return (React.createElement(Layout, __assign({}, allProps.layout, { label: React.createElement(Label, __assign({}, allProps.label)), menu: React.createElement(DropdownContext.Provider, __assign({}, allProps.value),
            React.createElement(Menu, __assign({}, allProps.menu))), subLabel: React.createElement(SubLabel, __assign({}, allProps.subLabel)), button: React.createElement(Button, __assign({}, allProps.button),
            React.createElement(Selected, __assign({}, allProps.selected))) })));
});
Dropdown.displayName = 'Dropdown';
// TODO: replace
Dropdown.defaultProps = {
    appearance: vars.appearances.default,
    disabled: false,
    error: false,
    size: vars.sizes.medium
};
Dropdown.context = DropdownContext;
Dropdown.Item = Item;
Dropdown.Divider = Divider;
Dropdown.appearances = vars.appearances;
Dropdown.sizes = vars.sizes;
Dropdown.Label = Label;
Dropdown.Layout = Layout;
Dropdown.Menu = Menu;
Dropdown.SubLabel = SubLabel;
Dropdown.Button = Button;
Dropdown.Selected = Selected;
export default Dropdown;
//# sourceMappingURL=index.js.map