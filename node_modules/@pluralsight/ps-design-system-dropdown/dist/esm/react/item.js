var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CheckIcon } from '@pluralsight/ps-design-system-icon';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import { DropdownContext } from '../js/index';
var glamor = glamorDefault || glamorExports;
var styles = {
    item: function (isActive, disabled) {
        return glamor.css(stylesheet['.psds-dropdown__item'], disabled && stylesheet['.psds-dropdown__item--disabled'], isActive && stylesheet['.psds-dropdown__item--active']);
    },
    itemIcon: function () { return glamor.css(stylesheet[".psds-dropdown__item-icon"]); },
    itemEllipsis: function () { return glamor.css(stylesheet[".psds-dropdown__item-text"]); },
    itemSelectedIcon: function () {
        return glamor.css(stylesheet['.psds-dropdown__item-selected-icon']);
    }
};
export var Item = React.forwardRef(function (_a, forwardedRef) {
    var _b, _c;
    var disabled = _a.disabled, onClick = _a.onClick, value = _a.value, icon = _a.icon, children = _a.children, rest = __rest(_a, ["disabled", "onClick", "value", "icon", "children"]);
    var context = React.useContext(DropdownContext);
    var ref = React.useRef();
    React.useImperativeHandle(forwardedRef, 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    function () { return ref.current; });
    var _d = React.useState(false), active = _d[0], setActive = _d[1];
    var isActive = React.useCallback(function () {
        ref.current && setActive(document.activeElement === ref.current);
    }, [ref, setActive]);
    React.useEffect(function () {
        isActive();
    }, [isActive]);
    var valueExists = typeof value !== 'undefined';
    var isSelected = (valueExists && ((_b = context.selectedItem) === null || _b === void 0 ? void 0 : _b.value) === value) ||
        ((_c = context.selectedItem) === null || _c === void 0 ? void 0 : _c.label) === children;
    var handleClick = function (evt) {
        var valueToSend = typeof value !== 'undefined' ? value : children || '';
        context.onMenuClick(evt, valueToSend);
        if (typeof onClick === 'function')
            onClick(evt, valueToSend);
    };
    var handleKeyDown = function (evt) {
        if (evt.key === 'Enter') {
            handleClick(evt);
            evt.preventDefault();
        }
    };
    return (React.createElement("button", __assign({}, styles.item(active, !!disabled), { disabled: disabled, onClick: handleClick, onBlur: isActive, onFocus: isActive, onKeyDown: handleKeyDown, role: "option", "aria-selected": isSelected, ref: ref, tabIndex: -1 }, rest),
        React.createElement("span", __assign({}, styles.itemIcon()), icon),
        React.createElement("span", __assign({}, styles.itemEllipsis()), children),
        isSelected && React.createElement(CheckIcon, __assign({}, styles.itemSelectedIcon()))));
});
Item.displayName = 'Dropdown.Item';
//# sourceMappingURL=item.js.map