var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { canUseDOM, uniqueId as defaultUniqueId } from '@pluralsight/ps-design-system-util';
import innerText from 'react-innertext';
export var DropdownContext = React.createContext({
    onDocumentEvents: function (_evt) { },
    onMenuClick: function (_evt, _value) { }
});
var sortDropdownProps = function (_a) {
    var appearance = _a.appearance, disabled = _a.disabled, className = _a.className, error = _a.error, label = _a.label, menu = _a.menu, onChange = _a.onChange, onClick = _a.onClick, placeholder = _a.placeholder, size = _a.size, subLabel = _a.subLabel, style = _a.style, value = _a.value, rest = __rest(_a, ["appearance", "disabled", "className", "error", "label", "menu", "onChange", "onClick", "placeholder", "size", "subLabel", "style", "value"]);
    return ({
        button: __assign({ appearance: appearance,
            disabled: disabled,
            error: error,
            size: size }, rest),
        hook: {
            menu: menu,
            value: value,
            onChange: onChange,
            onClick: onClick,
            placeholder: placeholder
        },
        input: {
            disabled: disabled
        },
        label: {
            label: label
        },
        layout: {
            className: className,
            disabled: disabled,
            style: style
        },
        menu: {
            menu: menu
        },
        selected: {
            appearance: appearance,
            placeholder: placeholder,
            size: size
        },
        subLabel: {
            subLabel: subLabel
        }
    });
};
// TODO: move to react folder? Uses React APIs.
export var useDropdown = function (props, forwardedRef) {
    var uid = props.uniqueId || defaultUniqueId;
    var buttonId = React.useMemo(function () { return uid('dropdown-button-'); }, []);
    var labelId = React.useMemo(function () { return uid('dropdown-label-'); }, []);
    var menuId = React.useMemo(function () { return uid('dropdown-menu-'); }, []);
    var _a = sortDropdownProps(props), hook = _a.hook, rest = __rest(_a, ["hook"]);
    var _b = React.useState(false), isOpen = _b[0], setOpen = _b[1];
    var items = React.useMemo(function () { return parseMenuChildren(menuId, hook.menu); }, [
        menuId,
        hook.menu
    ]);
    var itemMatchingValueIndex = findIndexMatchingValueOrLabel(items, hook.value, hook.value);
    var itemMatchingValue = items[itemMatchingValueIndex];
    var _c = React.useState(itemMatchingValue), selectedItem = _c[0], setSelectedItem = _c[1];
    React.useEffect(function () {
        setSelectedItem(itemMatchingValue);
    }, [itemMatchingValue]);
    React.useEffect(function () {
        function handleEscape(evt) {
            var _a;
            if (evt.key === 'Escape') {
                setOpen(false);
                (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            }
        }
        if (canUseDOM() && isOpen) {
            document.addEventListener('keydown', handleEscape, false);
            return function () {
                document.removeEventListener('keydown', handleEscape, false);
            };
        }
    }, [itemMatchingValueIndex, isOpen]);
    var openKeyEvents = new Set(['Enter', 'ArrowDown', 'ArrowUp', ' ']);
    function handleButtonEvent(evt) {
        if (evt.type === 'click' ||
            (evt.type === 'keydown' && 'key' in evt && openKeyEvents.has(evt.key))) {
            evt.preventDefault();
            evt.stopPropagation();
            var newOpen = !isOpen;
            setOpen(newOpen);
            if (typeof hook.onClick === 'function')
                hook.onClick(evt);
        }
    }
    function handleMenuItemClick(evt, itemValue) {
        setSelectedItem(findItemMatchingValueOrLabel(items, itemValue, itemValue));
        setOpen(false);
        if (typeof hook.onChange === 'function')
            hook.onChange(evt, itemValue);
        if (buttonRef.current) {
            buttonRef.current.focus();
        }
    }
    var longestLabel = getLongestMenuLabel(items, hook.placeholder);
    var buttonRef = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return buttonRef.current; });
    var inNode = canUseDOM() ? document.body : undefined;
    var _d = React.useState({
        left: 0,
        top: 0,
        width: 0
    }), menuPosition = _d[0], setMenuPosition = _d[1];
    return {
        button: __assign(__assign({}, rest.button), { id: buttonId, 
            // eslint-disable-next-line @typescript-eslint/prefer-as-const
            'aria-haspopup': 'listbox', 'aria-labelledby': buttonId + " " + labelId, ref: buttonRef, isOpen: isOpen, onClick: handleButtonEvent, onKeyDown: handleButtonEvent, setMenuPosition: setMenuPosition }),
        label: __assign(__assign({}, rest.label), { id: labelId }),
        layout: rest.layout,
        menu: __assign(__assign({}, rest.menu), { inNode: inNode,
            isOpen: isOpen,
            menuPosition: menuPosition,
            buttonRef: buttonRef, id: menuId, role: 'listbox', 'aria-labelledby': buttonId }),
        selected: __assign(__assign({}, rest.selected), { label: longestLabel, selectedItem: selectedItem }),
        subLabel: rest.subLabel,
        value: {
            value: {
                onDocumentEvents: function (ref, evt) {
                    var _a;
                    if (!(evt.target instanceof HTMLElement) ||
                        !((_a = ref.current) === null || _a === void 0 ? void 0 : _a.contains(evt.target)))
                        setOpen(false);
                },
                onMenuClick: handleMenuItemClick,
                selectedItem: selectedItem
            }
        }
    };
};
function findIndexMatchingValueOrLabel(items, label, value) {
    return items.findIndex(function (item) {
        return (typeof item.value !== 'undefined' && item.value === value) ||
            item.label === label;
    });
}
function findItemMatchingValueOrLabel(items, label, value) {
    var index = findIndexMatchingValueOrLabel(items, label, value);
    return items[index];
}
export var parseMenuChildren = function (menuId, menu) {
    if (!menu)
        return [];
    function parseItem(item) {
        return innerText(item) !== ''
            ? {
                id: formatItemId(menuId, item.props.children, item.props.value),
                label: item.props.children,
                value: item.props.value
            }
            : undefined;
    }
    if (Array.isArray(menu)) {
        return menu.map(parseItem).filter(Boolean);
    }
    else {
        if (React.Children.count(menu.props.children) <= 0)
            return [];
        else
            return React.Children.map(menu.props.children, parseItem);
    }
};
export var formatItemId = function (menuId, label, value) {
    return menuId + "-" + (value || label.toString().replace(/ /g, ''));
};
export var getLongestMenuLabel = function (items, placeholder) {
    return items.reduce(function (currentLongest, item) {
        var _a;
        return ((_a = item.label) === null || _a === void 0 ? void 0 : _a.length) > currentLongest.length
            ? item.label
            : currentLongest;
    }, placeholder || '');
};
export { useMenuRef, handleMenuKeyDownEvents } from './menuKeyEvents';
//# sourceMappingURL=index.js.map