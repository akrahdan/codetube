var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { layout, type } from '@pluralsight/ps-design-system-core';
import Halo from '@pluralsight/ps-design-system-halo';
import { WarningIcon } from '@pluralsight/ps-design-system-icon';
import { useTheme } from '@pluralsight/ps-design-system-theme';
import glamorDefault, * as glamorExports from 'glamor';
import React from 'react';
import stylesheet from '../css/index';
import * as vars from '../vars/index';
var glamor = glamorDefault || glamorExports;
var calcRowsPxHeight = function (rows) {
    var int = function (varVal) { return parseInt(varVal.replace('px', ''), 10); };
    return (int(layout.spacingXSmall) * 2 +
        parseInt(rows, 10) * int(type.lineHeightStandard));
};
var styles = {
    error: function () { return glamor.css(stylesheet['.psds-text-area__error']); },
    field: function (themeName, appearance, error) {
        var label = 'psds-text-area__field';
        return glamor.compose(glamor.css(stylesheet["." + label]), glamor.css(stylesheet["." + label + "--appearance--" + appearance]), glamor.css(stylesheet["." + label + "--appearance-" + appearance + ".psds-theme--" + themeName]), glamor.css(stylesheet["." + label + ".psds-theme--" + themeName]), error &&
            glamor.css(stylesheet["." + label + "--error.psds-theme--" + themeName]));
    },
    fieldContainer: function () {
        return glamor.css(stylesheet['.psds-text-area__field-container']);
    },
    textarea: function (disabled) {
        var label = 'psds-text-area';
        return glamor.compose(glamor.css(stylesheet["." + label]), disabled && glamor.css(stylesheet["." + label + "--disabled"]));
    },
    label: function (themeName) {
        var label = 'psds-text-area__label';
        return glamor.compose(glamor.css(stylesheet["." + label]), glamor.css(stylesheet["." + label + ".psds-theme--" + themeName]));
    },
    subLabel: function (themeName) {
        var label = 'psds-text-area__sub-label';
        return glamor.compose(glamor.css(stylesheet["." + label]), glamor.css(stylesheet["." + label + ".psds-theme--" + themeName]));
    }
};
var TextArea = React.forwardRef(function (_a, ref) {
    var _b = _a.appearance, appearance = _b === void 0 ? vars.appearances.default : _b, className = _a.className, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.error, error = _d === void 0 ? false : _d, label = _a.label, placeholder = _a.placeholder, _e = _a.rows, rows = _e === void 0 ? 4 : _e, style = _a.style, subLabel = _a.subLabel, rest = __rest(_a, ["appearance", "className", "disabled", "error", "label", "placeholder", "rows", "style", "subLabel"]);
    var themeName = useTheme();
    return (React.createElement("label", __assign({}, styles.textarea(disabled), { style: style, className: className }),
        label && React.createElement("div", __assign({}, styles.label(themeName)), label),
        React.createElement("div", __assign({}, styles.fieldContainer()),
            React.createElement(Halo, { error: error, gapSize: Halo.gapSizes.small },
                React.createElement("textarea", __assign({}, rest, styles.field(themeName, appearance, error), { disabled: disabled, placeholder: placeholder, ref: ref, style: { height: calcRowsPxHeight(rows) } }))),
            error && (React.createElement("div", __assign({}, styles.error()),
                React.createElement(WarningIcon, null)))),
        subLabel && React.createElement("div", __assign({}, styles.subLabel(themeName)), subLabel)));
});
TextArea.appearances = vars.appearances;
export var appearances = vars.appearances;
export default TextArea;
//# sourceMappingURL=index.js.map