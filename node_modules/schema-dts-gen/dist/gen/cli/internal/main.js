"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const logging_1 = require("../../logging");
const transform_1 = require("../../transform/transform");
const reader_1 = require("../../triples/reader");
const context_1 = require("../../ts/context");
const args_1 = require("../args");
function main(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = args_1.ParseFlags(args);
        logging_1.SetOptions(options);
        const ontologyUrl = options.ontology;
        const filePath = options.file;
        let result;
        if (filePath) {
            logging_1.Log(`Loading Ontology from path: ${filePath}`);
            result = reader_1.loadFile(filePath);
        }
        else {
            logging_1.Log(`Loading Ontology from URL: ${ontologyUrl}`);
            result = reader_1.load(ontologyUrl);
        }
        const context = context_1.Context.Parse(options.context);
        yield transform_1.WriteDeclarations(result, options.deprecated, context, write);
    });
}
exports.main = main;
function write(content) {
    process.stdout.write(content, 'utf-8');
}
//# sourceMappingURL=main.js.map