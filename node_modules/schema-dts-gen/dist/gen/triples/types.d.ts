/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Describes URL components of a "Context". */
export interface ReadonlyUrl {
    readonly href: string;
    readonly protocol: string;
    readonly hostname: string;
    readonly path: readonly string[];
    readonly search: string;
}
/**
 * In-memory representation of a node in a Triple corresponding to a URL.
 *
 * @example <http://schema.org/domainIncludes>
 */
export declare class UrlNode {
    readonly name: string;
    readonly context: ReadonlyUrl;
    readonly href: string;
    readonly type = "UrlNode";
    constructor(name: string, context: ReadonlyUrl, href: string);
    toString(): string;
    matchesContext(contextIn: string | ReadonlyUrl): boolean;
    equivTo(other: UrlNode): boolean;
    static Parse(urlString: string): UrlNode;
}
/**
 * In-memory representation of a node in a Triple corresponding to a string
 * literal.
 *
 * @example "BodyOfWater"
 * @example "BodyOfWater"@en
 */
export declare class SchemaString {
    readonly value: string;
    readonly language: string | undefined;
    readonly type = "SchemaString";
    constructor(value: string, language: string | undefined);
    toString(): string;
    static Parse(content: string): SchemaString | null;
}
/**
 * In-memory representation of a compact Node corresponding to a relative RDFS
 * reference.
 *
 * @example <rdfs:label>
 */
export declare class Rdfs {
    readonly label: string;
    readonly type = "Rdfs";
    constructor(label: string);
    toString(): string;
    static Parse(content: string): Rdfs | null;
}
//# sourceMappingURL=types.d.ts.map