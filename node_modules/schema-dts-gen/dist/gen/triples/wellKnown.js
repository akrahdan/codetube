"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasEnumType = exports.IsPropertyType = exports.IsClassType = exports.GetTypes = exports.GetType = exports.IsTypeName = exports.IsType = exports.IsSupersededBy = exports.IsRangeIncludes = exports.IsDomainIncludes = exports.IsNamedClass = exports.IsWellKnown = exports.IsDataType = exports.GetSubClassOf = exports.GetComment = exports.IsSchemaObject = exports.IsRdfSyntax = exports.IsRdfSchema = void 0;
/** Whether the context corresponds to rdf-schema. */
function IsRdfSchema(value) {
    return (value.context.hostname === 'www.w3.org' &&
        value.context.path[value.context.path.length - 1] === 'rdf-schema');
}
exports.IsRdfSchema = IsRdfSchema;
/** Whether the context corresponds to rdf-syntax. */
function IsRdfSyntax(value) {
    return (value.context.hostname === 'www.w3.org' &&
        value.context.path[value.context.path.length - 1].match(/^\d\d-rdf-syntax-ns$/) !== null);
}
exports.IsRdfSyntax = IsRdfSyntax;
/** Whether the context corresponds to schema.org. */
function IsSchemaObject(value) {
    return value.context.hostname === 'schema.org';
}
exports.IsSchemaObject = IsSchemaObject;
/**
 * If an ObjectPredicate represents a comment, returns the comment. Otherwise
 * returns null.
 */
function GetComment(value) {
    if (IsRdfSchema(value.Predicate) && value.Predicate.name === 'comment') {
        if (value.Object.type === 'SchemaString') {
            return { comment: value.Object.value };
        }
        throw new Error(`Unexpected Comment predicate with non-string object: ${value}.`);
    }
    return null;
}
exports.GetComment = GetComment;
/**
 * If an ObjectPredicate represents a subClass relation, returns the parent
 * class. Otherwise returns null.
 */
function GetSubClassOf(value) {
    if (IsRdfSchema(value.Predicate) && value.Predicate.name === 'subClassOf') {
        if (value.Object.type === 'SchemaString' || value.Object.type === 'Rdfs') {
            throw new Error(`Unexpected object for predicate 'subClassOf': ${value.Object}.`);
        }
        return { subClassOf: value.Object };
    }
    return null;
}
exports.GetSubClassOf = GetSubClassOf;
/** Returns true iff a node corresponds to http://schema.org/DataType */
function IsDataType(t) {
    return IsSchemaObject(t) && t.name === 'DataType';
}
exports.IsDataType = IsDataType;
/** Returns true iff a Topic represents a DataType. */
function IsWellKnown(topic) {
    if (topic.types.some(IsDataType))
        return true;
    return false;
}
exports.IsWellKnown = IsWellKnown;
/** Returns true iff a Topic represents a named class. */
function IsNamedClass(topic) {
    // Skip anything that isn't a class.
    return topic.types.some(IsClassType);
}
exports.IsNamedClass = IsNamedClass;
/**
 * Returns true iff a Predicate corresponds to http://schema.org/domainIncludes
 */
function IsDomainIncludes(value) {
    return IsSchemaObject(value) && value.name === 'domainIncludes';
}
exports.IsDomainIncludes = IsDomainIncludes;
/**
 * Returns true iff a Predicate corresponds to http://schema.org/rangeIncludes
 */
function IsRangeIncludes(value) {
    return IsSchemaObject(value) && value.name === 'rangeIncludes';
}
exports.IsRangeIncludes = IsRangeIncludes;
/**
 * Returns true iff a Predicate corresponds to http://schema.org/supersededBy.
 */
function IsSupersededBy(value) {
    return IsSchemaObject(value) && value.name === 'supersededBy';
}
exports.IsSupersededBy = IsSupersededBy;
/**
 * Returns true iff a Predicate corresponds to
 * http://www.w3.org/1999/02/22-rdf-syntax-ns#type.
 */
function IsType(predicate) {
    return IsRdfSyntax(predicate) && predicate.name === 'type';
}
exports.IsType = IsType;
/** Returns iff an Object can be described as a Type Name. */
function IsTypeName(value) {
    return value.type === 'UrlNode';
}
exports.IsTypeName = IsTypeName;
/**
 * If an ObjectPredicate corresponds to a
 * http://www.w3.org/1999/02/22-rdf-syntax-ns#type, returns a Type it describes.
 */
function GetType(value) {
    if (IsType(value.Predicate)) {
        if (!IsTypeName(value.Object)) {
            throw new Error(`Unexpected type ${value.Object}`);
        }
        return value.Object;
    }
    return null;
}
exports.GetType = GetType;
/**
 * Returns all Nodes described by a Topic's
 * http://www.w3.org/1999/02/22-rdf-syntax-ns#type predicates.
 */
function GetTypes(key, values) {
    const types = values.map(GetType).filter((t) => !!t);
    if (types.length === 0) {
        throw new Error(`No type found for Subject ${key.toString()}. Triples include:\n${values
            .map(v => `${v.Predicate.toString()}: ${JSON.stringify(v.Predicate)}\n\t=> ${v.Object.toString()}`)
            .join('\n')}`);
    }
    return types;
}
exports.GetTypes = GetTypes;
/**
 * Returns true iff a Type corresponds to
 * http://www.w3.org/2000/01/rdf-schema#Class
 */
function IsClassType(type) {
    return IsRdfSchema(type) && type.name === 'Class';
}
exports.IsClassType = IsClassType;
/**
 * Returns true iff a Type corresponds to
 * http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
 */
function IsPropertyType(type) {
    return IsRdfSyntax(type) && type.name === 'Property';
}
exports.IsPropertyType = IsPropertyType;
/**
 * Returns true iff a Subject has a Type indicating it is an Enum value.
 *
 * Enum Values have, in addition to other Data or Class types, another object as
 * its "Type".
 */
function HasEnumType(types) {
    for (const type of types) {
        // Skip well-known types.
        if (IsClassType(type) || IsPropertyType(type) || IsDataType(type))
            continue;
        // If we're here, this is a 'Type' that is not well known.
        return true;
    }
    // Types are only well-known.
    return false;
}
exports.HasEnumType = HasEnumType;
//# sourceMappingURL=wellKnown.js.map