/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PropertySignature, SyntaxKind } from 'typescript';
import { ObjectPredicate, TSubject } from '../triples/triple';
import type { ClassMap } from './class';
import { Context } from './context';
/**
 * A "class" of properties, not associated with any particuar object.
 */
export declare class PropertyType {
    private readonly subject;
    private readonly types;
    private _comment?;
    private readonly _supersededBy;
    constructor(subject: TSubject);
    get comment(): string | undefined;
    get deprecated(): boolean;
    add(value: ObjectPredicate, classes: ClassMap): boolean;
    scalarTypeNode(): import("typescript").TypeReferenceNode | import("typescript").UnionTypeNode | import("typescript").KeywordTypeNode<SyntaxKind.NeverKeyword>;
}
/**
 * A Property on a particular object.
 */
export declare class Property {
    readonly key: TSubject;
    private readonly type;
    constructor(key: TSubject, type: PropertyType);
    get deprecated(): boolean;
    private typeNode;
    toNode(context: Context): PropertySignature;
}
export declare class TypeProperty {
    private readonly className;
    constructor(className: TSubject);
    toNode(context: Context): PropertySignature;
    readonly deprecated = false;
}
//# sourceMappingURL=property.d.ts.map