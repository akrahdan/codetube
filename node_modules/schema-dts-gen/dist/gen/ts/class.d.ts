/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DeclarationStatement, Statement, TypeNode, InterfaceDeclaration } from 'typescript';
import { TObject, TPredicate, TSubject } from '../triples/triple';
import { Context } from './context';
import { EnumValue } from './enum';
import { Property } from './property';
/** Maps fully qualified IDs of each Class to the class itself. */
export declare type ClassMap = Map<string, Class>;
/**
 * Represents a "Class" in Schema.org, except in cases where it is better
 * described by Builtin (i.e. is a DataType).
 *
 * In TypeScript, this corresponds to a collection of declarations:
 * 1. If the class has enum values, an Enum declaration.
 * 2. If the class has properties, the properties in an object literal.
 * 3. If the class has children,
 *        a type union over all children.
 *    otherwise, a "type" property.
 */
export declare class Class {
    readonly subject: TSubject;
    private _comment?;
    private _typedef?;
    private readonly children;
    private readonly _parents;
    private readonly _props;
    private readonly _enums;
    private readonly _supersededBy;
    private allParents;
    private namedParents;
    isNodeType(): boolean;
    get deprecated(): boolean;
    protected get comment(): string | undefined;
    protected get typedefs(): string[];
    private properties;
    private supersededBy;
    private enums;
    private baseName;
    private leafName;
    className(): string;
    constructor(subject: TSubject);
    add(value: {
        Predicate: TPredicate;
        Object: TObject;
    }, classMap: ClassMap): boolean;
    addTypedef(typedef: string): void;
    addProp(p: Property): void;
    addEnum(e: EnumValue): void;
    private skipBase;
    private baseDecl;
    protected leafDecl(context: Context): InterfaceDeclaration | undefined;
    protected nonEnumType(skipDeprecated: boolean): TypeNode[];
    private totalType;
    toNode(context: Context, skipDeprecated: boolean): readonly Statement[];
}
/**
 * Represents a DataType.
 */
export declare class Builtin extends Class {
}
/**
 * A "Native" Schema.org object that is best represented
 * in JSON-LD and JavaScript as a typedef to a native type.
 */
export declare class AliasBuiltin extends Builtin {
    constructor(url: string, equivTo: string);
}
export declare class DataTypeUnion extends Builtin {
    readonly wk: Builtin[];
    constructor(url: string, wk: Builtin[]);
    toNode(): DeclarationStatement[];
}
/**
 * Defines a Sort order between Class declarations.
 *
 * DataTypes come first, next the 'DataType' union itself, followed by all
 * regular classes. Within each group, class names are ordered alphabetically in
 * UTF-16 code units order.
 */
export declare function Sort(a: Class, b: Class): number;
//# sourceMappingURL=class.d.ts.map