"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelperTypes = exports.GraphTypeName = exports.IdReferenceName = exports.SchemaValueName = void 0;
const typescript_1 = require("typescript");
const comments_1 = require("./util/comments");
function IdPropertyNode() {
    return comments_1.withComments('IRI identifying the canonical address of this object.', typescript_1.factory.createPropertySignature(
    /* modifiers= */ [], typescript_1.factory.createStringLiteral('@id'), 
    /* questionToken= */ undefined, 
    /* typeNode= */
    typescript_1.factory.createTypeReferenceNode('string', /*typeArguments=*/ [])));
}
function WithContextType(context) {
    // export type WithContent<T extends Thing> = T & { "@context": TYPE_NODE }
    return comments_1.withComments('Used at the top-level node to indicate the context for the JSON-LD ' +
        'objects used. The context provided in this type is compatible ' +
        'with the keys and URLs in the rest of this generated file.', typescript_1.factory.createTypeAliasDeclaration(
    /*decorators=*/ [], typescript_1.factory.createModifiersFromModifierFlags(typescript_1.ModifierFlags.Export), 'WithContext', [
        typescript_1.factory.createTypeParameterDeclaration('T' /*constraint=*/, typescript_1.factory.createTypeReferenceNode('Thing', /*typeArguments=*/ undefined)),
    ], typescript_1.factory.createUnionTypeNode([
        typescript_1.factory.createTypeReferenceNode(exports.GraphTypeName),
        typescript_1.factory.createParenthesizedType(typescript_1.factory.createIntersectionTypeNode([
            typescript_1.factory.createTypeReferenceNode('T', /*typeArguments=*/ undefined),
            typescript_1.factory.createTypeLiteralNode([context.contextProperty()]),
        ])),
    ])));
}
function GraphType(context) {
    return comments_1.withComments('', typescript_1.factory.createInterfaceDeclaration(
    /*decorators=*/ [], typescript_1.factory.createModifiersFromModifierFlags(typescript_1.ModifierFlags.Export), exports.GraphTypeName, 
    /*typeParameters=*/ undefined, 
    /*heritageClauses=*/ undefined, [
        context.contextProperty(),
        typescript_1.factory.createPropertySignature(
        /*modifiers=*/ [], typescript_1.factory.createStringLiteral('@graph'), 
        /*questionToken=*/ undefined, typescript_1.factory.createTypeOperatorNode(typescript_1.SyntaxKind.ReadonlyKeyword, typescript_1.factory.createArrayTypeNode(typescript_1.factory.createTypeReferenceNode('Thing', 
        /*typeArguments=*/ undefined)))),
    ]));
}
exports.SchemaValueName = 'SchemaValue';
exports.IdReferenceName = 'IdReference';
exports.GraphTypeName = 'Graph';
function HelperTypes(context) {
    return [
        WithContextType(context),
        GraphType(context),
        typescript_1.factory.createTypeAliasDeclaration(
        /*decorators=*/ [], 
        /*modifiers=*/ [], exports.SchemaValueName, [typescript_1.factory.createTypeParameterDeclaration('T')], typescript_1.factory.createUnionTypeNode([
            typescript_1.factory.createTypeReferenceNode('T', /*typeArguments=*/ []),
            typescript_1.factory.createTypeOperatorNode(typescript_1.SyntaxKind.ReadonlyKeyword, typescript_1.factory.createArrayTypeNode(typescript_1.factory.createTypeReferenceNode('T', /*typeArguments=*/ []))),
        ])),
        typescript_1.factory.createTypeAliasDeclaration(
        /*decorators=*/ [], 
        /*modifiers=*/ [], exports.IdReferenceName, 
        /*typeParameters=*/ [], typescript_1.factory.createTypeLiteralNode([IdPropertyNode()])),
    ];
}
exports.HelperTypes = HelperTypes;
//# sourceMappingURL=helper_types.js.map