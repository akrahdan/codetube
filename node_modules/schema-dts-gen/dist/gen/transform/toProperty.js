"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessProperties = void 0;
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logging_1 = require("../logging");
const triple_1 = require("../triples/triple");
const wellKnown_1 = require("../triples/wellKnown");
const property_1 = require("../ts/property");
/**
 * Annotates classes with any Property values they blong to.
 *
 * @param topics a sequence of processed triples describing an Ontology.
 * @param classes return value of `ProcessClasses`.
 */
function ProcessProperties(topics, classes) {
    for (const topic of topics) {
        // Skip Topics that have no 'Property' Type.
        if (!topic.types.some(wellKnown_1.IsPropertyType))
            continue;
        const rest = [];
        const property = new property_1.PropertyType(topic.Subject);
        for (const value of topic.values) {
            const added = property.add(value, classes);
            if (!added) {
                rest.push(value);
            }
        }
        // Go over RangeIncludes or DomainIncludes:
        if (rest.length > 0) {
            logging_1.Log(`Still unadded for property: ${topic.Subject.name}:\n\t${rest
                .map(triple_1.Format)
                .join('\n\t')}`);
        }
    }
}
exports.ProcessProperties = ProcessProperties;
//# sourceMappingURL=toProperty.js.map