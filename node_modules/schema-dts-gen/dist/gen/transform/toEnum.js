"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessEnums = void 0;
const logging_1 = require("../logging");
const triple_1 = require("../triples/triple");
const wellKnown_1 = require("../triples/wellKnown");
const enum_1 = require("../ts/enum");
/**
 * Annotates classes with any Enum values they blong to.
 *
 * @param topics a sequence of processed triples describing an Ontology.
 * @param classes return value of `ProcessClasses`.
 */
function ProcessEnums(topics, classes) {
    // Process Enums
    for (const topic of topics) {
        if (!wellKnown_1.HasEnumType(topic.types))
            continue;
        // Everything Here should be an enum.
        const enumValue = new enum_1.EnumValue(topic.Subject, topic.types, classes);
        const skipped = [];
        for (const v of topic.values) {
            if (!enumValue.add(v))
                skipped.push(v);
        }
        if (skipped.length > 0) {
            logging_1.Log(`For Enum Item ${topic.Subject.name}, did not process:\n\t${skipped
                .map(triple_1.Format)
                .join('\n\t')}`);
        }
    }
}
exports.ProcessEnums = ProcessEnums;
//# sourceMappingURL=toEnum.js.map