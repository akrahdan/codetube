/// <reference types="react" />
import { StyleProps } from '@codecademy/variance';
export interface IconStyleProps extends StyleProps<typeof iconProps> {
}
export interface GamutIconProps extends Omit<React.SVGProps<SVGSVGElement>, keyof IconStyleProps>, IconStyleProps {
    /**
     * A suffix added to the end of the unique generated ID for the icon. This is useful if you have multiple of the same icon on the page and need to pass accessibility guidelines.
     */
    titleId?: string;
    title?: string;
    ref?: React.Ref<SVGSVGElement>;
    /**
     * See:  https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42404
     * Generated definitions may not match with other vesions @types/react in ^16.9 this ensures that the type exists and is optional as it would in >16.9.21
     */
    path?: string;
}
export declare type ForwardableProps = Omit<GamutIconProps, keyof IconStyleProps>;
export declare const iconProps: import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").Compose<[import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly flexBasis: {
        readonly property: "flexBasis";
    };
    readonly flexShrink: {
        readonly property: "flexShrink";
    };
    readonly flexGrow: {
        readonly property: "flexGrow";
    };
    readonly order: {
        readonly property: "order";
    };
    readonly gridColumn: {
        readonly property: "gridColumn";
    };
    readonly gridRow: {
        readonly property: "gridRow";
    };
    readonly gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    readonly gridRowStart: {
        readonly property: "gridRowStart";
    };
    readonly gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    readonly gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly display: {
        readonly property: "display";
    };
    readonly overflow: {
        readonly property: "overflow";
    };
    readonly overflowX: {
        readonly property: "overflowX";
    };
    readonly overflowY: {
        readonly property: "overflowY";
    };
    readonly dimensions: {
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly width: {
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minWidth: {
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxWidth: {
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly height: {
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minHeight: {
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxHeight: {
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly verticalAlign: {
        readonly property: "verticalAlign";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly color: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly textColor: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly bg: {
        readonly property: "backgroundColor";
        readonly scale: "colors";
    };
    readonly borderColor: {
        readonly property: "borderColor";
        readonly scale: "colors";
    };
    readonly borderColorX: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    };
    readonly borderColorY: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    };
    readonly borderColorLeft: {
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    };
    readonly borderColorRight: {
        readonly property: "borderRightColor";
        readonly scale: "colors";
    };
    readonly borderColorTop: {
        readonly property: "borderTopColor";
        readonly scale: "colors";
    };
    readonly borderColorBottom: {
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly p: {
        readonly property: "padding";
        readonly scale: "spacing";
    };
    readonly px: {
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    };
    readonly py: {
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    };
    readonly pt: {
        readonly property: "paddingTop";
        readonly scale: "spacing";
    };
    readonly pb: {
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    };
    readonly pr: {
        readonly property: "paddingRight";
        readonly scale: "spacing";
    };
    readonly pl: {
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    };
    readonly m: {
        readonly property: "margin";
        readonly scale: "spacing";
    };
    readonly mx: {
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    };
    readonly my: {
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    };
    readonly mt: {
        readonly property: "marginTop";
        readonly scale: "spacing";
    };
    readonly mb: {
        readonly property: "marginBottom";
        readonly scale: "spacing";
    };
    readonly mr: {
        readonly property: "marginRight";
        readonly scale: "spacing";
    };
    readonly ml: {
        readonly property: "marginLeft";
        readonly scale: "spacing";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly position: {
        readonly property: "position";
    };
    readonly inset: {
        readonly property: "inset";
        readonly properties: readonly ["top", "right", "bottom", "left"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly top: {
        readonly property: "top";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly right: {
        readonly property: "right";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly bottom: {
        readonly property: "bottom";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly left: {
        readonly property: "left";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly zIndex: {
        readonly property: "zIndex";
    };
    readonly opacity: {
        readonly property: "opacity";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly border: {
        readonly property: "border";
        readonly scale: "borders";
    };
    readonly borderX: {
        readonly property: "border";
        readonly properties: readonly ["borderLeft", "borderRight"];
        readonly scale: "borders";
    };
    readonly borderY: {
        readonly property: "border";
        readonly properties: readonly ["borderTop", "borderBottom"];
        readonly scale: "borders";
    };
    readonly borderTop: {
        readonly property: "borderTop";
        readonly scale: "borders";
    };
    readonly borderRight: {
        readonly property: "borderRight";
        readonly scale: "borders";
    };
    readonly borderBottom: {
        readonly property: "borderBottom";
        readonly scale: "borders";
    };
    readonly borderLeft: {
        readonly property: "borderLeft";
        readonly scale: "borders";
    };
    readonly borderWidth: {
        readonly property: "borderWidth";
    };
    readonly borderWidthX: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderLeftWidth", "borderRightWidth"];
    };
    readonly borderWidthY: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderTopWidth", "borderBottomWidth"];
    };
    readonly borderWidthLeft: {
        readonly property: "borderLeftWidth";
    };
    readonly borderWidthRight: {
        readonly property: "borderRightWidth";
    };
    readonly borderWidthTop: {
        readonly property: "borderTopWidth";
    };
    readonly borderWidthBottom: {
        readonly property: "borderBottomWidth";
    };
    readonly borderRadius: {
        readonly property: "borderRadius";
    };
    readonly borderRadiusLeft: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderBottomLeftRadius"];
    };
    readonly borderRadiusTop: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderTopRightRadius"];
    };
    readonly borderRadiusBottom: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderBottomLeftRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusRight: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopRightRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusTopLeft: {
        readonly property: "borderTopLeftRadius";
    };
    readonly borderRadiusTopRight: {
        readonly property: "borderTopRightRadius";
    };
    readonly borderRadiusBottomRight: {
        readonly property: "borderBottomRightRadius";
    };
    readonly borderRadiusBottomLeft: {
        readonly property: "borderBottomLeftRadius";
    };
    readonly borderStyle: {
        readonly property: "borderStyle";
    };
    readonly borderStyleX: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderLeftStyle", "borderRightStyle"];
    };
    readonly borderStyleY: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderTopStyle", "borderBottomStyle"];
    };
    readonly borderStyleLeft: {
        readonly property: "borderLeftStyle";
    };
    readonly borderStyleRight: {
        readonly property: "borderRightStyle";
    };
    readonly borderStyleTop: {
        readonly property: "borderTopStyle";
    };
    readonly borderStyleBottom: {
        readonly property: "borderBottomStyle";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    size: {
        property: "width";
        properties: ("width" | "height")[];
        transform: (value: string | number) => string | 0;
    };
}>>]>>;
export declare const Svg: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    flexBasis?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexBasis";
    }>;
    flexShrink?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexShrink";
    }>;
    flexGrow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexGrow";
    }>;
    order?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "order";
    }>;
    gridColumn?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumn";
    }>;
    gridRow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRow";
    }>;
    gridColumnStart?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumnStart";
    }>;
    gridRowStart?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRowStart";
    }>;
    gridColumnEnd?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumnEnd";
    }>;
    gridRowEnd?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRowEnd";
    }>;
    justifySelf?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "justifySelf";
    }>;
    alignSelf?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "alignSelf";
    }>;
    gridArea?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridArea";
    }>;
    display?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "display";
    }>;
    overflow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflow";
    }>;
    overflowX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflowX";
    }>;
    overflowY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflowY";
    }>;
    dimensions?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    }>;
    width?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    }>;
    minWidth?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    }>;
    maxWidth?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    }>;
    height?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    }>;
    minHeight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    }>;
    maxHeight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    }>;
    verticalAlign?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "verticalAlign";
    }>;
    color?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "color";
        readonly scale: "colors";
    }>;
    textColor?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "color";
        readonly scale: "colors";
    }>;
    bg?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "backgroundColor";
        readonly scale: "colors";
    }>;
    borderColor?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderColor";
        readonly scale: "colors";
    }>;
    borderColorX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    }>;
    borderColorY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    }>;
    borderColorLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    }>;
    borderColorRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRightColor";
        readonly scale: "colors";
    }>;
    borderColorTop?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTopColor";
        readonly scale: "colors";
    }>;
    borderColorBottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    }>;
    p?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly scale: "spacing";
    }>;
    px?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    }>;
    py?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    }>;
    pt?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingTop";
        readonly scale: "spacing";
    }>;
    pb?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    }>;
    pr?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingRight";
        readonly scale: "spacing";
    }>;
    pl?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    }>;
    m?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "margin";
        readonly scale: "spacing";
    }>;
    mx?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    }>;
    my?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    }>;
    mt?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "marginTop";
        readonly scale: "spacing";
    }>;
    mb?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "marginBottom";
        readonly scale: "spacing";
    }>;
    mr?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "marginRight";
        readonly scale: "spacing";
    }>;
    ml?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "marginLeft";
        readonly scale: "spacing";
    }>;
    position?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "position";
    }>;
    inset?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "inset";
        readonly properties: readonly ["top", "right", "bottom", "left"];
        readonly transform: (value: string | number) => string | 0;
    }>;
    top?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "top";
        readonly transform: (value: string | number) => string | 0;
    }>;
    right?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "right";
        readonly transform: (value: string | number) => string | 0;
    }>;
    bottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "bottom";
        readonly transform: (value: string | number) => string | 0;
    }>;
    left?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "left";
        readonly transform: (value: string | number) => string | 0;
    }>;
    zIndex?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "zIndex";
    }>;
    opacity?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "opacity";
    }>;
    border?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "border";
        readonly scale: "borders";
    }>;
    borderX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "border";
        readonly properties: readonly ["borderLeft", "borderRight"];
        readonly scale: "borders";
    }>;
    borderY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "border";
        readonly properties: readonly ["borderTop", "borderBottom"];
        readonly scale: "borders";
    }>;
    borderTop?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTop";
        readonly scale: "borders";
    }>;
    borderRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRight";
        readonly scale: "borders";
    }>;
    borderBottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottom";
        readonly scale: "borders";
    }>;
    borderLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderLeft";
        readonly scale: "borders";
    }>;
    borderWidth?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderWidth";
    }>;
    borderWidthX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderWidth";
        readonly properties: readonly ["borderLeftWidth", "borderRightWidth"];
    }>;
    borderWidthY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderWidth";
        readonly properties: readonly ["borderTopWidth", "borderBottomWidth"];
    }>;
    borderWidthLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderLeftWidth";
    }>;
    borderWidthRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRightWidth";
    }>;
    borderWidthTop?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTopWidth";
    }>;
    borderWidthBottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottomWidth";
    }>;
    borderRadius?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRadius";
    }>;
    borderRadiusLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderBottomLeftRadius"];
    }>;
    borderRadiusTop?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderTopRightRadius"];
    }>;
    borderRadiusBottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRadius";
        readonly properties: readonly ["borderBottomLeftRadius", "borderBottomRightRadius"];
    }>;
    borderRadiusRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopRightRadius", "borderBottomRightRadius"];
    }>;
    borderRadiusTopLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTopLeftRadius";
    }>;
    borderRadiusTopRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTopRightRadius";
    }>;
    borderRadiusBottomRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottomRightRadius";
    }>;
    borderRadiusBottomLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottomLeftRadius";
    }>;
    borderStyle?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderStyle";
    }>;
    borderStyleX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderStyle";
        readonly properties: readonly ["borderLeftStyle", "borderRightStyle"];
    }>;
    borderStyleY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderStyle";
        readonly properties: readonly ["borderTopStyle", "borderBottomStyle"];
    }>;
    borderStyleLeft?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderLeftStyle";
    }>;
    borderStyleRight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderRightStyle";
    }>;
    borderStyleTop?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderTopStyle";
    }>;
    borderStyleBottom?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "borderBottomStyle";
    }>;
    size?: import("@codecademy/variance/dist/types/config").Scale<{
        property: "width";
        properties: ("width" | "height")[];
        transform: (value: string | number) => string | 0;
    }>;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, Pick<import("react").SVGProps<SVGSVGElement>, "string" | "scale" | "spacing" | "clipPath" | "cursor" | "direction" | "filter" | "fontSizeAdjust" | "fontStretch" | "fontVariant" | "imageRendering" | "paintOrder" | "pointerEvents" | "rotate" | "textRendering" | "transform" | "unicodeBidi" | "visibility" | "wordSpacing" | "writingMode" | "mask" | "offset" | "min" | "max" | "end" | "clip" | "fill" | "values" | "className" | "id" | "lang" | "media" | "method" | "name" | "style" | "target" | "type" | "role" | "tabIndex" | "crossOrigin" | "accentHeight" | "accumulate" | "additive" | "alignmentBaseline" | "allowReorder" | "alphabetic" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "exponent" | "externalResourcesRequired" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "format" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "hanging" | "horizAdvX" | "horizOriginX" | "href" | "ideographic" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "lightingColor" | "limitingConeAngle" | "local" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mathematical" | "numOctaves" | "operator" | "orient" | "orientation" | "origin" | "overlinePosition" | "overlineThickness" | "panose1" | "path" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "r" | "radius" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rx" | "ry" | "seed" | "shapeRendering" | "slope" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "stroke" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textLength" | "to" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicode" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "vMathematical" | "widths" | "x1" | "x2" | "x" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "y" | "yChannelSelector" | "z" | "zoomAndPan" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "ref" | "key">, {}>;
