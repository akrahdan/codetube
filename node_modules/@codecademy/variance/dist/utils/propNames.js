var SHORTHAND_PROPERTIES = ['border', 'borderTop', 'borderBottom', 'borderLeft', 'borderRight', 'borderWidth', 'borderStyle', 'borderColor', 'background', 'flex', 'margin', 'padding', 'transition', 'gap', 'grid', 'gridArea', 'gridColumn', 'gridRow', 'gridTemplate', 'overflow', 'transition'];
var SORT = {
  A_BEFORE_B: -1,
  B_BEFORE_A: 1,
  EQUAL: 1
};

var compare = function compare(a, b) {
  if (a < b) return SORT.A_BEFORE_B;
  if (b < a) return SORT.B_BEFORE_A;
  return SORT.EQUAL;
};
/**
 * Orders all properties by the most dependent props
 * @param config
 */


export var orderPropNames = function orderPropNames(config) {
  return Object.keys(config).sort(function (a, b) {
    var aConf = config[a],
        bConf = config[b];
    var aProp = aConf.property,
        _aConf$properties = aConf.properties,
        aProperties = _aConf$properties === void 0 ? [] : _aConf$properties;
    var bProp = bConf.property,
        _bConf$properties = bConf.properties,
        bProperties = _bConf$properties === void 0 ? [] : _bConf$properties;
    var aIsShorthand = SHORTHAND_PROPERTIES.includes(aProp);
    var bIsShorthand = SHORTHAND_PROPERTIES.includes(bProp);

    if (aIsShorthand && bIsShorthand) {
      var aNum = aProperties.length;
      var bNum = bProperties.length;

      if (aProp !== bProp) {
        return compare(SHORTHAND_PROPERTIES.indexOf(aProp), SHORTHAND_PROPERTIES.indexOf(bProp));
      }

      if (aProp === bProp) {
        if (aNum === 0) return SORT.A_BEFORE_B;
        if (bNum === 0) return SORT.B_BEFORE_A;
      }

      return compare(bNum, aNum);
    }

    if (aIsShorthand) return SORT.A_BEFORE_B;
    if (bIsShorthand) return SORT.B_BEFORE_A;
    return SORT.EQUAL;
  });
};