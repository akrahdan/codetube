function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { isObject, merge } from 'lodash';

var templateBreakpoints = function templateBreakpoints(value, alias, theme) {
  if (isObject(value)) {
    var _ = value._,
        base = value.base,
        rest = _objectWithoutProperties(value, ["_", "base"]);

    var css = _defineProperty({}, alias, _ !== null && _ !== void 0 ? _ : base);

    if (theme) {
      var breakpoints = theme.breakpoints;
      Object.keys(breakpoints).forEach(function (key) {
        css[breakpoints[key]] = _defineProperty({}, alias, rest[key]);
      });
    }

    return css;
  }

  return _defineProperty({}, alias, value);
};

export var serializeTokens = function serializeTokens(tokens, prefix, theme) {
  var tokenReferences = {};
  var tokenVariables = {};
  Object.keys(tokens).forEach(function (key) {
    var varName = "--".concat(prefix, "-").concat(key);
    tokenReferences[key] = "var(".concat(varName, ")");
    merge(tokenVariables, templateBreakpoints(tokens[key], varName, theme));
  });
  return {
    tokens: tokenReferences,
    variables: tokenVariables
  };
};