function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isObject } from 'lodash';
/**
 * Returns an exhaustive list of all possible paths of an object T for keys K.
 * Possibilities are returned as `k1.k2.k3`.
 */

export function flattenScale(object, path) {
  return Object.keys(object).reduce(function (carry, key) {
    var nextKey = path ? "".concat(path).concat(key === '_' ? '' : "-".concat(key)) : key;
    var current = object[key];

    if (isObject(current)) {
      return _objectSpread(_objectSpread({}, carry), flattenScale(current, nextKey));
    }

    return _objectSpread(_objectSpread({}, carry), {}, _defineProperty({}, nextKey, object[key]));
  }, {});
}