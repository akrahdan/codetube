function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

import { mapValues, merge } from 'lodash';
import { flattenScale } from '../utils/flattenScale';
import { serializeTokens } from '../utils/serializeTokens';

var _theme = _classPrivateFieldLooseKey("theme");

var ThemeBuilder = /*#__PURE__*/function () {
  function ThemeBuilder(baseTheme) {
    _classCallCheck(this, ThemeBuilder);

    Object.defineProperty(this, _theme, {
      writable: true,
      value: {}
    });
    _classPrivateFieldLooseBase(this, _theme)[_theme] = baseTheme;
  }
  /**
   *
   * @param key A key of the current theme to transform into CSS Variables and Variable References
   * @example .createScaleVariables('fontSize')
   */


  _createClass(ThemeBuilder, [{
    key: "createScaleVariables",
    value: function createScaleVariables(key) {
      var _merge;

      var _serializeTokens = serializeTokens(_classPrivateFieldLooseBase(this, _theme)[_theme][key], key, _classPrivateFieldLooseBase(this, _theme)[_theme]),
          variables = _serializeTokens.variables,
          tokens = _serializeTokens.tokens;

      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], (_merge = {}, _defineProperty(_merge, key, tokens), _defineProperty(_merge, "_variables", {
        root: variables
      }), _defineProperty(_merge, "_tokens", _defineProperty({}, key, _classPrivateFieldLooseBase(this, _theme)[_theme][key])), _merge));
      return this;
    }
    /**
     *
     * @param colors A map of color tokens to add to the theme. These tokens are immediately converted to CSS Variables `--color-${key}`.
     * @example .addColors({ navy: 'navy', hyper: 'purple' })
     */

  }, {
    key: "addColors",
    value: function addColors(colors) {
      var flatColors = flattenScale(colors);

      var _serializeTokens2 = serializeTokens(flatColors, 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),
          variables = _serializeTokens2.variables,
          tokens = _serializeTokens2.tokens;

      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {
        colors: tokens,
        _variables: {
          root: variables
        },
        _tokens: {
          colors: flatColors
        }
      });
      return this;
    }
    /**
     *
     * @param initialMode A key of the object passed for modes.  This sets the default state for the theme and transforms the correct variables.
     * @param modes A map of color modes with keys of each possible mode with a value of alias to color keys.  This must be called after `addColors`
     * @example .addColorModes('light', { light: { primary: 'hyper' }, { dark: { primary: 'navy' } } })
     */

  }, {
    key: "addColorModes",
    value: function addColorModes(initialMode, modes) {
      var _classPrivateFieldLoo,
          _this = this;

      // This guarantees that the final merged color modes are used when setting the default variables
      var merged = merge({}, (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _theme)[_theme]) === null || _classPrivateFieldLoo === void 0 ? void 0 : _classPrivateFieldLoo.modes, modes);

      var _serializeTokens3 = serializeTokens(mapValues(flattenScale(merged[initialMode]), function (color) {
        return _classPrivateFieldLooseBase(_this, _theme)[_theme].colors[color];
      }), 'color', _classPrivateFieldLooseBase(this, _theme)[_theme]),
          tokens = _serializeTokens3.tokens,
          variables = _serializeTokens3.variables;

      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {
        colors: tokens,
        modes: mapValues(modes, function (mode) {
          return flattenScale(mode);
        }),
        mode: initialMode,
        _getColorValue: function _getColorValue(color) {
          var _classPrivateFieldLoo2, _classPrivateFieldLoo3;

          return (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens) === null || _classPrivateFieldLoo2 === void 0 ? void 0 : (_classPrivateFieldLoo3 = _classPrivateFieldLoo2.colors) === null || _classPrivateFieldLoo3 === void 0 ? void 0 : _classPrivateFieldLoo3[color];
        },
        _variables: {
          mode: variables
        },
        _tokens: {
          modes: mapValues(modes, function (mode) {
            var modeColors = flattenScale(mode);
            return mapValues(modeColors, function (color) {
              return _classPrivateFieldLooseBase(_this, _theme)[_theme]._tokens.colors[color];
            });
          })
        }
      });
      return this;
    }
    /**
     *
     * @param key A new key of theme
     * @param createScale A function that accepts the current theme and returns a new object of scale values.
     * @example .addScale('fonts', () => ({ basic: 'Gotham', cool: 'Wingdings' }))
     */

  }, {
    key: "addScale",
    value: function addScale(key, createScale) {
      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, flattenScale(createScale(_classPrivateFieldLooseBase(this, _theme)[_theme]))));
      return this;
    }
    /**
     *
     * @param key A current key of theme to be updated with new or computed values
     * @param updateFn A function that accepts an argument of the current values at the specified keys an returns a map of new values to merge.
     * @example .updateScale('fonts', ({ basic }) => ({ basicFallback: `{basic}, Montserrat` }))
     */

  }, {
    key: "updateScale",
    value: function updateScale(key, updateFn) {
      _classPrivateFieldLooseBase(this, _theme)[_theme] = merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], _defineProperty({}, key, updateFn(_classPrivateFieldLooseBase(this, _theme)[_theme][key])));
      return this;
    }
    /**
     * This finalizes the theme build and returns the final theme and variables to be provided.
     */

  }, {
    key: "build",
    value: function build() {
      return merge({}, _classPrivateFieldLooseBase(this, _theme)[_theme], {
        _variables: {},
        _tokens: {}
      });
    }
  }]);

  return ThemeBuilder;
}();

export function createTheme(base) {
  return new ThemeBuilder(base);
}