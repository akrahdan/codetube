function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mapValues } from 'lodash';
import { createTheme } from './createTheme';
describe('createTheme', function () {
  var base = {
    breakpoints: {
      xs: '1',
      sm: '2',
      md: '3',
      lg: '4',
      xl: '5'
    }
  };
  it('works', function () {
    expect(createTheme(base).build()).toEqual(_objectSpread(_objectSpread({}, base), {}, {
      _variables: {},
      _tokens: {}
    }));
  });
  it('adds a scale', function () {
    var theme = createTheme(base).addScale('test', function () {
      return {
        test: 1,
        test2: 2
      };
    }).build();
    expect(theme.test).toEqual({
      test: 1,
      test2: 2
    });
  });
  it('updates a scale', function () {
    var builder = createTheme(base).addScale('test', function () {
      return {
        test: 1,
        test2: 2
      };
    });
    expect(builder.build().test).toEqual({
      test: 1,
      test2: 2
    });
    builder.updateScale('test', function () {
      return {
        test3: 3
      };
    });
    expect(builder.build().test).toEqual({
      test: 1,
      test2: 2,
      test3: 3
    });
  });
  it('serializes variables', function () {
    var theme = createTheme(base).addScale('test', function () {
      return {
        test: 1,
        test2: 2
      };
    }).createScaleVariables('test').build();
    expect(theme.test).toEqual({
      test: 'var(--test-test)',
      test2: 'var(--test-test2)'
    });
    expect(theme._variables.root).toEqual({
      '--test-test': 1,
      '--test-test2': 2
    });
  });
  describe('colors', function () {
    var staticColors = {
      white: 'white',
      black: 'black',
      blue: 'blue',
      green: 'green',
      red: 'red'
    };
    var cssVariableReferences = mapValues(staticColors, function (val) {
      return "var(--color-".concat(val, ")");
    });
    var builder = createTheme(base);
    it('creates color variables', function () {
      var theme = builder.addColors(staticColors).build();
      expect(theme.colors).toEqual(cssVariableReferences);
    });
    it('adds colorModes', function () {
      var theme = builder.addColors(staticColors).addColorModes('light', {
        light: {
          primary: 'red'
        },
        dark: {
          primary: 'blue'
        }
      }).build();
      expect(theme.colors).toEqual(_objectSpread(_objectSpread({}, mapValues(staticColors, function (val) {
        return "var(--color-".concat(val, ")");
      })), {}, {
        primary: 'var(--color-primary)'
      }));
      expect(theme._variables.mode).toEqual({
        '--color-primary': 'var(--color-red)'
      });
    });
    it('returns value checker for colors', function () {
      var theme = builder.addColors({
        black: '#000000',
        white: '#FFFFFF'
      }).addColorModes('light', {
        light: {
          primary: 'black'
        },
        dark: {
          primary: 'white'
        }
      }).build();
      expect(theme._getColorValue('white')).toEqual('#FFFFFF');
      expect(theme._getColorValue(theme.modes.light.primary)).toEqual('#000000');
    });
    it('returns value checker for colors', function () {
      var theme = builder.addColors({
        black: '#000000',
        white: '#FFFFFF',
        gray: {
          200: '#eeeeee',
          300: '#666666'
        }
      }).addColorModes('light', {
        light: {
          primary: {
            "default": 'gray-200',
            cool: {
              _: 'gray-300',
              town: 'black'
            }
          }
        }
      }).build();
      expect(theme._getColorValue('gray-300')).toEqual('#666666');
      expect(theme._getColorValue(theme.modes.light['primary-default'])).toEqual('#eeeeee');
    });
    it('returns the raw values of color mode colors on the tokens object', function () {
      var theme = createTheme(base).addColors({
        black: '#000000',
        gray: {
          300: '#666666'
        }
      }).addColorModes('light', {
        light: {
          primary: {
            cool: {
              _: 'gray-300',
              town: 'black'
            }
          }
        }
      }).build();
      expect(theme._tokens.modes).toEqual({
        light: {
          'primary-cool': '#666666',
          'primary-cool-town': '#000000'
        }
      });
    });
  });
});