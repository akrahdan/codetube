function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { createTracker } from '../track';
var apiBaseUrl = 'https://www.codecademy.com';
var fakeWindow = {
  location: {
    href: 'https://example.com/',
    pathname: '/',
    search: '?utm_source=twitter'
  },
  document: {
    title: 'Test Title'
  }
};
Object.defineProperty(window, 'location', {
  value: fakeWindow.location
});
Object.defineProperty(window.document, 'title', {
  value: fakeWindow.document.title
});
var beaconMock = jest.fn();
Object.defineProperty(navigator, 'sendBeacon', {
  value: beaconMock
});
afterEach(function () {
  return jest.resetAllMocks();
});
describe('createTracker', function () {
  var testEvent = function testEvent(event) {
    var target = 'test target';
    var page_name = 'test page_name';
    var href = fakeWindow.location.href;
    var track = createTracker({
      apiBaseUrl: apiBaseUrl
    });
    var expectedProps = {
      target: target,
      page_name: page_name,
      href: href
    };
    track[event](expectedProps);
    expect(beaconMock.mock.calls.length).toBe(1);
    expect(beaconMock.mock.calls[0][0]).toBe("".concat(apiBaseUrl, "/analytics/user?utm_source=twitter"));
    var formData = beaconMock.mock.calls[0][1];
    expect(formData).toBeInstanceOf(FormData);
    expect(formData.get('category')).toBe('user');
    expect(formData.get('event')).toBe(event);
    expect(formData.has('properties')).toBe(true);
    var actualProps = JSON.parse(formData.get('properties'));

    for (var _i2 = 0, _Object$entries = Object.entries(expectedProps); _i2 < _Object$entries.length; _i2++) {
      var _ref3 = _Object$entries[_i2];

      var _ref2 = _slicedToArray(_ref3, 2);

      var k = _ref2[0];
      var v = _ref2[1];
      expect(actualProps[k]).toBe(v);
    }
  };

  test('click', function () {
    testEvent('click');
  });
  test('visit', function () {
    testEvent('visit');
  });
});