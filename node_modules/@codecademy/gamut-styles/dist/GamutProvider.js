import { CacheProvider, ThemeProvider } from '@emotion/react';
import React, { useContext, useRef } from 'react';
import { createEmotionCache } from './cache';
import { Reboot, Typography } from './globals';
import { Variables } from './globals/Variables';
import { coreTheme } from './themes/core';
export var GamutContext = /*#__PURE__*/React.createContext({
  hasGlobals: false,
  hasCache: false
});
GamutContext.displayName = 'GamutContext';
export var GamutProvider = function GamutProvider(_ref) {
  var children = _ref.children,
      cache = _ref.cache,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? coreTheme : _ref$theme,
      variables = _ref.variables,
      _ref$useGlobals = _ref.useGlobals,
      useGlobals = _ref$useGlobals === void 0 ? true : _ref$useGlobals,
      _ref$useCache = _ref.useCache,
      useCache = _ref$useCache === void 0 ? true : _ref$useCache;

  var _useContext = useContext(GamutContext),
      hasGlobals = _useContext.hasGlobals,
      hasCache = _useContext.hasCache;

  var shouldCreateCache = useCache && !hasCache;
  var shouldInsertGlobals = useGlobals && !hasGlobals; // Do not initialize a new cache if one has been provided as props

  var activeCache = useRef(shouldCreateCache && (cache !== null && cache !== void 0 ? cache : createEmotionCache()));
  var contextValue = {
    hasGlobals: shouldInsertGlobals,
    hasCache: shouldCreateCache
  };
  var globals = shouldInsertGlobals && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, null), /*#__PURE__*/React.createElement(Reboot, null), /*#__PURE__*/React.createElement(Variables, {
    variables: theme._variables
  }), variables && /*#__PURE__*/React.createElement(Variables, {
    variables: variables
  }));

  if (activeCache.current) {
    return /*#__PURE__*/React.createElement(GamutContext.Provider, {
      value: contextValue
    }, /*#__PURE__*/React.createElement(CacheProvider, {
      value: activeCache.current
    }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {
      theme: theme
    }, children)));
  }

  return /*#__PURE__*/React.createElement(GamutContext.Provider, {
    value: contextValue
  }, globals, /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, children));
};