/**
 * @description This is an extended theme for the learning environment with an expanded set of tokens
 * That are not needed for the rest of the application.
 */
export declare const platformTheme: Record<"breakpoints", {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
}> & {
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    elements: Record<"elements", import("@codecademy/variance").KeyAsVariable<{
        readonly headerHeight: {
            readonly base: "4rem";
            readonly md: "5rem";
        };
        readonly headerZ: 15;
    }, "elements">> & {
        readonly headerHeight: {
            readonly base: "4rem";
            readonly md: "5rem";
        };
        readonly headerZ: 15;
    };
    fontSize: {
        readonly 64: string;
        readonly 44: string;
        readonly 34: string;
        readonly 26: string;
        readonly 22: string;
        readonly 20: string;
        readonly 18: string;
        readonly 16: string;
        readonly 14: string;
    };
    fontFamily: {
        readonly accent: "\"Suisse\", \"Apercu\", -apple-system, BlinkMacSystemFont,\n\"Segoe UI\", \"Roboto\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n\"Helvetica Neue\", sans-serif";
        readonly base: "\"Apercu\", -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n\"Roboto\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\nsans-serif";
        readonly monospace: "Monaco, Menlo, \"Ubuntu Mono\", \"Droid Sans Mono\", Consolas,\nmonospace";
        readonly system: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Ubuntu\",\n\"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif";
    };
    lineHeight: {
        readonly base: 1.5;
        readonly title: 1.1;
    };
    fontWeight: {
        readonly base: 400;
        readonly title: 700;
        readonly 700: 700;
        readonly 400: 400;
    };
    spacing: {
        readonly 0: 0;
        readonly 4: string;
        readonly 8: string;
        readonly 12: string;
        readonly 16: string;
        readonly 24: string;
        readonly 32: string;
        readonly 48: string;
        readonly 64: string;
        readonly 96: string;
    };
    _variables: Record<string, import("@codecademy/variance").CSSObject>;
    _tokens: Record<string | number, any>;
    colors: import("@codecademy/variance").KeyAsVariable<import("@codecademy/variance").LiteralPaths<{
        readonly beige: "#FFF0E5";
        readonly blue: "#1557FF";
        readonly green: "#008A27";
        readonly hyper: "#3A10E5";
        readonly lightBlue: "#66C4FF";
        readonly lightGreen: "#AEE938";
        readonly navy: "#10162F";
        readonly orange: "#FF8C00";
        readonly paleBlue: "#F5FCFF";
        readonly paleGreen: "#F5FFE3";
        readonly palePink: "#FFF5FF";
        readonly paleYellow: "#FFFAE5";
        readonly pink: "#F966FF";
        readonly paleRed: "#DC5879";
        readonly red: "#E91C11";
        readonly yellow: "#FFD300";
        readonly black: "#000000";
        readonly white: "#ffffff";
        readonly "shadow-black-slight": string;
        readonly "shadow-black-heavy": string;
        readonly "shadow-white-slight": string;
        readonly "shadow-white-heavy": string;
        readonly "beige-100": "#FFF0E5";
        readonly "blue-0": "#F5FCFF";
        readonly "blue-300": "#66C4FF";
        readonly "blue-500": "#1557FF";
        readonly "blue-800": "#1D2340";
        readonly "navy-100": "#F3F3F5";
        readonly "navy-300": "#C3C5CB";
        readonly "navy-500": "#707382";
        readonly "navy-800": "#10162F";
        readonly "navy-200": "#DBDCE0";
        readonly "navy-400": "#9FA2AC";
        readonly "navy-600": "#585C6D";
        readonly "navy-700": "#232940";
        readonly "navy-900": "#0A0D1C";
        readonly "green-0": "#F5FFE3";
        readonly "green-400": "#AEE938";
        readonly "green-700": "#008A27";
        readonly "yellow-0": "#FFFAE5";
        readonly "yellow-500": "#FFD300";
        readonly "yellow-400": "#CCA900";
        readonly "pink-0": "#FFF5FF";
        readonly "pink-400": "#F966FF";
        readonly "red-100": "#DC5879";
        readonly "red-0": "#E85D7F";
        readonly "red-500": "#E91C11";
        readonly "red-400": "#ED4941";
        readonly "orange-500": "#FF8C00";
        readonly "hyper-500": "#3A10E5";
        readonly "hyper-400": "#5533FF";
        readonly "gray-100": "#F5F5F5";
        readonly "gray-300": "#E0E0E0";
        readonly "gray-800": "#616161";
        readonly "gray-200": "#EEEEEE";
        readonly "gray-600": "#9E9E9E";
        readonly "gray-900": "#424242";
    }, "-", "">, "color"> & import("@codecademy/variance").KeyAsVariable<import("@codecademy/variance").LiteralPaths<{
        text: {
            _: "navy-800";
            disabled: "navy-500";
        };
        feedback: {
            error: "red-500";
            success: "green-700";
            warning: "yellow";
        };
        background: {
            _: "white";
            current: "white";
            primary: "beige";
            selected: "navy-100";
            disabled: "navy-200";
            hover: "navy-200";
        };
        shadow: {
            opaque: "shadow-white-heavy";
            solid: "gray-200";
        };
        primary: {
            _: "hyper-500";
            hover: "hyper-400";
        };
        secondary: {
            _: "navy-800";
            hover: "navy-700";
        };
        danger: {
            _: "red-500";
            hover: "red-400";
        };
    } | {
        text: {
            _: "white";
            disabled: "navy-200";
        };
        feedback: {
            error: "red-0";
            success: "green-0";
            warning: "yellow";
        };
        background: {
            _: "navy-800";
            current: "navy-800";
            primary: "navy-900";
            selected: "navy-700";
            disabled: "navy-500";
            hover: "navy-900";
        };
        shadow: {
            opaque: "shadow-black-heavy";
            solid: "black";
        };
        primary: {
            _: "yellow-500";
            hover: "yellow-400";
        };
        secondary: {
            _: "white";
            hover: "navy-200";
        };
        danger: {
            _: "red-0";
            hover: "red-100";
        };
    }, "-", "_">, "colors"> & import("@codecademy/variance").KeyAsVariable<import("@codecademy/variance").LiteralPaths<{
        readonly lightBeige: "#FFFBF8";
        readonly gold: "#8A7300";
        readonly teal: "#027E97";
        readonly purple: "#B3CCFF";
        readonly "beige-0": "#FFFBF8";
        readonly "pink-800": "#CA00D1";
        readonly "orange-800": "#D14900";
        readonly "gold-800": "#8A7300";
        readonly "teal-500": "#027E97";
        readonly "purple-300": "#B3CCFF";
    }, "-", "">, "color"> & import("@codecademy/variance").KeyAsVariable<import("@codecademy/variance").LiteralPaths<{
        editor: {
            attribute: "green-700";
            annotation: "red-500";
            atom: "pink-800";
            basic: "navy-800";
            comment: "navy-300";
            constant: "orange-800";
            decoration: "red-500";
            invalid: "red-500";
            key: "teal-500";
            keyword: "blue-500";
            number: "red-500";
            operator: "red-500";
            predefined: "navy-800";
            property: "red-500";
            regexp: "green-700";
            string: "gold-800";
            tag: "red-500";
            text: "orange-800";
            value: "gold-800";
            variable: "green-700";
            ui: {
                background: "white";
                text: "navy-800";
                'indent-active': "navy-900";
                'indent-inactive': "navy-600";
                'line-number': "navy-300";
            };
        };
    } | {
        editor: {
            attribute: "green-400";
            annotation: "red-0";
            atom: "pink-400";
            basic: "white";
            comment: "gray-600";
            constant: "orange-500";
            decoration: "red-0";
            invalid: "red-0";
            key: "blue-300";
            keyword: "purple-300";
            number: "red-0";
            operator: "red-0";
            predefined: "white";
            property: "red-0";
            regexp: "green-400";
            string: "yellow-500";
            tag: "red-0";
            text: "orange-500";
            value: "yellow-500";
            variable: "green-400";
            ui: {
                background: "navy-900";
                text: "white";
                'indent-active': "gray-900";
                'indent-inactive': "gray-800";
                'line-number': "gray-600";
            };
        };
    }, "-", "_">, "colors">;
    modes: {
        light: import("@codecademy/variance").LiteralPaths<{
            text: {
                _: "navy-800";
                disabled: "navy-500";
            };
            feedback: {
                error: "red-500";
                success: "green-700";
                warning: "yellow";
            };
            background: {
                _: "white";
                current: "white";
                primary: "beige";
                selected: "navy-100";
                disabled: "navy-200";
                hover: "navy-200";
            };
            shadow: {
                opaque: "shadow-white-heavy";
                solid: "gray-200";
            };
            primary: {
                _: "hyper-500";
                hover: "hyper-400";
            };
            secondary: {
                _: "navy-800";
                hover: "navy-700";
            };
            danger: {
                _: "red-500";
                hover: "red-400";
            };
        }, "-", "_">;
        dark: import("@codecademy/variance").LiteralPaths<{
            text: {
                _: "white";
                disabled: "navy-200";
            };
            feedback: {
                error: "red-0";
                success: "green-0";
                warning: "yellow";
            };
            background: {
                _: "navy-800";
                current: "navy-800";
                primary: "navy-900";
                selected: "navy-700";
                disabled: "navy-500";
                hover: "navy-900";
            };
            shadow: {
                opaque: "shadow-black-heavy";
                solid: "black";
            };
            primary: {
                _: "yellow-500";
                hover: "yellow-400";
            };
            secondary: {
                _: "white";
                hover: "navy-200";
            };
            danger: {
                _: "red-0";
                hover: "red-100";
            };
        }, "-", "_">;
    } & {
        light: import("@codecademy/variance").LiteralPaths<{
            editor: {
                attribute: "green-700";
                annotation: "red-500";
                atom: "pink-800";
                basic: "navy-800";
                comment: "navy-300";
                constant: "orange-800";
                decoration: "red-500";
                invalid: "red-500";
                key: "teal-500";
                keyword: "blue-500";
                number: "red-500";
                operator: "red-500";
                predefined: "navy-800";
                property: "red-500";
                regexp: "green-700";
                string: "gold-800";
                tag: "red-500";
                text: "orange-800";
                value: "gold-800";
                variable: "green-700";
                ui: {
                    background: "white";
                    text: "navy-800";
                    'indent-active': "navy-900";
                    'indent-inactive': "navy-600";
                    'line-number': "navy-300";
                };
            };
        }, "-", "_">;
        dark: import("@codecademy/variance").LiteralPaths<{
            editor: {
                attribute: "green-400";
                annotation: "red-0";
                atom: "pink-400";
                basic: "white";
                comment: "gray-600";
                constant: "orange-500";
                decoration: "red-0";
                invalid: "red-0";
                key: "blue-300";
                keyword: "purple-300";
                number: "red-0";
                operator: "red-0";
                predefined: "white";
                property: "red-0";
                regexp: "green-400";
                string: "yellow-500";
                tag: "red-0";
                text: "orange-500";
                value: "yellow-500";
                variable: "green-400";
                ui: {
                    background: "navy-900";
                    text: "white";
                    'indent-active': "gray-900";
                    'indent-inactive': "gray-800";
                    'line-number': "gray-600";
                };
            };
        }, "-", "_">;
    };
    mode: "light" | "dark";
    _getColorValue: ((color: import("@codecademy/variance").Path<{
        readonly beige: "#FFF0E5";
        readonly blue: "#1557FF";
        readonly green: "#008A27";
        readonly hyper: "#3A10E5";
        readonly lightBlue: "#66C4FF";
        readonly lightGreen: "#AEE938";
        readonly navy: "#10162F";
        readonly orange: "#FF8C00";
        readonly paleBlue: "#F5FCFF";
        readonly paleGreen: "#F5FFE3";
        readonly palePink: "#FFF5FF";
        readonly paleYellow: "#FFFAE5";
        readonly pink: "#F966FF";
        readonly paleRed: "#DC5879";
        readonly red: "#E91C11";
        readonly yellow: "#FFD300";
        readonly black: "#000000";
        readonly white: "#ffffff";
        readonly "shadow-black-slight": string;
        readonly "shadow-black-heavy": string;
        readonly "shadow-white-slight": string;
        readonly "shadow-white-heavy": string;
        readonly "beige-100": "#FFF0E5";
        readonly "blue-0": "#F5FCFF";
        readonly "blue-300": "#66C4FF";
        readonly "blue-500": "#1557FF";
        readonly "blue-800": "#1D2340";
        readonly "navy-100": "#F3F3F5";
        readonly "navy-300": "#C3C5CB";
        readonly "navy-500": "#707382";
        readonly "navy-800": "#10162F";
        readonly "navy-200": "#DBDCE0";
        readonly "navy-400": "#9FA2AC";
        readonly "navy-600": "#585C6D";
        readonly "navy-700": "#232940";
        readonly "navy-900": "#0A0D1C";
        readonly "green-0": "#F5FFE3";
        readonly "green-400": "#AEE938";
        readonly "green-700": "#008A27";
        readonly "yellow-0": "#FFFAE5";
        readonly "yellow-500": "#FFD300";
        readonly "yellow-400": "#CCA900";
        readonly "pink-0": "#FFF5FF";
        readonly "pink-400": "#F966FF";
        readonly "red-100": "#DC5879";
        readonly "red-0": "#E85D7F";
        readonly "red-500": "#E91C11";
        readonly "red-400": "#ED4941";
        readonly "orange-500": "#FF8C00";
        readonly "hyper-500": "#3A10E5";
        readonly "hyper-400": "#5533FF";
        readonly "gray-100": "#F5F5F5";
        readonly "gray-300": "#E0E0E0";
        readonly "gray-800": "#616161";
        readonly "gray-200": "#EEEEEE";
        readonly "gray-600": "#9E9E9E";
        readonly "gray-900": "#424242";
    }, "-">) => string) & ((color: import("@codecademy/variance").Path<{
        readonly beige: "#FFF0E5";
        readonly blue: "#1557FF";
        readonly green: "#008A27";
        readonly hyper: "#3A10E5";
        readonly lightBlue: "#66C4FF";
        readonly lightGreen: "#AEE938";
        readonly navy: "#10162F";
        readonly orange: "#FF8C00";
        readonly paleBlue: "#F5FCFF";
        readonly paleGreen: "#F5FFE3";
        readonly palePink: "#FFF5FF";
        readonly paleYellow: "#FFFAE5";
        readonly pink: "#F966FF";
        readonly paleRed: "#DC5879";
        readonly red: "#E91C11";
        readonly yellow: "#FFD300";
        readonly black: "#000000";
        readonly white: "#ffffff";
        readonly "shadow-black-slight": string;
        readonly "shadow-black-heavy": string;
        readonly "shadow-white-slight": string;
        readonly "shadow-white-heavy": string;
        readonly "beige-100": "#FFF0E5";
        readonly "blue-0": "#F5FCFF";
        readonly "blue-300": "#66C4FF";
        readonly "blue-500": "#1557FF";
        readonly "blue-800": "#1D2340";
        readonly "navy-100": "#F3F3F5";
        readonly "navy-300": "#C3C5CB";
        readonly "navy-500": "#707382";
        readonly "navy-800": "#10162F";
        readonly "navy-200": "#DBDCE0";
        readonly "navy-400": "#9FA2AC";
        readonly "navy-600": "#585C6D";
        readonly "navy-700": "#232940";
        readonly "navy-900": "#0A0D1C";
        readonly "green-0": "#F5FFE3";
        readonly "green-400": "#AEE938";
        readonly "green-700": "#008A27";
        readonly "yellow-0": "#FFFAE5";
        readonly "yellow-500": "#FFD300";
        readonly "yellow-400": "#CCA900";
        readonly "pink-0": "#FFF5FF";
        readonly "pink-400": "#F966FF";
        readonly "red-100": "#DC5879";
        readonly "red-0": "#E85D7F";
        readonly "red-500": "#E91C11";
        readonly "red-400": "#ED4941";
        readonly "orange-500": "#FF8C00";
        readonly "hyper-500": "#3A10E5";
        readonly "hyper-400": "#5533FF";
        readonly "gray-100": "#F5F5F5";
        readonly "gray-300": "#E0E0E0";
        readonly "gray-800": "#616161";
        readonly "gray-200": "#EEEEEE";
        readonly "gray-600": "#9E9E9E";
        readonly "gray-900": "#424242";
    }, "-"> | "text" | "background" | "primary" | "secondary" | "danger" | "shadow-opaque" | "shadow-solid" | "text-disabled" | "feedback-error" | "feedback-success" | "feedback-warning" | "background-primary" | "background-disabled" | "background-current" | "background-selected" | "background-hover" | "primary-hover" | "secondary-hover" | "danger-hover" | import("@codecademy/variance").Path<{
        readonly lightBeige: "#FFFBF8";
        readonly gold: "#8A7300";
        readonly teal: "#027E97";
        readonly purple: "#B3CCFF";
        readonly "beige-0": "#FFFBF8";
        readonly "pink-800": "#CA00D1";
        readonly "orange-800": "#D14900";
        readonly "gold-800": "#8A7300";
        readonly "teal-500": "#027E97";
        readonly "purple-300": "#B3CCFF";
    }, "-">) => string);
    borders: import("@codecademy/variance").LiteralPaths<{
        1: string;
        2: string;
    }, "-", "">;
} & import("@codecademy/variance/dist/createTheme/types").PrivateThemeKeys;
export declare type PlatformThemeShape = typeof platformTheme;
export interface PlatformTheme extends PlatformThemeShape {
}
