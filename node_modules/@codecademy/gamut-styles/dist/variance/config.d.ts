export declare const color: {
    readonly color: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly textColor: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly bg: {
        readonly property: "backgroundColor";
        readonly scale: "colors";
    };
    readonly borderColor: {
        readonly property: "borderColor";
        readonly scale: "colors";
    };
    readonly borderColorX: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    };
    readonly borderColorY: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    };
    readonly borderColorLeft: {
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    };
    readonly borderColorRight: {
        readonly property: "borderRightColor";
        readonly scale: "colors";
    };
    readonly borderColorTop: {
        readonly property: "borderTopColor";
        readonly scale: "colors";
    };
    readonly borderColorBottom: {
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    };
};
export declare const border: {
    readonly border: {
        readonly property: "border";
        readonly scale: "borders";
    };
    readonly borderX: {
        readonly property: "border";
        readonly properties: readonly ["borderLeft", "borderRight"];
        readonly scale: "borders";
    };
    readonly borderY: {
        readonly property: "border";
        readonly properties: readonly ["borderTop", "borderBottom"];
        readonly scale: "borders";
    };
    readonly borderTop: {
        readonly property: "borderTop";
        readonly scale: "borders";
    };
    readonly borderRight: {
        readonly property: "borderRight";
        readonly scale: "borders";
    };
    readonly borderBottom: {
        readonly property: "borderBottom";
        readonly scale: "borders";
    };
    readonly borderLeft: {
        readonly property: "borderLeft";
        readonly scale: "borders";
    };
    readonly borderWidth: {
        readonly property: "borderWidth";
    };
    readonly borderWidthX: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderLeftWidth", "borderRightWidth"];
    };
    readonly borderWidthY: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderTopWidth", "borderBottomWidth"];
    };
    readonly borderWidthLeft: {
        readonly property: "borderLeftWidth";
    };
    readonly borderWidthRight: {
        readonly property: "borderRightWidth";
    };
    readonly borderWidthTop: {
        readonly property: "borderTopWidth";
    };
    readonly borderWidthBottom: {
        readonly property: "borderBottomWidth";
    };
    readonly borderRadius: {
        readonly property: "borderRadius";
    };
    readonly borderRadiusLeft: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderBottomLeftRadius"];
    };
    readonly borderRadiusTop: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderTopRightRadius"];
    };
    readonly borderRadiusBottom: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderBottomLeftRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusRight: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopRightRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusTopLeft: {
        readonly property: "borderTopLeftRadius";
    };
    readonly borderRadiusTopRight: {
        readonly property: "borderTopRightRadius";
    };
    readonly borderRadiusBottomRight: {
        readonly property: "borderBottomRightRadius";
    };
    readonly borderRadiusBottomLeft: {
        readonly property: "borderBottomLeftRadius";
    };
    readonly borderStyle: {
        readonly property: "borderStyle";
    };
    readonly borderStyleX: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderLeftStyle", "borderRightStyle"];
    };
    readonly borderStyleY: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderTopStyle", "borderBottomStyle"];
    };
    readonly borderStyleLeft: {
        readonly property: "borderLeftStyle";
    };
    readonly borderStyleRight: {
        readonly property: "borderRightStyle";
    };
    readonly borderStyleTop: {
        readonly property: "borderTopStyle";
    };
    readonly borderStyleBottom: {
        readonly property: "borderBottomStyle";
    };
};
export declare const flex: {
    readonly flexBasis: {
        readonly property: "flexBasis";
    };
    readonly flexShrink: {
        readonly property: "flexShrink";
    };
    readonly flexGrow: {
        readonly property: "flexGrow";
    };
    readonly order: {
        readonly property: "order";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly justifyContent: {
        readonly property: "justifyContent";
    };
    readonly justifyItems: {
        readonly property: "justifyItems";
    };
    readonly alignItems: {
        readonly property: "alignItems";
    };
    readonly alignContent: {
        readonly property: "alignContent";
    };
    readonly flexDirection: {
        readonly property: "flexDirection";
    };
    readonly flexWrap: {
        readonly property: "flexWrap";
    };
    readonly flex: {
        readonly property: "flex";
    };
};
export declare const grid: {
    readonly gridColumn: {
        readonly property: "gridColumn";
    };
    readonly gridRow: {
        readonly property: "gridRow";
    };
    readonly gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    readonly gridRowStart: {
        readonly property: "gridRowStart";
    };
    readonly gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    readonly gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly justifyContent: {
        readonly property: "justifyContent";
    };
    readonly justifyItems: {
        readonly property: "justifyItems";
    };
    readonly alignItems: {
        readonly property: "alignItems";
    };
    readonly alignContent: {
        readonly property: "alignContent";
    };
    readonly gridAutoColumns: {
        readonly property: "gridAutoColumns";
    };
    readonly gridAutoRows: {
        readonly property: "gridAutoRows";
    };
    readonly gridTemplateColumns: {
        readonly property: "gridTemplateColumns";
    };
    readonly gridTemplateRows: {
        readonly property: "gridTemplateRows";
    };
    readonly gridTemplateAreas: {
        readonly property: "gridTemplateAreas";
    };
    readonly gridAutoFlow: {
        readonly property: "gridAutoFlow";
    };
    readonly gap: {
        readonly property: "gap";
        readonly scale: "spacing";
    };
    readonly rowGap: {
        readonly property: "rowGap";
        readonly scale: "spacing";
    };
    readonly columnGap: {
        readonly property: "columnGap";
        readonly scale: "spacing";
    };
};
export declare const background: {
    readonly background: {
        readonly property: "background";
    };
    readonly backgroundImage: {
        readonly property: "backgroundImage";
    };
    readonly backgroundSize: {
        readonly property: "backgroundSize";
    };
    readonly backgroundRepeat: {
        readonly property: "backgroundRepeat";
    };
    readonly backgroundPosition: {
        readonly property: "backgroundPosition";
    };
};
export declare const positioning: {
    readonly position: {
        readonly property: "position";
    };
    readonly inset: {
        readonly property: "inset";
        readonly properties: readonly ["top", "right", "bottom", "left"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly top: {
        readonly property: "top";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly right: {
        readonly property: "right";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly bottom: {
        readonly property: "bottom";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly left: {
        readonly property: "left";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly zIndex: {
        readonly property: "zIndex";
    };
    readonly opacity: {
        readonly property: "opacity";
    };
};
export declare const shadows: {
    readonly boxShadow: {
        readonly property: "boxShadow";
    };
    readonly textShadow: {
        readonly property: "textShadow";
    };
};
export declare const layout: {
    readonly flexBasis: {
        readonly property: "flexBasis";
    };
    readonly flexShrink: {
        readonly property: "flexShrink";
    };
    readonly flexGrow: {
        readonly property: "flexGrow";
    };
    readonly order: {
        readonly property: "order";
    };
    readonly gridColumn: {
        readonly property: "gridColumn";
    };
    readonly gridRow: {
        readonly property: "gridRow";
    };
    readonly gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    readonly gridRowStart: {
        readonly property: "gridRowStart";
    };
    readonly gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    readonly gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly display: {
        readonly property: "display";
    };
    readonly overflow: {
        readonly property: "overflow";
    };
    readonly overflowX: {
        readonly property: "overflowX";
    };
    readonly overflowY: {
        readonly property: "overflowY";
    };
    readonly dimensions: {
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly width: {
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minWidth: {
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxWidth: {
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly height: {
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minHeight: {
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxHeight: {
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly verticalAlign: {
        readonly property: "verticalAlign";
    };
};
export declare const typography: {
    readonly fontFamily: {
        readonly property: "fontFamily";
        readonly scale: "fontFamily";
    };
    readonly fontWeight: {
        readonly property: "fontWeight";
        readonly scale: "fontWeight";
    };
    readonly lineHeight: {
        readonly property: "lineHeight";
        readonly scale: "lineHeight";
    };
    readonly fontSize: {
        readonly property: "fontSize";
        readonly scale: "fontSize";
    };
    readonly letterSpacing: {
        readonly property: "letterSpacing";
    };
    readonly textAlign: {
        readonly property: "textAlign";
    };
    readonly fontStyle: {
        readonly property: "fontStyle";
    };
    readonly textDecoration: {
        readonly property: "textDecoration";
    };
    readonly textTransform: {
        readonly property: "textTransform";
    };
    readonly whiteSpace: {
        readonly property: "whiteSpace";
    };
};
export declare const margin: {
    readonly m: {
        readonly property: "margin";
        readonly scale: "spacing";
    };
    readonly mx: {
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    };
    readonly my: {
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    };
    readonly mt: {
        readonly property: "marginTop";
        readonly scale: "spacing";
    };
    readonly mb: {
        readonly property: "marginBottom";
        readonly scale: "spacing";
    };
    readonly mr: {
        readonly property: "marginRight";
        readonly scale: "spacing";
    };
    readonly ml: {
        readonly property: "marginLeft";
        readonly scale: "spacing";
    };
};
export declare const padding: {
    readonly p: {
        readonly property: "padding";
        readonly scale: "spacing";
    };
    readonly px: {
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    };
    readonly py: {
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    };
    readonly pt: {
        readonly property: "paddingTop";
        readonly scale: "spacing";
    };
    readonly pb: {
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    };
    readonly pr: {
        readonly property: "paddingRight";
        readonly scale: "spacing";
    };
    readonly pl: {
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    };
};
export declare const space: {
    readonly p: {
        readonly property: "padding";
        readonly scale: "spacing";
    };
    readonly px: {
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    };
    readonly py: {
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    };
    readonly pt: {
        readonly property: "paddingTop";
        readonly scale: "spacing";
    };
    readonly pb: {
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    };
    readonly pr: {
        readonly property: "paddingRight";
        readonly scale: "spacing";
    };
    readonly pl: {
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    };
    readonly m: {
        readonly property: "margin";
        readonly scale: "spacing";
    };
    readonly mx: {
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    };
    readonly my: {
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    };
    readonly mt: {
        readonly property: "marginTop";
        readonly scale: "spacing";
    };
    readonly mb: {
        readonly property: "marginBottom";
        readonly scale: "spacing";
    };
    readonly mr: {
        readonly property: "marginRight";
        readonly scale: "spacing";
    };
    readonly ml: {
        readonly property: "marginLeft";
        readonly scale: "spacing";
    };
};
export declare const all: {
    color: {
        readonly property: "color";
        readonly scale: "colors";
    };
    textColor: {
        readonly property: "color";
        readonly scale: "colors";
    };
    bg: {
        readonly property: "backgroundColor";
        readonly scale: "colors";
    };
    borderColor: {
        readonly property: "borderColor";
        readonly scale: "colors";
    };
    borderColorX: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    };
    borderColorY: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    };
    borderColorLeft: {
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    };
    borderColorRight: {
        readonly property: "borderRightColor";
        readonly scale: "colors";
    };
    borderColorTop: {
        readonly property: "borderTopColor";
        readonly scale: "colors";
    };
    borderColorBottom: {
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    };
    background: {
        readonly property: "background";
    };
    backgroundImage: {
        readonly property: "backgroundImage";
    };
    backgroundSize: {
        readonly property: "backgroundSize";
    };
    backgroundRepeat: {
        readonly property: "backgroundRepeat";
    };
    backgroundPosition: {
        readonly property: "backgroundPosition";
    };
    border: {
        readonly property: "border";
        readonly scale: "borders";
    };
    borderX: {
        readonly property: "border";
        readonly properties: readonly ["borderLeft", "borderRight"];
        readonly scale: "borders";
    };
    borderY: {
        readonly property: "border";
        readonly properties: readonly ["borderTop", "borderBottom"];
        readonly scale: "borders";
    };
    borderTop: {
        readonly property: "borderTop";
        readonly scale: "borders";
    };
    borderRight: {
        readonly property: "borderRight";
        readonly scale: "borders";
    };
    borderBottom: {
        readonly property: "borderBottom";
        readonly scale: "borders";
    };
    borderLeft: {
        readonly property: "borderLeft";
        readonly scale: "borders";
    };
    borderWidth: {
        readonly property: "borderWidth";
    };
    borderWidthX: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderLeftWidth", "borderRightWidth"];
    };
    borderWidthY: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderTopWidth", "borderBottomWidth"];
    };
    borderWidthLeft: {
        readonly property: "borderLeftWidth";
    };
    borderWidthRight: {
        readonly property: "borderRightWidth";
    };
    borderWidthTop: {
        readonly property: "borderTopWidth";
    };
    borderWidthBottom: {
        readonly property: "borderBottomWidth";
    };
    borderRadius: {
        readonly property: "borderRadius";
    };
    borderRadiusLeft: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderBottomLeftRadius"];
    };
    borderRadiusTop: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderTopRightRadius"];
    };
    borderRadiusBottom: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderBottomLeftRadius", "borderBottomRightRadius"];
    };
    borderRadiusRight: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopRightRadius", "borderBottomRightRadius"];
    };
    borderRadiusTopLeft: {
        readonly property: "borderTopLeftRadius";
    };
    borderRadiusTopRight: {
        readonly property: "borderTopRightRadius";
    };
    borderRadiusBottomRight: {
        readonly property: "borderBottomRightRadius";
    };
    borderRadiusBottomLeft: {
        readonly property: "borderBottomLeftRadius";
    };
    borderStyle: {
        readonly property: "borderStyle";
    };
    borderStyleX: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderLeftStyle", "borderRightStyle"];
    };
    borderStyleY: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderTopStyle", "borderBottomStyle"];
    };
    borderStyleLeft: {
        readonly property: "borderLeftStyle";
    };
    borderStyleRight: {
        readonly property: "borderRightStyle";
    };
    borderStyleTop: {
        readonly property: "borderTopStyle";
    };
    borderStyleBottom: {
        readonly property: "borderBottomStyle";
    };
    position: {
        readonly property: "position";
    };
    inset: {
        readonly property: "inset";
        readonly properties: readonly ["top", "right", "bottom", "left"];
        readonly transform: (value: string | number) => string | 0;
    };
    top: {
        readonly property: "top";
        readonly transform: (value: string | number) => string | 0;
    };
    right: {
        readonly property: "right";
        readonly transform: (value: string | number) => string | 0;
    };
    bottom: {
        readonly property: "bottom";
        readonly transform: (value: string | number) => string | 0;
    };
    left: {
        readonly property: "left";
        readonly transform: (value: string | number) => string | 0;
    };
    zIndex: {
        readonly property: "zIndex";
    };
    opacity: {
        readonly property: "opacity";
    };
    flexBasis: {
        readonly property: "flexBasis";
    };
    flexShrink: {
        readonly property: "flexShrink";
    };
    flexGrow: {
        readonly property: "flexGrow";
    };
    order: {
        readonly property: "order";
    };
    gridColumn: {
        readonly property: "gridColumn";
    };
    gridRow: {
        readonly property: "gridRow";
    };
    gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    gridRowStart: {
        readonly property: "gridRowStart";
    };
    gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    justifySelf: {
        readonly property: "justifySelf";
    };
    alignSelf: {
        readonly property: "alignSelf";
    };
    gridArea: {
        readonly property: "gridArea";
    };
    display: {
        readonly property: "display";
    };
    overflow: {
        readonly property: "overflow";
    };
    overflowX: {
        readonly property: "overflowX";
    };
    overflowY: {
        readonly property: "overflowY";
    };
    dimensions: {
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    };
    width: {
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    };
    minWidth: {
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    maxWidth: {
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    height: {
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    };
    minHeight: {
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    maxHeight: {
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    verticalAlign: {
        readonly property: "verticalAlign";
    };
    justifyContent: {
        readonly property: "justifyContent";
    };
    justifyItems: {
        readonly property: "justifyItems";
    };
    alignItems: {
        readonly property: "alignItems";
    };
    alignContent: {
        readonly property: "alignContent";
    };
    flexDirection: {
        readonly property: "flexDirection";
    };
    flexWrap: {
        readonly property: "flexWrap";
    };
    flex: {
        readonly property: "flex";
    };
    gridAutoColumns: {
        readonly property: "gridAutoColumns";
    };
    gridAutoRows: {
        readonly property: "gridAutoRows";
    };
    gridTemplateColumns: {
        readonly property: "gridTemplateColumns";
    };
    gridTemplateRows: {
        readonly property: "gridTemplateRows";
    };
    gridTemplateAreas: {
        readonly property: "gridTemplateAreas";
    };
    gridAutoFlow: {
        readonly property: "gridAutoFlow";
    };
    gap: {
        readonly property: "gap";
        readonly scale: "spacing";
    };
    rowGap: {
        readonly property: "rowGap";
        readonly scale: "spacing";
    };
    columnGap: {
        readonly property: "columnGap";
        readonly scale: "spacing";
    };
    boxShadow: {
        readonly property: "boxShadow";
    };
    textShadow: {
        readonly property: "textShadow";
    };
    p: {
        readonly property: "padding";
        readonly scale: "spacing";
    };
    px: {
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    };
    py: {
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    };
    pt: {
        readonly property: "paddingTop";
        readonly scale: "spacing";
    };
    pb: {
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    };
    pr: {
        readonly property: "paddingRight";
        readonly scale: "spacing";
    };
    pl: {
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    };
    m: {
        readonly property: "margin";
        readonly scale: "spacing";
    };
    mx: {
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    };
    my: {
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    };
    mt: {
        readonly property: "marginTop";
        readonly scale: "spacing";
    };
    mb: {
        readonly property: "marginBottom";
        readonly scale: "spacing";
    };
    mr: {
        readonly property: "marginRight";
        readonly scale: "spacing";
    };
    ml: {
        readonly property: "marginLeft";
        readonly scale: "spacing";
    };
    fontFamily: {
        readonly property: "fontFamily";
        readonly scale: "fontFamily";
    };
    fontWeight: {
        readonly property: "fontWeight";
        readonly scale: "fontWeight";
    };
    lineHeight: {
        readonly property: "lineHeight";
        readonly scale: "lineHeight";
    };
    fontSize: {
        readonly property: "fontSize";
        readonly scale: "fontSize";
    };
    letterSpacing: {
        readonly property: "letterSpacing";
    };
    textAlign: {
        readonly property: "textAlign";
    };
    fontStyle: {
        readonly property: "fontStyle";
    };
    textDecoration: {
        readonly property: "textDecoration";
    };
    textTransform: {
        readonly property: "textTransform";
    };
    whiteSpace: {
        readonly property: "whiteSpace";
    };
};
