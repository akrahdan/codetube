function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { getContrast } from 'polished';
import React, { forwardRef, useCallback, useMemo } from 'react';
import { ColorMode, useColorModes } from './ColorMode';

var isColorAlias = function isColorAlias(mode, color) {
  return Object.keys(mode).includes(color);
};

export var Background = /*#__PURE__*/forwardRef(function Background(_ref, ref) {
  var bg = _ref.bg,
      rest = _objectWithoutProperties(_ref, ["bg"]);

  var _useColorModes = useColorModes(),
      _useColorModes2 = _slicedToArray(_useColorModes, 4),
      active = _useColorModes2[0],
      activeColors = _useColorModes2[1],
      modes = _useColorModes2[2],
      getColorValue = _useColorModes2[3];
  /** If a color alias was used then look up the true color key from the active mode */


  var trueColor = useMemo(function () {
    if (isColorAlias(activeColors, bg)) {
      return activeColors[bg];
    }

    return bg;
  }, [bg, activeColors]);
  var getTextContrast = useCallback(function (foreground) {
    return getContrast(getColorValue(foreground), getColorValue(trueColor));
  }, [trueColor, getColorValue]);
  /**
   * This compares the contrast of the selected background color
   * and each color modes body text and returns the mode that has
   * the highest contrast standard. This is not perfect as it is
   * probable that certain color modes will never be reachable if
   * there are more than 2 color modes.
   *
   * This does not guarantee a level of A/AA/AA compliance.
   */

  var accessibleMode = useMemo(function () {
    var activeMode = modes[active],
        otherModes = _objectWithoutProperties(modes, [active].map(_toPropertyKey));

    var possibleModes = Object.entries(otherModes);
    /**
     * Reduce all remaining modes to the mode key with the highest contrast
     * value.
     *
     * TODO: Add a tiebreaker.  This could possibly have other dimensions as
     * it will likelyfail to return a mode outside of the lighest and
     * darkest versions.
     */

    var _possibleModes$reduce = possibleModes.reduce(function (_ref2, _ref3) {
      var _ref4 = _slicedToArray(_ref2, 2),
          prevMode = _ref4[0],
          prevContrast = _ref4[1];

      var _ref5 = _slicedToArray(_ref3, 2),
          mode = _ref5[0],
          text = _ref5[1].text;

      var contrast = getTextContrast(text); // Keep the higher contrast mode.

      return contrast > prevContrast ? [mode, contrast] : [prevMode, prevContrast];
    }, [active, getTextContrast(activeMode.text)]),
        _possibleModes$reduce2 = _slicedToArray(_possibleModes$reduce, 1),
        highestContrastMode = _possibleModes$reduce2[0];

    return highestContrastMode;
  }, [modes, active, getTextContrast]);
  return /*#__PURE__*/React.createElement(ColorMode, _extends({}, rest, {
    mode: accessibleMode,
    bg: bg,
    ref: ref
  }));
});