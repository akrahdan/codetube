function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import { focusVisible } from './stylisPlugins';
export var EMOTION_KEY = 'gamut';
export var EMOTION_CONTAINER = 'emotion-styles';

var getEmotionNode = function getEmotionNode() {
  if (typeof document === 'undefined') {
    return;
  }

  var node = document.getElementById(EMOTION_CONTAINER);
  if (node) return node;
  node = document.createElement('div');
  node.setAttribute('id', EMOTION_CONTAINER); // if this has not been created add it to the DOM at the top of the body

  document.getElementsByTagName('body')[0].prepend(node);
  return node;
};

export var createEmotionCache = function createEmotionCache(overrides) {
  var _overrides$container, _overrides$stylisPlug;

  return createCache(_objectSpread(_objectSpread({
    key: EMOTION_KEY,
    speedy: process.env.NODE_ENV !== 'development',
    container: (_overrides$container = overrides === null || overrides === void 0 ? void 0 : overrides.container) !== null && _overrides$container !== void 0 ? _overrides$container : getEmotionNode()
  }, overrides), {}, {
    stylisPlugins: [].concat(_toConsumableArray((_overrides$stylisPlug = overrides === null || overrides === void 0 ? void 0 : overrides.stylisPlugins) !== null && _overrides$stylisPlug !== void 0 ? _overrides$stylisPlug : []), [focusVisible, prefixer])
  }));
};