function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import cx from 'classnames';
import { hasIn } from 'lodash';
import React from 'react';
import { ButtonDeprecatedBase } from '../ButtonDeprecatedBase';
import { omitProps } from '../utils/omitProps';
import styles from './styles/index.module.scss'; // themes can be an alias to a color
// or a unique button type

export var buttonPresetThemes = {
  secondary: 'mint',
  platform: 'greyblue',
  lantern: 'darkmint',
  royalblue: 'brand-purple'
};
var themes = ['hyper', 'navy', 'red', 'white', 'brand-red', 'brand-yellow', 'brand-purple', 'brand-dark-blue', 'brand-blue', 'mint', 'darkmint', 'grey', 'greyblue'];
var propKeys = ['theme', 'size', 'outline', 'underline', 'link', 'caps', 'go', 'children', 'block', 'className', 'round', 'square', 'flat', 'fitText', 'onClick'];

var isPreset = function isPreset(theme) {
  return hasIn(buttonPresetThemes, theme);
};
/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 *
 * See [FillButon](https://gamut.codecademy.com/storybook/?path=/docs/atoms-button--fill-button#fill-button)
 *
 * @example
 * import { FillButton } fom '@codecademy/gamut';
 *
 * <FillButton variant="primary" />
 */


export var ButtonDeprecated = function ButtonDeprecated(props) {
  var _cx;

  var _props$theme = props.theme,
      theme = _props$theme === void 0 ? 'brand-red' : _props$theme;

  if (isPreset(theme)) {
    theme = buttonPresetThemes[theme];
  }

  var typeClassName = props.link ? styles.link : styles.btn;
  var themeClassName = props.link ? styles["link-".concat(theme)] : styles["btn-".concat(theme)];
  var classes = cx(typeClassName, themeClassName, styles[props.size], (_cx = {}, _defineProperty(_cx, styles.block, props.block), _defineProperty(_cx, styles.go, props.go), _defineProperty(_cx, styles.outline, props.outline), _defineProperty(_cx, styles.underline, props.underline), _defineProperty(_cx, styles.caps, props.caps), _defineProperty(_cx, styles.round, props.round), _defineProperty(_cx, styles.square, props.square), _defineProperty(_cx, styles.flat, props.flat), _defineProperty(_cx, styles['fit-text'], props.fitText), _cx), props.className);
  var propsToTransfer = omitProps(propKeys, props);
  return /*#__PURE__*/React.createElement(ButtonDeprecatedBase, _extends({}, propsToTransfer, {
    className: classes,
    link: props.link,
    onClick: props.onClick
  }), props.children);
};