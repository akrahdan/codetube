function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { ArrowChevronDownIcon } from '@codecademy/gamut-icons';
import cx from 'classnames';
import React from 'react';
import { ButtonDeprecated } from '../ButtonDeprecated';
import { ButtonDeprecatedBase } from '../ButtonDeprecatedBase';
import styles from './styles.module.scss';
var buttonThemes = {
  blue: {
    component: ButtonDeprecated,
    props: {
      flat: true,
      theme: 'white'
    }
  },
  plain: {
    component: ButtonDeprecated,
    props: {
      flat: true,
      theme: 'brand-dark-blue'
    }
  },
  yellow: {
    component: ButtonDeprecatedBase,
    props: {}
  }
};
/**
 * @deprecated
 * This component is in the old visual identity and will be updated soon.
 *
 * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status
 */

export var AccordionButton = function AccordionButton(_ref) {
  var children = _ref.children,
      className = _ref.className,
      expanded = _ref.expanded,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'normal' : _ref$size,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? 'plain' : _ref$theme,
      baseProps = _objectWithoutProperties(_ref, ["children", "className", "expanded", "size", "theme"]);

  var _buttonThemes$theme = buttonThemes[theme],
      ButtonComponent = _buttonThemes$theme.component,
      props = _buttonThemes$theme.props;
  var iconSize = size === 'large' ? 30 : undefined;
  return /*#__PURE__*/React.createElement(ButtonComponent, _extends({
    "aria-expanded": expanded,
    className: cx(styles.accordionButton, styles[theme], styles[size], className)
  }, baseProps, props), /*#__PURE__*/React.createElement("span", {
    className: styles.children
  }, children), /*#__PURE__*/React.createElement(ArrowChevronDownIcon, {
    className: cx(styles.expansionIcon, expanded && styles.expansionIconExpanded),
    height: iconSize,
    width: iconSize,
    "aria-hidden": true
  }));
};