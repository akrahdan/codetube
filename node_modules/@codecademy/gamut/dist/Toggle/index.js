import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { screenReaderOnly } from '@codecademy/gamut-styles';
import React from 'react';
import { Box } from '../Box';
import { HiddenText } from '../HiddenText';
var sizes = {
  medium: {
    height: '30px',
    width: '60px'
  },
  small: {
    height: '18px',
    width: '36px'
  }
};
var colors = ['blue', 'hyper'];

var ToggleTrack = /*#__PURE__*/_styled(Box, {
  target: "e11yk3kb2",
  label: "ToggleTrack"
})("transition:background-color 0.2s ease;&:after{content:'';transition:opacity 0.2s ease;opacity:0;border-radius:inherit;position:absolute;width:calc(100% + 8px);height:calc(100% + 8px);top:-4px;left:-4px;border-color:inherit;border-style:solid;border-width:2px;}", Box, "{transition:all 0.5s cubic-bezier(0.23, 1, 0.32, 1);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ub2dnbGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJDK0IiLCJmaWxlIjoiLi4vLi4vc3JjL1RvZ2dsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY3JlZW5SZWFkZXJPbmx5IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL0JveCc7XG5pbXBvcnQgeyBIaWRkZW5UZXh0IH0gZnJvbSAnLi4vSGlkZGVuVGV4dCc7XG5cbmV4cG9ydCB0eXBlIFRvZ2dsZVNpemVzID0ga2V5b2YgdHlwZW9mIHNpemVzO1xuZXhwb3J0IHR5cGUgVG9nZ2xlVmFyaWFudHMgPSB0eXBlb2YgY29sb3JzW251bWJlcl07XG5cbmV4cG9ydCB0eXBlIExhYmVsUHJvcHMgPSB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdmFyaWFudD86IFRvZ2dsZVZhcmlhbnRzO1xufTtcblxuZXhwb3J0IHR5cGUgVG9nZ2xlUHJvcHMgPSB7XG4gIC8qKiBUaGUgc3RhdGUgb2YgdGhlIGNoZWNrYm94IGlucHV0ICh0aGlzIGNhbiBiZSBvdXQgb2Ygc3luYyB3aXRoIHRoZSBpbnB1dCdzIHZhbHVlIGlmIG5vdCBwYXNzZWQpICovXG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIC8qKiBDYWxsZWQgd2hlbiB0aGUgaW5wdXQgdmFsdWUgaGFzIGNoYW5nZWQgKi9cbiAgb25DaGFuZ2U6IChldmVudD86IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgLyoqIEEgaGlkZGVuIGxhYmVsIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkgYW5kIGNvbnRyb2wsIHVuaXF1ZSB0byB0aGUgcGFnZSAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqIENvbG9yIHZhcmlhdGlvbnMgZm9yIGJhY2tncm91bmQgc3R5bGVzICovXG4gIHZhcmlhbnQ/OiBUb2dnbGVWYXJpYW50cztcbiAgLyoqIENoYW5nZXMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGVsZW1lbnQgZm9yIHVzaW5nIHRoZSBjb21wb25lbnQgb3V0c2lkZSBvZiBhIGZvcm0gY29udGV4dCAqL1xuICBzaXplPzogVG9nZ2xlU2l6ZXM7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3Qgc2l6ZXMgPSB7XG4gIG1lZGl1bToge1xuICAgIGhlaWdodDogJzMwcHgnLFxuICAgIHdpZHRoOiAnNjBweCcsXG4gIH0sXG4gIHNtYWxsOiB7XG4gICAgaGVpZ2h0OiAnMThweCcsXG4gICAgd2lkdGg6ICczNnB4JyxcbiAgfSxcbn07XG5cbmNvbnN0IGNvbG9ycyA9IFsnYmx1ZScsICdoeXBlciddIGFzIGNvbnN0O1xuXG5jb25zdCBUb2dnbGVUcmFjayA9IHN0eWxlZChCb3gpYFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKyA4cHgpO1xuICAgIGhlaWdodDogY2FsYygxMDAlICsgOHB4KTtcbiAgICB0b3A6IC00cHg7XG4gICAgbGVmdDogLTRweDtcbiAgICBib3JkZXItY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDJweDtcbiAgfVxuXG4gICR7Qm94fSB7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpO1xuICB9XG5gO1xuXG5jb25zdCBUb2dnbGVJbnB1dCA9IHN0eWxlZC5pbnB1dChzY3JlZW5SZWFkZXJPbmx5KTtcblxuY29uc3QgVG9nZ2xlTGFiZWwgPSBzdHlsZWQubGFiZWw8TGFiZWxQcm9wcz5gXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG5cbiAgJltkaXNhYmxlZF0ge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgb3BhY2l0eTogMC43NTtcbiAgfVxuXG4gICR7VG9nZ2xlSW5wdXR9OmZvY3VzLXZpc2libGUgKyAke1RvZ2dsZVRyYWNrfSB7XG4gICAgJjphZnRlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFRvZ2dsZTogUmVhY3QuRkM8VG9nZ2xlUHJvcHM+ID0gKHtcbiAgY2hlY2tlZCxcbiAgY2xhc3NOYW1lLFxuICBvbkNoYW5nZSxcbiAgbGFiZWwsXG4gIGRpc2FibGVkLFxuICB2YXJpYW50ID0gJ2JsdWUnLFxuICBzaXplID0gJ21lZGl1bScsXG59KSA9PiB7XG4gIGNvbnN0IGFjdGl2ZUNvbG9yID0gdmFyaWFudDtcbiAgY29uc3QgY2hlY2tlZENvbG9yID0gY2hlY2tlZCA/IHZhcmlhbnQgOiAnZ3JheS02MDAnO1xuICBjb25zdCBzaXplU3R5bGVzID0gc2l6ZXNbc2l6ZV07XG5cbiAgcmV0dXJuIChcbiAgICA8VG9nZ2xlTGFiZWxcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgaHRtbEZvcj17bGFiZWx9XG4gICAgICB2YXJpYW50PXt2YXJpYW50fVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgID5cbiAgICAgIDxIaWRkZW5UZXh0PntsYWJlbH08L0hpZGRlblRleHQ+XG4gICAgICA8VG9nZ2xlSW5wdXRcbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgaWQ9e2xhYmVsfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8VG9nZ2xlVHJhY2tcbiAgICAgICAgey4uLnNpemVTdHlsZXN9XG4gICAgICAgIGJvcmRlckNvbG9yPXthY3RpdmVDb2xvcn1cbiAgICAgICAgYmc9e2NoZWNrZWRDb2xvcn1cbiAgICAgICAgYm9yZGVyUmFkaXVzPVwiOTlyZW1cIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgID5cbiAgICAgICAgPEJveFxuICAgICAgICAgIHdpZHRoPVwiNDAlXCJcbiAgICAgICAgICBib3JkZXJSYWRpdXM9XCI1MCVcIlxuICAgICAgICAgIGJnPVwid2hpdGVcIlxuICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgIHRvcD1cIjEwJVwiXG4gICAgICAgICAgYm90dG9tPVwiMTAlXCJcbiAgICAgICAgICBsZWZ0PXtjaGVja2VkID8gJzU1JScgOiAnNSUnfVxuICAgICAgICAvPlxuICAgICAgPC9Ub2dnbGVUcmFjaz5cbiAgICA8L1RvZ2dsZUxhYmVsPlxuICApO1xufTtcbiJdfQ== */"));

var ToggleInput = _styled("input", {
  target: "e11yk3kb1",
  label: "ToggleInput"
})(screenReaderOnly, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ub2dnbGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFb0IiLCJmaWxlIjoiLi4vLi4vc3JjL1RvZ2dsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY3JlZW5SZWFkZXJPbmx5IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL0JveCc7XG5pbXBvcnQgeyBIaWRkZW5UZXh0IH0gZnJvbSAnLi4vSGlkZGVuVGV4dCc7XG5cbmV4cG9ydCB0eXBlIFRvZ2dsZVNpemVzID0ga2V5b2YgdHlwZW9mIHNpemVzO1xuZXhwb3J0IHR5cGUgVG9nZ2xlVmFyaWFudHMgPSB0eXBlb2YgY29sb3JzW251bWJlcl07XG5cbmV4cG9ydCB0eXBlIExhYmVsUHJvcHMgPSB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdmFyaWFudD86IFRvZ2dsZVZhcmlhbnRzO1xufTtcblxuZXhwb3J0IHR5cGUgVG9nZ2xlUHJvcHMgPSB7XG4gIC8qKiBUaGUgc3RhdGUgb2YgdGhlIGNoZWNrYm94IGlucHV0ICh0aGlzIGNhbiBiZSBvdXQgb2Ygc3luYyB3aXRoIHRoZSBpbnB1dCdzIHZhbHVlIGlmIG5vdCBwYXNzZWQpICovXG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIC8qKiBDYWxsZWQgd2hlbiB0aGUgaW5wdXQgdmFsdWUgaGFzIGNoYW5nZWQgKi9cbiAgb25DaGFuZ2U6IChldmVudD86IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgLyoqIEEgaGlkZGVuIGxhYmVsIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkgYW5kIGNvbnRyb2wsIHVuaXF1ZSB0byB0aGUgcGFnZSAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqIENvbG9yIHZhcmlhdGlvbnMgZm9yIGJhY2tncm91bmQgc3R5bGVzICovXG4gIHZhcmlhbnQ/OiBUb2dnbGVWYXJpYW50cztcbiAgLyoqIENoYW5nZXMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGVsZW1lbnQgZm9yIHVzaW5nIHRoZSBjb21wb25lbnQgb3V0c2lkZSBvZiBhIGZvcm0gY29udGV4dCAqL1xuICBzaXplPzogVG9nZ2xlU2l6ZXM7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3Qgc2l6ZXMgPSB7XG4gIG1lZGl1bToge1xuICAgIGhlaWdodDogJzMwcHgnLFxuICAgIHdpZHRoOiAnNjBweCcsXG4gIH0sXG4gIHNtYWxsOiB7XG4gICAgaGVpZ2h0OiAnMThweCcsXG4gICAgd2lkdGg6ICczNnB4JyxcbiAgfSxcbn07XG5cbmNvbnN0IGNvbG9ycyA9IFsnYmx1ZScsICdoeXBlciddIGFzIGNvbnN0O1xuXG5jb25zdCBUb2dnbGVUcmFjayA9IHN0eWxlZChCb3gpYFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKyA4cHgpO1xuICAgIGhlaWdodDogY2FsYygxMDAlICsgOHB4KTtcbiAgICB0b3A6IC00cHg7XG4gICAgbGVmdDogLTRweDtcbiAgICBib3JkZXItY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDJweDtcbiAgfVxuXG4gICR7Qm94fSB7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpO1xuICB9XG5gO1xuXG5jb25zdCBUb2dnbGVJbnB1dCA9IHN0eWxlZC5pbnB1dChzY3JlZW5SZWFkZXJPbmx5KTtcblxuY29uc3QgVG9nZ2xlTGFiZWwgPSBzdHlsZWQubGFiZWw8TGFiZWxQcm9wcz5gXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG5cbiAgJltkaXNhYmxlZF0ge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgb3BhY2l0eTogMC43NTtcbiAgfVxuXG4gICR7VG9nZ2xlSW5wdXR9OmZvY3VzLXZpc2libGUgKyAke1RvZ2dsZVRyYWNrfSB7XG4gICAgJjphZnRlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFRvZ2dsZTogUmVhY3QuRkM8VG9nZ2xlUHJvcHM+ID0gKHtcbiAgY2hlY2tlZCxcbiAgY2xhc3NOYW1lLFxuICBvbkNoYW5nZSxcbiAgbGFiZWwsXG4gIGRpc2FibGVkLFxuICB2YXJpYW50ID0gJ2JsdWUnLFxuICBzaXplID0gJ21lZGl1bScsXG59KSA9PiB7XG4gIGNvbnN0IGFjdGl2ZUNvbG9yID0gdmFyaWFudDtcbiAgY29uc3QgY2hlY2tlZENvbG9yID0gY2hlY2tlZCA/IHZhcmlhbnQgOiAnZ3JheS02MDAnO1xuICBjb25zdCBzaXplU3R5bGVzID0gc2l6ZXNbc2l6ZV07XG5cbiAgcmV0dXJuIChcbiAgICA8VG9nZ2xlTGFiZWxcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgaHRtbEZvcj17bGFiZWx9XG4gICAgICB2YXJpYW50PXt2YXJpYW50fVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgID5cbiAgICAgIDxIaWRkZW5UZXh0PntsYWJlbH08L0hpZGRlblRleHQ+XG4gICAgICA8VG9nZ2xlSW5wdXRcbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgaWQ9e2xhYmVsfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8VG9nZ2xlVHJhY2tcbiAgICAgICAgey4uLnNpemVTdHlsZXN9XG4gICAgICAgIGJvcmRlckNvbG9yPXthY3RpdmVDb2xvcn1cbiAgICAgICAgYmc9e2NoZWNrZWRDb2xvcn1cbiAgICAgICAgYm9yZGVyUmFkaXVzPVwiOTlyZW1cIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgID5cbiAgICAgICAgPEJveFxuICAgICAgICAgIHdpZHRoPVwiNDAlXCJcbiAgICAgICAgICBib3JkZXJSYWRpdXM9XCI1MCVcIlxuICAgICAgICAgIGJnPVwid2hpdGVcIlxuICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgIHRvcD1cIjEwJVwiXG4gICAgICAgICAgYm90dG9tPVwiMTAlXCJcbiAgICAgICAgICBsZWZ0PXtjaGVja2VkID8gJzU1JScgOiAnNSUnfVxuICAgICAgICAvPlxuICAgICAgPC9Ub2dnbGVUcmFjaz5cbiAgICA8L1RvZ2dsZUxhYmVsPlxuICApO1xufTtcbiJdfQ== */");

var ToggleLabel = _styled("label", {
  target: "e11yk3kb0",
  label: "ToggleLabel"
})("display:inline-block;cursor:pointer;border:0;padding:0;&[disabled]{cursor:not-allowed;opacity:0.75;}", ToggleInput, ":focus-visible+", ToggleTrack, "{&:after{opacity:1;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ub2dnbGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9FNEMiLCJmaWxlIjoiLi4vLi4vc3JjL1RvZ2dsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY3JlZW5SZWFkZXJPbmx5IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL0JveCc7XG5pbXBvcnQgeyBIaWRkZW5UZXh0IH0gZnJvbSAnLi4vSGlkZGVuVGV4dCc7XG5cbmV4cG9ydCB0eXBlIFRvZ2dsZVNpemVzID0ga2V5b2YgdHlwZW9mIHNpemVzO1xuZXhwb3J0IHR5cGUgVG9nZ2xlVmFyaWFudHMgPSB0eXBlb2YgY29sb3JzW251bWJlcl07XG5cbmV4cG9ydCB0eXBlIExhYmVsUHJvcHMgPSB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgdmFyaWFudD86IFRvZ2dsZVZhcmlhbnRzO1xufTtcblxuZXhwb3J0IHR5cGUgVG9nZ2xlUHJvcHMgPSB7XG4gIC8qKiBUaGUgc3RhdGUgb2YgdGhlIGNoZWNrYm94IGlucHV0ICh0aGlzIGNhbiBiZSBvdXQgb2Ygc3luYyB3aXRoIHRoZSBpbnB1dCdzIHZhbHVlIGlmIG5vdCBwYXNzZWQpICovXG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIC8qKiBDYWxsZWQgd2hlbiB0aGUgaW5wdXQgdmFsdWUgaGFzIGNoYW5nZWQgKi9cbiAgb25DaGFuZ2U6IChldmVudD86IFJlYWN0LkZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbiAgLyoqIEEgaGlkZGVuIGxhYmVsIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkgYW5kIGNvbnRyb2wsIHVuaXF1ZSB0byB0aGUgcGFnZSAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqIENvbG9yIHZhcmlhdGlvbnMgZm9yIGJhY2tncm91bmQgc3R5bGVzICovXG4gIHZhcmlhbnQ/OiBUb2dnbGVWYXJpYW50cztcbiAgLyoqIENoYW5nZXMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGVsZW1lbnQgZm9yIHVzaW5nIHRoZSBjb21wb25lbnQgb3V0c2lkZSBvZiBhIGZvcm0gY29udGV4dCAqL1xuICBzaXplPzogVG9nZ2xlU2l6ZXM7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuY29uc3Qgc2l6ZXMgPSB7XG4gIG1lZGl1bToge1xuICAgIGhlaWdodDogJzMwcHgnLFxuICAgIHdpZHRoOiAnNjBweCcsXG4gIH0sXG4gIHNtYWxsOiB7XG4gICAgaGVpZ2h0OiAnMThweCcsXG4gICAgd2lkdGg6ICczNnB4JyxcbiAgfSxcbn07XG5cbmNvbnN0IGNvbG9ycyA9IFsnYmx1ZScsICdoeXBlciddIGFzIGNvbnN0O1xuXG5jb25zdCBUb2dnbGVUcmFjayA9IHN0eWxlZChCb3gpYFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgKyA4cHgpO1xuICAgIGhlaWdodDogY2FsYygxMDAlICsgOHB4KTtcbiAgICB0b3A6IC00cHg7XG4gICAgbGVmdDogLTRweDtcbiAgICBib3JkZXItY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDJweDtcbiAgfVxuXG4gICR7Qm94fSB7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpO1xuICB9XG5gO1xuXG5jb25zdCBUb2dnbGVJbnB1dCA9IHN0eWxlZC5pbnB1dChzY3JlZW5SZWFkZXJPbmx5KTtcblxuY29uc3QgVG9nZ2xlTGFiZWwgPSBzdHlsZWQubGFiZWw8TGFiZWxQcm9wcz5gXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG5cbiAgJltkaXNhYmxlZF0ge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgb3BhY2l0eTogMC43NTtcbiAgfVxuXG4gICR7VG9nZ2xlSW5wdXR9OmZvY3VzLXZpc2libGUgKyAke1RvZ2dsZVRyYWNrfSB7XG4gICAgJjphZnRlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFRvZ2dsZTogUmVhY3QuRkM8VG9nZ2xlUHJvcHM+ID0gKHtcbiAgY2hlY2tlZCxcbiAgY2xhc3NOYW1lLFxuICBvbkNoYW5nZSxcbiAgbGFiZWwsXG4gIGRpc2FibGVkLFxuICB2YXJpYW50ID0gJ2JsdWUnLFxuICBzaXplID0gJ21lZGl1bScsXG59KSA9PiB7XG4gIGNvbnN0IGFjdGl2ZUNvbG9yID0gdmFyaWFudDtcbiAgY29uc3QgY2hlY2tlZENvbG9yID0gY2hlY2tlZCA/IHZhcmlhbnQgOiAnZ3JheS02MDAnO1xuICBjb25zdCBzaXplU3R5bGVzID0gc2l6ZXNbc2l6ZV07XG5cbiAgcmV0dXJuIChcbiAgICA8VG9nZ2xlTGFiZWxcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgaHRtbEZvcj17bGFiZWx9XG4gICAgICB2YXJpYW50PXt2YXJpYW50fVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgID5cbiAgICAgIDxIaWRkZW5UZXh0PntsYWJlbH08L0hpZGRlblRleHQ+XG4gICAgICA8VG9nZ2xlSW5wdXRcbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgaWQ9e2xhYmVsfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIC8+XG4gICAgICA8VG9nZ2xlVHJhY2tcbiAgICAgICAgey4uLnNpemVTdHlsZXN9XG4gICAgICAgIGJvcmRlckNvbG9yPXthY3RpdmVDb2xvcn1cbiAgICAgICAgYmc9e2NoZWNrZWRDb2xvcn1cbiAgICAgICAgYm9yZGVyUmFkaXVzPVwiOTlyZW1cIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgID5cbiAgICAgICAgPEJveFxuICAgICAgICAgIHdpZHRoPVwiNDAlXCJcbiAgICAgICAgICBib3JkZXJSYWRpdXM9XCI1MCVcIlxuICAgICAgICAgIGJnPVwid2hpdGVcIlxuICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgIHRvcD1cIjEwJVwiXG4gICAgICAgICAgYm90dG9tPVwiMTAlXCJcbiAgICAgICAgICBsZWZ0PXtjaGVja2VkID8gJzU1JScgOiAnNSUnfVxuICAgICAgICAvPlxuICAgICAgPC9Ub2dnbGVUcmFjaz5cbiAgICA8L1RvZ2dsZUxhYmVsPlxuICApO1xufTtcbiJdfQ== */"));

export var Toggle = function Toggle(_ref) {
  var checked = _ref.checked,
      className = _ref.className,
      onChange = _ref.onChange,
      label = _ref.label,
      disabled = _ref.disabled,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'blue' : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'medium' : _ref$size;
  var activeColor = variant;
  var checkedColor = checked ? variant : 'gray-600';
  var sizeStyles = sizes[size];
  return /*#__PURE__*/React.createElement(ToggleLabel, {
    className: className,
    htmlFor: label,
    variant: variant,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(HiddenText, null, label), /*#__PURE__*/React.createElement(ToggleInput, {
    type: "checkbox",
    checked: checked,
    id: label,
    disabled: disabled,
    onChange: onChange
  }), /*#__PURE__*/React.createElement(ToggleTrack, _extends({}, sizeStyles, {
    borderColor: activeColor,
    bg: checkedColor,
    borderRadius: "99rem",
    position: "relative"
  }), /*#__PURE__*/React.createElement(Box, {
    width: "40%",
    borderRadius: "50%",
    bg: "white",
    position: "absolute",
    top: "10%",
    bottom: "10%",
    left: checked ? '55%' : '5%'
  })));
};