function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import { AccordionArea } from '../AccordionArea';
import { AccordionButton } from '../AccordionButton';

/**
 * @deprecated
 * This component is in the old visual identity and will be updated soon.
 *
 * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status
 */
export var Accordion = function Accordion(_ref) {
  var children = _ref.children,
      className = _ref.className,
      initiallyExpanded = _ref.initiallyExpanded,
      _onClick = _ref.onClick,
      size = _ref.size,
      theme = _ref.theme,
      top = _ref.top;

  var _useState = useState(!!initiallyExpanded),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var expandRenderer = function expandRenderer(renderer) {
    return renderer instanceof Function ? renderer(expanded) : renderer;
  };

  return /*#__PURE__*/React.createElement(AccordionArea, {
    className: className,
    expanded: expanded,
    top: /*#__PURE__*/React.createElement(AccordionButton, {
      expanded: expanded,
      onClick: function onClick() {
        setExpanded(!expanded);
        _onClick === null || _onClick === void 0 ? void 0 : _onClick(!expanded);
      },
      size: size,
      theme: theme
    }, expandRenderer(top))
  }, expandRenderer(children));
};