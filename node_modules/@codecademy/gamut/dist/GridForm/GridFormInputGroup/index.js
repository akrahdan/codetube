import React from 'react';
import { FormError, FormGroup, FormGroupLabel } from '../../Form';
import { HiddenText } from '../../HiddenText';
import { Column } from '../../Layout';
import { GridFormCheckboxInput } from './GridFormCheckboxInput';
import { GridFormCustomInput } from './GridFormCustomInput';
import { GridFormFileInput } from './GridFormFileInput';
import { GridFormHiddenInput } from './GridFormHiddenInput';
import { GridFormRadioGroupInput } from './GridFormRadioGroupInput';
import { GridFormSelectInput } from './GridFormSelectInput';
import { GridFormSweetContainerInput } from './GridFormSweetContainerInput';
import { GridFormTextArea } from './GridFormTextArea';
import { GridFormTextInput } from './GridFormTextInput';
export var GridFormInputGroup = function GridFormInputGroup(_ref) {
  var _field$rowspan2;

  var error = _ref.error,
      isFirstError = _ref.isFirstError,
      field = _ref.field,
      register = _ref.register,
      setValue = _ref.setValue,
      showRequired = _ref.showRequired,
      required = _ref.required;
  var errorMessage = error || field.customError;
  var isRequired = showRequired && required;

  var getInput = function getInput() {
    switch (field.type) {
      case 'checkbox':
        return /*#__PURE__*/React.createElement(GridFormCheckboxInput, {
          field: field,
          register: register,
          showRequired: isRequired
        });

      case 'custom':
      case 'custom-group':
        return /*#__PURE__*/React.createElement(GridFormCustomInput, {
          field: field,
          register: register,
          setValue: setValue,
          error: errorMessage
        });

      case 'radio-group':
        return /*#__PURE__*/React.createElement(GridFormRadioGroupInput, {
          field: field,
          register: register,
          showRequired: isRequired,
          setValue: setValue
        });

      case 'select':
        return /*#__PURE__*/React.createElement(GridFormSelectInput, {
          error: !!errorMessage,
          field: field,
          register: register,
          showRequired: isRequired
        });

      case 'file':
        return /*#__PURE__*/React.createElement(GridFormFileInput, {
          error: !!errorMessage,
          field: field,
          register: register,
          showRequired: isRequired
        });

      case 'textarea':
        return /*#__PURE__*/React.createElement(GridFormTextArea, {
          error: !!errorMessage,
          field: field,
          register: register,
          showRequired: isRequired
        });

      case 'hidden':
        return /*#__PURE__*/React.createElement(GridFormHiddenInput, {
          register: register,
          field: field
        });

      case 'sweet-container':
        return /*#__PURE__*/React.createElement(GridFormSweetContainerInput, {
          register: register,
          field: field,
          label: field.label
        });

      default:
        return /*#__PURE__*/React.createElement(GridFormTextInput, {
          error: !!errorMessage,
          field: field,
          register: register,
          showRequired: isRequired
        });
    }
  };

  var unwrappedInput = function unwrappedInput(field) {
    return ['hidden', 'sweet-container'].includes(field.type);
  };

  if (unwrappedInput(field)) {
    return getInput();
  }

  if (field.type === 'custom-group') {
    var _field$rowspan;

    return /*#__PURE__*/React.createElement(Column, {
      size: field === null || field === void 0 ? void 0 : field.size,
      rowspan: (_field$rowspan = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan !== void 0 ? _field$rowspan : 1
    }, getInput());
  }

  var label = /*#__PURE__*/React.createElement(FormGroupLabel, {
    disabled: field.disabled,
    htmlFor: field.id || field.name,
    tooltip: field.tooltip,
    showRequired: isRequired
  }, field.label);
  return /*#__PURE__*/React.createElement(Column, {
    size: field === null || field === void 0 ? void 0 : field.size,
    rowspan: (_field$rowspan2 = field === null || field === void 0 ? void 0 : field.rowspan) !== null && _field$rowspan2 !== void 0 ? _field$rowspan2 : 1
  }, /*#__PURE__*/React.createElement(FormGroup, {
    mb: 0
  }, field.hideLabel ? /*#__PURE__*/React.createElement(HiddenText, null, label) : label, getInput(), errorMessage && /*#__PURE__*/React.createElement(FormError, {
    role: isFirstError ? 'alert' : 'status',
    "aria-live": isFirstError ? 'assertive' : 'off'
  }, errorMessage)));
};