function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { theme } from '@codecademy/gamut-styles';
import { ThemeProvider } from '@emotion/react';
import { mount } from 'enzyme';
import React from 'react';
import { stubCheckboxField, stubFileField, stubRadioGroupField, stubSelectField, stubTextareaField, stubTextField } from '../../__tests__/stubs';
import { GridFormCheckboxInput } from '../GridFormCheckboxInput';
import { GridFormFileInput } from '../GridFormFileInput';
import { GridFormRadioGroupInput } from '../GridFormRadioGroupInput';
import { GridFormSelectInput } from '../GridFormSelectInput';
import { GridFormTextArea } from '../GridFormTextArea';
import { GridFormTextInput } from '../GridFormTextInput';

var mountWithTheme = function mountWithTheme(component) {
  return mount( /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, component));
};

export var renderGridFormSelectInput = function renderGridFormSelectInput() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormSelectInput, _extends({
    field: _objectSpread(_objectSpread({}, stubSelectField), extraProps),
    register: jest.fn()
  }, extraProps)));
};
export var renderGridFormTextInput = function renderGridFormTextInput() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormTextInput, _extends({
    field: _objectSpread(_objectSpread({}, stubTextField), extraProps),
    register: jest.fn()
  }, extraProps)));
};
export var renderGridFormTextArea = function renderGridFormTextArea() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormTextArea, _extends({
    field: _objectSpread(_objectSpread({}, stubTextareaField), extraProps),
    register: jest.fn()
  }, extraProps)));
};
export var renderGridFormRadioGroupInput = function renderGridFormRadioGroupInput() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormRadioGroupInput, _extends({
    field: _objectSpread(_objectSpread({}, stubRadioGroupField), extraProps),
    setValue: jest.fn(),
    register: jest.fn()
  }, extraProps)));
};
export var renderGridFormFileInput = function renderGridFormFileInput() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormFileInput, _extends({
    field: _objectSpread(_objectSpread({}, stubFileField), extraProps),
    register: jest.fn()
  }, extraProps)));
};
export var renderGridFormCheckboxInput = function renderGridFormCheckboxInput() {
  var extraProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mountWithTheme( /*#__PURE__*/React.createElement(GridFormCheckboxInput, _extends({
    field: _objectSpread(_objectSpread({}, stubCheckboxField), extraProps),
    register: jest.fn()
  }, extraProps)));
};
export var getComponent = function getComponent(componentName, extraProps) {
  switch (componentName) {
    case 'GridFormTextInput':
      return renderGridFormTextInput(extraProps);

    case 'GridFormSelectInput':
      return renderGridFormSelectInput(extraProps);

    case 'GridFormTextArea':
      return renderGridFormTextArea(extraProps);

    case 'GridFormRadioGroupInput':
      return renderGridFormRadioGroupInput(extraProps);

    case 'GridFormFileInput':
      return renderGridFormFileInput(extraProps);

    case 'GridFormCheckboxInput':
      return renderGridFormCheckboxInput(extraProps);

    default:
      throw new Error("Unknown component name: ".concat(componentName));
  }
};