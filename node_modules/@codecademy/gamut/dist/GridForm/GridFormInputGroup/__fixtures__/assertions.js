import { getComponent } from './renderers';
export var itHandlesAriaInvalid = function itHandlesAriaInvalid(componentName, selector) {
  describe('fields', function () {
    it('have the property aria-invalid', function () {
      hasAriaInvalidProperty(componentName, selector);
    });
    it('marks a field as aria-invalid when a field has an error', function () {
      isMarkedAriaInvalidIfErrorExists(componentName, selector);
    });
  });
};

var hasAriaInvalidProperty = function hasAriaInvalidProperty(componentName, selector) {
  var props = {
    validation: {
      required: true
    }
  };
  var component = getComponent(componentName, props);
  expect(component.find(selector).props()).toHaveProperty('aria-invalid');
  expect(component.find(selector).props()['aria-invalid']).toBeUndefined();
};

var isMarkedAriaInvalidIfErrorExists = function isMarkedAriaInvalidIfErrorExists(componentName, selector) {
  var props = {
    validation: {
      required: 'Required'
    },
    error: true
  };
  var component = getComponent(componentName, props);
  expect(component.find(selector).props()['aria-invalid']).toBeTruthy();
};