import React from 'react';
import { Mode, SubmitHandler } from 'react-hook-form';
import { ButtonProps } from '../Button/shared';
import { LayoutGridProps } from '../Layout';
import { GridFormSubmitProps } from './GridFormButtons';
import { GridFormFieldsProps } from './types';
export * from './types';
export declare type GridFormProps<Values extends {}> = {
    children?: React.ReactNode;
    className?: string;
    /**
     * Layout grid column gap override.
     */
    columnGap?: LayoutGridProps['columnGap'];
    /**
     * Descriptions of any fields or sections comprising the form.
     */
    fields?: GridFormFieldsProps[];
    /**
     * Renders a cancel button with the provided child text and onClick function.
     */
    cancel?: ButtonProps;
    /**
     * Function called with field values on submit, if all validations have passed.
     */
    onSubmit: SubmitHandler<Values>;
    /**
     * Show asterisks next to required fields.
     */
    showRequired?: boolean;
    /**
     * Layout grid row gap override between fields.
     */
    rowGap?: LayoutGridProps['rowGap'];
    /**
     * Description of the submit button at the end of the form.
     */
    submit: GridFormSubmitProps & {
        /**
         * Manually overrides the submit button to be disabled regardless of validation, if true.
         */
        disabled?: boolean;
    };
    /**
     * Which react hook form mode we are going to use for validation.
     * If you use the onChange mode the submit button will be disabled until all
     * required fields are completed.
     */
    validation?: Exclude<Mode, 'onBlur'>;
};
export declare function GridForm<Values extends Record<string, boolean | string | undefined | FileList>>({ cancel, children, className, columnGap, fields, onSubmit, rowGap, submit, validation, showRequired, }: GridFormProps<Values>): JSX.Element;
