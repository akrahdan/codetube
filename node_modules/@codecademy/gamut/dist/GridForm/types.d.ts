import { ReactNode } from 'react';
import { UseFormMethods, ValidationRules } from 'react-hook-form';
import { ColumnProps } from '../Layout';
import { ToolTipProps } from '../ToolTip';
export declare type BaseFormField<Value> = {
    defaultValue?: Value;
    customError?: string;
    disabled?: boolean;
    /**
     * Whether the label should be hidden visually and not take up space.
     */
    hideLabel?: boolean;
    /**
     * HTML id to use instead of the name.
     */
    id?: string;
    tooltip?: ToolTipProps;
    name: string;
    onUpdate?: (value: Value) => void;
    size: ColumnProps['size'];
    rowspan?: ColumnProps['rowspan'];
};
export declare type GridFormCheckboxField = BaseFormField<boolean> & {
    description: React.ReactNode;
    label?: React.ReactNode;
    multiline?: boolean;
    validation?: ValidationRules;
    type: 'checkbox';
};
export declare type GridFormCustomFieldProps = {
    className?: string;
    error?: string;
    field: GridFormCustomField | GridFormCustomGroupField;
    register: UseFormMethods['register'];
    setValue: (value: any) => void;
};
export declare type GridFormCustomField = BaseFormField<any> & {
    label?: React.ReactNode;
    render: (props: GridFormCustomFieldProps) => React.ReactNode;
    validation?: ValidationRules;
    type: 'custom';
};
export declare type GridFormCustomGroupField = BaseFormField<any> & {
    label?: React.ReactNode;
    render: (props: GridFormCustomFieldProps) => React.ReactNode;
    validation?: ValidationRules;
    type: 'custom-group';
};
export declare type BasicInputType = 'color' | 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'time' | 'url' | 'week';
export declare type GridFormTextField = BaseFormField<string> & {
    label: React.ReactNode;
    placeholder?: string;
    validation?: ValidationRules;
    type: BasicInputType;
};
export declare type GridFormRadioOption = {
    label: ReactNode;
    value: string;
};
export declare type GridFormRadioGroupField = BaseFormField<string> & {
    label: ReactNode | string;
    options: GridFormRadioOption[];
    validation?: ValidationRules;
    type: 'radio-group';
    ariaLabel?: string;
};
export declare type GridFormSelectField = BaseFormField<string> & {
    label: React.ReactNode;
    options: string[] | Record<string, number | string>;
    validation?: ValidationRules;
    type: 'select';
};
export declare type GridFormFileField = BaseFormField<FileList> & {
    label: React.ReactNode;
    validation?: ValidationRules;
    type: 'file';
};
export declare type GridFormTextAreaField = BaseFormField<string> & {
    label: React.ReactNode;
    placeholder?: string;
    validation?: ValidationRules;
    type: 'textarea';
};
declare type HiddenField = Omit<BaseFormField<any>, 'size' | 'rowspan'>;
export declare type GridFormHiddenField = HiddenField & {
    type: 'hidden';
};
export declare type GridFormSweetContainerField = HiddenField & {
    label: string;
    type: 'sweet-container';
};
export declare type GridFormField = GridFormCheckboxField | GridFormCustomField | GridFormCustomGroupField | GridFormRadioGroupField | GridFormTextField | GridFormSelectField | GridFormFileField | GridFormTextAreaField | GridFormHiddenField | GridFormSweetContainerField;
export declare type GridFormSectionTitleBaseProps = {
    title: string;
    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    layout?: 'center' | 'left';
};
export declare type GridFormSectionProps = GridFormSectionTitleBaseProps & {
    fields: GridFormField[];
};
export declare type GridFormFieldsProps = GridFormField | GridFormSectionProps;
export {};
