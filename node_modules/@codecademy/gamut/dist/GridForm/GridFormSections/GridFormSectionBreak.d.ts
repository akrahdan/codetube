import { StyleProps } from '@codecademy/variance';
import React from 'react';
declare const hrProps: import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").Compose<[import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly border: {
        readonly property: "border";
        readonly scale: "borders";
    };
    readonly borderX: {
        readonly property: "border";
        readonly properties: readonly ["borderLeft", "borderRight"];
        readonly scale: "borders";
    };
    readonly borderY: {
        readonly property: "border";
        readonly properties: readonly ["borderTop", "borderBottom"];
        readonly scale: "borders";
    };
    readonly borderTop: {
        readonly property: "borderTop";
        readonly scale: "borders";
    };
    readonly borderRight: {
        readonly property: "borderRight";
        readonly scale: "borders";
    };
    readonly borderBottom: {
        readonly property: "borderBottom";
        readonly scale: "borders";
    };
    readonly borderLeft: {
        readonly property: "borderLeft";
        readonly scale: "borders";
    };
    readonly borderWidth: {
        readonly property: "borderWidth";
    };
    readonly borderWidthX: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderLeftWidth", "borderRightWidth"];
    };
    readonly borderWidthY: {
        readonly property: "borderWidth";
        readonly properties: readonly ["borderTopWidth", "borderBottomWidth"];
    };
    readonly borderWidthLeft: {
        readonly property: "borderLeftWidth";
    };
    readonly borderWidthRight: {
        readonly property: "borderRightWidth";
    };
    readonly borderWidthTop: {
        readonly property: "borderTopWidth";
    };
    readonly borderWidthBottom: {
        readonly property: "borderBottomWidth";
    };
    readonly borderRadius: {
        readonly property: "borderRadius";
    };
    readonly borderRadiusLeft: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderBottomLeftRadius"];
    };
    readonly borderRadiusTop: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopLeftRadius", "borderTopRightRadius"];
    };
    readonly borderRadiusBottom: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderBottomLeftRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusRight: {
        readonly property: "borderRadius";
        readonly properties: readonly ["borderTopRightRadius", "borderBottomRightRadius"];
    };
    readonly borderRadiusTopLeft: {
        readonly property: "borderTopLeftRadius";
    };
    readonly borderRadiusTopRight: {
        readonly property: "borderTopRightRadius";
    };
    readonly borderRadiusBottomRight: {
        readonly property: "borderBottomRightRadius";
    };
    readonly borderRadiusBottomLeft: {
        readonly property: "borderBottomLeftRadius";
    };
    readonly borderStyle: {
        readonly property: "borderStyle";
    };
    readonly borderStyleX: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderLeftStyle", "borderRightStyle"];
    };
    readonly borderStyleY: {
        readonly property: "borderStyle";
        readonly properties: readonly ["borderTopStyle", "borderBottomStyle"];
    };
    readonly borderStyleLeft: {
        readonly property: "borderLeftStyle";
    };
    readonly borderStyleRight: {
        readonly property: "borderRightStyle";
    };
    readonly borderStyleTop: {
        readonly property: "borderTopStyle";
    };
    readonly borderStyleBottom: {
        readonly property: "borderBottomStyle";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly color: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly textColor: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly bg: {
        readonly property: "backgroundColor";
        readonly scale: "colors";
    };
    readonly borderColor: {
        readonly property: "borderColor";
        readonly scale: "colors";
    };
    readonly borderColorX: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    };
    readonly borderColorY: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    };
    readonly borderColorLeft: {
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    };
    readonly borderColorRight: {
        readonly property: "borderRightColor";
        readonly scale: "colors";
    };
    readonly borderColorTop: {
        readonly property: "borderTopColor";
        readonly scale: "colors";
    };
    readonly borderColorBottom: {
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly flexBasis: {
        readonly property: "flexBasis";
    };
    readonly flexShrink: {
        readonly property: "flexShrink";
    };
    readonly flexGrow: {
        readonly property: "flexGrow";
    };
    readonly order: {
        readonly property: "order";
    };
    readonly gridColumn: {
        readonly property: "gridColumn";
    };
    readonly gridRow: {
        readonly property: "gridRow";
    };
    readonly gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    readonly gridRowStart: {
        readonly property: "gridRowStart";
    };
    readonly gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    readonly gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly display: {
        readonly property: "display";
    };
    readonly overflow: {
        readonly property: "overflow";
    };
    readonly overflowX: {
        readonly property: "overflowX";
    };
    readonly overflowY: {
        readonly property: "overflowY";
    };
    readonly dimensions: {
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly width: {
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minWidth: {
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxWidth: {
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly height: {
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minHeight: {
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxHeight: {
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly verticalAlign: {
        readonly property: "verticalAlign";
    };
}>>]>>;
export interface HrProps extends StyleProps<typeof hrProps> {
}
export declare const SectionBreak: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: React.ElementType<any> | undefined;
} & HrProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>, {}>;
export declare const GridFormSectionBreak: React.FC;
export {};
