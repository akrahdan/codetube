function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Fragment } from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { Form } from '../Form';
import { LayoutGrid } from '../Layout';
import { GridFormButtons } from './GridFormButtons';
import { GridFormContent, GridFormSection, GridFormSectionBreak, GridFormSectionTitle } from './GridFormSections';
export * from './types';
var defaultColumnGap = {
  _: 8,
  sm: 32
};

var isGridFormSection = function isGridFormSection(field) {
  return field.title !== undefined;
};

export function GridForm(_ref) {
  var cancel = _ref.cancel,
      children = _ref.children,
      className = _ref.className,
      _ref$columnGap = _ref.columnGap,
      columnGap = _ref$columnGap === void 0 ? defaultColumnGap : _ref$columnGap,
      _ref$fields = _ref.fields,
      fields = _ref$fields === void 0 ? [] : _ref$fields,
      onSubmit = _ref.onSubmit,
      _ref$rowGap = _ref.rowGap,
      rowGap = _ref$rowGap === void 0 ? 16 : _ref$rowGap,
      submit = _ref.submit,
      _ref$validation = _ref.validation,
      validation = _ref$validation === void 0 ? 'onSubmit' : _ref$validation,
      _ref$showRequired = _ref.showRequired,
      showRequired = _ref$showRequired === void 0 ? false : _ref$showRequired;
  var flatFields = fields.flatMap(function (field) {
    return isGridFormSection(field) ? field.fields : field;
  });

  var _useForm = useForm({
    defaultValues: flatFields.reduce(function (defaultValues, field) {
      return _objectSpread(_objectSpread({}, defaultValues), {}, _defineProperty({}, field.name, field.defaultValue));
    }, {}),
    mode: validation
  }),
      handleSubmit = _useForm.handleSubmit,
      formState = _useForm.formState,
      methods = _objectWithoutProperties(_useForm, ["handleSubmit", "formState"]);

  return /*#__PURE__*/React.createElement(FormProvider, _extends({
    handleSubmit: handleSubmit,
    formState: formState
  }, methods), /*#__PURE__*/React.createElement(Form, {
    className: className,
    onSubmit: handleSubmit(onSubmit),
    noValidate: true
  }, /*#__PURE__*/React.createElement(LayoutGrid, {
    columnGap: columnGap,
    rowGap: rowGap
  }, /*#__PURE__*/React.createElement(React.Fragment, null, fields.map(function (field) {
    if (isGridFormSection(field)) {
      return /*#__PURE__*/React.createElement(Fragment, {
        key: field.title
      }, /*#__PURE__*/React.createElement(GridFormSectionTitle, {
        title: field.title,
        as: field.as,
        layout: field.layout,
        numberOfFields: field.fields.length
      }), /*#__PURE__*/React.createElement(GridFormSection, {
        fields: field.fields,
        showRequired: showRequired
      }), /*#__PURE__*/React.createElement(GridFormSectionBreak, null));
    }

    return /*#__PURE__*/React.createElement(GridFormContent, {
      field: field,
      showRequired: showRequired,
      key: field.name
    });
  })), /*#__PURE__*/React.createElement(GridFormButtons, _extends({
    cancel: cancel
  }, submit, {
    disabled: validation === 'onChange' && !formState.isValid || submit.disabled
  })), children)));
}