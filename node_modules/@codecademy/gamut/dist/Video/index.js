function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { PlayIcon } from '@codecademy/gamut-icons';
import cx from 'classnames';
import React, { useState } from 'react';
import ReactPlayer from 'react-player';
import styles from './styles/index.module.scss';

var OverlayPlayButton = function OverlayPlayButton() {
  return /*#__PURE__*/React.createElement("div", {
    className: styles.overlay
  }, /*#__PURE__*/React.createElement(PlayIcon, {
    className: styles.hoverButton
  }));
};
/**
 * @remarks ReactPlayer has optional key 'wrapper' that we require for the onReady callback
 */


export var Video = function Video(_ref) {
  var videoUrl = _ref.videoUrl,
      videoTitle = _ref.videoTitle,
      placeholderImage = _ref.placeholderImage,
      autoplay = _ref.autoplay,
      controls = _ref.controls,
      loop = _ref.loop,
      muted = _ref.muted,
      className = _ref.className,
      _onReady = _ref.onReady,
      onPlay = _ref.onPlay;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  return /*#__PURE__*/React.createElement("div", {
    className: cx(styles.videoWrapper, loading && styles.loading, className)
  }, /*#__PURE__*/React.createElement(ReactPlayer, {
    url: videoUrl,
    light: placeholderImage,
    title: videoTitle,
    playing: autoplay,
    className: styles.iframe,
    controls: controls === undefined ? true : controls,
    loop: loop,
    muted: muted,
    playIcon: /*#__PURE__*/React.createElement(OverlayPlayButton, null),
    onReady: function onReady(player) {
      _onReady === null || _onReady === void 0 ? void 0 : _onReady(player);
      setLoading(false);
    },
    onPlay: onPlay
  }));
};