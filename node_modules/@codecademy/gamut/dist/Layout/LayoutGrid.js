import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { pxRem, styledOptions, system, theme } from '@codecademy/gamut-styles';
import { variance } from '@codecademy/variance';
import { pick } from 'lodash';
var columns = 12;
var gutters = pick(theme.spacing, [8, 16, 24, 32, 48]);
/** This prevents grid blowout by ensuring that column gaps never exceed the size of their container */

var gutterGuard = function gutterGuard(gap, property) {
  if (property === 'columnGap') {
    return {
      gridColumnGap: gap,
      columnGap: "min(calc(100% / ".concat(columns - 1, "), ").concat(gap, ")")
    };
  }

  return gap;
};

var grid = variance.create({
  gap: {
    property: 'gap',
    properties: ['rowGap', 'columnGap'],
    scale: gutters,
    transform: gutterGuard
  },
  rowGap: {
    property: 'rowGap',
    scale: gutters
  },
  columnGap: {
    property: 'columnGap',
    scale: gutters,
    transform: gutterGuard
  },
  rowHeight: {
    property: 'gridAutoRows',
    transform: function transform(height) {
      return "minmax(".concat(pxRem(height), ", 1fr)");
    }
  }
});
var gridProps = variance.compose(system.space, grid);
export var LayoutGrid = /*#__PURE__*/_styled('div', _extends({}, {
  target: "e10xj1580",
  label: "LayoutGrid"
}, styledOptions(grid.propNames)))(system.css({
  display: 'grid',
  width: '100%',
  gridTemplateColumns: "repeat(".concat(columns, ", minmax(0, 1fr))")
}), gridProps, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MYXlvdXQvTGF5b3V0R3JpZC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkMwQiIsImZpbGUiOiIuLi8uLi9zcmMvTGF5b3V0L0xheW91dEdyaWQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHhSZW0sIHN0eWxlZE9wdGlvbnMsIHN5c3RlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHsgU3R5bGVQcm9wcywgdmFyaWFuY2UgfSBmcm9tICdAY29kZWNhZGVteS92YXJpYW5jZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBwaWNrIH0gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgY29sdW1ucyA9IDEyO1xuXG5jb25zdCBndXR0ZXJzID0gcGljayh0aGVtZS5zcGFjaW5nLCBbOCwgMTYsIDI0LCAzMiwgNDhdKTtcblxuLyoqIFRoaXMgcHJldmVudHMgZ3JpZCBibG93b3V0IGJ5IGVuc3VyaW5nIHRoYXQgY29sdW1uIGdhcHMgbmV2ZXIgZXhjZWVkIHRoZSBzaXplIG9mIHRoZWlyIGNvbnRhaW5lciAqL1xuY29uc3QgZ3V0dGVyR3VhcmQgPSAoZ2FwOiBzdHJpbmcsIHByb3BlcnR5OiBzdHJpbmcpID0+IHtcbiAgaWYgKHByb3BlcnR5ID09PSAnY29sdW1uR2FwJykge1xuICAgIHJldHVybiB7XG4gICAgICBncmlkQ29sdW1uR2FwOiBnYXAsXG4gICAgICBjb2x1bW5HYXA6IGBtaW4oY2FsYygxMDAlIC8gJHtjb2x1bW5zIC0gMX0pLCAke2dhcH0pYCxcbiAgICB9O1xuICB9XG4gIHJldHVybiBnYXA7XG59O1xuXG5jb25zdCBncmlkID0gdmFyaWFuY2UuY3JlYXRlKHtcbiAgZ2FwOiB7XG4gICAgcHJvcGVydHk6ICdnYXAnLFxuICAgIHByb3BlcnRpZXM6IFsncm93R2FwJywgJ2NvbHVtbkdhcCddLFxuICAgIHNjYWxlOiBndXR0ZXJzLFxuICAgIHRyYW5zZm9ybTogZ3V0dGVyR3VhcmQsXG4gIH0sXG4gIHJvd0dhcDogeyBwcm9wZXJ0eTogJ3Jvd0dhcCcsIHNjYWxlOiBndXR0ZXJzIH0sXG4gIGNvbHVtbkdhcDoge1xuICAgIHByb3BlcnR5OiAnY29sdW1uR2FwJyxcbiAgICBzY2FsZTogZ3V0dGVycyxcbiAgICB0cmFuc2Zvcm06IGd1dHRlckd1YXJkLFxuICB9LFxuICByb3dIZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ2dyaWRBdXRvUm93cycsXG4gICAgdHJhbnNmb3JtOiAoaGVpZ2h0OiBzdHJpbmcpID0+IGBtaW5tYXgoJHtweFJlbShoZWlnaHQpfSwgMWZyKWAsXG4gIH0sXG59KTtcblxuY29uc3QgZ3JpZFByb3BzID0gdmFyaWFuY2UuY29tcG9zZShzeXN0ZW0uc3BhY2UsIGdyaWQpO1xuXG5leHBvcnQgaW50ZXJmYWNlIExheW91dEdyaWRQcm9wcyBleHRlbmRzIFN0eWxlUHJvcHM8dHlwZW9mIGdyaWRQcm9wcz4ge31cblxuZXhwb3J0IGNvbnN0IExheW91dEdyaWQgPSBzdHlsZWQoXG4gICdkaXYnLFxuICBzdHlsZWRPcHRpb25zKGdyaWQucHJvcE5hbWVzKVxuKTxMYXlvdXRHcmlkUHJvcHM+KFxuICBzeXN0ZW0uY3NzKHtcbiAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7Y29sdW1uc30sIG1pbm1heCgwLCAxZnIpKWAsXG4gIH0pLFxuICBncmlkUHJvcHNcbik7XG4iXX0= */");