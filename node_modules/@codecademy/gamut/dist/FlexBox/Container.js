function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import cx from 'classnames';
import { isNumber, omit } from 'lodash';
import React from 'react';
import styles from './styles/index.module.scss';
var internalProps = ['flex', 'inline', 'grow', 'shrink', 'row', 'column', 'wrap', 'nowrap', 'center', 'reverse', 'fit', 'align', 'justify', 'alignSelf'];

/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 *
 * See [FlexBox](https://gamut.codecademy.com/storybook/?path=/docs/layouts-box-flexbox--flex-box) for similiar functionality
 *
 * ```
 * import { FlexBox } from '@corecademy/gamut';
 *
 * <FlexBox alignItems="center" justifyContent="center" />
 * ```
 */
export var Container = function Container(props) {
  var _cx;

  var classes = cx(props.className, (_cx = {}, _defineProperty(_cx, styles.flex, props.flex && !props.inline), _defineProperty(_cx, styles.inline, props.flex && props.inline), _defineProperty(_cx, styles.fld, isNumber(props.grow) || isNumber(props.shrink)), _defineProperty(_cx, styles["flg-".concat(props.grow)], isNumber(props.grow)), _defineProperty(_cx, styles["fls-".concat(props.shrink)], isNumber(props.shrink)), _defineProperty(_cx, styles.row, props.row), _defineProperty(_cx, styles.col, props.column), _defineProperty(_cx, styles.wrap, props.wrap), _defineProperty(_cx, styles.nowrap, props.nowrap), _defineProperty(_cx, styles.rev, props.reverse), _defineProperty(_cx, styles.fit, props.fit), _defineProperty(_cx, styles['align-center'], props.center && !props.align), _defineProperty(_cx, styles['justify-center'], props.center && !props.justify), _defineProperty(_cx, styles["align-".concat(props.align)], !!props.align), _defineProperty(_cx, styles["justify-".concat(props.justify)], !!props.justify), _defineProperty(_cx, styles["aself-".concat(props.alignSelf)], !!props.alignSelf), _cx));
  var propsToTransfer = omit(props, internalProps);
  return /*#__PURE__*/React.createElement("div", _extends({}, propsToTransfer, {
    className: classes
  }), props.children);
};
Container.defaultProps = {
  flex: true,
  inline: false
};