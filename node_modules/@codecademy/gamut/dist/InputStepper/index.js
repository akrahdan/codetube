import cx from 'classnames';
import React, { useEffect } from 'react';
import { StepButton } from './StepButton';
import styles from './styles.module.scss';

/**
 * Renders a numeric step input with an embedded label and a custom set of step buttons
 */
export var InputStepper = function InputStepper(_ref) {
  var label = _ref.label,
      value = _ref.value,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 999 : _ref$max,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      onChange = _ref.onChange,
      ariaLabel = _ref.ariaLabel,
      onStepperButtonClick = _ref.onStepperButtonClick,
      className = _ref.className;

  var normalize = function normalize(value) {
    if (max && value > max) {
      return max;
    }

    if (value < min) {
      return min;
    }

    return value;
  };

  var calculateWidthFromMax = function calculateWidthFromMax() {
    if (max < 10) {
      return styles.mini;
    }

    if (max > 99) {
      return styles["long"];
    }

    return styles.standardWidth;
  };

  var increment = function increment(incrementAmount) {
    var incrementedValue = normalize(value + incrementAmount);

    if (onStepperButtonClick) {
      onStepperButtonClick(incrementAmount > 0 ? 'increase_selection' : 'decrease_selection');
    }

    onChange(incrementedValue);
  };

  var onChangeEvent = function onChangeEvent(event) {
    var rawValue = event.target.value || "".concat(min);
    var normalizedValue = normalize(parseInt(rawValue, 10));

    if (normalizedValue === value) {
      return;
    }

    onChange(normalizedValue);
  }; // ensure that the value comes in normalized & update the state
  // to reflect the normalized value. Taking a timeout approach so as
  // to avoid kicking off re-render while already mid-render


  var normalizedValue = normalize(value);
  useEffect(function () {
    if (normalizedValue !== value) {
      window.setTimeout(function () {
        return onChange(normalizedValue);
      }, 0);
    }
  });
  var inputId = 'inputStepper';
  var labelId = 'inputStepperLabel';
  var inputWidthClass = calculateWidthFromMax();
  return /*#__PURE__*/React.createElement("div", {
    className: cx(styles.stepper, className)
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.column
  }, /*#__PURE__*/React.createElement("input", {
    className: cx(styles.input, inputWidthClass),
    type: "number",
    max: max,
    min: min,
    value: normalizedValue,
    name: inputId,
    id: inputId,
    "aria-live": "polite",
    "aria-labelledby": "".concat(labelId, " ").concat(inputId),
    "aria-label": "current value of ".concat(value),
    onChange: onChangeEvent
  }), /*#__PURE__*/React.createElement("label", {
    id: labelId,
    className: styles.label,
    "aria-label": ariaLabel,
    htmlFor: inputId
  }, label)), /*#__PURE__*/React.createElement("div", {
    className: styles.column
  }, /*#__PURE__*/React.createElement(StepButton, {
    onClick: function onClick() {
      return increment(1);
    },
    type: "up",
    labelledBy: "".concat(labelId, " ").concat(inputId)
  }), /*#__PURE__*/React.createElement(StepButton, {
    onClick: function onClick() {
      return increment(-1);
    },
    type: "down",
    labelledBy: "".concat(labelId, " ").concat(inputId)
  })));
};