function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import cx from 'classnames';
import HtmlToReact from 'html-to-react';
import marked from 'marked';
import React, { PureComponent } from 'react';
import sanitizeMarkdown from 'sanitize-markdown';
import { omitProps } from '../utils/omitProps';
import { createCodeBlockOverride, createTagOverride, standardOverrides } from './libs/overrides';
import { Iframe } from './libs/overrides/Iframe';
import { MarkdownAnchor } from './libs/overrides/MarkdownAnchor';
import { Table } from './libs/overrides/Table';
import { createPreprocessingInstructions } from './libs/preprocessing';
import { defaultSanitizationConfig } from './libs/sanitizationConfig';
import styles from './styles/index.module.scss';
var htmlToReactParser = new HtmlToReact.Parser({
  xmlMode: true
});
var preprocessingInstructions = createPreprocessingInstructions(styles);

var isValidNode = function isValidNode() {
  return true;
};

export var Markdown = /*#__PURE__*/function (_PureComponent) {
  _inherits(Markdown, _PureComponent);

  var _super = _createSuper(Markdown);

  function Markdown() {
    _classCallCheck(this, Markdown);

    return _super.apply(this, arguments);
  }

  _createClass(Markdown, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$spacing = _this$props.spacing,
          spacing = _this$props$spacing === void 0 ? 'tight' : _this$props$spacing,
          _this$props$text = _this$props.text,
          text = _this$props$text === void 0 ? '' : _this$props$text,
          className = _this$props.className,
          _this$props$overrides = _this$props.overrides,
          userOverrides = _this$props$overrides === void 0 ? {} : _this$props$overrides,
          _this$props$skipDefau = _this$props.skipDefaultOverrides,
          skipDefaultOverrides = _this$props$skipDefau === void 0 ? {} : _this$props$skipDefau,
          _this$props$inline = _this$props.inline,
          inline = _this$props$inline === void 0 ? false : _this$props$inline,
          headerIds = _this$props.headerIds,
          onAnchorClick = _this$props.onAnchorClick;
      if (!text) return null;
      var spacingStyles = styles["spacing-".concat(spacing)];
      var classes = cx(spacingStyles, className);
      var Wrapper = inline ? 'span' : 'div';
      var overrides = Object.keys(userOverrides).map(function (tagName) {
        if (tagName === 'CodeBlock') {
          return createCodeBlockOverride(tagName, userOverrides[tagName]);
        }

        return createTagOverride(tagName, userOverrides[tagName]);
      });
      var processingInstructions = [!skipDefaultOverrides.iframe && createTagOverride('iframe', {
        component: Iframe
      }), !skipDefaultOverrides.a && createTagOverride('a', {
        component: MarkdownAnchor,
        processNode: function processNode(node, props) {
          // Note: this processNode override is necessary because wrapping this component
          // in an anonymous functional component as with the Table below causes react rendering
          // to crash with some chrome translation features.
          // See https://codecademy.atlassian.net/browse/WEB-1214
          return /*#__PURE__*/React.createElement(MarkdownAnchor, _extends({
            onClick: onAnchorClick
          }, props));
        }
      }), !skipDefaultOverrides.table && createTagOverride('table', {
        component: function component(props) {
          return /*#__PURE__*/React.createElement(Table, _extends({
            maxHeight: spacing === 'tight' ? 180 : 500
          }, props));
        },
        allowedAttributes: ['style']
      })].concat(_toConsumableArray(overrides), _toConsumableArray(standardOverrides)).filter(Boolean);
      var markedOptions = {
        smartypants: true,
        headerIds: headerIds,
        headerPrefix: 'heading-'
      }; // Render markdown to html

      var rawHtml = inline ? marked.inlineLexer(text, [], markedOptions) : marked(text, markedOptions);

      var sanitizationConfig = _objectSpread(_objectSpread({}, defaultSanitizationConfig), {}, {
        allowedTags: [].concat(_toConsumableArray(defaultSanitizationConfig.allowedTags), _toConsumableArray(Object.keys(userOverrides).map(function (tagName) {
          return tagName.toLowerCase();
        }))),
        allowedAttributes: _objectSpread(_objectSpread({}, defaultSanitizationConfig.allowedAttributes), Object.keys(userOverrides).reduce(function (acc, tagName) {
          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, tagName.toLowerCase(), (userOverrides[tagName].allowedAttributes || []).map(function (attr) {
            return attr.toLowerCase();
          })));
        }, {}))
      });

      var html = sanitizeMarkdown(rawHtml, sanitizationConfig); // Render html to a react tree

      var react = htmlToReactParser.parseWithInstructions(html, isValidNode, processingInstructions, preprocessingInstructions);
      return /*#__PURE__*/React.createElement(Wrapper, _extends({}, omitProps(Object.keys(this.props), this.props), {
        className: classes
      }), react);
    }
  }]);

  return Markdown;
}(PureComponent);