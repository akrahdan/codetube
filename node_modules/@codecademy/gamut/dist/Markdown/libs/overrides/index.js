function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import HtmlToReact from 'html-to-react';
import camelCaseMap from 'html-to-react/lib/camel-case-attribute-names';
import { get } from 'lodash';
import React from 'react';
var processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions();

// Mapping of html attributes to their camelCase variants
var attributeMap = _objectSpread(_objectSpread({}, camelCaseMap), {}, {
  "for": 'htmlFor',
  "class": 'className'
});

var processAttributeValue = function processAttributeValue(value) {
  if (value === 'true') {
    return true;
  }

  if (value === 'false') {
    return false;
  }

  return value || true;
}; // Convert html attributes to valid react props


export var processAttributes = function processAttributes() {
  var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(attributes).reduce(function (acc, attr) {
    var reactAttr = attributeMap[attr.replace(/[-:]/, '')] || attr;
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, reactAttr, processAttributeValue(attributes[attr])));
  }, {});
}; // generic html tag override

export var createTagOverride = function createTagOverride(tagName, Override) {
  return {
    shouldProcessNode: function shouldProcessNode(node) {
      if (!Override) return false;

      if (Override.shouldProcessNode) {
        return Override.shouldProcessNode(node);
      }

      return node.name === tagName.toLowerCase();
    },
    processNode: function processNode(node, children, key) {
      if (!Override) return null;

      var props = _objectSpread(_objectSpread({}, processAttributes(node.attribs)), {}, {
        children: children,
        key: key
      });

      if (Override.processNode) {
        return Override.processNode(node, props);
      }

      if (!Override.component) return null;
      return /*#__PURE__*/React.createElement(Override.component, props);
    }
  };
}; // Allows <CodeBlock></CodeBlock> override and overrides of standard fenced codeblocks

export var createCodeBlockOverride = function createCodeBlockOverride(tagName, Override) {
  return createTagOverride(tagName, _objectSpread({
    shouldProcessNode: function shouldProcessNode(node) {
      return node.name === 'code' && get(node, 'parent.name') === 'pre' || node.name === tagName.toLowerCase();
    },
    processNode: function processNode(node, props) {
      var _props$className, _props$children;

      var _ref = ((_props$className = props.className) === null || _props$className === void 0 ? void 0 : _props$className.match(/language-([^\s]+)/)) || [],
          _ref2 = _slicedToArray(_ref, 2),
          _ref2$ = _ref2[1],
          language = _ref2$ === void 0 ? undefined : _ref2$;

      if (!Override.component) return null;
      return /*#__PURE__*/React.createElement(Override.component, _extends({}, props, {
        language: language
      }), (_props$children = props.children) === null || _props$children === void 0 ? void 0 : _props$children[0]);
    }
  }, Override));
};

var processText = function processText(text) {
  // Replace &mdash; due to legacy markdown that didn't use smart dashes
  return text.replace(/&mdash;/g, "\u2014");
};

export var standardOverrides = [{
  shouldProcessNode: function shouldProcessNode(node) {
    // Parse text outside of code blocks
    if (node.parent && ['code', 'pre'].indexOf(node.parent.name) >= 0) {
      return false;
    }

    if (node.type === 'text') return true;
    return false;
  },
  processNode: function processNode(node) {
    return processText(node.data);
  }
}, {
  shouldProcessNode: function shouldProcessNode() {
    return true;
  },
  processNode: processNodeDefinitions.processDefaultNode
}];