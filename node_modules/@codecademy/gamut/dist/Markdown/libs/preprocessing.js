function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import cx from 'classnames';

/**
 * Preprocessing Instructions:
 *
 * Runs through each named tag in the html and adds a class name
 * to it based on the tag name. This means all `<pre>` tags will
 * actually output `<pre class="pre" />`
 * The class name will only be applied if it exists in the stylesheet for this component.
 *
 * @remarks
 * This is done instead of styling the elements directly to prevent styles from interfering
 * with component overrides
 */
export var createPreprocessingInstructions = function createPreprocessingInstructions(styles) {
  return [{
    shouldPreprocessNode: function shouldPreprocessNode(node) {
      return Boolean(node.name);
    },
    preprocessNode: function preprocessNode(node) {
      var _node$attribs;

      var classname = cx(styles[node.name], (_node$attribs = node.attribs) === null || _node$attribs === void 0 ? void 0 : _node$attribs["class"]);

      var attrs = _objectSpread({}, node.attribs);

      if (classname) attrs["class"] = classname;
      node.attribs = attrs;
    }
  }];
};