function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { theme, variant } from '@codecademy/gamut-styles';
import { ButtonSelectors } from '../ButtonBase/ButtonBase';
import { buttonVariants, templateVariants } from './shared';
export var fillButtonVariants = templateVariants(buttonVariants, function (variant) {
  var _ref;

  return _ref = {
    bg: variant,
    color: 'background'
  }, _defineProperty(_ref, ButtonSelectors.OUTLINE, {
    borderColor: variant
  }), _defineProperty(_ref, ButtonSelectors.HOVER, {
    bg: "".concat(variant, "-hover"),
    color: 'background'
  }), _defineProperty(_ref, ButtonSelectors.ACTIVE, {
    borderColor: 'text',
    bg: variant,
    color: 'background'
  }), _defineProperty(_ref, ButtonSelectors.DISABLED, {
    color: 'text-disabled',
    bg: 'background-disabled'
  }), _ref;
});
export var textButtonVariants = templateVariants(buttonVariants, function (variant) {
  var _ref2;

  return _ref2 = {
    borderColor: 'transparent',
    color: variant
  }, _defineProperty(_ref2, ButtonSelectors.OUTLINE, {
    borderColor: variant
  }), _defineProperty(_ref2, ButtonSelectors.HOVER, {
    bg: 'background-selected'
  }), _defineProperty(_ref2, ButtonSelectors.ACTIVE, {
    bg: 'transparent',
    color: 'text'
  }), _defineProperty(_ref2, ButtonSelectors.DISABLED, {
    color: 'text-disabled',
    bg: 'transparent'
  }), _ref2;
});
export var strokeButtonVariants = templateVariants(buttonVariants, function (variant) {
  var _ref3;

  return _ref3 = {
    borderColor: variant,
    bg: 'transparent',
    color: variant
  }, _defineProperty(_ref3, ButtonSelectors.OUTLINE, {
    borderColor: variant
  }), _defineProperty(_ref3, ButtonSelectors.HOVER, {
    bg: 'background-selected'
  }), _defineProperty(_ref3, ButtonSelectors.ACTIVE, {
    bg: variant,
    color: 'background'
  }), _defineProperty(_ref3, ButtonSelectors.DISABLED, {
    borderColor: 'background-disabled',
    color: 'text-disabled',
    bg: 'transparent'
  }), _ref3;
});
export var ctaButtonVariants = templateVariants(['primary'], function (variant) {
  var _ref4;

  return _ref4 = {
    borderRadius: '2px',
    fontFamily: 'accent',
    fontWeight: 'title',
    boxShadow: "-4px 4px 0 0 ".concat(theme.colors.text),
    color: 'background',
    py: 12,
    px: 24,
    bg: variant
  }, _defineProperty(_ref4, ButtonSelectors.OUTLINE, {
    borderColor: variant,
    bottom: -9,
    left: -9
  }), _defineProperty(_ref4, ButtonSelectors.HOVER, {
    boxShadow: "-8px 8px 0 0 ".concat(theme.colors.text)
  }), _defineProperty(_ref4, ButtonSelectors.ACTIVE, {
    boxShadow: 'none',
    bg: 'secondary'
  }), _defineProperty(_ref4, ButtonSelectors.DISABLED, {
    boxShadow: 'none',
    color: 'text-disabled',
    bg: 'background-disabled'
  }), _ref4;
});
export var sizeVariants = variant({
  prop: 'size',
  defaultVariant: 'normal',
  variants: {
    normal: {
      fontSize: 16,
      height: 40,
      minWidth: 40,
      py: 4,
      px: 16
    },
    small: {
      fontSize: 14,
      height: 32,
      minWidth: 32,
      py: 4,
      px: 8
    }
  }
});
export var iconSizeVariants = variant({
  prop: 'size',
  defaultVariant: 'normal',
  variants: {
    normal: {
      height: 40,
      width: 40
    },
    small: {
      height: 32,
      width: 32
    }
  }
});