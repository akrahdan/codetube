function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export var typographyStyleVariants = {
  'title-xxl': {
    fontSize: 64,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'title-xl': {
    fontSize: 44,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'title-lg': {
    fontSize: 34,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'title-md': {
    fontSize: 26,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'title-sm': {
    fontSize: 22,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'title-xs': {
    fontSize: 20,
    fontWeight: 'title',
    lineHeight: 'title'
  },
  'p-large': {
    fontSize: 18,
    fontWeight: 'base',
    lineHeight: 'base'
  },
  'p-base': {
    fontSize: 16,
    fontWeight: 'base',
    lineHeight: 'base'
  },
  'p-small': {
    fontSize: 14,
    fontWeight: 'base',
    lineHeight: 'base'
  }
};
export var typographyElementVariants = {
  h1: typographyStyleVariants['title-xxl'],
  h2: typographyStyleVariants['title-xl'],
  h3: typographyStyleVariants['title-lg'],
  h4: typographyStyleVariants['title-md'],
  h5: typographyStyleVariants['title-sm'],
  h6: typographyStyleVariants['title-xs'],
  p: _objectSpread(_objectSpread({}, typographyStyleVariants['p-base']), {}, {
    fontSize: 16
  }),
  small: _objectSpread(_objectSpread({}, typographyStyleVariants['p-small']), {}, {
    display: 'inline-block'
  }),
  strong: {
    fontSize: 'inherit',
    fontWeight: 'title',
    display: 'inline-block'
  },
  code: {
    fontFamily: 'monospace',
    display: 'inline-block'
  },
  span: {
    fontSize: 'inherit',
    display: 'inline-block'
  },
  div: {}
};