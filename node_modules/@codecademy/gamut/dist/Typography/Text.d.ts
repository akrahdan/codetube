/// <reference types="react" />
import { StyleProps } from '@codecademy/variance';
declare const displayVariants: (props: import("@codecademy/variance/dist/types/config").VariantProps<"variant", false | "title-xxl" | "title-xl" | "title-lg" | "title-md" | "title-sm" | "title-xs" | "p-base" | "p-small" | "p-large"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
declare const elementVariants: (props: import("@codecademy/variance/dist/types/config").VariantProps<"as", false | "p" | "small" | "code" | "div" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "span" | "strong"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
declare const truncateVariants: (props: import("@codecademy/variance/dist/types/config").VariantProps<"truncate", false | "ellipsis" | "fade"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
declare const textStates: (props: Partial<Record<"center" | "block" | "screenreader" | "smooth", boolean>> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
declare const textProps: import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").Compose<[import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly flexBasis: {
        readonly property: "flexBasis";
    };
    readonly flexShrink: {
        readonly property: "flexShrink";
    };
    readonly flexGrow: {
        readonly property: "flexGrow";
    };
    readonly order: {
        readonly property: "order";
    };
    readonly gridColumn: {
        readonly property: "gridColumn";
    };
    readonly gridRow: {
        readonly property: "gridRow";
    };
    readonly gridColumnStart: {
        readonly property: "gridColumnStart";
    };
    readonly gridRowStart: {
        readonly property: "gridRowStart";
    };
    readonly gridColumnEnd: {
        readonly property: "gridColumnEnd";
    };
    readonly gridRowEnd: {
        readonly property: "gridRowEnd";
    };
    readonly justifySelf: {
        readonly property: "justifySelf";
    };
    readonly alignSelf: {
        readonly property: "alignSelf";
    };
    readonly gridArea: {
        readonly property: "gridArea";
    };
    readonly display: {
        readonly property: "display";
    };
    readonly overflow: {
        readonly property: "overflow";
    };
    readonly overflowX: {
        readonly property: "overflowX";
    };
    readonly overflowY: {
        readonly property: "overflowY";
    };
    readonly dimensions: {
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    };
    readonly width: {
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minWidth: {
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxWidth: {
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly height: {
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly minHeight: {
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly maxHeight: {
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    };
    readonly verticalAlign: {
        readonly property: "verticalAlign";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly fontFamily: {
        readonly property: "fontFamily";
        readonly scale: "fontFamily";
    };
    readonly fontWeight: {
        readonly property: "fontWeight";
        readonly scale: "fontWeight";
    };
    readonly lineHeight: {
        readonly property: "lineHeight";
        readonly scale: "lineHeight";
    };
    readonly fontSize: {
        readonly property: "fontSize";
        readonly scale: "fontSize";
    };
    readonly letterSpacing: {
        readonly property: "letterSpacing";
    };
    readonly textAlign: {
        readonly property: "textAlign";
    };
    readonly fontStyle: {
        readonly property: "fontStyle";
    };
    readonly textDecoration: {
        readonly property: "textDecoration";
    };
    readonly textTransform: {
        readonly property: "textTransform";
    };
    readonly whiteSpace: {
        readonly property: "whiteSpace";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly color: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly textColor: {
        readonly property: "color";
        readonly scale: "colors";
    };
    readonly bg: {
        readonly property: "backgroundColor";
        readonly scale: "colors";
    };
    readonly borderColor: {
        readonly property: "borderColor";
        readonly scale: "colors";
    };
    readonly borderColorX: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderLeftColor", "borderRightColor"];
        readonly scale: "colors";
    };
    readonly borderColorY: {
        readonly property: "borderColor";
        readonly properties: readonly ["borderTopColor", "borderBottomColor"];
        readonly scale: "colors";
    };
    readonly borderColorLeft: {
        readonly property: "borderLeftColor";
        readonly scale: "colors";
    };
    readonly borderColorRight: {
        readonly property: "borderRightColor";
        readonly scale: "colors";
    };
    readonly borderColorTop: {
        readonly property: "borderTopColor";
        readonly scale: "colors";
    };
    readonly borderColorBottom: {
        readonly property: "borderBottomColor";
        readonly scale: "colors";
    };
}>>, import("@codecademy/variance/dist/types/config").Parser<import("@codecademy/variance/dist/types/config").TransformerMap<{
    readonly p: {
        readonly property: "padding";
        readonly scale: "spacing";
    };
    readonly px: {
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    };
    readonly py: {
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    };
    readonly pt: {
        readonly property: "paddingTop";
        readonly scale: "spacing";
    };
    readonly pb: {
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    };
    readonly pr: {
        readonly property: "paddingRight";
        readonly scale: "spacing";
    };
    readonly pl: {
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    };
    readonly m: {
        readonly property: "margin";
        readonly scale: "spacing";
    };
    readonly mx: {
        readonly property: "margin";
        readonly properties: readonly ["marginLeft", "marginRight"];
        readonly scale: "spacing";
    };
    readonly my: {
        readonly property: "margin";
        readonly properties: readonly ["marginTop", "marginBottom"];
        readonly scale: "spacing";
    };
    readonly mt: {
        readonly property: "marginTop";
        readonly scale: "spacing";
    };
    readonly mb: {
        readonly property: "marginBottom";
        readonly scale: "spacing";
    };
    readonly mr: {
        readonly property: "marginRight";
        readonly scale: "spacing";
    };
    readonly ml: {
        readonly property: "marginLeft";
        readonly scale: "spacing";
    };
}>>]>>;
export interface TextProps extends StyleProps<typeof textProps>, StyleProps<typeof textStates>, StyleProps<typeof truncateVariants>, StyleProps<typeof elementVariants>, StyleProps<typeof displayVariants> {
}
export declare const Text: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & TextProps, Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "translate" | "property" | "hidden" | "title" | "slot" | "style" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | keyof import("react").ClassAttributes<HTMLSpanElement>>, {}>;
export {};
