function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import cx from 'classnames';
import React from 'react';
import { omitProps } from '../utils/omitProps';
import styles from './styles.module.scss';
var propKeys = ['children', 'className', 'href', 'link', 'onClick', 'target', 'rel'];

/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 *
 * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality
 *
 * @example
 * import { Anchor } from '@codecademy/gamut';
 *
 * <Anchor variant="interface">Button</Anchor>
 *
 */
export var ButtonDeprecatedBase = function ButtonDeprecatedBase(props) {
  var href = props.href,
      className = props.className,
      link = props.link,
      onClick = props.onClick,
      target = props.target,
      rel = props.rel;

  var As = props.as,
      _props$asProps = props.asProps,
      asProps = _props$asProps === void 0 ? {} : _props$asProps,
      restOfProps = _objectWithoutProperties(props, ["as", "asProps"]);

  var propsToTransfer = omitProps(propKeys, restOfProps);
  var classes = cx(styles.basicBtn, className, _defineProperty({}, styles.basicLink, link));

  var defaultProps = _objectSpread(_objectSpread({}, propsToTransfer), {}, {
    className: classes,
    onClick: onClick,
    'data-btn': true
  });

  if (As) {
    return /*#__PURE__*/React.createElement(As, _extends({}, defaultProps, asProps));
  }

  if (href) {
    // Check if this is a popup and and appropriate rel props if they don't exist (see https://web.dev/external-anchors-use-rel-noopener/)
    var anchorProps = {
      target: target,
      rel: target === '_blank' && !rel ? 'noopener noreferrer' : rel
    }; // Anchor tag receives children content from propsToTransfer
    // eslint-disable-next-line jsx-a11y/anchor-has-content

    return /*#__PURE__*/React.createElement("a", _extends({}, defaultProps, anchorProps, {
      href: href
    }));
  } // eslint-disable-next-line react/button-has-type


  return /*#__PURE__*/React.createElement("button", defaultProps);
};