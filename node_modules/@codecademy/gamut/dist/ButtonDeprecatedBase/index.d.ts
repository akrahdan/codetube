import React, { HTMLProps, ReactNode } from 'react';
import { ChildComponentDescriptor } from '../typings/react';
export declare type ButtonDeprecatedBaseProps = Omit<HTMLProps<HTMLAnchorElement> & HTMLProps<HTMLButtonElement>, 'as' | 'size'> & {
    /**
     * Component type to wrap children with.
     */
    as?: ChildComponentDescriptor;
    /**
     * @remarks We would love to properly type this with generics, but cannot yet.
     * @see https://github.com/Codecademy/client-modules/pull/270#discussion_r270917147
     * @see https://github.com/Microsoft/TypeScript/issues/21048
     */
    asProps?: any;
    children?: ReactNode;
    className?: string;
    href?: string;
    target?: string;
    rel?: string;
    /**
     * Variant that displays the button as an inline link element, but maintains its semantic meaning as a button.
     */
    link?: boolean;
    /**
     * @remarks
     * Technically, this is only ever a button event *or* a link event.
     * We '&' them together for ease of usage.
     */
    onClick?: (event: React.MouseEvent<HTMLAnchorElement> & React.MouseEvent<HTMLButtonElement>) => void;
};
/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 *
 * See [Anchor](https://gamut.codecademy.com/storybook/?path=/docs/typography-anchor--anchor) for similiar functionality
 *
 * @example
 * import { Anchor } from '@codecademy/gamut';
 *
 * <Anchor variant="interface">Button</Anchor>
 *
 */
export declare const ButtonDeprecatedBase: React.FC<ButtonDeprecatedBaseProps>;
