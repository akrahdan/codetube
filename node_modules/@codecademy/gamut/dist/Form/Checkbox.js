import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { colors, noSelect, pxRem, screenReaderOnly } from '@codecademy/gamut-styles';
import React, { forwardRef } from 'react';
import { variables } from './_variables';
var activeColor = colors.hyper;

var CheckboxLabel = _styled("label", {
  target: "ev04j9m5",
  label: "CheckboxLabel"
})(noSelect, " display:flex;align-items:flex-start;cursor:pointer;margin:(", variables.formPadding, " / 2) 0;width:100%;font-weight:normal;padding:", variables.formPadding, " 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0QmtDIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */"));

var CheckboxElement = _styled("div", {
  target: "ev04j9m4",
  label: "CheckboxElement"
})("position:relative;margin-right:0.5rem;min-width:1.5rem;height:1.5rem;border:2px solid ", variables.borderColor, ";border-radius:", variables.borderRadius, ";transition:all 0.1s ease-in-out;margin-top:", function (_ref) {
  var multiline = _ref.multiline;
  return multiline && '3px';
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QzZDIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */"));

var CheckboxVector = _styled("svg", {
  target: "ev04j9m3",
  label: "CheckboxVector"
})(process.env.NODE_ENV === "production" ? {
  name: "caf7sv",
  styles: "position:absolute;top:-2px;left:-2px"
} : {
  name: "caf7sv",
  styles: "position:absolute;top:-2px;left:-2px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRGlDIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Polyline = _styled("polyline", {
  target: "ev04j9m2",
  label: "Polyline"
})("fill:none;stroke:", colors['gray-100'], ";stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:18px;stroke-dashoffset:18px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RGdDIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */")); // Maybe ScreenReaderFocusable


var Input = _styled("input", {
  target: "ev04j9m1",
  label: "Input"
})(screenReaderOnly, " &:focus+", CheckboxLabel, ">", CheckboxElement, "{outline:", pxRem(2), " solid ", activeColor, ";outline-offset:", pxRem(2), ";}&:checked+", CheckboxLabel, " ", CheckboxElement, "{border-color:", activeColor, ";", CheckboxVector, "{path{fill:", activeColor, ";}", Polyline, "{stroke-dashoffset:0;transition:stroke-dashoffset ", variables.transitionTime, ";}}}&:checked:disabled+", CheckboxLabel, " ", CheckboxElement, "{border-color:", variables.itemBackgroundHover, ";", CheckboxVector, "{", Polyline, "{fill:", variables.itemBackgroundHover, ";}path{fill:", variables.itemBackgroundHover, ";}}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRTBCIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */"));

var CheckboxText = _styled("span", {
  target: "ev04j9m0",
  label: "CheckboxText"
})("align-self:center;font-size:", function (_ref2) {
  var multiline = _ref2.multiline;
  return multiline && '0.75rem';
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RzJDIiwiZmlsZSI6Ii4uLy4uL3NyYy9Gb3JtL0NoZWNrYm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbG9ycyxcbiAgbm9TZWxlY3QsXG4gIHB4UmVtLFxuICBzY3JlZW5SZWFkZXJPbmx5LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIElucHV0SFRNTEF0dHJpYnV0ZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi9fdmFyaWFibGVzJztcblxuZXhwb3J0IHR5cGUgQ2hlY2tib3hQcm9wcyA9IElucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4gJlxuICBNdWx0aWxpbmUgJiB7XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBodG1sRm9yOiBzdHJpbmc7XG4gICAgbGFiZWw6IFJlYWN0Tm9kZTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfTtcblxudHlwZSBNdWx0aWxpbmUgPSB7IG11bHRpbGluZT86IGJvb2xlYW4gfTtcblxuY29uc3QgYWN0aXZlQ29sb3IgPSBjb2xvcnMuaHlwZXI7XG5cbmNvbnN0IENoZWNrYm94TGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gICR7bm9TZWxlY3R9XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogKCR7dmFyaWFibGVzLmZvcm1QYWRkaW5nfSAvIDIpIDA7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAke3ZhcmlhYmxlcy5mb3JtUGFkZGluZ30gMDtcbmA7XG5cbmNvbnN0IENoZWNrYm94RWxlbWVudCA9IHN0eWxlZC5kaXY8TXVsdGlsaW5lPmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgbWluLXdpZHRoOiAxLjVyZW07XG4gIGhlaWdodDogMS41cmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAke3ZhcmlhYmxlcy5ib3JkZXJDb2xvcn07XG4gIGJvcmRlci1yYWRpdXM6ICR7dmFyaWFibGVzLmJvcmRlclJhZGl1c307XG4gIHRyYW5zaXRpb246IGFsbCAwLjFzIGVhc2UtaW4tb3V0O1xuICBtYXJnaW4tdG9wOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzNweCd9O1xuYDtcblxuY29uc3QgQ2hlY2tib3hWZWN0b3IgPSBzdHlsZWQuc3ZnYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTJweDtcbiAgbGVmdDogLTJweDtcbmA7XG5cbmNvbnN0IFBvbHlsaW5lID0gc3R5bGVkLnBvbHlsaW5lYFxuICBmaWxsOiBub25lO1xuICBzdHJva2U6ICR7Y29sb3JzWydncmF5LTEwMCddfTtcbiAgc3Ryb2tlLXdpZHRoOiAyO1xuICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XG4gIHN0cm9rZS1kYXNoYXJyYXk6IDE4cHg7XG4gIHN0cm9rZS1kYXNob2Zmc2V0OiAxOHB4O1xuYDtcblxuLy8gTWF5YmUgU2NyZWVuUmVhZGVyRm9jdXNhYmxlXG5jb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgJHtzY3JlZW5SZWFkZXJPbmx5fVxuXG4gICY6Zm9jdXMgKyAke0NoZWNrYm94TGFiZWx9ID4gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBvdXRsaW5lOiAke3B4UmVtKDIpfSBzb2xpZCAke2FjdGl2ZUNvbG9yfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtweFJlbSgyKX07XG4gIH1cblxuICAmOmNoZWNrZWQgKyAke0NoZWNrYm94TGFiZWx9ICR7Q2hlY2tib3hFbGVtZW50fSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2FjdGl2ZUNvbG9yfTtcblxuICAgICR7Q2hlY2tib3hWZWN0b3J9IHtcbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke2FjdGl2ZUNvbG9yfTtcbiAgICAgIH1cblxuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgICAgICAgdHJhbnNpdGlvbjogc3Ryb2tlLWRhc2hvZmZzZXQgJHt2YXJpYWJsZXMudHJhbnNpdGlvblRpbWV9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZDpkaXNhYmxlZCArICR7Q2hlY2tib3hMYWJlbH0gJHtDaGVja2JveEVsZW1lbnR9IHtcbiAgICBib3JkZXItY29sb3I6ICR7dmFyaWFibGVzLml0ZW1CYWNrZ3JvdW5kSG92ZXJ9O1xuXG4gICAgJHtDaGVja2JveFZlY3Rvcn0ge1xuICAgICAgJHtQb2x5bGluZX0ge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICAgIHBhdGgge1xuICAgICAgICBmaWxsOiAke3ZhcmlhYmxlcy5pdGVtQmFja2dyb3VuZEhvdmVyfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENoZWNrYm94VGV4dCA9IHN0eWxlZC5zcGFuPE11bHRpbGluZT5gXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAkeyh7IG11bHRpbGluZSB9KSA9PiBtdWx0aWxpbmUgJiYgJzAuNzVyZW0nfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaGVja2JveCA9IGZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgQ2hlY2tib3hQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgbGFiZWwsIGh0bWxGb3IsIG11bHRpbGluZSwgaWQsIC4uLnJlc3QgfSwgcmVmKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8SW5wdXQgaWQ9e2lkIHx8IGh0bWxGb3J9IHR5cGU9XCJjaGVja2JveFwiIHsuLi5yZXN0fSByZWY9e3JlZn0gLz5cbiAgICAgIDxDaGVja2JveExhYmVsIGh0bWxGb3I9e2lkIHx8IGh0bWxGb3J9PlxuICAgICAgICA8Q2hlY2tib3hFbGVtZW50IG11bHRpbGluZT17bXVsdGlsaW5lfT5cbiAgICAgICAgICA8Q2hlY2tib3hWZWN0b3Igd2lkdGg9XCIyNHB4XCIgaGVpZ2h0PVwiMjRweFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNMywxIEwxNywxIEwxNywxIEMxOC4xMDQ1Njk1LDEgMTksMS44OTU0MzA1IDE5LDMgTDE5LDE3IEwxOSwxNyBDMTksMTguMTA0NTY5NSAxOC4xMDQ1Njk1LDE5IDE3LDE5IEwzLDE5IEwzLDE5IEMxLjg5NTQzMDUsMTkgMSwxOC4xMDQ1Njk1IDEsMTcgTDEsMyBMMSwzIEMxLDEuODk1NDMwNSAxLjg5NTQzMDUsMSAzLDEgWlwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8UG9seWxpbmUgcG9pbnRzPVwiNCAxMSA4IDE1IDE2IDZcIiAvPlxuICAgICAgICAgIDwvQ2hlY2tib3hWZWN0b3I+XG4gICAgICAgIDwvQ2hlY2tib3hFbGVtZW50PlxuICAgICAgICA8Q2hlY2tib3hUZXh0IG11bHRpbGluZT17bXVsdGlsaW5lfT57bGFiZWx9PC9DaGVja2JveFRleHQ+XG4gICAgICA8L0NoZWNrYm94TGFiZWw+XG4gICAgPC9kaXY+XG4gIClcbik7XG4iXX0= */"));

export var Checkbox = /*#__PURE__*/forwardRef(function Checkbox(_ref3, ref) {
  var className = _ref3.className,
      label = _ref3.label,
      htmlFor = _ref3.htmlFor,
      multiline = _ref3.multiline,
      id = _ref3.id,
      rest = _objectWithoutProperties(_ref3, ["className", "label", "htmlFor", "multiline", "id"]);

  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, /*#__PURE__*/React.createElement(Input, _extends({
    id: id || htmlFor,
    type: "checkbox"
  }, rest, {
    ref: ref
  })), /*#__PURE__*/React.createElement(CheckboxLabel, {
    htmlFor: id || htmlFor
  }, /*#__PURE__*/React.createElement(CheckboxElement, {
    multiline: multiline
  }, /*#__PURE__*/React.createElement(CheckboxVector, {
    width: "24px",
    height: "24px",
    viewBox: "0 0 20 20"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M3,1 L17,1 L17,1 C18.1045695,1 19,1.8954305 19,3 L19,17 L19,17 C19,18.1045695 18.1045695,19 17,19 L3,19 L3,19 C1.8954305,19 1,18.1045695 1,17 L1,3 L1,3 C1,1.8954305 1.8954305,1 3,1 Z",
    fill: "none"
  }), /*#__PURE__*/React.createElement(Polyline, {
    points: "4 11 8 15 16 6"
  }))), /*#__PURE__*/React.createElement(CheckboxText, {
    multiline: multiline
  }, label)));
});