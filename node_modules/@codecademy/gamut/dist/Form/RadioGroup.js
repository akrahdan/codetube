function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { cloneElement } from 'react';
export var RadioGroup = function RadioGroup(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      htmlForPrefix = _ref.htmlForPrefix,
      name = _ref.name,
      rest = _objectWithoutProperties(_ref, ["children", "onChange", "htmlForPrefix", "name"]);

  return /*#__PURE__*/React.createElement("div", rest, React.Children.map(children, function (child, index) {
    return /*#__PURE__*/cloneElement(child, {
      onChange: onChange,
      htmlFor: "".concat(htmlForPrefix, "-").concat(index),
      name: name
    });
  }));
};