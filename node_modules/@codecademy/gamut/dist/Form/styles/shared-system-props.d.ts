export declare type conditionalStyleProps = {
    error?: boolean;
    activated?: boolean;
    isFocused?: boolean | null;
    isDisabled?: boolean | null;
};
export declare enum InputSelectors {
    HOVER = "&:hover",
    ACTIVE = "&:active",
    PLACEHOLDER = "&:placeholder",
    FOCUS = "&:focus",
    DISABLED = "&:disabled, &[aria-disabled='true']",
    BEFORE = "&::before",
    AFTER = "&::after",
    BEFORE_AND_AFTER = "&::before, &::after",
    CHECKED_BEFORE = "&:checked + label::before",
    CHECKED_AFTER = "&:checked + label::after",
    HOVER_FOCUS_BEFORE = "&:hover + label::before, &:focus + label::before"
}
export declare const formBaseComponentStyles: {
    readonly fontWeight: "base";
    readonly fontSize: 16;
    readonly width: 1;
    readonly outline: "none";
    readonly bg: "background";
    readonly textColor: "text";
    readonly minWidth: "auto";
};
export declare const formFieldFocusStyles: {
    readonly borderColor: "primary";
    readonly boxShadow: "inset 0 0 0 1px var(--colors-primary)";
};
export declare const formFieldPaddingStyles: {
    readonly py: 12;
    readonly px: 8;
};
export declare const formBaseFieldStylesObject: {
    readonly transition: string;
    readonly border: 1;
    readonly borderColor: "text-disabled";
    readonly borderRadius: "2px";
    readonly "&:hover": {
        readonly borderColor: "primary";
    };
    readonly "&:placeholder": {
        readonly borderColor: "text-disabled";
        readonly fontStyle: "italic";
    };
    readonly "&:disabled, &[aria-disabled='true']": {
        readonly bg: "background-disabled";
        readonly "&:hover": {
            readonly borderColor: "currentColor";
        };
        readonly borderColor: "currentColor";
        readonly textColor: "text-disabled";
        readonly fontStyle: "italic";
        readonly cursor: "not-allowed";
    };
    readonly fontWeight: "base";
    readonly fontSize: 16;
    readonly width: 1;
    readonly outline: "none";
    readonly bg: "background";
    readonly textColor: "text";
    readonly minWidth: "auto";
};
export declare const formBaseFieldStyles: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const formFieldStyles: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const conditionalStyles: (props: import("@codecademy/variance/dist/types/config").VariantProps<"variant", false | "error" | "activated"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const conditionalStyleState: (error: boolean, activated: boolean) => "error" | "activated" | undefined;
export declare const radioWrapper: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const radioLabel: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const radioInput: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const conditionalRadioLabelStyles: (props: import("@codecademy/variance/dist/types/config").VariantProps<"variant", false | "disabled" | "error"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const conditionalRadioInputStyles: (props: import("@codecademy/variance/dist/types/config").VariantProps<"variant", false | "disabled" | "error"> & {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
