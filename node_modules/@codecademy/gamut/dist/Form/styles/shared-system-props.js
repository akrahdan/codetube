var _objectSpread3, _error, _objectSpread5, _system$css, _base2;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { system, theme, timing, transitionConcat } from '@codecademy/gamut-styles';
export var InputSelectors;

(function (InputSelectors) {
  InputSelectors["HOVER"] = "&:hover";
  InputSelectors["ACTIVE"] = "&:active";
  InputSelectors["PLACEHOLDER"] = "&:placeholder";
  InputSelectors["FOCUS"] = "&:focus";
  InputSelectors["DISABLED"] = "&:disabled, &[aria-disabled='true']";
  InputSelectors["BEFORE"] = "&::before";
  InputSelectors["AFTER"] = "&::after";
  InputSelectors["BEFORE_AND_AFTER"] = "&::before, &::after";
  InputSelectors["CHECKED_BEFORE"] = "&:checked + label::before";
  InputSelectors["CHECKED_AFTER"] = "&:checked + label::after";
  InputSelectors["HOVER_FOCUS_BEFORE"] = "&:hover + label::before, &:focus + label::before";
})(InputSelectors || (InputSelectors = {}));

export var formBaseComponentStyles = {
  fontWeight: 'base',
  fontSize: 16,
  width: 1,
  outline: 'none',
  bg: 'background',
  textColor: 'text',
  minWidth: 'auto'
};
export var formFieldFocusStyles = {
  borderColor: 'primary',
  boxShadow: "inset 0 0 0 1px ".concat(theme.colors.primary)
};
var formFieldBaseDisabledStyles = {
  borderColor: 'currentColor',
  textColor: 'text-disabled',
  fontStyle: 'italic',
  cursor: 'not-allowed'
};

var formFieldDisabledStyles = _objectSpread(_objectSpread({}, formFieldBaseDisabledStyles), {}, _defineProperty({
  bg: 'background-disabled'
}, InputSelectors.HOVER, {
  borderColor: 'currentColor'
}));

export var formFieldPaddingStyles = {
  py: 12,
  px: 8
};
export var formBaseFieldStylesObject = _objectSpread(_objectSpread({}, formBaseComponentStyles), {}, (_objectSpread3 = {
  transition: transitionConcat(['background-color', 'box-shadow'], 'slow', 'ease-in-out'),
  border: 1,
  borderColor: 'text-disabled',
  borderRadius: '2px'
}, _defineProperty(_objectSpread3, InputSelectors.HOVER, {
  borderColor: 'primary'
}), _defineProperty(_objectSpread3, InputSelectors.PLACEHOLDER, {
  borderColor: 'text-disabled',
  fontStyle: 'italic'
}), _defineProperty(_objectSpread3, InputSelectors.DISABLED, _objectSpread({}, formFieldDisabledStyles)), _objectSpread3));
export var formBaseFieldStyles = system.css(formBaseFieldStylesObject);
export var formFieldStyles = system.css(_objectSpread(_objectSpread(_objectSpread({}, formBaseFieldStylesObject), formFieldPaddingStyles), {}, _defineProperty({}, InputSelectors.FOCUS, formFieldFocusStyles)));
export var conditionalStyles = system.variant({
  variants: {
    error: (_error = {
      textColor: 'danger',
      borderColor: 'currentColor'
    }, _defineProperty(_error, InputSelectors.HOVER, {
      borderColor: 'currentColor'
    }), _defineProperty(_error, InputSelectors.FOCUS, {
      borderColor: 'currentColor',
      boxShadow: "inset 0 0 0 1px currentColor"
    }), _error),
    activated: {
      borderColor: 'currentColor'
    }
  }
});
export var conditionalStyleState = function conditionalStyleState(error, activated) {
  return error ? 'error' : activated ? 'activated' : undefined;
};
export var radioWrapper = system.css({
  margin: '0.25rem 0',
  width: '100%',
  fontWeight: 'normal'
});
var consistentLabelStyles = {
  content: '""',
  display: 'block',
  width: 20,
  height: 20,
  minWidth: 20,
  borderRadius: '100%',
  mr: 8
};
export var radioLabel = system.css(_objectSpread(_objectSpread({}, formBaseComponentStyles), {}, (_objectSpread5 = {
  bg: 'transparent',
  display: 'flex',
  py: 16,
  alignItems: 'center',
  cursor: 'pointer',
  position: 'relative'
}, _defineProperty(_objectSpread5, InputSelectors.BEFORE_AND_AFTER, consistentLabelStyles), _defineProperty(_objectSpread5, InputSelectors.BEFORE, {
  bg: 'background',
  boxShadow: "0 0 0 1px ".concat(theme.colors["text-disabled"]),
  transition: timing.slow
}), _defineProperty(_objectSpread5, InputSelectors.AFTER, {
  position: 'absolute',
  transition: transitionConcat(['transform'], 'slow', 'ease-in-out'),
  borderWidth: 5,
  borderStyle: 'solid',
  borderColor: 'background',
  transform: 'scale(0)'
}), _objectSpread5)));
export var radioInput = system.css((_system$css = {}, _defineProperty(_system$css, InputSelectors.CHECKED_AFTER, {
  bg: 'primary',
  borderWidth: 4,
  borderStyle: 'solid',
  borderColor: 'background',
  transform: 'scale(1)'
}), _defineProperty(_system$css, InputSelectors.CHECKED_BEFORE, {
  boxShadow: "0 0 0 1px ".concat(theme.colors.primary)
}), _defineProperty(_system$css, InputSelectors.HOVER_FOCUS_BEFORE, {
  boxShadow: "0 0 0 2px ".concat(theme.colors.primary)
}), _system$css));
export var conditionalRadioLabelStyles = system.variant({
  base: _defineProperty({}, InputSelectors.BEFORE, {
    boxShadow: "0 0 0 1px currentColor"
  }),
  variants: {
    error: {
      textColor: 'danger'
    },
    disabled: _objectSpread({}, formFieldBaseDisabledStyles)
  }
});
export var conditionalRadioInputStyles = system.variant({
  base: (_base2 = {}, _defineProperty(_base2, InputSelectors.CHECKED_AFTER, {
    bg: 'currentColor'
  }), _defineProperty(_base2, InputSelectors.CHECKED_BEFORE, {
    boxShadow: "0 0 0 1px currentColor"
  }), _base2),
  variants: {
    error: _defineProperty({}, InputSelectors.HOVER_FOCUS_BEFORE, {
      boxShadow: "0 0 0 2px currentColor"
    }),
    disabled: _objectSpread(_objectSpread({}, formFieldBaseDisabledStyles), {}, _defineProperty({}, InputSelectors.HOVER_FOCUS_BEFORE, {
      boxShadow: "0 0 0 1px currentColor"
    }))
  }
});