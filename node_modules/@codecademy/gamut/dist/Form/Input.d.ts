import { AlertIcon } from '@codecademy/gamut-icons';
import { StyledComponent } from '@emotion/styled';
import React, { InputHTMLAttributes } from 'react';
import { conditionalStyleProps } from './styles/shared-system-props';
export declare type InputProps = InputHTMLAttributes<HTMLInputElement> & {
    id?: string;
    className?: string;
    error?: boolean;
    /**
     * [The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.
     */
    htmlFor?: string;
    label?: string;
    name?: string;
    placeholder?: string;
    required?: boolean;
    type?: string;
    valid?: boolean;
    /**
     * Allows Inputs to manage their own activated style state to account for some edge-cases.
     */
    activated?: boolean;
};
export interface StyledInputProps extends InputProps {
    icon?: boolean;
}
export interface InputWrapperProps extends InputProps {
    as?: StyledComponent<StyledInputProps, React.PropsWithChildren<any>>;
    /**
     * A custom icon svg from gamut-icons.
     */
    icon?: typeof AlertIcon;
}
/**  We greatly prefer NOT to do this but ReactRecurly has some specific needs around focus-styles + padding that force us to export them seperately. If we ever stop using React-Recurly, this code will be ðŸ”ª.
 *tldr: Do not do this unless you have already talked to Web-Plat and have failed to find any alternate (and better) solutions. */
export declare const reactRecurlyFormFieldFocusStyles: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const reactRecurlyFormFieldPaddingStyles: (props: {
    theme?: import("@emotion/react").Theme | undefined;
}) => import("@codecademy/variance").CSSObject;
export declare const iFrameWrapper: StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: React.ElementType<any> | undefined;
} & conditionalStyleProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const Input: React.ForwardRefExoticComponent<InputWrapperProps & React.RefAttributes<HTMLInputElement>>;
