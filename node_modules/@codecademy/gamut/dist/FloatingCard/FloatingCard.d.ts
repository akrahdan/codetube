import React, { ComponentProps } from 'react';
import { Pattern } from '../Pattern';
declare const CardBody: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: React.ElementType<any> | undefined;
} & import("@codecademy/variance/dist/types/config").VariantProps<"beak", false | "bottom-left" | "bottom-right" | "top-left" | "top-right"> & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    p?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly scale: "spacing";
    }>;
    px?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly properties: readonly ["paddingLeft", "paddingRight"];
        readonly scale: "spacing";
    }>;
    py?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "padding";
        readonly properties: readonly ["paddingTop", "paddingBottom"];
        readonly scale: "spacing";
    }>;
    pt?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingTop";
        readonly scale: "spacing";
    }>;
    pb?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingBottom";
        readonly scale: "spacing";
    }>;
    pr?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingRight";
        readonly scale: "spacing";
    }>;
    pl?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "paddingLeft";
        readonly scale: "spacing";
    }>;
    flexBasis?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexBasis";
    }>;
    flexShrink?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexShrink";
    }>;
    flexGrow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "flexGrow";
    }>;
    order?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "order";
    }>;
    gridColumn?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumn";
    }>;
    gridRow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRow";
    }>;
    gridColumnStart?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumnStart";
    }>;
    gridRowStart?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRowStart";
    }>;
    gridColumnEnd?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridColumnEnd";
    }>;
    gridRowEnd?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridRowEnd";
    }>;
    justifySelf?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "justifySelf";
    }>;
    alignSelf?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "alignSelf";
    }>;
    gridArea?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "gridArea";
    }>;
    display?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "display";
    }>;
    overflow?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflow";
    }>;
    overflowX?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflowX";
    }>;
    overflowY?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "overflowY";
    }>;
    dimensions?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "width";
        readonly properties: readonly ["width", "height"];
        readonly transform: (value: string | number) => string | 0;
    }>;
    width?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "width";
        readonly transform: (value: string | number) => string | 0;
    }>;
    minWidth?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "minWidth";
        readonly transform: (value: string | number) => string | 0;
    }>;
    maxWidth?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "maxWidth";
        readonly transform: (value: string | number) => string | 0;
    }>;
    height?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "height";
        readonly transform: (value: string | number) => string | 0;
    }>;
    minHeight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "minHeight";
        readonly transform: (value: string | number) => string | 0;
    }>;
    maxHeight?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "maxHeight";
        readonly transform: (value: string | number) => string | 0;
    }>;
    verticalAlign?: import("@codecademy/variance/dist/types/config").Scale<{
        readonly property: "verticalAlign";
    }>;
}, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "translate" | "property" | "hidden" | "title" | "slot" | "style" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | keyof React.ClassAttributes<HTMLDivElement>>, {}>;
export declare type FloatingCardProps = {
    className?: string;
    pattern: ComponentProps<typeof Pattern>['name'];
} & ComponentProps<typeof CardBody>;
export declare const FloatingCard: React.ForwardRefExoticComponent<Pick<FloatingCardProps, "p" | "px" | "py" | "pt" | "pb" | "pr" | "pl" | "flexBasis" | "flexShrink" | "flexGrow" | "order" | "gridColumn" | "gridRow" | "gridColumnStart" | "gridRowStart" | "gridColumnEnd" | "gridRowEnd" | "justifySelf" | "alignSelf" | "gridArea" | "display" | "overflow" | "overflowX" | "overflowY" | "dimensions" | "width" | "minWidth" | "maxWidth" | "height" | "minHeight" | "maxHeight" | "verticalAlign" | "translate" | "property" | "hidden" | "title" | "theme" | "slot" | "style" | "pattern" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "as" | "beak"> & React.RefAttributes<HTMLDivElement>>;
export {};
