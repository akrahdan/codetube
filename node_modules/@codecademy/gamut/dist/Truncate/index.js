function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { isValidElement, useEffect, useState } from 'react';
import TruncateMarkup from 'react-truncate-markup';
import { Box } from '../Box';
export var Truncate = function Truncate(_ref) {
  var className = _ref.className,
      children = _ref.children,
      lines = _ref.lines,
      expanded = _ref.expanded,
      _ref$onTruncate = _ref.onTruncate,
      onTruncate = _ref$onTruncate === void 0 ? function () {} : _ref$onTruncate;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isTruncated = _useState2[0],
      setIsTruncated = _useState2[1];

  useEffect(function () {
    onTruncate(isTruncated);
  }, [isTruncated, onTruncate]);
  /** Truncate markup expects a single child element */

  var truncatedChildren = /*#__PURE__*/React.createElement(TruncateMarkup, {
    tokenize: "characters",
    ellipsis: /*#__PURE__*/React.createElement("span", null, "..."),
    lines: lines,
    onTruncate: setIsTruncated
  }, /*#__PURE__*/React.createElement(Box, {
    as: "span",
    display: "inline-block",
    width: "100%",
    className: className
  }, React.Children.map(children, function (child) {
    return /*#__PURE__*/isValidElement(child) || typeof child === 'string' ? child : /*#__PURE__*/React.createElement(TruncateMarkup.Atom, null, child);
  })));
  /** If lines is false do not attempt to truncate */

  return expanded ? /*#__PURE__*/React.createElement(Box, {
    as: "span",
    display: "inline-block",
    width: "100%",
    className: className
  }, children) : truncatedChildren;
};