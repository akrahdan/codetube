function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { isNumber } from 'lodash';
import React, { Component } from 'react';
import { TabList } from '../TabList';
import { TabPanel } from '../TabPanel';

/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 *
 * Check the [Gamut Board](https://www.notion.so/codecademy/Gamut-Status-Timeline-dd3c135d3848464ea6eb1b48e68fbb1d) for component status
 */
export var Tabs = /*#__PURE__*/function (_Component) {
  _inherits(Tabs, _Component);

  var _super = _createSuper(Tabs);

  function Tabs() {
    var _this;

    _classCallCheck(this, Tabs);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      activeTabIndex: _this.props.defaultActiveTabIndex || 0
    };
    _this.idPrefix = Math.random().toString().replace('.', '');

    _this.createBaseId = function (index) {
      return "".concat(_this.idPrefix, "-").concat(index);
    };

    _this.isControlled = function () {
      return isNumber(_this.props.activeTabIndex);
    };

    _this.updateTabIndexState = function (index) {
      _this.setState({
        activeTabIndex: index
      });
    };

    return _this;
  }

  _createClass(Tabs, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var stateIndexChanged = this.state.activeTabIndex !== prevState.activeTabIndex;

      if (stateIndexChanged && this.props.onChange) {
        this.props.onChange(this.state.activeTabIndex);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var activeTabIndex = this.isControlled() ? this.props.activeTabIndex : this.state.activeTabIndex;
      var onChange = this.isControlled() ? this.props.onChange : this.updateTabIndexState;

      if (!onChange) {
        throw new Error('Tabs component is controlled but no tab change callback (onChange) was provided');
      }

      var childrenArray = React.Children.toArray(this.props.children);
      var clonedTabPanels = childrenArray.filter(function (c) {
        return c.type === TabPanel;
      });

      if (activeTabIndex >= clonedTabPanels.length) {
        activeTabIndex = clonedTabPanels.length - 1;
      }

      var tabListChild = childrenArray.find(function (c) {
        return c.type === TabList;
      });
      var clonedTabList = /*#__PURE__*/React.cloneElement(tabListChild, {
        activeTabIndex: activeTabIndex,
        onChange: onChange,
        createBaseId: this.createBaseId
      });
      clonedTabPanels = clonedTabPanels.map(function (panel, index) {
        return /*#__PURE__*/React.cloneElement(panel, {
          active: index === activeTabIndex,
          renderAllPanels: _this2.props.renderAllPanels,
          id: "".concat(_this2.createBaseId(index), "-panel"),
          key: _this2.createBaseId(index)
        });
      });
      return /*#__PURE__*/React.createElement("div", {
        className: this.props.className
      }, clonedTabList, clonedTabPanels);
    }
  }]);

  return Tabs;
}(Component);