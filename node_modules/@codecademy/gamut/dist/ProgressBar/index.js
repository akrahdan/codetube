import _styled from "@emotion/styled/base";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { variant } from '@codecademy/gamut-styles';
import React from 'react';
import { Pattern } from '../Pattern';
var progressBarSizeVariants = variant({
  defaultVariant: 'small',
  prop: 'size',
  variants: {
    small: {
      height: '6px',
      borderRadius: '3px'
    },
    medium: {
      height: '8px',
      borderRadius: '80px'
    },
    large: {
      height: '36px',
      borderRadius: '18px'
    }
  }
});
var progressBarBackgroundVariants = variant({
  defaultVariant: 'blue',
  variants: {
    blue: {
      bg: 'navy'
    },
    yellow: {
      bg: "gray-100"
    },
    dark: {
      textColor: 'white'
    },
    light: {
      textColor: 'navy'
    }
  }
});
var progressBarBorderVariants = variant({
  defaultVariant: 'basic',
  prop: 'border',
  variants: {
    basic: {
      borderWidth: '0'
    },
    bordered: {
      borderWidth: '1px',
      borderStyle: 'solid'
    }
  }
});
var progressBarForegroundVariants = variant({
  defaultVariant: 'blue',
  base: {
    alignItems: 'center',
    height: '100%',
    display: 'flex',
    transition: 'width 0.5s',
    position: 'relative',
    borderRadius: 'inherit'
  },
  variants: {
    blue: {
      bg: 'blue',
      textColor: 'white'
    },
    yellow: {
      bg: "yellow",
      textColor: "black"
    },
    light: {
      bg: 'navy',
      textColor: 'navy'
    },
    dark: {
      bg: 'white',
      textColor: 'white'
    }
  }
});

var ProgressBarWrapper = _styled("div", {
  target: "e1i4q3m22",
  label: "ProgressBarWrapper"
})("overflow:hidden;position:relative;", progressBarBackgroundVariants, ";", progressBarSizeVariants, ";", progressBarBorderVariants, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm9ncmVzc0Jhci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0hxRSIsImZpbGUiOiIuLi8uLi9zcmMvUHJvZ3Jlc3NCYXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmFyaWFudCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBQYXR0ZXJuLCBQYXR0ZXJuTmFtZSB9IGZyb20gJy4uL1BhdHRlcm4nO1xuXG5leHBvcnQgdHlwZSBQcm9ncmVzc0JhclByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gaW5jcmVhc2Ugc2l6ZSBhbmQgZGlzcGxheSB0aGUgcGVyY2VudGFnZSBhcyB0ZXh0LlxuICAgKi9cbiAgc2l6ZT86ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG5cbiAgLyoqXG4gICAqIE1pbmltdW0gYW1vdW50IG9mIHRoZSBiYXIgdG8gZmlsbCBpbiB2aXN1YWxseS5cbiAgICovXG4gIG1pbmltdW1QZXJjZW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIb3cgbXVjaCBvZiB0aGUgYmFyIHRvIGZpbGwgaW4sIGFzIGEgbnVtYmVyIGluIFswLCAxMDBdLlxuICAgKi9cbiAgcGVyY2VudDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBCYXNlIHZhcmlhbnQgZGlzcGxheSB0aGVtZXMuXG4gICAqL1xuICB2YXJpYW50OiAnYmx1ZScgfCAneWVsbG93JyB8ICdkYXJrJyB8ICdsaWdodCc7XG5cbiAgLyoqXG4gICAqIEJhc2UgdmFyaWFudCBkaXNwbGF5IHRoZW1lcy5cbiAgICovXG4gIGJvcmRlcmVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0byB1c2UgYSBwYXR0ZXJuIGJhY2tncm91bmRcbiAgICovXG4gIHBhdHRlcm4/OiBQYXR0ZXJuTmFtZTtcbn07XG5cbmNvbnN0IHByb2dyZXNzQmFyU2l6ZVZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnc21hbGwnLFxuICBwcm9wOiAnc2l6ZScsXG4gIHZhcmlhbnRzOiB7XG4gICAgc21hbGw6IHtcbiAgICAgIGhlaWdodDogJzZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgIH0sXG4gICAgbWVkaXVtOiB7XG4gICAgICBoZWlnaHQ6ICc4cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnODBweCcsXG4gICAgfSxcbiAgICBsYXJnZToge1xuICAgICAgaGVpZ2h0OiAnMzZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICcxOHB4JyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHByb2dyZXNzQmFyQmFja2dyb3VuZFZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmx1ZScsXG4gIHZhcmlhbnRzOiB7XG4gICAgYmx1ZToge1xuICAgICAgYmc6ICduYXZ5JyxcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgYmc6IGBncmF5LTEwMGAsXG4gICAgfSxcbiAgICBkYXJrOiB7XG4gICAgICB0ZXh0Q29sb3I6ICd3aGl0ZScsXG4gICAgfSxcbiAgICBsaWdodDoge1xuICAgICAgdGV4dENvbG9yOiAnbmF2eScsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5jb25zdCBwcm9ncmVzc0JhckJvcmRlclZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmFzaWMnLFxuICBwcm9wOiAnYm9yZGVyJyxcbiAgdmFyaWFudHM6IHtcbiAgICBiYXNpYzoge1xuICAgICAgYm9yZGVyV2lkdGg6ICcwJyxcbiAgICB9LFxuICAgIGJvcmRlcmVkOiB7XG4gICAgICBib3JkZXJXaWR0aDogJzFweCcsXG4gICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHByb2dyZXNzQmFyRm9yZWdyb3VuZFZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmx1ZScsXG4gIGJhc2U6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgdHJhbnNpdGlvbjogJ3dpZHRoIDAuNXMnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICB9LFxuICB2YXJpYW50czoge1xuICAgIGJsdWU6IHtcbiAgICAgIGJnOiAnYmx1ZScsXG4gICAgICB0ZXh0Q29sb3I6ICd3aGl0ZScsXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgIGJnOiBgeWVsbG93YCxcbiAgICAgIHRleHRDb2xvcjogYGJsYWNrYCxcbiAgICB9LFxuICAgIGxpZ2h0OiB7XG4gICAgICBiZzogJ25hdnknLFxuICAgICAgdGV4dENvbG9yOiAnbmF2eScsXG4gICAgfSxcbiAgICBkYXJrOiB7XG4gICAgICBiZzogJ3doaXRlJyxcbiAgICAgIHRleHRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICB9LFxufSk7XG5cbnR5cGUgUHJvZ3Jlc3NCYXJFbGVtZW50UHJvcHMgPSBQaWNrPFByb2dyZXNzQmFyUHJvcHMsICd2YXJpYW50JyB8ICdzaXplJz47XG5cbnR5cGUgUHJvZ3Jlc3NCYXJFbGVtZW50V3JhcHBlclByb3BzID0gUHJvZ3Jlc3NCYXJFbGVtZW50UHJvcHMgJiB7XG4gIGJvcmRlcjogJ2Jhc2ljJyB8ICdib3JkZXJlZCc7XG59O1xuXG5jb25zdCBQcm9ncmVzc0JhcldyYXBwZXIgPSBzdHlsZWQuZGl2PFByb2dyZXNzQmFyRWxlbWVudFdyYXBwZXJQcm9wcz5gXG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJHtwcm9ncmVzc0JhckJhY2tncm91bmRWYXJpYW50c307XG4gICR7cHJvZ3Jlc3NCYXJTaXplVmFyaWFudHN9O1xuICAke3Byb2dyZXNzQmFyQm9yZGVyVmFyaWFudHN9O1xuYDtcblxuY29uc3QgQmFyID0gc3R5bGVkLmRpdihwcm9ncmVzc0JhckZvcmVncm91bmRWYXJpYW50cyk7XG5cbmNvbnN0IERpc3BsYXllZFBlcmNlbnQgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHBhZGRpbmc6IDAuNXJlbTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IFByb2dyZXNzQmFyOiBSZWFjdC5GQzxQcm9ncmVzc0JhclByb3BzPiA9ICh7XG4gIG1pbmltdW1QZXJjZW50ID0gMCxcbiAgcGVyY2VudCxcbiAgcGF0dGVybixcbiAgYm9yZGVyZWQsXG4gIHNpemUgPSAnc21hbGwnLFxuICB2YXJpYW50ID0gJ2JsdWUnLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQcm9ncmVzc0JhcldyYXBwZXJcbiAgICAgIGFyaWEtbGFiZWw9e2BQcm9ncmVzczogJHtwZXJjZW50fSVgfVxuICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgIHJvbGU9XCJmaWd1cmVcIlxuICAgICAgYm9yZGVyPXtib3JkZXJlZCA/ICdib3JkZXJlZCcgOiAnYmFzaWMnfVxuICAgICAgc2l6ZT17c2l6ZX1cbiAgICAgIHZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAgPlxuICAgICAge3BhdHRlcm4gJiYgKFxuICAgICAgICA8UGF0dGVybiB3aWR0aD1cIjEwMCVcIiBwb3NpdGlvbj1cImFic29sdXRlXCIgekluZGV4PXswfSBuYW1lPXtwYXR0ZXJufSAvPlxuICAgICAgKX1cbiAgICAgIDxCYXJcbiAgICAgICAgdmFyaWFudD17dmFyaWFudH1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJwcm9ncmVzcy1iYXItYmFyXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB3aWR0aDogYCR7TWF0aC5tYXgobWluaW11bVBlcmNlbnQsIHBlcmNlbnQpfSVgLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7c2l6ZSA9PT0gJ2xhcmdlJyAmJiA8RGlzcGxheWVkUGVyY2VudD57cGVyY2VudH0lPC9EaXNwbGF5ZWRQZXJjZW50Pn1cbiAgICAgIDwvQmFyPlxuICAgIDwvUHJvZ3Jlc3NCYXJXcmFwcGVyPlxuICApO1xufTtcbiJdfQ== */"));

var Bar = _styled("div", {
  target: "e1i4q3m21",
  label: "Bar"
})(progressBarForegroundVariants, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm9ncmVzc0Jhci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUlZIiwiZmlsZSI6Ii4uLy4uL3NyYy9Qcm9ncmVzc0Jhci9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2YXJpYW50IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFBhdHRlcm4sIFBhdHRlcm5OYW1lIH0gZnJvbSAnLi4vUGF0dGVybic7XG5cbmV4cG9ydCB0eXBlIFByb2dyZXNzQmFyUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBpbmNyZWFzZSBzaXplIGFuZCBkaXNwbGF5IHRoZSBwZXJjZW50YWdlIGFzIHRleHQuXG4gICAqL1xuICBzaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJztcblxuICAvKipcbiAgICogTWluaW11bSBhbW91bnQgb2YgdGhlIGJhciB0byBmaWxsIGluIHZpc3VhbGx5LlxuICAgKi9cbiAgbWluaW11bVBlcmNlbnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEhvdyBtdWNoIG9mIHRoZSBiYXIgdG8gZmlsbCBpbiwgYXMgYSBudW1iZXIgaW4gWzAsIDEwMF0uXG4gICAqL1xuICBwZXJjZW50OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEJhc2UgdmFyaWFudCBkaXNwbGF5IHRoZW1lcy5cbiAgICovXG4gIHZhcmlhbnQ6ICdibHVlJyB8ICd5ZWxsb3cnIHwgJ2RhcmsnIHwgJ2xpZ2h0JztcblxuICAvKipcbiAgICogQmFzZSB2YXJpYW50IGRpc3BsYXkgdGhlbWVzLlxuICAgKi9cbiAgYm9yZGVyZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHVzZSBhIHBhdHRlcm4gYmFja2dyb3VuZFxuICAgKi9cbiAgcGF0dGVybj86IFBhdHRlcm5OYW1lO1xufTtcblxuY29uc3QgcHJvZ3Jlc3NCYXJTaXplVmFyaWFudHMgPSB2YXJpYW50KHtcbiAgZGVmYXVsdFZhcmlhbnQ6ICdzbWFsbCcsXG4gIHByb3A6ICdzaXplJyxcbiAgdmFyaWFudHM6IHtcbiAgICBzbWFsbDoge1xuICAgICAgaGVpZ2h0OiAnNnB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgfSxcbiAgICBtZWRpdW06IHtcbiAgICAgIGhlaWdodDogJzhweCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICc4MHB4JyxcbiAgICB9LFxuICAgIGxhcmdlOiB7XG4gICAgICBoZWlnaHQ6ICczNnB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogJzE4cHgnLFxuICAgIH0sXG4gIH0sXG59KTtcblxuY29uc3QgcHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kVmFyaWFudHMgPSB2YXJpYW50KHtcbiAgZGVmYXVsdFZhcmlhbnQ6ICdibHVlJyxcbiAgdmFyaWFudHM6IHtcbiAgICBibHVlOiB7XG4gICAgICBiZzogJ25hdnknLFxuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICBiZzogYGdyYXktMTAwYCxcbiAgICB9LFxuICAgIGRhcms6IHtcbiAgICAgIHRleHRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICAgIGxpZ2h0OiB7XG4gICAgICB0ZXh0Q29sb3I6ICduYXZ5JyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHByb2dyZXNzQmFyQm9yZGVyVmFyaWFudHMgPSB2YXJpYW50KHtcbiAgZGVmYXVsdFZhcmlhbnQ6ICdiYXNpYycsXG4gIHByb3A6ICdib3JkZXInLFxuICB2YXJpYW50czoge1xuICAgIGJhc2ljOiB7XG4gICAgICBib3JkZXJXaWR0aDogJzAnLFxuICAgIH0sXG4gICAgYm9yZGVyZWQ6IHtcbiAgICAgIGJvcmRlcldpZHRoOiAnMXB4JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIH0sXG4gIH0sXG59KTtcblxuY29uc3QgcHJvZ3Jlc3NCYXJGb3JlZ3JvdW5kVmFyaWFudHMgPSB2YXJpYW50KHtcbiAgZGVmYXVsdFZhcmlhbnQ6ICdibHVlJyxcbiAgYmFzZToge1xuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB0cmFuc2l0aW9uOiAnd2lkdGggMC41cycsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gIH0sXG4gIHZhcmlhbnRzOiB7XG4gICAgYmx1ZToge1xuICAgICAgYmc6ICdibHVlJyxcbiAgICAgIHRleHRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgYmc6IGB5ZWxsb3dgLFxuICAgICAgdGV4dENvbG9yOiBgYmxhY2tgLFxuICAgIH0sXG4gICAgbGlnaHQ6IHtcbiAgICAgIGJnOiAnbmF2eScsXG4gICAgICB0ZXh0Q29sb3I6ICduYXZ5JyxcbiAgICB9LFxuICAgIGRhcms6IHtcbiAgICAgIGJnOiAnd2hpdGUnLFxuICAgICAgdGV4dENvbG9yOiAnd2hpdGUnLFxuICAgIH0sXG4gIH0sXG59KTtcblxudHlwZSBQcm9ncmVzc0JhckVsZW1lbnRQcm9wcyA9IFBpY2s8UHJvZ3Jlc3NCYXJQcm9wcywgJ3ZhcmlhbnQnIHwgJ3NpemUnPjtcblxudHlwZSBQcm9ncmVzc0JhckVsZW1lbnRXcmFwcGVyUHJvcHMgPSBQcm9ncmVzc0JhckVsZW1lbnRQcm9wcyAmIHtcbiAgYm9yZGVyOiAnYmFzaWMnIHwgJ2JvcmRlcmVkJztcbn07XG5cbmNvbnN0IFByb2dyZXNzQmFyV3JhcHBlciA9IHN0eWxlZC5kaXY8UHJvZ3Jlc3NCYXJFbGVtZW50V3JhcHBlclByb3BzPmBcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAke3Byb2dyZXNzQmFyQmFja2dyb3VuZFZhcmlhbnRzfTtcbiAgJHtwcm9ncmVzc0JhclNpemVWYXJpYW50c307XG4gICR7cHJvZ3Jlc3NCYXJCb3JkZXJWYXJpYW50c307XG5gO1xuXG5jb25zdCBCYXIgPSBzdHlsZWQuZGl2KHByb2dyZXNzQmFyRm9yZWdyb3VuZFZhcmlhbnRzKTtcblxuY29uc3QgRGlzcGxheWVkUGVyY2VudCA9IHN0eWxlZC5zcGFuYFxuICBmb250LXdlaWdodDogYm9sZDtcbiAgcGFkZGluZzogMC41cmVtO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NCYXI6IFJlYWN0LkZDPFByb2dyZXNzQmFyUHJvcHM+ID0gKHtcbiAgbWluaW11bVBlcmNlbnQgPSAwLFxuICBwZXJjZW50LFxuICBwYXR0ZXJuLFxuICBib3JkZXJlZCxcbiAgc2l6ZSA9ICdzbWFsbCcsXG4gIHZhcmlhbnQgPSAnYmx1ZScsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFByb2dyZXNzQmFyV3JhcHBlclxuICAgICAgYXJpYS1sYWJlbD17YFByb2dyZXNzOiAke3BlcmNlbnR9JWB9XG4gICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgcm9sZT1cImZpZ3VyZVwiXG4gICAgICBib3JkZXI9e2JvcmRlcmVkID8gJ2JvcmRlcmVkJyA6ICdiYXNpYyd9XG4gICAgICBzaXplPXtzaXplfVxuICAgICAgdmFyaWFudD17dmFyaWFudH1cbiAgICA+XG4gICAgICB7cGF0dGVybiAmJiAoXG4gICAgICAgIDxQYXR0ZXJuIHdpZHRoPVwiMTAwJVwiIHBvc2l0aW9uPVwiYWJzb2x1dGVcIiB6SW5kZXg9ezB9IG5hbWU9e3BhdHRlcm59IC8+XG4gICAgICApfVxuICAgICAgPEJhclxuICAgICAgICB2YXJpYW50PXt2YXJpYW50fVxuICAgICAgICBkYXRhLXRlc3RpZD1cInByb2dyZXNzLWJhci1iYXJcIlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHdpZHRoOiBgJHtNYXRoLm1heChtaW5pbXVtUGVyY2VudCwgcGVyY2VudCl9JWAsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtzaXplID09PSAnbGFyZ2UnICYmIDxEaXNwbGF5ZWRQZXJjZW50PntwZXJjZW50fSU8L0Rpc3BsYXllZFBlcmNlbnQ+fVxuICAgICAgPC9CYXI+XG4gICAgPC9Qcm9ncmVzc0JhcldyYXBwZXI+XG4gICk7XG59O1xuIl19 */");

var DisplayedPercent = _styled("span", {
  target: "e1i4q3m20",
  label: "DisplayedPercent"
})(process.env.NODE_ENV === "production" ? {
  name: "esejog",
  styles: "font-weight:bold;padding:0.5rem;text-align:right;width:100%"
} : {
  name: "esejog",
  styles: "font-weight:bold;padding:0.5rem;text-align:right;width:100%",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qcm9ncmVzc0Jhci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUlvQyIsImZpbGUiOiIuLi8uLi9zcmMvUHJvZ3Jlc3NCYXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmFyaWFudCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBQYXR0ZXJuLCBQYXR0ZXJuTmFtZSB9IGZyb20gJy4uL1BhdHRlcm4nO1xuXG5leHBvcnQgdHlwZSBQcm9ncmVzc0JhclByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gaW5jcmVhc2Ugc2l6ZSBhbmQgZGlzcGxheSB0aGUgcGVyY2VudGFnZSBhcyB0ZXh0LlxuICAgKi9cbiAgc2l6ZT86ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG5cbiAgLyoqXG4gICAqIE1pbmltdW0gYW1vdW50IG9mIHRoZSBiYXIgdG8gZmlsbCBpbiB2aXN1YWxseS5cbiAgICovXG4gIG1pbmltdW1QZXJjZW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIb3cgbXVjaCBvZiB0aGUgYmFyIHRvIGZpbGwgaW4sIGFzIGEgbnVtYmVyIGluIFswLCAxMDBdLlxuICAgKi9cbiAgcGVyY2VudDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBCYXNlIHZhcmlhbnQgZGlzcGxheSB0aGVtZXMuXG4gICAqL1xuICB2YXJpYW50OiAnYmx1ZScgfCAneWVsbG93JyB8ICdkYXJrJyB8ICdsaWdodCc7XG5cbiAgLyoqXG4gICAqIEJhc2UgdmFyaWFudCBkaXNwbGF5IHRoZW1lcy5cbiAgICovXG4gIGJvcmRlcmVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0byB1c2UgYSBwYXR0ZXJuIGJhY2tncm91bmRcbiAgICovXG4gIHBhdHRlcm4/OiBQYXR0ZXJuTmFtZTtcbn07XG5cbmNvbnN0IHByb2dyZXNzQmFyU2l6ZVZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnc21hbGwnLFxuICBwcm9wOiAnc2l6ZScsXG4gIHZhcmlhbnRzOiB7XG4gICAgc21hbGw6IHtcbiAgICAgIGhlaWdodDogJzZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgIH0sXG4gICAgbWVkaXVtOiB7XG4gICAgICBoZWlnaHQ6ICc4cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnODBweCcsXG4gICAgfSxcbiAgICBsYXJnZToge1xuICAgICAgaGVpZ2h0OiAnMzZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICcxOHB4JyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHByb2dyZXNzQmFyQmFja2dyb3VuZFZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmx1ZScsXG4gIHZhcmlhbnRzOiB7XG4gICAgYmx1ZToge1xuICAgICAgYmc6ICduYXZ5JyxcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgYmc6IGBncmF5LTEwMGAsXG4gICAgfSxcbiAgICBkYXJrOiB7XG4gICAgICB0ZXh0Q29sb3I6ICd3aGl0ZScsXG4gICAgfSxcbiAgICBsaWdodDoge1xuICAgICAgdGV4dENvbG9yOiAnbmF2eScsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5jb25zdCBwcm9ncmVzc0JhckJvcmRlclZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmFzaWMnLFxuICBwcm9wOiAnYm9yZGVyJyxcbiAgdmFyaWFudHM6IHtcbiAgICBiYXNpYzoge1xuICAgICAgYm9yZGVyV2lkdGg6ICcwJyxcbiAgICB9LFxuICAgIGJvcmRlcmVkOiB7XG4gICAgICBib3JkZXJXaWR0aDogJzFweCcsXG4gICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IHByb2dyZXNzQmFyRm9yZWdyb3VuZFZhcmlhbnRzID0gdmFyaWFudCh7XG4gIGRlZmF1bHRWYXJpYW50OiAnYmx1ZScsXG4gIGJhc2U6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgdHJhbnNpdGlvbjogJ3dpZHRoIDAuNXMnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICB9LFxuICB2YXJpYW50czoge1xuICAgIGJsdWU6IHtcbiAgICAgIGJnOiAnYmx1ZScsXG4gICAgICB0ZXh0Q29sb3I6ICd3aGl0ZScsXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgIGJnOiBgeWVsbG93YCxcbiAgICAgIHRleHRDb2xvcjogYGJsYWNrYCxcbiAgICB9LFxuICAgIGxpZ2h0OiB7XG4gICAgICBiZzogJ25hdnknLFxuICAgICAgdGV4dENvbG9yOiAnbmF2eScsXG4gICAgfSxcbiAgICBkYXJrOiB7XG4gICAgICBiZzogJ3doaXRlJyxcbiAgICAgIHRleHRDb2xvcjogJ3doaXRlJyxcbiAgICB9LFxuICB9LFxufSk7XG5cbnR5cGUgUHJvZ3Jlc3NCYXJFbGVtZW50UHJvcHMgPSBQaWNrPFByb2dyZXNzQmFyUHJvcHMsICd2YXJpYW50JyB8ICdzaXplJz47XG5cbnR5cGUgUHJvZ3Jlc3NCYXJFbGVtZW50V3JhcHBlclByb3BzID0gUHJvZ3Jlc3NCYXJFbGVtZW50UHJvcHMgJiB7XG4gIGJvcmRlcjogJ2Jhc2ljJyB8ICdib3JkZXJlZCc7XG59O1xuXG5jb25zdCBQcm9ncmVzc0JhcldyYXBwZXIgPSBzdHlsZWQuZGl2PFByb2dyZXNzQmFyRWxlbWVudFdyYXBwZXJQcm9wcz5gXG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJHtwcm9ncmVzc0JhckJhY2tncm91bmRWYXJpYW50c307XG4gICR7cHJvZ3Jlc3NCYXJTaXplVmFyaWFudHN9O1xuICAke3Byb2dyZXNzQmFyQm9yZGVyVmFyaWFudHN9O1xuYDtcblxuY29uc3QgQmFyID0gc3R5bGVkLmRpdihwcm9ncmVzc0JhckZvcmVncm91bmRWYXJpYW50cyk7XG5cbmNvbnN0IERpc3BsYXllZFBlcmNlbnQgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHBhZGRpbmc6IDAuNXJlbTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IFByb2dyZXNzQmFyOiBSZWFjdC5GQzxQcm9ncmVzc0JhclByb3BzPiA9ICh7XG4gIG1pbmltdW1QZXJjZW50ID0gMCxcbiAgcGVyY2VudCxcbiAgcGF0dGVybixcbiAgYm9yZGVyZWQsXG4gIHNpemUgPSAnc21hbGwnLFxuICB2YXJpYW50ID0gJ2JsdWUnLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQcm9ncmVzc0JhcldyYXBwZXJcbiAgICAgIGFyaWEtbGFiZWw9e2BQcm9ncmVzczogJHtwZXJjZW50fSVgfVxuICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgIHJvbGU9XCJmaWd1cmVcIlxuICAgICAgYm9yZGVyPXtib3JkZXJlZCA/ICdib3JkZXJlZCcgOiAnYmFzaWMnfVxuICAgICAgc2l6ZT17c2l6ZX1cbiAgICAgIHZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAgPlxuICAgICAge3BhdHRlcm4gJiYgKFxuICAgICAgICA8UGF0dGVybiB3aWR0aD1cIjEwMCVcIiBwb3NpdGlvbj1cImFic29sdXRlXCIgekluZGV4PXswfSBuYW1lPXtwYXR0ZXJufSAvPlxuICAgICAgKX1cbiAgICAgIDxCYXJcbiAgICAgICAgdmFyaWFudD17dmFyaWFudH1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJwcm9ncmVzcy1iYXItYmFyXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB3aWR0aDogYCR7TWF0aC5tYXgobWluaW11bVBlcmNlbnQsIHBlcmNlbnQpfSVgLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7c2l6ZSA9PT0gJ2xhcmdlJyAmJiA8RGlzcGxheWVkUGVyY2VudD57cGVyY2VudH0lPC9EaXNwbGF5ZWRQZXJjZW50Pn1cbiAgICAgIDwvQmFyPlxuICAgIDwvUHJvZ3Jlc3NCYXJXcmFwcGVyPlxuICApO1xufTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

export var ProgressBar = function ProgressBar(_ref) {
  var _ref$minimumPercent = _ref.minimumPercent,
      minimumPercent = _ref$minimumPercent === void 0 ? 0 : _ref$minimumPercent,
      percent = _ref.percent,
      pattern = _ref.pattern,
      bordered = _ref.bordered,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'small' : _ref$size,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'blue' : _ref$variant;
  return /*#__PURE__*/React.createElement(ProgressBarWrapper, {
    "aria-label": "Progress: ".concat(percent, "%"),
    "aria-live": "polite",
    role: "figure",
    border: bordered ? 'bordered' : 'basic',
    size: size,
    variant: variant
  }, pattern && /*#__PURE__*/React.createElement(Pattern, {
    width: "100%",
    position: "absolute",
    zIndex: 0,
    name: pattern
  }), /*#__PURE__*/React.createElement(Bar, {
    variant: variant,
    "data-testid": "progress-bar-bar",
    style: {
      width: "".concat(Math.max(minimumPercent, percent), "%")
    }
  }, size === 'large' && /*#__PURE__*/React.createElement(DisplayedPercent, null, percent, "%")));
};