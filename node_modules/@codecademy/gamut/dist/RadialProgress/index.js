function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import cx from 'classnames';
import React from 'react';
import styles from './styles.module.scss';
var offsetForEmptyProgress = 290;
var offsetForFullProgress = 10;
var offsetDelta = offsetForEmptyProgress - offsetForFullProgress;

var convertPercentToOffset = function convertPercentToOffset(percent) {
  return offsetForEmptyProgress - Math.floor(offsetDelta * (percent / 100));
};
/**
 * @deprecated
 * This component is deprecated and is no longer supported.
 */


export var RadialProgress = function RadialProgress(_ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 24 : _ref$size,
      duration = _ref.duration,
      value = _ref.value,
      _ref$strokeLinecap = _ref.strokeLinecap,
      strokeLinecap = _ref$strokeLinecap === void 0 ? 'round' : _ref$strokeLinecap,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 10 : _ref$strokeWidth,
      props = _objectWithoutProperties(_ref, ["children", "className", "size", "duration", "value", "strokeLinecap", "strokeWidth"]);

  var startingValue;
  var finalValue;

  if (Array.isArray(value)) {
    startingValue = convertPercentToOffset(value[0]);
    finalValue = convertPercentToOffset(value[1]);
  } else {
    finalValue = startingValue = convertPercentToOffset(value);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: cx(styles.radialProgress, className),
    style: {
      height: size,
      width: size
    }
  }, /*#__PURE__*/React.createElement("svg", _extends({
    "aria-label": "".concat(value, "% progress"),
    viewBox: "0 0 100 100",
    height: size,
    width: size
  }, props), /*#__PURE__*/React.createElement("circle", {
    cx: "50",
    cy: "50",
    r: "45",
    stroke: "currentColor",
    strokeWidth: strokeWidth,
    fill: "none",
    opacity: ".2"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "50",
    cy: "50",
    r: "45",
    stroke: "currentColor",
    strokeWidth: strokeWidth,
    strokeLinecap: strokeLinecap,
    fill: "none",
    opacity: "1",
    strokeDashoffset: finalValue,
    strokeDasharray: offsetForEmptyProgress,
    transform: "rotate(-90 50 50)"
  }, startingValue !== finalValue && /*#__PURE__*/React.createElement("animate", {
    attributeType: "CSS",
    attributeName: "stroke-dashoffset",
    from: startingValue,
    to: finalValue,
    dur: "".concat(duration, "ms"),
    begin: "0",
    fill: "freeze"
  }))), children && /*#__PURE__*/React.createElement("div", {
    className: styles.children
  }, children));
};