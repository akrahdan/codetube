import _styled from "@emotion/styled/base";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { BodyPortal, FocusTrap, Pattern } from '@codecademy/gamut';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useWindowScroll, useWindowSize } from 'react-use';
var transform = {
  right: 'translateX(-100%)',
  left: 'translateX(0%)',
  above: 'translateY(-100%)',
  below: 'translateY(0%)'
};

var PopoverContainer = _styled("div", {
  target: "eqdivnx3",
  label: "PopoverContainer"
})("position:fixed;display:flex;transform:", function (_ref) {
  var position = _ref.position,
      align = _ref.align;
  return position && align && "".concat(transform[position], " ").concat(transform[align]);
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var RaisedDiv = _styled("div", {
  target: "eqdivnx2",
  label: "RaisedDiv"
})("z-index:1;border-radius:2px;border:1px ", function (_ref2) {
  var outline = _ref2.outline;
  return outline ? 'solid' : 'none';
}, " ", function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.secondary;
}, ";background-color:", function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.white;
}, ";", function (_ref5) {
  var outline = _ref5.outline;
  return !outline && 'box-shadow: 0 0 16px rgba(0, 0, 0, 0.1), 0 0 24px rgba(0, 0, 0, 0.15)';
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Beak = _styled("div", {
  target: "eqdivnx1",
  label: "Beak"
})("width:20px;height:20px;transform:rotate(45deg);border-", function (_ref6) {
  var position = _ref6.position;
  return position === 'below' ? 'left' : 'right';
}, ":1px ", function (_ref7) {
  var outline = _ref7.outline;
  return outline ? 'solid' : 'none';
}, " ", function (_ref8) {
  var theme = _ref8.theme;
  return theme.colors.secondary;
}, ";border-", function (_ref9) {
  var position = _ref9.position;
  return position === 'below' ? 'top' : 'bottom';
}, ":1px ", function (_ref10) {
  var outline = _ref10.outline;
  return outline ? 'solid' : 'none';
}, " ", function (_ref11) {
  var theme = _ref11.theme;
  return theme.colors.secondary;
}, ";background-color:", function (_ref12) {
  var theme = _ref12.theme;
  return theme.colors.white;
}, ";position:absolute;left:", function (_ref13) {
  var beak = _ref13.beak;
  return beak === 'left' && '25px';
}, ";right:", function (_ref14) {
  var beak = _ref14.beak;
  return beak === 'right' && '25px';
}, ";top:", function (_ref15) {
  var position = _ref15.position;
  return position === 'below' ? '-10px' : 'calc(100% - 10px);';
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qb3BvdmVyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQ21DIiwiZmlsZSI6Ii4uLy4uL3NyYy9Qb3BvdmVyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHlQb3J0YWwsIEZvY3VzVHJhcCwgUGF0dGVybiwgUGF0dGVybk5hbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVdpbmRvd1Njcm9sbCwgdXNlV2luZG93U2l6ZSB9IGZyb20gJ3JlYWN0LXVzZSc7XG5cbnR5cGUgU3R5bGVQcm9wcyA9IHtcbiAgb3V0bGluZT86IGJvb2xlYW47XG4gIHBvc2l0aW9uPzogJ2Fib3ZlJyB8ICdiZWxvdyc7XG4gIGJlYWs/OiAncmlnaHQnIHwgJ2xlZnQnO1xuICBhbGlnbj86ICdyaWdodCcgfCAnbGVmdCc7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm0gPSB7XG4gIHJpZ2h0OiAndHJhbnNsYXRlWCgtMTAwJSknLFxuICBsZWZ0OiAndHJhbnNsYXRlWCgwJSknLFxuICBhYm92ZTogJ3RyYW5zbGF0ZVkoLTEwMCUpJyxcbiAgYmVsb3c6ICd0cmFuc2xhdGVZKDAlKScsXG59O1xuXG5jb25zdCBQb3BvdmVyQ29udGFpbmVyID0gc3R5bGVkLmRpdjxTdHlsZVByb3BzPmBcbiAgcG9zaXRpb246IGZpeGVkO1xuICBkaXNwbGF5OiBmbGV4O1xuICB0cmFuc2Zvcm06ICR7KHsgcG9zaXRpb24sIGFsaWduIH0pID0+XG4gICAgcG9zaXRpb24gJiYgYWxpZ24gJiYgYCR7dHJhbnNmb3JtW3Bvc2l0aW9uXX0gJHt0cmFuc2Zvcm1bYWxpZ25dfWB9O1xuYDtcblxuY29uc3QgUmFpc2VkRGl2ID0gc3R5bGVkLmRpdjxTdHlsZVByb3BzPmBcbiAgei1pbmRleDogMTtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBib3JkZXI6IDFweCAkeyh7IG91dGxpbmUgfSkgPT4gKG91dGxpbmUgPyAnc29saWQnIDogJ25vbmUnKX1cbiAgICAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy5zZWNvbmRhcnl9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy53aGl0ZX07XG4gICR7KHsgb3V0bGluZSB9KSA9PlxuICAgICFvdXRsaW5lICYmXG4gICAgJ2JveC1zaGFkb3c6IDAgMCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4xKSwgMCAwIDI0cHggcmdiYSgwLCAwLCAwLCAwLjE1KSd9O1xuYDtcblxuY29uc3QgQmVhayA9IHN0eWxlZC5kaXY8U3R5bGVQcm9wcz5gXG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgYm9yZGVyLSR7KHsgcG9zaXRpb24gfSkgPT4gKHBvc2l0aW9uID09PSAnYmVsb3cnID8gJ2xlZnQnIDogJ3JpZ2h0Jyl9OlxuICAgIDFweFxuICAgICR7KHsgb3V0bGluZSB9KSA9PiAob3V0bGluZSA/ICdzb2xpZCcgOiAnbm9uZScpfVxuICAgICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLnNlY29uZGFyeX07XG4gIGJvcmRlci0keyh7IHBvc2l0aW9uIH0pID0+IChwb3NpdGlvbiA9PT0gJ2JlbG93JyA/ICd0b3AnIDogJ2JvdHRvbScpfTpcbiAgICAxcHhcbiAgICAkeyh7IG91dGxpbmUgfSkgPT4gKG91dGxpbmUgPyAnc29saWQnIDogJ25vbmUnKX1cbiAgICAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy5zZWNvbmRhcnl9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmNvbG9ycy53aGl0ZX07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogJHsoeyBiZWFrIH0pID0+IGJlYWsgPT09ICdsZWZ0JyAmJiAnMjVweCd9O1xuICByaWdodDogJHsoeyBiZWFrIH0pID0+IGJlYWsgPT09ICdyaWdodCcgJiYgJzI1cHgnfTtcbiAgdG9wOiAkeyh7IHBvc2l0aW9uIH0pID0+XG4gICAgcG9zaXRpb24gPT09ICdiZWxvdycgPyAnLTEwcHgnIDogJ2NhbGMoMTAwJSAtIDEwcHgpOyd9O1xuYDtcblxuY29uc3QgUGF0dGVybkNvbnRhaW5lciA9IHN0eWxlZC5kaXY8U3R5bGVQcm9wcz5gXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5jb2xvcnMud2hpdGV9O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogJHsoeyBwb3NpdGlvbiB9KSA9PiAocG9zaXRpb24gPT09ICdiZWxvdycgPyAnOHB4JyA6ICctOHB4Jyl9O1xuICBsZWZ0OiAkeyh7IGFsaWduIH0pID0+IChhbGlnbiA9PT0gJ2xlZnQnID8gJzhweCcgOiAnLThweCcpfTtcbmA7XG5cbmV4cG9ydCB0eXBlIFBvcG92ZXJQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+O1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGljaCB2ZXJ0aWNhbCBlZGdlIG9mIHRoZSBzb3VyY2UgY29tcG9uZW50IHRvIGFsaWduIGFnYWluc3QuXG4gICAqL1xuICBhbGlnbj86ICdsZWZ0JyB8ICdyaWdodCc7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCB0aGUgcG9wb3ZlciB2ZXJ0aWNhbGx5IGZyb20gdGhlIHNvdXJjZSBjb21wb25lbnQuXG4gICAqL1xuICB2ZXJ0aWNhbE9mZnNldD86IG51bWJlcjtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBwb3BvdmVyIGhvcml6b250YWxseSBmcm9tIHRoZSBzb3VyY2UgY29tcG9uZW50LlxuICAgKi9cbiAgaG9yaXpvbnRhbE9mZnNldD86IG51bWJlcjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWRkIG91dGxpbmUgc3R5bGUgKGkuZS4gdXNlZCBmb3IgZHJvcGRvd25zIGFuZCBjb2FjaG1hcmtzKS5cbiAgICovXG4gIG91dGxpbmU/OiBib29sZWFuO1xuICAvKipcbiAgICogV2hpY2ggaG9yaXpvbnRhbCBlZGdlIG9mIHRoZSBzb3VyY2UgY29tcG9uZXQgdG8gYWxpZ24gYWdhaW5zdC5cbiAgICovXG4gIHBvc2l0aW9uPzogJ2Fib3ZlJyB8ICdiZWxvdyc7XG4gIC8qKlxuICAgKiBXaGljaCBzaWRlIHRvIHBvc2l0aW9uIHRoZSBiZWFrLiBJZiBub3QgcHJvdmlkZWQsIGJlYWsgd2lsbCBub3QgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBiZWFrPzogJ2xlZnQnIHwgJ3JpZ2h0JztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHBvcG92ZXIgaXMgcmVuZGVyZWQuXG4gICAqL1xuICBpc09wZW46IGJvb2xlYW47XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFkZCBhIHBhdHRlcm4gYmFja2dyb3VuZC5cbiAgICovXG4gIHBhdHRlcm4/OiBQYXR0ZXJuTmFtZTtcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBQb3BvdmVyIHJlcXVlc3RzIHRvIGJlIGNsb3NlZCxcbiAgICogdGhpcyBjb3VsZCBiZSBkdWUgdG8gY2xpY2tpbmcgb3V0c2lkZSBvZiB0aGUgcG9wb3Zlciwgb3IgYnkgY2xpY2tpbmcgdGhlIGVzY2FwZSBrZXkuXG4gICAqL1xuICBvblJlcXVlc3RDbG9zZT86ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IGVsZW1lbnQgYXJvdW5kIHdoaWNoIHRoZSBwb3BvdmVyIHdpbGwgYmUgcG9zaXRpb25lZC5cbiAgICovXG4gIHRhcmdldFJlZjogUmVhY3QuUmVmT2JqZWN0PFxuICAgIFBpY2s8SFRNTERpdkVsZW1lbnQsICdnZXRCb3VuZGluZ0NsaWVudFJlY3QnIHwgJ2NvbnRhaW5zJz5cbiAgPjtcbn07XG5cbmV4cG9ydCBjb25zdCBQb3BvdmVyOiBSZWFjdC5GQzxQb3BvdmVyUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgYWxpZ24gPSAnbGVmdCcsXG4gIHZlcnRpY2FsT2Zmc2V0ID0gMjAsXG4gIGhvcml6b250YWxPZmZzZXQgPSAwLFxuICBvdXRsaW5lID0gZmFsc2UsXG4gIHBvc2l0aW9uID0gJ2JlbG93JyxcbiAgYmVhayxcbiAgaXNPcGVuLFxuICBvblJlcXVlc3RDbG9zZSxcbiAgdGFyZ2V0UmVmLFxuICBwYXR0ZXJuLFxufSkgPT4ge1xuICBjb25zdCBbdGFyZ2V0UmVjdCwgc2V0VGFyZ2V0UmVjdF0gPSB1c2VTdGF0ZTxET01SZWN0PigpO1xuICBjb25zdCBbaXNJblZpZXdwb3J0LCBzZXRJc0luVmlld3BvcnRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdXNlV2luZG93U2l6ZSgpO1xuICBjb25zdCB7IHgsIHkgfSA9IHVzZVdpbmRvd1Njcm9sbCgpO1xuXG4gIGNvbnN0IGdldFBvcG92ZXJQb3NpdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIXRhcmdldFJlY3QpIHJldHVybiB7fTtcblxuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHtcbiAgICAgIGFib3ZlOiBNYXRoLnJvdW5kKHRhcmdldFJlY3QudG9wIC0gdmVydGljYWxPZmZzZXQpLFxuICAgICAgYmVsb3c6IE1hdGgucm91bmQodGFyZ2V0UmVjdC50b3AgKyB0YXJnZXRSZWN0LmhlaWdodCArIHZlcnRpY2FsT2Zmc2V0KSxcbiAgICB9O1xuICAgIGNvbnN0IGFsaWdubWVudHMgPSB7XG4gICAgICByaWdodDogTWF0aC5yb3VuZCh3aW5kb3cuc2Nyb2xsWCArIHRhcmdldFJlY3QucmlnaHQgKyBob3Jpem9udGFsT2Zmc2V0KSxcbiAgICAgIGxlZnQ6IE1hdGgucm91bmQod2luZG93LnNjcm9sbFggKyB0YXJnZXRSZWN0LmxlZnQgLSBob3Jpem9udGFsT2Zmc2V0KSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHBvc2l0aW9uc1twb3NpdGlvbl0sXG4gICAgICBsZWZ0OiBhbGlnbm1lbnRzW2FsaWduXSxcbiAgICB9O1xuICB9LCBbdGFyZ2V0UmVjdCwgdmVydGljYWxPZmZzZXQsIGhvcml6b250YWxPZmZzZXQsIGFsaWduLCBwb3NpdGlvbl0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0VGFyZ2V0UmVjdCh0YXJnZXRSZWY/LmN1cnJlbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgfSwgW3RhcmdldFJlZiwgaXNPcGVuLCB3aWR0aCwgaGVpZ2h0LCB4LCB5XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodGFyZ2V0UmVjdCkge1xuICAgICAgY29uc3QgaW5WaWV3ID1cbiAgICAgICAgdGFyZ2V0UmVjdC50b3AgPj0gMCAmJlxuICAgICAgICB0YXJnZXRSZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgICB0YXJnZXRSZWN0LmJvdHRvbSA8PVxuICAgICAgICAgICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgJiZcbiAgICAgICAgdGFyZ2V0UmVjdC5yaWdodCA8PVxuICAgICAgICAgICh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpO1xuICAgICAgc2V0SXNJblZpZXdwb3J0KGluVmlldyk7XG4gICAgfVxuICAgIGlmICghaXNJblZpZXdwb3J0KSBvblJlcXVlc3RDbG9zZT8uKCk7XG4gIH0sIFt0YXJnZXRSZWN0LCBpc0luVmlld3BvcnQsIG9uUmVxdWVzdENsb3NlXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gdXNlQ2FsbGJhY2soXG4gICAgKGUpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogQWxsb3dzIHRhcmdldFJlZiB0byBiZSBvciBjb250YWluIGEgYnV0dG9uIHRoYXQgdG9nZ2xlcyB0aGUgcG9wb3ZlciBvcGVuIGFuZCBjbG9zZWQuXG4gICAgICAgKiBXaXRob3V0IHRoaXMgY2hlY2sgaXQgd291bGQgdG9nZ2xlIGNsb3NlZCB0aGVuIGJhY2sgb3BlbiBpbW1lZGlhdGVseS5cbiAgICAgICAqL1xuICAgICAgaWYgKHRhcmdldFJlZi5jdXJyZW50Py5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSkgcmV0dXJuO1xuXG4gICAgICBvblJlcXVlc3RDbG9zZT8uKCk7XG4gICAgfSxcbiAgICBbb25SZXF1ZXN0Q2xvc2UsIHRhcmdldFJlZl1cbiAgKTtcblxuICBjb25zdCBwb3BvdmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblxuICBpZiAoIWlzT3BlbiB8fCAhdGFyZ2V0UmVmKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxCb2R5UG9ydGFsPlxuICAgICAgPEZvY3VzVHJhcFxuICAgICAgICBhbGxvd1BhZ2VJbnRlcmFjdGlvblxuICAgICAgICBvbkNsaWNrT3V0c2lkZT17aGFuZGxlQ2xpY2tPdXRzaWRlfVxuICAgICAgICBvbkVzY2FwZUtleT17b25SZXF1ZXN0Q2xvc2V9XG4gICAgICA+XG4gICAgICAgIDxQb3BvdmVyQ29udGFpbmVyXG4gICAgICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgICAgIGFsaWduPXthbGlnbn1cbiAgICAgICAgICByZWY9e3BvcG92ZXJSZWZ9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgc3R5bGU9e2dldFBvcG92ZXJQb3NpdGlvbigpfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwicG9wb3Zlci1jb250ZW50LWNvbnRhaW5lclwiXG4gICAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICA+XG4gICAgICAgICAgPFJhaXNlZERpdiBvdXRsaW5lPXtvdXRsaW5lfT5cbiAgICAgICAgICAgIHtiZWFrICYmIChcbiAgICAgICAgICAgICAgPEJlYWtcbiAgICAgICAgICAgICAgICBvdXRsaW5lPXtvdXRsaW5lfVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uPXtwb3NpdGlvbn1cbiAgICAgICAgICAgICAgICBiZWFrPXtiZWFrfVxuICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwicG9wb3Zlci1iZWFrXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgPC9SYWlzZWREaXY+XG4gICAgICAgICAge3BhdHRlcm4gJiYgKFxuICAgICAgICAgICAgPFBhdHRlcm5Db250YWluZXIgcG9zaXRpb249e3Bvc2l0aW9ufSBhbGlnbj17YWxpZ259PlxuICAgICAgICAgICAgICA8UGF0dGVybiBkYXRhLXRlc3RpZD1cInBvcG92ZXItcGF0dGVyblwiIG5hbWU9e3BhdHRlcm59IGZpdCAvPlxuICAgICAgICAgICAgPC9QYXR0ZXJuQ29udGFpbmVyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvUG9wb3ZlckNvbnRhaW5lcj5cbiAgICAgIDwvRm9jdXNUcmFwPlxuICAgIDwvQm9keVBvcnRhbD5cbiAgKTtcbn07XG4iXX0= */"));

var PatternContainer = _styled("div", {
  target: "eqdivnx0",
  label: "PatternContainer"
})("width:100%;height:100%;border-radius:2px;overflow:hidden;background-color:", function (_ref16) {
  var theme = _ref16.theme;
  return theme.colors.white;
}, ";position:absolute;top:", function (_ref17) {
  var position = _ref17.position;
  return position === 'below' ? '8px' : '-8px';
}, ";left:", function (_ref18) {
  var align = _ref18.align;
  return align === 'left' ? '8px' : '-8px';
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

export var Popover = function Popover(_ref19) {
  var children = _ref19.children,
      className = _ref19.className,
      _ref19$align = _ref19.align,
      align = _ref19$align === void 0 ? 'left' : _ref19$align,
      _ref19$verticalOffset = _ref19.verticalOffset,
      verticalOffset = _ref19$verticalOffset === void 0 ? 20 : _ref19$verticalOffset,
      _ref19$horizontalOffs = _ref19.horizontalOffset,
      horizontalOffset = _ref19$horizontalOffs === void 0 ? 0 : _ref19$horizontalOffs,
      _ref19$outline = _ref19.outline,
      outline = _ref19$outline === void 0 ? false : _ref19$outline,
      _ref19$position = _ref19.position,
      position = _ref19$position === void 0 ? 'below' : _ref19$position,
      beak = _ref19.beak,
      isOpen = _ref19.isOpen,
      onRequestClose = _ref19.onRequestClose,
      targetRef = _ref19.targetRef,
      pattern = _ref19.pattern;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      targetRect = _useState2[0],
      setTargetRect = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      isInViewport = _useState4[0],
      setIsInViewport = _useState4[1];

  var _useWindowSize = useWindowSize(),
      width = _useWindowSize.width,
      height = _useWindowSize.height;

  var _useWindowScroll = useWindowScroll(),
      x = _useWindowScroll.x,
      y = _useWindowScroll.y;

  var getPopoverPosition = useCallback(function () {
    if (!targetRect) return {};
    var positions = {
      above: Math.round(targetRect.top - verticalOffset),
      below: Math.round(targetRect.top + targetRect.height + verticalOffset)
    };
    var alignments = {
      right: Math.round(window.scrollX + targetRect.right + horizontalOffset),
      left: Math.round(window.scrollX + targetRect.left - horizontalOffset)
    };
    return {
      top: positions[position],
      left: alignments[align]
    };
  }, [targetRect, verticalOffset, horizontalOffset, align, position]);
  useEffect(function () {
    var _targetRef$current;

    setTargetRect(targetRef === null || targetRef === void 0 ? void 0 : (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.getBoundingClientRect());
  }, [targetRef, isOpen, width, height, x, y]);
  useEffect(function () {
    if (targetRect) {
      var inView = targetRect.top >= 0 && targetRect.left >= 0 && targetRect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && targetRect.right <= (window.innerWidth || document.documentElement.clientWidth);
      setIsInViewport(inView);
    }

    if (!isInViewport) onRequestClose === null || onRequestClose === void 0 ? void 0 : onRequestClose();
  }, [targetRect, isInViewport, onRequestClose]);
  var handleClickOutside = useCallback(function (e) {
    var _targetRef$current2;

    /**
     * Allows targetRef to be or contain a button that toggles the popover open and closed.
     * Without this check it would toggle closed then back open immediately.
     */
    if ((_targetRef$current2 = targetRef.current) !== null && _targetRef$current2 !== void 0 && _targetRef$current2.contains(e.target)) return;
    onRequestClose === null || onRequestClose === void 0 ? void 0 : onRequestClose();
  }, [onRequestClose, targetRef]);
  var popoverRef = useRef(null);
  if (!isOpen || !targetRef) return null;
  return /*#__PURE__*/React.createElement(BodyPortal, null, /*#__PURE__*/React.createElement(FocusTrap, {
    allowPageInteraction: true,
    onClickOutside: handleClickOutside,
    onEscapeKey: onRequestClose
  }, /*#__PURE__*/React.createElement(PopoverContainer, {
    position: position,
    align: align,
    ref: popoverRef,
    className: className,
    style: getPopoverPosition(),
    "data-testid": "popover-content-container",
    tabIndex: -1
  }, /*#__PURE__*/React.createElement(RaisedDiv, {
    outline: outline
  }, beak && /*#__PURE__*/React.createElement(Beak, {
    outline: outline,
    position: position,
    beak: beak,
    "data-testid": "popover-beak"
  }), children), pattern && /*#__PURE__*/React.createElement(PatternContainer, {
    position: position,
    align: align
  }, /*#__PURE__*/React.createElement(Pattern, {
    "data-testid": "popover-pattern",
    name: pattern,
    fit: true
  })))));
};