import React, { ReactNode } from 'react';
import { AppHeaderClickHandler, AppHeaderItem } from './AppHeaderElements/types';
import { FormattedAppHeaderItems } from './types';
export declare type AppHeaderProps = {
    action: AppHeaderClickHandler;
    items: FormattedAppHeaderItems;
    redirectParam?: string;
};
export declare const StyledAppBar: import("@emotion/styled").StyledComponent<import("@codecademy/gamut").AppBarProps & {
    children?: React.ReactNode;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const AppHeaderTextButton: import("@emotion/styled").StyledComponent<Pick<any, string | number | symbol> & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement> & {
    theme?: import("@emotion/react").Theme | undefined;
} & import("@codecademy/gamut").ButtonProps & {
    children?: React.ReactNode;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const AppHeaderFillButton: import("@emotion/styled").StyledComponent<Pick<any, string | number | symbol> & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement> & {
    theme?: import("@emotion/react").Theme | undefined;
} & import("@codecademy/gamut").ButtonProps & {
    children?: React.ReactNode;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const mapItemToElement: (action: AppHeaderClickHandler, item: AppHeaderItem, redirectParam?: string | undefined) => ReactNode;
export declare const AppHeader: React.FC<AppHeaderProps>;
