"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const setupRtl_1 = require("./setupRtl");
const MyComponent = ({ text }) => {
    return react_1.default.createElement("div", null, text);
};
const text = "default";
const overridden = "overridden";
describe("setupRtl", () => {
    it("uses a default prop value when not overridden", async () => {
        const renderView = setupRtl_1.setupRtl(MyComponent, { text });
        const { view } = renderView();
        view.getByText(text);
    });
    it("uses an overridden prop value when not overridden", async () => {
        const renderView = setupRtl_1.setupRtl(MyComponent, { text });
        const { view } = renderView({ text: overridden });
        view.getByText(overridden);
    });
    it("updates view with new props when passed", () => {
        const renderView = setupRtl_1.setupRtl(MyComponent, { text });
        const { view, update } = renderView();
        view.getByText(text);
        update({ text: overridden });
        view.getByText(overridden);
    });
    describe("enforces that required props that are missing in the initial setup are provided in the render method", () => {
        it("when props are completely absent", async () => {
            const renderView = setupRtl_1.setupRtl(MyComponent);
            const { view } = renderView({ text });
            view.getByText(text);
        });
        it("when props are incomplete in defaults", async () => {
            const renderView = setupRtl_1.setupRtl(MyComponent, { optional: 10 });
            const { view } = renderView({ text });
            view.getByText(text);
        });
    });
    describe("uses overidden options", () => {
        const options = { container: document.createElement("div") };
        it("passed into the render method", () => {
            const renderView = setupRtl_1.setupRtl(MyComponent, { text });
            const { view } = renderView.options(options)();
            expect(view.container).toBe(options.container);
        });
        it("and they are retained across calls to the method", () => {
            const renderView = setupRtl_1.setupRtl(MyComponent, { text });
            renderView.options(options)(); // Method call #1
            const { view } = renderView(); // Different method call
            expect(view.container).toBe(options.container);
        });
    });
    it("can handle a pure function component", () => {
        const renderView = setupRtl_1.setupRtl(({ text }) => react_1.default.createElement("div", null, text));
        const { props, view } = renderView({ text });
        view.getByText(props.text);
    });
});
