{"version":3,"file":"react-hotkeys-hook.cjs.production.min.js","sources":["../src/useHotkeys.ts","../src/useIsHotkeyPressed.ts"],"sourcesContent":["import hotkeys, { HotkeysEvent, KeyHandler } from 'hotkeys-js';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\ntype AvailableTags = 'INPUT' | 'TEXTAREA' | 'SELECT';\n\nexport type Options = {\n  filter?: typeof hotkeys.filter;\n  enableOnTags?: AvailableTags[];\n  splitKey?: string;\n  scope?: string;\n  keyup?: boolean;\n  keydown?: boolean;\n};\n\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: any[] | Options, deps?: any[]): React.MutableRefObject<T | null> {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  const { enableOnTags, filter, keyup, keydown } = options || {};\n  const ref = useRef<T | null>(null);\n\n  const memoisedCallback = useCallback((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => {\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, ...deps] : [ref]);\n\n  useEffect(() => {\n    if (options && (options as Options).enableOnTags) {\n      hotkeys.filter = ({ target, srcElement }) => {\n        // @ts-ignore\n        const targetTagName = (target && target.tagName) || (srcElement && srcElement.tagName);\n\n        return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName as AvailableTags));\n      };\n    }\n\n    if (filter) hotkeys.filter = filter;\n\n    if (keyup && keydown !== true) {\n      (options as Options).keydown = false;\n    }\n\n    hotkeys(keys, (options as Options) || {}, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback, options, enableOnTags, filter, keys]);\n\n  return ref;\n}","import hotkeys from 'hotkeys-js';\n\nexport function useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}"],"names":["keys","callback","options","deps","Array","undefined","enableOnTags","filter","keyup","keydown","ref","useRef","memoisedCallback","useCallback","keyboardEvent","hotkeysEvent","current","document","activeElement","useEffect","hotkeys","target","srcElement","targetTagName","tagName","Boolean","includes","unbind","isPressed"],"mappings":"6IAiB8CA,EAAcC,EAAsBC,EAA2BC,GACvGD,aAAmBE,QACrBD,EAAOD,EACPA,OAAUG,SAGqCH,GAAW,GAApDI,IAAAA,aAAcC,IAAAA,OAAQC,IAAAA,MAAOC,IAAAA,QAC/BC,EAAMC,SAAiB,MAEvBC,EAAmBC,eAAY,SAACC,EAA8BC,UAC9C,OAAhBL,EAAIM,SAAoBC,SAASC,gBAAkBR,EAAIM,WACzDf,EAASa,EAAeC,IACjB,KAIRZ,GAAQO,UAAQP,GAAQ,CAACO,WAE5BS,aAAU,kBACJjB,GAAYA,EAAoBI,eAClCc,EAAQb,OAAS,gBAAGc,IAAAA,OAAQC,IAAAA,WAEpBC,EAAiBF,GAAUA,EAAOG,SAAaF,GAAcA,EAAWE,eAEvEC,QAAQF,GAAiBjB,GAAgBA,EAAaoB,SAASH,MAItEhB,IAAQa,EAAQb,OAASA,GAEzBC,IAAqB,IAAZC,IACVP,EAAoBO,SAAU,GAGjCW,EAAQpB,EAAOE,GAAuB,GAAIU,GAEnC,kBAAMQ,EAAQO,OAAO3B,EAAMY,MACjC,CAACA,EAAkBV,EAASI,EAAcC,EAAQP,IAE9CU,gDCrDAU,EAAQQ"}